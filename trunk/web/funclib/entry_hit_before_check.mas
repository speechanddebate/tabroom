<%args>
	$round_id
</%args>
<%perl>

	# checks to see if there are any teams debating a second time in a given
	# round
	
	use POSIX;
	use List::Util 'shuffle';
	use Time::HiRes qw( time );
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $start = time(); 
	my @entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 );

	my $warn;
	my %preclusion;
	
	# create a hash that stores a boolean value indicating whether teams can
	# debate each other, marked false for same school, hit before, etc.

	# CREATE A 2-DIMENSIONAL HASH WITH ALL THE STUFF YOU NEED TO PAIR
	
	#STEP ONE: create hash and put in entry info

	my %entry_hash = ();

	foreach my $entry (@entries) {
		$entry_hash{$entry->id}{'code'} = $entry->code;
		$entry_hash{$entry->id}{'school'} = $entry->school;
	}

	# STEP 2: CREATE A 2-DIMENSIONAL HASH THAT STORES ALL PRIOR DEBATES

	my %hitbefore; 	

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select panel.id, entry.id, hit.id   
			from entry, entry hit, ballot, ballot hitballot, panel, round   
			where round.name < ".$round->name."
				and round.event = ".$event->id."
				and round.id = panel.round  
				and panel.bye != 1   
				and panel.id = ballot.panel         
				and ballot.bye !=1  
				and ballot.noshow !=1   
				and ballot.entry = entry.id         
				and panel.id = hitballot.panel  
				and hitballot.bye !=1   
				and hitballot.noshow !=1        
				and hitballot.entry = hit.id        
				and hit.id != entry.id ");

	my $end = time();

	$sth->execute();

	while( my ($panel, $entry, $hit) = $sth->fetchrow_array() ) {
		$hitbefore{$entry}{$hit} = 1; #mark as ineligible to hit b/c they debated before
	}

	# if there's some data detritus for teams paired against dropped opponents
	# it adds them to the %entry_hash hash so this thing cleans it up

	foreach my $key ( keys %entry_hash ) {
		if (not $entry_hash{$key}{'code'} ) { 
			delete $entry_hash{$key}; 
		}
	}

	# STEP 3: NOW ADD SCHOOL-BASED PRECLUSIONS
	my %precluded;

	my $school_ok++ if $event->setting('school_debates_self');

	#pull hybrid school conflicts
	my @strikes = Tab::Strike->search( tourn => $event->tourn->id, type => 'hybrid' );	
	my %hybrid_conflict = map {$_->school."-".$_->entry => 1} @strikes;

	# LOAD CURRENT PAIRINGS AND STORE THEM IN %ENTRIES

	my $c_sth = $dbh->prepare("
		select panel.id, entry.id, hit.id   
			from entry, entry hit, ballot, ballot hitballot, panel
			where panel.round  = ".$round->id."
				and panel.bye != 1   
				and panel.id = ballot.panel         
				and ballot.bye !=1  
				and ballot.noshow !=1   
				and ballot.entry = entry.id         
				and panel.id = hitballot.panel  
				and hitballot.bye !=1   
				and hitballot.noshow !=1        
				and hitballot.entry = hit.id        
				and hit.id != entry.id ");

	$c_sth->execute();

	while( my ($panel, $entry, $hit) = $c_sth->fetchrow_array() ) {
		$entry_hash{$entry}{"opponent"} = $hit;
	}

	# NOW LOOK FOR ISSUES
	
	foreach my $key ( keys %entry_hash ) {

		my $opp = $entry_hash{$key}{'opponent'};
		next unless $entry_hash{$key};
		next unless $entry_hash{$opp};

		unless ($school_ok) { 
			if ( $key > $opp && $entry_hash{$key}{"school"} == $entry_hash{$opp}{"school"} ) {
				$warn .= $entry_hash{$key}{'code'}." and ".$entry_hash{$opp}{'code'}." have a school preclusion. <br /> ";
			}

			if ($hybrid_conflict{$entry_hash{$opp}{"school"}."-".$key}) {
				$warn .= $entry_hash{$key}{'code'}." and ".$entry_hash{$opp}{'code'}." have a school preclusion. <br /> ";
			}
		}
		
		if ( $key > $opp && $hitbefore{$key}{$opp} == 1 ) {
			$warn .= $entry_hash{$key}{'code'}." and ".$entry_hash{$opp}{'code'}." have hit before. <br /> ";
		}
	}

#	unless ($warn) { $warn = "All good!"; }
	
	return $warn;	

</%perl>
