<%args>
	$round
	$max_mut => undef
	$max_pref => undef
	$break_losses => undef
</%args>
<%init>

	my $debug = 0;
	use Time::HiRes qw( time );
	use POSIX;
	my $start_processing = time() if $debug; 
	
	my $pref1; 
	my $pref2;
	my @worstpref=0; 
	my @worstmut=0;
	my @totalprefs; 
	my @totalmut; 
	my @total_ratings; 
	my @total_panels;
	#1=over break line, 2=at break line, 3=below break line
	my $cohort;
	my %deciles;;
	
	my $event = Tab::Event->retrieve( $round->event->id );
	print "break losses before eventsetting is $break_losses<br>" if $debug;
	$break_losses = $event->setting("break_point")-1 if $event->setting("break_point");
	print "break losses before checking is $break_losses<br>" if $debug;
	unless ($break_losses) {
		my $n_prelims;
		my @rds = Tab::Round->search( event => $round->event );
		foreach my $rd (@rds) {
			$n_prelims++ if ($rd->type ne "elim" && $rd->type ne "final");
		}
		$break_losses = ceil($n_prelims / 2 );
	}
	
	print "Round is ".$round->name." and break point for losses is:".$break_losses."<br>" if $debug; 
	
	my $last_round_name = $round->name - 1;
	my $last_round = Tab::Round->search( event => $round->event->id, name => $last_round_name)->first;
	$last_round=$round unless $last_round;
	my %entry_losses = $m->comp("/funclib/entry_losses.mas", event => $round->event, round => $last_round);
	
	print "Last round is ".$last_round_name."<br>" if $debug; 
		
	my @panels = Tab::Panel->search( round => $round->id, bye=> 0 );

	foreach my $panel (@panels) {

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel); 

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		
		#find the cohort
		$cohort = 3;
		foreach my $entry (@entries) {
			if ($entry_losses{$entry} == $break_losses) { $cohort = 2; }
			if ($entry_losses{$entry} < $break_losses && $cohort != 2 ) { $cohort = 1; }
			if ( $last_round_name < $break_losses || $round->type eq "elim" || $round->type eq "final" ) { $cohort = 1 };
			print $entry_losses{$entry}." losses on panel $panel puts the panel in cohort $cohort break losses are ".($break_losses)."<br>" if $debug;
			
		}
		if ( $round->type eq "elim" || $round->type eq "final" ) { $cohort=2; }
		print "cohort set to $cohort<br>" if $debug;
		
		foreach my $judge (@judges) {
			
			foreach my $entry (@entries) {
			
				my @prefs = Tab::Rating->search( judge => $judge->id, entry=> $entry->id );
				
				foreach my $pref (@prefs) {
					print "pref was ".$pref->percentile."<br>" if $debug;
					$total_ratings[$cohort]++;
					if ( $pref1 == 0 ) { $pref1 = $pref->percentile; 
						} else {
						$pref2 = $pref->percentile;
					}
				}

			}

			$totalprefs[$cohort] += $pref1;
			$totalprefs[$cohort] += $pref2;

			if ( $pref1 > $worstpref[$cohort] ) { $worstpref[$cohort] = $pref1; }
			if ( $pref2 > $worstpref[$cohort] ) { $worstpref[$cohort] = $pref2; }

			$totalmut[$cohort] += abs($pref1-$pref2);
			if ( abs($pref1-$pref2) > $worstmut[$cohort] ) { $worstmut[$cohort] = abs($pref1-$pref2); }

			$total_panels[$cohort]++;

			for (1 .. 10) { 
				if ( $pref1 < ($_*10) ) { $deciles{$cohort}{$_}++; last; }
			}

			for (1 .. 10) { 
				if ( $pref2 < ($_*10) ) { $deciles{$cohort}{$_}++; last; }
			}
	
			print "cohort=$cohort, pref1=$pref1, pref2=$pref2, mut=".abs($pref1-$pref2)."<br>" if $debug;

			$pref1=0; $pref2=0;

		}
	}

	my @avgpref; my @avgmut;
	
	for (my $i=1; $i<=3; $i++) {
		if ( $total_ratings[$i] > 0 ) {
			$avgpref[$i] = $totalprefs[$i]/$total_ratings[$i];
			print "avg pref of $i is $avgpref[$i]<br>" if $debug;
			}
		if ( $total_panels[$i] > 0 ) {
			$avgmut[$i] = $totalmut[$i]/$total_panels[$i];
		}
	}	
	my $end = time();

	Tab::debuglog( "<br>processing time: ") if $debug;
	Tab::debuglog("$end - $start_processing") if $debug;
	Tab::debuglog( "<br>") if $debug;
	Tab::debuglog( "Avg pref=".scalar(@avgpref)."<br>") if $debug;
	Tab::debuglog( "Avg mut=".scalar(@avgmut)."<br>") if $debug;
	Tab::debuglog( "worst pref=".scalar(@worstpref)."<br>") if $debug;
	Tab::debuglog( "worst mut=".scalar(@worstmut)."<br>") if $debug;
	Tab::debuglog( "deciles=".$deciles{1}{1}."<br>") if $debug;	

	print "avg pref 1 = ".$avgpref[1].", avg pref 2 =". $avgpref[2].", avg pref 3 =".$avgpref[3]."<br>" if $debug;
	
	return \@avgpref, \@avgmut, \@worstpref, \@worstmut, \%deciles;
		
</%init>
