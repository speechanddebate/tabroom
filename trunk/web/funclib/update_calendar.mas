<%args>
	$tourn
</%args>
<%doc>

	This function will add tournaments from Tabroom to the NSDA master calendar
	so long as they are not college tournaments or test/hidden tournaments.

</%doc>
<%init>

	return unless $r->hostname eq "www.tabroom.com";

	my $url = "http://".$tourn->webname.".tabroom.com" if $tourn->webname;
	$url = "https://www.tabroom.com/index/tourn/index.mhtml?tourn_id=".$tourn->id unless $url;

	my @sites = $tourn->sites;
	my $site_string;

	my $hidden = $tourn->hidden;

	my @approved_circuits = Tab::TournCircuit->search( tourn => $tourn->id, approved => 1 ); 
	$hidden++ unless @approved_circuits;

	my @circuits = $tourn->circuits;

	if (@circuits && $circuits[0]) { 
		$hidden++ if $circuits[0]->id == 43;  #NDT-CEDA
		$hidden++ if $circuits[0]->id == 15;  #College Speech
		$hidden++ if $circuits[0]->id == 49;  #Afghanistan
	} else { 
		$hidden++;
	}

	my %used;
	foreach my $site (@sites) { 
		next if $used{$site->id}++;
		$site_string .= ", " if $site_string;
		$site_string .= $site->name;
	}

	$site_string .= ", ".$tourn->state;

	my @contacts = $m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => 1);
	my $contact_string;

	foreach my $contact (@contacts) { 
		next if $used{$contact->email}++;
		$contact_string .= ", " if $contact_string;
		$contact_string .= $contact->first." ".$contact->last;
	}

	my $calendar = Tab::Calendar->search( tabroom_id => $tourn->id )->first;

	next if $hidden && not defined $calendar;
	$hidden = 0 unless $hidden;

	my $tzname = &Tab::tzname($tourn->tz, $tourn->start);

	my $country = $tourn->country;
	$country = "US" unless $country;

	my $state = $tourn->state;
	$state = "XX" unless $state;

	if ($calendar) { 

		$calendar->start_date($tourn->start);
		$calendar->end_date($tourn->end);
		$calendar->title($tourn->name);
		$calendar->reg_start($tourn->reg_start);
		$calendar->reg_end($tourn->reg_end);
		$calendar->state($state);
		$calendar->country($country);
		$calendar->timezone($tzname);
		$calendar->hidden($hidden);
		$calendar->location($site_string);
		$calendar->contact($contact_string);
		$calendar->url($url);
		$calendar->tabroom_id($tourn->id);
		$calendar->update;

	} else { 

		$calendar = Tab::Calendar->create({ 
			start_date => $tourn->start,
			end_date   => $tourn->end,
			title      => $tourn->name,
			reg_start  => $tourn->reg_start,
			reg_end    => $tourn->reg_end,
			state      => $tourn->state,
			country    => $country,
			timezone   => $tzname,
			hidden     => $hidden,
			location   => $site_string,
			contact    => $contact_string,
			url        => $url,
			tabroom_id => $tourn->id,
			source     => "T" 
		});

	}

	return $calendar;

</%init>
