<%args>
	$entry
	$account
	$dont_notify => undef
</%args>
<%init>

	my $tourn = $entry->event->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	$entry->waitlist(0);
	$entry->update;

	$entry->setting("off_waitlist", "date", $now);

	my $double_warning;
	my $housing_warning;

	my @students;

	my $waitlist_message = $tourn->setting("waitlist_message");

	my $strip = HTML::Strip->new();

	$waitlist_message =~ s/\<li\>/*/g;
	$waitlist_message =~ s/\<\/li\>/\n/g;
	$waitlist_message =~ s/\n/\n\n/g;
	$waitlist_message =~ s/\&nbsp;/ /g;
	$waitlist_message = $strip->parse( $waitlist_message );

	foreach my $student ($entry->students) { 

		my @entries = $m->comp("/funclib/student_entries.mas", student => $student, tourn => $tourn);
		$double_warning++ if scalar @entries > 1;

		if ($tourn->setting("housing")) { 

			my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);
	   		my $day_before = $days[0]->clone;
	   		$day_before->subtract( days => 1);
	   		push (@days, $day_before);

	   		foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
				my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day->ymd );
				next unless @slots;
				my $housing_request = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn, day => $day);
				next unless $housing_request;
				my $num_slots = $slots[0]->slots;
				my @total_requests = Tab::Housing->search( tourn => $tourn->id, night => $day->ymd);

				if ($num_slots > scalar @total_requests) { 
					$housing_request->waitlist(0);
					$housing_request->update;
					$housing_warning .= $student->first." ".$student->last;
					$housing_warning .=" HAS HOUSING (not waitlisted) on ".$day->day_name." ".$day->month."/".$day->day."\n";
				} else { 
					$housing_warning .= $student->first." ".$student->last;
					$housing_warning .=" IS STILL WAITLISTED FOR HOUSING on ".$day->day_name." ".$day->month."/".$day->day."\n";
				}
			}
		}
	}

	unless ($dont_notify) { 

		my $subject = $entry->event->abbr." entry accepted from waitlist: ". $tourn->name;
		my $message = " 

		The ".$tourn->name." is pleased to notify you that\n\n

		".$entry->name." (".$entry->code.")\n\n
		
		has been taken from the waitlist and added to the
		tournament in ".$entry->event->name."\n\n";

		if ($waitlist_message) { 
			$message .= "\n";
			$message .= $waitlist_message;
			$message .= "\n";
		} 

		if ($double_warning) { 
			$message .= "\n\n******WARNING:******\n";
			$message .= "Students in this entry are now double-entered.  Please make sure \nn";
			$message .= "that their double-entry is not in conflict with tournament \n";
			$message .= "rules as the result of getting off the waitlist in this event. \n";
		} 
		
		unless ($double_warning || $waitlist_message) { 
			$message .= "\n\n";
			$message .= "You do not have to take further action; this student \n";
			$message .= "is now fully entered and has been added to your invoice.\n";
		}

		if ($housing_warning)  {
			$message .= "\n\n";
			$message .= $housing_warning;
		}

		$message .= "\n\n";
		$message .= "   ".$account->first." ".$account->last."\n\n";
		$message .= "   ".$tourn->name."\n ";

		my @admins = $m->comp("/funclib/chapter_admins.mas", chapter => $entry->school->chapter);
		my @contacts;
		foreach my $admin (@admins) { 
			push @contacts, $admin->email unless $admin->no_email;
		}

		$m->comp( "/funclib/send_email.mas", from => $account, array => \@contacts, subject => $subject, body => $message );

	}

	return;

</%init>
