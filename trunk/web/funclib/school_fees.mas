<%args>
	$school_id
	$all          => undef
	$names        => undef
	$entry_fees   => undef
	$concessions  => undef
	$payments     => undef
	$show_deleted => undef
</%args>
<%init>

	use POSIX;

	my $total;
	my @felines;

	my $school = Tab::School->retrieve($school_id);
	$m->print ("School does not exist") unless $school;
	$m->abort unless $school;
	my $tourn =  $school->tourn if $school;

	my $symbol = $tourn->setting("currency");
	my $individuals = $school->setting('individuals');

	$entry_fees++ if $all;
	$concessions++ if $all;
	$payments++ if $all;

	if ($entry_fees && $tourn->setting("per_person_fee")) { 

		my $bodies = $m->comp("/funclib/school_bodies.mas", school => $school);

		if ($individuals < $bodies) { 
			$school->setting("individuals", $bodies);
			$individuals = $bodies;
			$school->update;
		}

		my %person_line = ();

		$person_line{"name"} = $individuals.' people at x '.$tourn->setting("per_person_fee");
		$person_line{"fee"} = $individuals * $tourn->setting("per_person_fee");

		$person_line{"quantity"} = $individuals;
		$person_line{"per_unit"} = $tourn->setting("per_person_fee");
		$person_line{"short_name"} = "Individuals in Attendance";

		$total += $person_line{"fee"};
		push (@felines, {%person_line});

	}


	if ($entry_fees && $tourn->setting("per_student_fee")) { 

		my @students = $m->comp("/funclib/school_students.mas", school => $school);

		my %student_line = ();
		$student_line{"name"} = scalar @students.' individual students at x '.$tourn->setting("per_student_fee");
		$student_line{"fee"} = scalar @students * $tourn->setting("per_student_fee");

		$student_line{"quantity"} = scalar @students;
		$student_line{"per_unit"} = $tourn->setting("per_student_fee");
		$student_line{"short_name"} = "Students in Attendance";

		$total += $student_line{"fee"};
		push (@felines, {%student_line});

	}

	if ($entry_fees) { 

		EVENT:
		foreach my $event ($m->comp("/funclib/school_events.mas", school => $school)) { 

			my @entries;

			if ($tourn->setting("invoice_waitlist")) { 
				@entries = Tab::Entry->search( school => $school->id, event => $event->id);
			} else { 
				@entries = Tab::Entry->search( school => $school->id, event => $event->id, waitlist => 0);
			}

			my $fee_per = $event->fee;
			my $fee_total = $fee_per * scalar @entries;

			next EVENT unless $fee_per;

			my $name = scalar @entries. " entries in ".$event->abbr.' x '.$fee_per;

			my %line_hash= ();

			$line_hash{"quantity"} = scalar @entries;
			$line_hash{"per_unit"} = $fee_per;
			$line_hash{"short_name"} = "Entries in ".$event->name;

			$line_hash{"name"} = $name;
			$line_hash{"fee"} = $fee_total;

			push (@felines, {%line_hash});

			$total += $fee_total;
		}

		GROUP:
		foreach my $group (sort {$a->name cmp $b->name} $tourn->groups) { 
		
			my $rounds_per = $group->setting("rounds_per");
			my $judge_per = $group->setting("judge_per");
			my $attending_judge_fee = $group->setting("attending_judge_fee"); 

			my ($uncovered, $extra ) = $m->comp("/funclib/judgemath/uncovered_burden_by_group.mas", group => $group, school => $school);

			if ($attending_judge_fee) { 

				my %judge_fee_hash;

				my @judges = Tab::Judge->search( school => $school->id, judge_group => $group->id );
				$judge_fee_hash{"name"} = scalar @judges.' individual judges at x '.$attending_judge_fee;
				$judge_fee_hash{"fee"} = scalar @judges * $attending_judge_fee;

				$judge_fee_hash{"quantity"} = scalar @judges;
				$judge_fee_hash{"per_unit"} = $attending_judge_fee;
				$judge_fee_hash{"short_name"} = "Judges in Attendance";

				$total += $judge_fee_hash{"fee"};
				push (@felines, {%judge_fee_hash});

			} elsif ($group->setting("track_judge_hires")) {

				my ($requests, $accepted) = $m->comp('/funclib/school_hires.mas', school => $school, group => $group);

				my %hired_fee = ();

				if ($group->setting("round_hire_fee")) { 

					if ($accepted ) { 
						$hired_fee{"name"} = $accepted." rounds of judging in ".$group->name.' at '.$group->setting("round_hire_fee")." each";
						$hired_fee{"fee"} = $accepted * $group->setting("round_hire_fee");

						$hired_fee{"quantity"} = $accepted;
						$hired_fee{"per_unit"} = $group->setting("round_hire_fee");
						$hired_fee{"short_name"} = "Rounds of ".$group->abbr." hired judging";

						$total += $accepted * $group->setting("round_hire_fee");
						push (@felines, {%hired_fee});
					}

				} elsif ($group->setting("hired_fee")) { 

					$accepted = ceil($accepted / $judge_per) if $judge_per;
		
					if ($accepted ) { 

						$hired_fee{"name"} = $accepted." hired judges for ".$group->name.' at '.$group->setting("hired_fee")." each";
						$hired_fee{"fee"} = $accepted * $group->setting("hired_fee");

						$hired_fee{"quantity"} = $accepted;
						$hired_fee{"per_unit"} = $group->setting("hired_fee");
						$hired_fee{"short_name"} = $group->abbr." hired judges";

						$total += $accepted * $group->setting("hired_fee");
						push (@felines, {%hired_fee});
					}
		
				} elsif ($group->setting("uncovered_entry_fee")) { 
				
					if ($accepted ) { 
						my $entry = "entries";
						$entry = "entry" if $accepted == 1;
						$hired_fee{"name"} = "$accepted $entry covered by hires in ".$group->name.' at '.$group->setting("uncovered_entry_fee")." each";
						$hired_fee{"fee"} = $accepted * $group->setting("uncovered_entry_fee");

						$hired_fee{"quantity"} = $accepted;
						$hired_fee{"per_unit"} = $group->setting("uncovered_entry_fee");
						$hired_fee{"short_name"} = $group->abbr." entries covered by hired judging";

						$total += $accepted * $group->setting("uncovered_entry_fee");
						push (@felines, {%hired_fee});
					}
				}

				# If there are still missing judges despite the hires, warn the
				# user and invalidate the invoice if that's not OK

				if ($uncovered > 0) {

					my %judge_fee_hash = ();

					$uncovered = ceil($uncovered / $judge_per) if $judge_per;

					if ($group->setting("missing_judge_fee")) { 

						if ($rounds_per) { 

							my $round = "round";
							$round .= "s" if $uncovered != 1;

							$judge_fee_hash{"name"} = "Missing $uncovered $round in ".$group->name;
							$judge_fee_hash{"fee"} = $uncovered * $group->setting("missing_judge_fee");

							$judge_fee_hash{"quantity"} = $uncovered;
							$judge_fee_hash{"per_unit"} = $group->setting("missing_judge_fee");
							$judge_fee_hash{"short_name"} = $group->abbr." uncovered rounds of judging";

							$total += $judge_fee_hash{"fee"};

						} elsif ($judge_per) { 
					
							my $judge = "judge";
							$judge .= "s" if $uncovered != 1;
							$judge_fee_hash{"name"} = "Missing $uncovered $judge in ".$group->name;
							$judge_fee_hash{"fee"} = $uncovered * $group->setting("missing_judge_fee");

							$judge_fee_hash{"quantity"} = $uncovered;
							$judge_fee_hash{"per_unit"} = $group->setting("missing_judge_fee");
							$judge_fee_hash{"short_name"} = $group->abbr." judges under obligation";

							$total += $judge_fee_hash{"fee"};
						}

					} else { 

						$judge_fee_hash{"name"} = "WARNING: You are short $uncovered judges in ".$group->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $judge_per;

						$judge_fee_hash{"name"} = "WARNING: You are short $uncovered rounds in ".$group->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $rounds_per;

						$judge_fee_hash{"warn"}++;
					}

					push (@felines, {%judge_fee_hash});
			
				}

			} elsif ($uncovered > 0) {

				my %judge_fee_hash = ();

				$uncovered = ceil($uncovered / $judge_per) if $judge_per;

				$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered judge(s) in ".$group->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $judge_per;
				$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered round(s) in ".$group->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $rounds_per;
				$judge_fee_hash{"fee"} = $uncovered * $group->setting('missing_judge_fee');

				$judge_fee_hash{"warn"} = 1;

				push (@felines, {%judge_fee_hash});

				$total += $judge_fee_hash{"fee"};
			}

			my %stimes_under = $m->comp("/funclib/judgemath/judge_strike_times_short.mas", group => $group, school => $school);

			foreach my $key (keys %stimes_under) {

				my $stime = Tab::StrikeTime->retrieve($key);
				my %stime_fine = ();

				next unless $stimes_under{$stime->id} > 0;
				next unless $stime->fine;

				$stime_fine{"name"} = $stimes_under{$stime->id}." ".$group->name." judges under in ".$stime->name." at ".$stime->fine." each";
				$stime_fine{"fee"}  =  $stime->fine * $stimes_under{$stime->id};

				$stime_fine{"quantity"} = $stimes_under{$stime->id};
				$stime_fine{"per_unit"} = $stime->fine;
				$stime_fine{"short_name"} = "Judges under obligation in ".$stime->name;

				$total += $stime->fine * $stimes_under{$stime->id};
						
				push (@felines, {%stime_fine});

			}	

		} #end of foreach group

	} 

	if ($concessions) { 

		foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) {

			my @orders = Tab::ConcessionPurchase->search( school => $school->id, concession => $concession->id );

			my $quantity;

			foreach my $order (@orders) { 
				$quantity += $order->quantity;
			}
		
			next unless $quantity;

			my %line = ();

			$line{"name"} = $quantity." ".$concession->name." at ".$concession->price." each";
			$line{"fee"} = $quantity * $concession->price;

			$line{"quantity"} = $quantity;
			$line{"per_unit"} = $concession->price;
			$line{"short_name"} = $concession->name;

			$total += $quantity * $concession->price;;

			Tab::debuglog("Total for ".scalar @orders." orders is $total");

			push (@felines, {%line});

		}
	}

	if ($entry_fees || $payments) { 

		my @fines;

		if ($entry_fees) { 
			@fines  = Tab::SchoolFine->search( school => $school->id, deleted => 0, payment => 0);
			push @fines, Tab::SchoolFine->search( school => $school->id, deleted => 1, payment => 0 ) if $show_deleted; 
		}

		if ($payments) { 
			@fines     = Tab::SchoolFine->search( school => $school->id, deleted => 0, payment => 1 );
			push @fines, Tab::SchoolFine->search( school => $school->id, deleted => 1, payment => 1 ) if $show_deleted;
		}

		@fines = sort {$a->payment <=> $b->payment} @fines;

		FINE: 
		foreach my $fine (@fines) { 

			my %fine_hash;
			$fine_hash{"name"} .= $fine->reason;
			$fine_hash{"short_name"} .= $fine->reason;

			if ($fine->deleted) { 
				$fine_hash{"deleted"}++;
				$fine_hash{"name"} .= " deleted at ". &Tab::niceshortdt($fine->deleted_at->set_time_zone($tourn->tz)) if $fine->deleted_at;
				$fine_hash{"name"} .= " by ". $fine->deleted_by->first." ".$fine->deleted_by->last  if $fine->deleted_by && $names;
			} else { 
				$fine_hash{"name"} .= " recorded ". &Tab::eurodate($fine->levied_on->set_time_zone($tourn->tz)) if $fine->levied_on;
				$fine_hash{"name"} .= " by ". $fine->levied_by->first." ".$fine->levied_by->last  if $fine->levied_by && $names;
			}

			$fine_hash{"fee"} = $fine->amount;
			$fine_hash{"fine_id"} = $fine->id;
			$total +=  $fine->amount unless $fine->deleted;
			push (@felines, {%fine_hash});

		} #end of foreach fine

	} 

	return ($total, \@felines);

</%init>
