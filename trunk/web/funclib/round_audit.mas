<%args>
	$round => undef
	$round_id => undef
</%args>
<%init>

	$round = Tab::Round->retrieve($round_id) if $round_id;
	return unless $round;

	Tab::Ballot->set_sql( audit_round => "
		update ballot, ballot_value, panel
		set ballot.audit = 1
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
		and ballot_value.value is not null
	");

	Tab::Ballot->set_sql( audit_byes => "
		update ballot, panel
		set ballot.audit = 1
		where panel.round = ?
		and panel.id = ballot.panel
		and panel.bye = 1
	");

	Tab::Ballot->set_sql( zero_round => "
		update ballot, panel
		set ballot.audit = 0
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.bye != 0
		and ballot.noshow != 0
		and not exists ( 
			select ballot_value.id 
			from ballot_value
			where ballot_value.ballot = ballot.id
			and ballot_value.value is not null)
	");

	Tab::Panel->set_sql( update_bracket => "
		update panel p1
			inner join ( 
				select panel.id, min(cast(result_value.value as unsigned)) as bracket
				from panel, ballot, result, result_value, result_set
				where panel.id = ballot.panel
				and panel.round = ?
				and ballot.entry = result.entry
				and result_set.bracket = 1 
				and result.result_set = result_set.id
				and result.id = result_value.result
				and result.round = panel.round
				group by panel.id
			) p2 on p1.id = p2.id
		set p1.bracket = p2.bracket
	");

	Tab::Ballot->sql_audit_round->execute($round->id);
	Tab::Ballot->sql_audit_byes->execute($round->id);
	Tab::Ballot->sql_zero_round->execute($round->id);

	if ($round->type eq "elim" || $round->type eq "final") { 
		Tab::Panel->sql_update_bracket->execute($round->id);
	} else { 

		my $round_before = Tab::Round->search( event => $round->event->id, name => ($round->name - 1))->first;

		my %entry_wins = $m->comp("/funclib/entry_wins.mas", event => $round->event, round => $round_before);

		my @panels = $round->panels;

		foreach my $panel (@panels) { 

			my $bracket;

			foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
				$bracket = $entry_wins{$entry->id} if $entry_wins{$entry->id} > $bracket;
			}

			$panel->bracket($bracket);
			$panel->update;

		}

	}

	return;

</%init>
