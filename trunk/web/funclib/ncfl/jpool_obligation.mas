<%args>
	$diocese
	$jpool => undef
	$group => undef
</%args>
<%perl>

	if ($jpool) { 

		return if $jpool->event_based;

		my $group = $jpool->judge_group;

		my $judge_quota = $m->comp("judge_obligation.mas", diocese => $diocese, group => $group);

		my $max_owed = max_owed($diocese, $group, $judge_quota);
		my $jpool_burden = jpool_burden($diocese, $jpool, $judge_quota);

		my $owed = $max_owed; 
		my $style = "overall";


		if ($jpool_burden < $max_owed) { 
			$owed = $jpool_burden;
			$style = "jpool";
		}
	
		return $owed, $style;

	} elsif ($group) { 
	
		return if $group->setting("tab_room");

		my @elim_jpools =  $m->comp("/funclib/judge_jpools.mas", judge => $judge, limit => "ncfl_elims")
		return unless @elim_jpools;

		my $judge_quota = $m->comp("judge_obligation.mas", diocese => $diocese, group => $group);
		my $max_owed = max_owed($diocese, $group, $judge_quota);

		my $total_jpool_burden;

		foreach my $jpool (@elim_jpools) { 
			$total_jpool_burden += jpool_burden($diocese, $jpool, $judge_quota);
		}

		my $owed = $max_owed; 
		my $style = "overall";

		if ($total_jpool_burden < $max_owed) { 
			$owed = $total_jpool_burden;
			$style = "jpool";
		}


		return $owed, $style;
	}

	return;

	sub jpool_burden { 

		my ($diocese, $jpool, $judge_quota) = @_;
		my $jpool_burden = POSIX::ceil($judge_quota * $jpool->burden * .01);

		my @pool_judges = $m->comp("/funclib/region_judges.mas", region => $diocese, jpool => $jpool);

		$jpool_burden -= scalar @pool_judges;
		$jpool_burden = 0 if $jpool_burden < 0; 
		return $jpool_burden;

	}

	sub max_owed {

		my ($diocese, $group, $judge_quota) = @_;

		my $max_owed = ($judge_quota * 2);

		Tab::JPoolJudge->set_sql( jpools => "
			select distinct jpool_judge.id
			from jpool_judge, judge, jpool, school
			where jpool_judge.judge = judge.id
			and jpool_judge.jpool = jpool.id
			and jpool.judge_group = ? 
			and exists (select jpool_setting.id from jpool_setting where jpool_setting.jpool = jpool.id and jpool_setting.tag = 'registrant')	
			and not exists (select jpool_setting.id from jpool_setting where jpool_setting.jpool = jpool.id and jpool_setting.tag = 'event_based')	
			and judge.school = school.id
			and school.region = ? 
		");

		my @elim_rounds = Tab::JPoolJudge->search_jpools($group->id, $diocese->id);
		$max_owed -= scalar @elim_rounds;
		$max_owed = 0 if $max_owed < 0;
		return $max_owed;

	}

</%perl>

