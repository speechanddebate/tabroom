<%args>
	$event_id
	$current_rd_id => undef
</%args>
<%init>

	#mostly deprecated, but returns per-round obligation counts; judge_oblig_count_by_group returns values by judge_group
	#thus, only this page really returns event_values
	#this is still called by ./panel/schemat/pref_diagnostics_mjp.mhtml, /panel/schemat/judge_use_status.mhtml,
	#/panel/schemat/mjp_diagnostics.mhtml, /panel/round/debate_judge_assign_sta.mhtml
	
	my $debug=0;
	unless ($current_rd_id) { return; }

	my $current_round = Tab::Round->retrieve($current_rd_id);
	my $current_round_id = $current_round->id;

	print "<BR>Current round is ".$current_round->name."<BR>" if $debug;

	#processing time runs 1 second; should try to improve it
	
	use Time::HiRes qw( time );
	my $start = time(); 	

	my $event = Tab::Event->retrieve($event_id);
	my $judge_group = $event->judge_group;

	#THIS FIGURES OUT HOW MANY MORE ROUNDS OF JUDGING YOU NEED
	my $tourn = $event->tourn;

	my @entries = Tab::Entry->search( event => $event->id,  dropped => 0, waitlist => 0 );
	my $panels_per_rd = int(scalar(@entries)/2);
	
	#total panels necessary to finish tournament
	my $total_panels=0;
	#total judge rounds necessary to finish tournament
	my $judges_needed=0;
	
	my $paired_panels_past=0;
	my $assigned_judges_past=0;
	my $needed_panels_past=0;
	my $needed_judges_past=0;	

	my $paired_panels_current=0;
	my $assigned_judges_current=0;
	my $needed_panels_current=0;
	my $needed_judges_current=0;	

	my $paired_panels_future=0;
	my $assigned_judges_future=0;
	my $needed_panels_future=0;
	my $needed_judges_future=0;	

	my $judges_assigned=0;
	
	my %this_round;
	my $dummy=$event->id;
	
	my @rounds = $event->rounds;

	#This script was slowing down the pairing by a ton.  Palmer optimized: 

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select panel.id, judge.id, round.id, round.name
		from round, panel, judge, ballot
		where round.event = ".$event->id."
		and round.id = panel.round
		and round.type != \"elim\"
		and round.type != \"final\"
		and panel.id = ballot.panel
		and ballot.judge = judge.id
	");

	my $current_name = $current_round->name;

	$sth->execute();

	my %used_panel;
	my %used_judges;
	my %round_panels;
	my %round_judges;
	my %judging_now;

	while (my ($panel, $judge, $round, $roundname)  = $sth->fetchrow_array() ) {

		$round_judges{$round}++ unless $used_judges{$judge."-".$round}++;

		next if $used_panel{$panel."-".$judge}++;

		if ($roundname < $current_name) { 

			$assigned_judges_past++;

			unless ($used_panel{$panel}++) { 
				$paired_panels_past++;
				$round_panels{$round}++;
			}

		} elsif ($roundname > $current_name) { 

			$assigned_judges_future++;

			unless ($used_panel{$panel}++) { 
				$paired_panels_future++;
				$round_panels{$round}++;
			}

		} elsif ($roundname == $current_name) { 

			$judging_now{$judge}++;
			$assigned_judges_current++;

			unless ($used_panel{$panel}++) { 
				$paired_panels_current++;
				$round_panels{$round}++;
			}

		}

	}

	foreach my $round (@rounds) { 
		
		next if $round->type eq "elim";
		next if $round->type eq "final";

		my $num_judges = $round->setting("num_judges");

		if ( $round->name < $current_round->name ) {
			$needed_panels_past += $panels_per_rd - $round_panels{$round->id};
			$needed_judges_past += ($round_panels{$round->id} * $num_judges ) - $round_judges{$round};
		} elsif ( $round->name > $current_round->name ) {
			$needed_panels_future += $panels_per_rd - $round_panels{$round->id};
			$needed_judges_future += ( ($panels_per_rd - $round_panels{$round->id}) * $num_judges) ; #maybe subtract already?
		} else { 
			$needed_panels_current += $panels_per_rd - $round_panels{$round->id};
			$needed_judges_current += ($round_panels{$round->id} * $num_judges ) - $round_judges{$round};
		}

	}

	#mark judging in other events
	my @ts_assigns = $m->comp("/funclib/timeslot_judges.mas", timeslot => $current_round->timeslot);			
	foreach my $ts_judge (@ts_assigns) {
		$judging_now{$ts_judge} = 1 ;
	}

	#THIS FIGURES OUT HOW MANY MORE ROUNDS OF JUDGING ARE STILL AVAILABLE

	my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $current_round_id);			
	my %used = %{$judge_hash};

	my $judge_oblig_left = 0;
	my $event_rds_left = 0; #total rounds of available judging left for future rounds
	my $fut_avail = 0;
	my $commit_left = 0;		
	my $burned_total = 0;
	my $burned_current = 0;
	my $lost_rounds_total=0;
	my $lost_rounds_current=0;
	my $live_bodies_left=0;
	my $burned_top50;
	
	#Pull judges eligible for this division
	
	Tab::Judge->set_sql(pull_ballots => "
		select judge.id, judge.first, judge.last
		from judge
		where judge.judge_group = $judge_group
		and active=1
		and not exists(
			select strike.id from strike
			where strike.judge = judge.id 	
			and strike.event = $event_id
			and strike.type = \"event\" )
		order by judge.last
	");	

	my @judges = Tab::Judge->search_pull_ballots;
			
	foreach my $judge (@judges) {

		$fut_avail = $used{$judge}{'future_possible'} - $used{$judge}{'will_judge'};

		$commit_left = $used{$judge}{'oblig'}-$used{$judge}{'judged_already'}-$used{$judge}{'will_judge'};
		$commit_left = $fut_avail if $commit_left > $fut_avail;

		$commit_left = 0 if $commit_left < 0;

		$burned_total++ if $commit_left == 0;
		
		$burned_current++ if $commit_left == 0 && $judging_now{$judge};
		
		my $dummy= $m->comp("/funclib/judge_avg_rating.mas", judge => $judge, avg_field => "percentile" );
		
		$burned_top50++ if $commit_left == 0 && $judging_now{$judge} && $dummy <= 50 ;
		
		$live_bodies_left++ if $commit_left > 0;
		
		$event_rds_left += $commit_left;

		if ( $used{$judge}{'lost_current'} > 0 && not defined $judging_now{$judge} ) { $lost_rounds_current++; }
		#above is accurate; below is dead code
		#$lost_rounds_current++ if $used{$judge}{'lost'} > 0 && not defined $judging_now{$judge};
		#if ( $used{$judge}{'lost'} > 0 && not defined $judging_now{$judge} ) {	
		#	$lost_rounds_current++;
		#	print $judge->id." Lost a round from ".$judge->first." ".$judge->last." total=$lost_rounds_current<br>";
		#}

		$lost_rounds_total += $used{$judge}{'lost'};

	}


	return $paired_panels_past, $assigned_judges_past, $needed_panels_past, $needed_judges_past, $paired_panels_current, $assigned_judges_current, $needed_panels_current, $needed_judges_current, $paired_panels_future, $assigned_judges_future, $needed_panels_future, $needed_judges_future, $burned_current, $burned_total, $lost_rounds_current, $lost_rounds_total, $event_rds_left, $live_bodies_left, $burned_top50;

	my $end = time();
	print "<br>processing time: ";
	printf("%.2f\n", $end - $start);

</%init>
