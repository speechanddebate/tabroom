<%args> 
	$panel       => undef
	$debug       => undef
	$mass        => undef
	$wudc        => undef
	$whole_round => undef
	$stealable   => undef
</%args>
<%init> 

	return unless $panel;

	my $panel_id = $panel->id;
	my $round  = $panel->round;
	my @jpools 	= $round->jpools;
	my $event 	= $round->event;
	my $group   = $event->judge_group;

	my $timeslot = $round->timeslot;
	my $tourn 	= $timeslot->tourn;

	my $last_judgeful_round;
	my $last_entryful_round;

	my $ncfl = $tourn->setting("ncfl");
	my $regions = $tourn->setting("regions");
	my $dio_regions = $group->setting("conflict_region_judges");
	my $region_judge_forbid = $event->setting("region_judge_forbid");

	Tab::JPool->set_sql(standby_by_round => "
		select distinct jpool.*
		from jpool, jpool_setting standby, jpool_setting standby_timeslot, timeslot, timeslot roundts
		where jpool.judge_group = ? 

		and standby.jpool = jpool.id
		and standby.tag = 'standby'

		and standby_timeslot.jpool = jpool.id
		and standby_timeslot.tag = 'standby_timeslot'
		and standby_timeslot.value = timeslot.id

		and timeslot.start < roundts.end
		and timeslot.end > roundts.start
		and roundts.id = ? 
	");

	my @standby_jpools = Tab::JPool->search_standby_by_round($group->id, $round->timeslot->id);
	my @standby_judges;

	foreach my $jpool (@standby_jpools) { 
		push @standby_judges, $jpool->judges;
	}

	my %is_standby = map {$_->id => 1} @standby_judges; # so this is obsolete, correct? JB

	my $pre_paneled;

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

	if ($whole_round || scalar @entries < 1) { 

		# If this is a round without entries, then I'm pre-paneling judges.

		# If this round is an elim round I have to check the judges against the
		# entries who are alive in the previous elim round.  If the previous
		# round is a preliminary round, then I have to check for judges clean
		# against the entire event. 

		# So, grab the last round that does have entries so I can test against
		# it. 

		my @entryful_rounds = $m->comp("/funclib/event_rounds.mas", event => $event, entries => "yes");

		@entryful_rounds = sort {$b->name <=> $a->name}  @entryful_rounds;

		foreach my $eround (@entryful_rounds) { 
			next if $eround->name > $round->name;
			$last_entryful_round = $eround unless $last_entryful_round;
			$last_entryful_round = $eround if $last_entryful_round->name < $eround->name;
		}

		$pre_paneled++;

	}

	my @clean_judges;

	# Score the kids based on how many kids are from the judge's school in this
	# event.  This means that the first judge who comes up as clean is the
	# judge whose school does this event the most, but is still clean to judge
	# it.

	Tab::Judge->set_sql( score_judges => "
		update judge set judge.score = 
			(select count(id) from entry 
			where entry.school = judge.school 
			and entry.event = ? )
		where judge.judge_group = ? ");

	Tab::Judge->set_sql( clean_score_judges => "
		update judge set judge.score = 0 where judge.judge_group= ? ");

	Tab::Judge->set_sql( score_judge_usage => "
		update judge set judge.score =
			(	judge.score 
				-
				(select (100 * count(distinct panel.id)) from panel, ballot
				where ballot.judge = judge.id and panel.id = ballot.panel)
			)
		where judge.judge_group=".$group->id );

	Tab::Judge->set_sql( score_alts => "
	update judge set judge.score = 
		(select count(id) from entry 
			where entry.school = judge.school 
			and entry.event = ".$event->id."  )
	where judge.alt_group=".$group->id ); 

	Tab::Judge->set_sql( mark_panels => "
		update judge set judge.tmp =
			(select count(distinct round.id) from panel,ballot,round
				where ballot.panel = panel.id
				and ballot.judge = judge.id
				and panel.round = round.id) 
		where judge.judge_group =".$group->id );

	Tab::Judge->set_sql( struck_like_a_gong => "
		update judge set judge.score = 
			(judge.score 
				+
			  (select count(strike.id) from strike where strike.judge = judge.id)
			)
		where judge.judge_group =".$group->id );

	Tab::Judge->sql_clean_score_judges->execute($group->id);
	Tab::Judge->sql_score_judges->execute($event->id, $group->id) unless $group->setting("judge_randomize");
	Tab::Judge->sql_score_alts->execute;

	Tab::Judge->sql_mark_panels->execute;
	Tab::Judge->sql_struck_like_a_gong->execute;
	Tab::Judge->sql_score_judge_usage->execute if $mass;

	# Run it once if we're not hiring judges, twice if we are.  Judge hires
	# require special considerations since they have no school id and I'm not
	# smart enough to figure out to create SQL that won't run horribly slowly
	# and can look for both at once.

	my @reasons;

	push (@reasons, "school");
	push (@reasons, "hire");
	push (@reasons, "neutral") if $group->setting("neutrals");

	foreach my $reason (@reasons) {

		# $sql_from_hell is the variable that contains the text of the SQL
		# transaction that gets us what we want.  We add SQL code to it as we
		# go along, depending on the rules of our tournament.

		my $sql_from_hell = "select distinct judge.*";

		my $from;  		# the "select from" part of the select.  Tack it on later.
		my $left_joins; # the left joins after the froms.  God this is an ugly hack. 

		if ($group->setting("tab_ratings") ||$wudc) { 
			$sql_from_hell .= ", tab_rating.value as tab_rating";
			$left_joins .= " left join judge_setting as tab_rating on tab_rating.judge = judge.id and tab_rating.tag = \"tab_rating\" ";
		}

		if ($reason eq "school") { # if this is the not hired round, then we add school data

			if ($ncfl || $regions) { 
				$sql_from_hell .= ",region.code as regcode";
				$left_joins .= " left join region on school.region = region.id \n";

				if ($ncfl && $dio_regions) { 
					$left_joins .= ' left join region_setting dioregion on dioregion.region = region.id and dioregion.tag = "region-'.$event->id.'" ';
				}
			} 

			$sql_from_hell .= ",school.name as schoolname, school.code as schoolcode";
			$from .= "school,";

		} 

		if ($reason eq "hire") { 
			$sql_from_hell .= ",\"HIRED\" as schoolname, \"--\" as schoolcode";
		}

		if ($reason eq "neutral") { 
			$sql_from_hell .= ",\"NEUTRAL\" as schoolname, \"--\" as schoolcode";
		}

		$sql_from_hell .= "\n from (";

# 		Add the from line back in 
		$sql_from_hell = $sql_from_hell.$from;

#		Track jpools if this round has a jpool assigned to it.
		$sql_from_hell .= "jpool_judge, jpool_round," if @jpools;

#		Standard stuff that any judge will have to be checked for
		$sql_from_hell .= "
			judge,panel,event,round,timeslot,judge_group,tourn)
			$left_joins
			where panel.id = ?
			and round.id = panel.round
			and event.id = round.event 	
			and timeslot.id = round.timeslot 		
			and judge.active = 1
			and judge.judge_group = judge_group.id
			and judge_group.tourn = tourn.id
			and judge_group.id = event.judge_group
			and (judge.judge_group = event.judge_group or judge.alt_group = event.judge_group)
		";


#		If the jpool system is being used, the judge must be in the jpool for
#		this round.

		if (@jpools) { 
			$sql_from_hell .= "
			and jpool_judge.judge = judge.id
			and jpool_judge.jpool = jpool_round.jpool
			and jpool_round.round = round.id ";
		}

#		If this is NCFL the diocese counts as much as the school does:

		if ($reason eq "school") {  #this only applies to non hired judges

			if ($ncfl || $regions) { 
				$sql_from_hell .= "
					and judge.school = school.id
					and school.tourn = tourn.id
					and tourn.id = event.tourn
					";

			} else { 

				$sql_from_hell .= " 
					and judge.school = school.id
					and school.tourn = tourn.id
					and event.tourn = tourn.id ";
			}
		}

		# Take care of the various sorts of strikes that can be manually applied
		# by the tournament director

		$sql_from_hell .= "

			and not exists( 		
				select strike.id from strike 		
				where strike.judge = judge.id 		
				and strike.type = \"entry\"
				and strike.entry in (select distinct entry.id  								
					from entry,ballot as bcc
					where bcc.entry = entry.id 								
					and bcc.panel =
					$panel_id ) 	
			)  	

			and not exists( 		
				select strike.id 
				from strike
				where strike.school = judge.school
				and strike.type = \"hybrid\"
				and strike.entry in (
					select distinct entry.id  								
					from entry,ballot as bccc
					where bccc.entry = entry.id 								
					and bccc.panel = $panel_id 
				)
			)  	

			and not exists( 		
				select hybrid.id 
				from strike hybrid, strike schstrike
				where hybrid.judge = judge.id
				and hybrid.school = schstrike.school
				and schstrike.type = \"hybrid\"
				and schstrike.entry in (
					select distinct entry.id  								
					from entry,ballot as bccc
					where bccc.entry = entry.id 								
					and bccc.panel = $panel_id 
				)
			)  	

			and not exists( 		
				select strike.id from strike 		
				where strike.judge = judge.id 		
				and strike.type = \"conflict\"
				and strike.entry in (select distinct entry.id  								
					from entry,ballot as bccc
					where bccc.entry = entry.id 								
					and bccc.panel =
					$panel_id ) 	)  	

			and not exists( 		
				select strike.id from strike 		
				where strike.judge = judge.id 		
				and strike.type = \"conflict\"
				and strike.school in (select distinct entry.school
					from entry,ballot as bcsc
					where bcsc.entry = entry.id
					and bcsc.panel = $panel_id ) 	)  	

			and not exists( 		
				select strike.id from strike
				where strike.judge = judge.id
				and strike.type = \"school\"
				and strike.school in (select distinct entry.school
					from entry,ballot as bcs
					where bcs.entry = entry.id
					and bcs.panel = $panel_id ) 	)  	

			and not exists(
				select strike.id from strike
				where strike.judge = judge.id 	
				and strike.event = round.event
				and strike.type = \"event\" )  
	
			and not exists(
				select strike.id from strike 		
				where strike.judge = judge.id 		
				and strike.event = round.event
				and strike.type = \"elim\" 		
				and round.type = \"prelim\")  	

			and not exists( 		
				select strike.id 
				from strike
				where strike.judge = judge.id 
				and strike.type = \"time\"
				and strike.start <= timeslot.end 		
				and strike.end >= timeslot.start ) 	

				";

		if ($group->setting("auto_conflict_hires")) { 

			$sql_from_hell .= " 
				and not exists( 		
					select judge_hire.id from judge_hire
					where judge_hire.judge = judge.id
					and judge_hire.school in (select distinct entry.school
						from entry,ballot as bch
						where bch.entry = entry.id
						and bch.panel = $panel_id ) 	
				)";
		}


		if ($event->setting("no_first_years")) { 

			$sql_from_hell .= " and not exists( 		
				select judge_setting.id
				from judge_setting
				where judge_setting.judge = judge.id
				and judge_setting.tag = \"first_year\"
				and judge_setting.value = 1
			)";
		}

		if ($regions || $ncfl ) { 

			$sql_from_hell .= " and not exists( 		
				select strike.id from strike 		
				where strike.judge = judge.id 		
				and strike.type = \"region\"
				and strike.region in (select distinct school.region  
					from entry,school,ballot as br 								
					where br.entry = entry.id 
					and school.id = entry.school 								
					and br.panel = $panel_id) 	
			) ";

		}
	
		if ($last_entryful_round && $last_entryful_round->type ne "prelim") {

			system "$Tab::logger I am applying the preset region/school strikes, yo" if $debug;
			system "$Tab::logger Last entryful round is ".$last_entryful_round->name if $debug;

			# In a preset round, check that the judge is not struck against any
			# elim students who are still alive

			$sql_from_hell .= "
				and not exists( 
					select strike.id from strike
					where strike.judge = judge.id				
					and strike.type = \"entry\"
					and strike.entry in (
						select distinct entry.id																  
						from entry,ballot as bcpc,panel
						where bcpc.entry = entry.id																
						and bcpc.panel = panel.id
						and panel.round = ".$last_entryful_round->id."
					)
				)

				and not exists(				 
					select strike.id from strike
					where strike.judge = judge.id
					and strike.type = \"school\"
					and strike.school in (
						select distinct entry.school
						from entry,ballot as bcps,panel
						where bcps.entry = entry.id
						and bcps.panel = panel.id
						and panel.round = ".$last_entryful_round->id."
					)		 
				) ";

			if ($ncfl || $regions) { 

				$sql_from_hell .= "
					and not exists(				 
						select strike.id from strike
						where strike.judge = judge.id
						and strike.type = \"region\"
						and strike.region in (
							select distinct school.region
							from entry,ballot as bcpr,panel,school
							where bcpr.entry = entry.id
							and entry.school = school.id
							and bcpr.panel = panel.id
							and panel.round = ".$last_entryful_round->id."
						)		 
					) ";

			}

		}

		if ($reason eq "school") {    #Make sure the judge isn't from the same school:

			unless ($event->setting("allow_judge_own")) { 

				if ($m->comp("/funclib/panel_entries.mas", panel => $panel) < 1) { 

					if (	not defined $last_entryful_round 
							|| ($last_entryful_round && $last_entryful_round->type eq "prelim") 
							&! $ncfl ) { 

					# If we're dealing with preset rounds for the first break
					# out of prelims, or placing judges for any elimination
					# before prelim judges have been panelled, then no judge is
					# allowed to judge an event in which they have kids.  

					# Note that this makes no sense to do at NCFL Nationals, so
					# we skip that condition altogether for NCFL; few dioceses
					# have no kids in a given speech event anyway.

					$sql_from_hell = $sql_from_hell ."

						and judge.school NOT IN ( 
							select distinct entry.school from entry
							where entry.event = ".$event->id."
						)
					";

					# That means we also have to be more careful with school and
					# competitor strikes as well

					$sql_from_hell = $sql_from_hell . "
					   
						 and not exists(
							select strike.id from strike,entry as cc35
							where strike.judge = judge.id
							and strike.type = \"entry\"
							and strike.entry = cc35.id
							and cc35.event = ".$event->id."
						)

						and not exists(
							select strike.id from strike,entry as cc36
							where strike.judge = judge.id
							and strike.type = \"school\"
							and cc36.school = strike.school
							and cc36.event = ".$event->id."
						)
					";

					} else { 

						# If we're dealing instead with preset elims that have
						# an elim behind them, we only need check the kids
						# still alive in that

						if ($ncfl || $region_judge_forbid) { 

							# At NCFLs check against the region (diocese) of kids still alive

							$sql_from_hell = $sql_from_hell ."

							and judge.school NOT IN ( 
								select distinct school.id from entry,school,region,
								school as entrieschool,
								ballot as brp, panel as prp
								where entry.id = brp.entry
								and brp.panel = prp.id
								and prp.round = ".$last_entryful_round->id."
								and entrieschool.id = entry.school
								and entrieschool.region = region.id
								and school.region = region.id
							)";

						} else { 

						# Check the alive kids in a non NCFL tournament (By school, not region here)

							$sql_from_hell = $sql_from_hell ."

								and judge.school NOT IN (
									select distinct entry.school 
									from entry,ballot as brp,panel as prp
									where entry.id = brp.entry
									and brp.panel = prp.id
									and prp.round = ".$last_entryful_round->id."
								)";

						} # end of if circuit is diocese based

					} #End of if we're dealing with a preset round (eliminations)

				} else {

					# This is what we do if we're not dealing with a preset
					# round.  Then we just check the judge against the kids
					# actually in the round.

					if ($ncfl || $region_judge_forbid) { 

						# Do not allow a judge to judge anyone from their own
						# region in the NCFL (region == diocese)

						$sql_from_hell .= "

							and judge.school NOT IN (	 		
								select distinct school.id 
								from entry, ballot as bc,school, school as s1
								where bc.panel = $panel_id  		
								and bc.entry = entry.id
								and entry.school = s1.id
								and school.tourn = entry.tourn
								and s1.region = school.region
							)";

						# In NCFL Debate also exclude anyone from the same
						# diocese region

						if ($ncfl && $dio_regions) { 

							$sql_from_hell .= "

								and not exists (

									select dr_entry.id

									from school as dr_entry_school,
										region_setting as entry_dioregion,
										ballot as dr_ballot, entry as dr_entry

									where dr_ballot.panel = $panel_id
									and dr_ballot.entry = dr_entry.id
									and dr_entry.school = dr_entry_school.id
									and dr_entry_school.region = entry_dioregion.region
									and entry_dioregion.tag = \"region-$event\"
									and entry_dioregion.value = dioregion.value
								)
							";

						}


					} else {
					
						# Otherwise, do not allow a judge to judge anyone from
						# their own school

						$sql_from_hell = $sql_from_hell ."

							and judge.school NOT IN (	 		
								select distinct cc.school 
								from entry as cc,ballot as bc 		
								where bc.panel = $panel_id  		
								and bc.entry = cc.id )
						
						";

					} 

				} #end of if this isn't a preset round
			

			} #end of unless allowed to judge our own

		} 

		if ($reason eq "hire") {    #Make sure the judge isn't from the same school:

			#These are hired judges
			$sql_from_hell .= " and judge.school < 1 ";

			#No struck judges here too, please.
			if ($last_entryful_round && $last_entryful_round->type ne "prelim") {

				if (not defined $last_entryful_round || ($last_entryful_round && $last_entryful_round->type eq "prelim") &! $ncfl ) { 

					$sql_from_hell = $sql_from_hell . "
					   
						 and not exists(
							select strike.id from strike,entry as cc35
							where strike.judge = judge.id
							and strike.type = \"entry\"
							and strike.entry = cc35.id
							and cc35.event = ".$event->id."
						)

						and not exists(
							select strike.id from strike,entry as cc36
							where strike.judge = judge.id
							and strike.type = \"school\"
							and cc36.school = strike.school
							and cc36.event = ".$event->id."
						)
					";
				}
			}
		}

		if ($reason eq "neutral") {    

			# Neutral judges who can by permission judge their own school.

			$sql_from_hell .= "
			and exists ( 
				select judge_setting.id from judge_setting
				where judge_setting.judge = judge.id
				and judge_setting.tag = \"neutral\"
				and judge_setting.value = 1)
			";

			if ($last_entryful_round) { 

				# Check strikes against the whole event if this is a preset round
				# and the latest paneled round is a prelim. 

				if (not defined $last_entryful_round || ($last_entryful_round && $last_entryful_round->type eq "prelim")) {

					$sql_from_hell = $sql_from_hell . "
					   
						 and not exists(
							select strike.id from strike,entry as cc35
							where strike.judge = judge.id
							and strike.type = \"entry\"
							and strike.entry = cc35.id
							and cc35.event = ".$event->id."
						)

						and not exists(
							select strike.id from strike,entry as cc36
							where strike.judge = judge.id
							and strike.type = \"school\"
							and cc36.school = strike.school
							and cc36.event = ".$event->id."
						)

						and not exists(
							select strike.id from strike,entry as cc37, school as s37
							where strike.judge = judge.id
							and strike.type = \"region\"
							and s37.region = strike.region	
							and cc37.school = s37.id
							and cc37.event = ".$event->id."
						)
					";
				}
			}   
		}

		# ALLOWING OR DISALLOWING JUDGES TO JUDGE THE SAME EVENT TWICE.

		if ( $event->type eq "speech" && (not defined $group->setting("judge_event_twice") 
				|| ($m->comp("/funclib/round_entries.mas", round => $round) < 1 
				&& ($last_entryful_round && $last_entryful_round->type eq "prelim")))
			) { 

		# Do not allow judges to judge an event they've judged before if we're
		# not allowing that, or if this is a preset round and there are no
		# elims with kids assigned to them yet.  (so we have to assume anyone
		# can break)

		$sql_from_hell .= " 

			and not exists( 
				select btwice.id from 
				ballot as btwice, panel as ptwice, round as rtwice
				where btwice.panel = ptwice.id
				and rtwice.id = ptwice.round
				and rtwice.event = ".$event->id."
				and btwice.judge = judge.id)

			";

		} elsif ($event->type eq "speech") { 

			# Otherwise, just don't allow a judge to judge the same entry
			# twice.  First, if there are preset rounds in this event, the
			# judge cannot judge it if they are set to judge a preset round
			# later

			$sql_from_hell .= "
			and not exists(
				select bpreset.id from 
				ballot as bpreset,
				panel as ppreset,
				round as rpreset
				where bpreset.judge = judge.id
				and bpreset.entry is null
				and bpreset.panel = ppreset.id
				and ppreset.round = rpreset.id
				and rpreset.event = ".$event->id."
					and not exists (
						select distinct entry
						from entry
						where entry.id = bpreset.entry
					)
				)";


			# Next if this is a preset round, and there are other elims with
			# kids in them, then the judge cannot have judged any kids in that
			# previous elim

			if ($last_entryful_round) {

				$sql_from_hell .= "
				and not exists(
					select pbentry.id from entry as pbentry,
					panel as pbpanel,
					ballot as pbballot,
					ballot as pbballot2

					where pbentry.id = pbballot.entry
					and pbballot.panel = pbpanel.id
					and pbpanel.round = ".$last_entryful_round->id."

					and pbballot2.entry = pbentry.id
					and pbballot2.judge = judge.id
				)";
			}

			# Finally, if the round is not preset (and therefore has kids
			# assigned to it), we just check to see if the kids have been
			# judged by the judge.

			unless ($last_entryful_round) { 

				$sql_from_hell .= " 
				and not exists( 
					select bjc.id from ballot as bjc
					where bjc.judge = judge.id
					and bjc.entry in 
						(select bjc2.entry from ballot as bjc2
						where bjc2.panel = $panel_id )
				)";
			}

		} elsif ($event->setting("allow_repeat_judging")) { 

		} elsif ($event->setting("disallow_repeat_drop") && ($round->type eq "elim" || $round->type eq "final") ) { 

			$sql_from_hell .= "
				and not exists (
					select loss.id 
					from ballot as loss, ballot_value as loss_value
					where loss.judge = judge.id
					and loss_value.ballot = loss.id
					and loss_value.tag = \"ballot\"
					and loss_value.value != 1
					and loss.bye = 0
					and loss.noshow = 0
					and loss.entry in 
						(select loss2.entry from ballot as loss2
						where loss2.panel = $panel_id)
				)";

		} elsif ($event->setting("allow_repeat_elims") && ($round->type eq "elim" || $round->type eq "final")) { 

		} elsif ($event->setting("allow_repeat_prelim_side") && $round->type ne "elim" && $round->type ne "final") { 

			$sql_from_hell .= "
				and not exists (
					select ss_ballot.id 
					from ballot as ss_ballot, panel ss_panel, round ss_round
					where ss_ballot.judge = judge.id
					and ss_ballot.panel = ss_panel.id
					and ss_panel.round = ss_round.id 
					and ss_round.type != \"elim\"
					and ss_round.type != \"final\"
					and ss_ballot.entry in 
						(
							select ss_ballot2.entry 
							from ballot as ss_ballot2
							where ss_ballot2.panel = $panel_id
							and ss_ballot2.side = ss_ballot.side
						)
				)";

		} else { 

			# Don't let the judge see the same entry twice in prelims.  In
			# elims it's fair game.

			$sql_from_hell .= "
			and not exists(
				select bpreset.id from 
				ballot as bpreset,
				panel as ppreset,
				round as rpreset
				where bpreset.judge = judge.id
				and bpreset.entry is null
				and bpreset.panel = ppreset.id
				and ppreset.round = rpreset.id
				and rpreset.event = ".$event->id."
				and not exists (
					select distinct entry
					from entry
					where entry.id = bpreset.entry
				)
			)";

			# Next if this is a preset round, and there are other elims with
			# kids in them, then the judge cannot have judged any kids in that
			# previous elim

			if ($last_entryful_round) {

				$sql_from_hell .= "
				and not exists(
					select pbentry.id from entry as pbentry,
					panel as pbpanel,
					ballot as pbballot,
					ballot as pbballot2

					where pbentry.id = pbballot.entry
					and pbballot.panel = pbpanel.id
					and pbpanel.round = ".$last_entryful_round->id."

					and pbballot2.entry = pbentry.id
					and pbballot2.judge = judge.id
				)";
			}

			# Finally, if the round is not preset (and therefore has kids
			# assigned to it), we just check to see if the kids have been
			# judged by the judge.

			unless ($last_entryful_round) { 

				$sql_from_hell .= " 

				and not exists( 
					select bjc.id 
					from ballot as bjc, panel as pjc, round as rjc
					where bjc.judge = judge.id
					and bjc.panel = pjc.id
					and pjc.round = rjc.id
					and bjc.entry in 
						(select bjc2.entry from ballot as bjc2
						where bjc2.panel = $panel_id )
				)
				";
			}

		}   	# end of if judges can judge the same event twice. 

		# This either prevents judges from judging a round when the previous round
		# ended, or not, as the user defines

		if ($group->setting("no_back_to_back")) { 

			$sql_from_hell = $sql_from_hell. " 
				and not exists ( 		
					select bt.id from panel as pt,ballot as bt,timeslot as tt, round as rt
					where tt.start <= timeslot.end
					and tt.end >= timeslot.start
					and tt.id = rt.timeslot
					and rt.id = pt.round
					and pt.id = bt.panel
					and pt.flight = panel.flight
					and bt.judge = judge.id )
			";

		} elsif (not defined $stealable) { 

			$sql_from_hell .= "
				and not exists ( 		
					select bt.id from panel as pt,ballot as bt,timeslot as tt, round as rt
					where tt.start < timeslot.end
					and tt.end > timeslot.start
					and tt.id = rt.timeslot
					and rt.id = pt.round
					and pt.id = bt.panel
					and pt.flight = panel.flight
					and bt.judge = judge.id )
				and not exists ( 		
					select bt.id from panel as pt,ballot as bt
					where pt.round = panel.round
					and pt.flight = panel.flight
					and pt.id = bt.panel
					and bt.judge = judge.id )
				and not exists ( 		
					select bt.id from panel as pt,ballot as bt,timeslot as tt, round as rt
					where tt.start = timeslot.start
					and tt.end = timeslot.end
					and tt.id = rt.timeslot
					and rt.id = pt.round
					and pt.id = bt.panel
					and pt.flight = panel.flight
					and bt.judge = judge.id )
			";

		} elsif (1 == 1) { 

			$sql_from_hell .= "
				and not exists ( 		
					select thisbt.id 
					from ballot as thisbt
					where thisbt.panel = panel.id
					and thisbt.judge = judge.id
				)
			";

		}

		if ($reason eq "school") { 

			unless ($group->setting("allow_school_panels")) { 

				# Do not allow more than one judge from a given school on panel if
				# they're not hired judges

				$sql_from_hell .= " 
				and not exists( 
					select bj.id from ballot as bj,judge as j2 		
					where bj.panel = $panel_id 		
					and bj.judge = j2.id
					and j2.school = judge.school)
				";

				# If this is NCFL Nationals, similarly do not allow more than one
				# judge from a given diocese on the same panel

				if ($ncfl || $region_judge_forbid) { 

					$sql_from_hell .= " 
					and not exists( 
						select bjr.id from ballot as bjr,judge as j2,school as sr1, school as sr2
						where bjr.panel = $panel_id 		
						and bjr.judge = j2.id
						and j2.school = sr1.id
						and sr2.id = judge.school
						and sr2.region = sr1.region)
					";
				}

			}

			if ($ncfl) { 

				unless ($group->setting("allow_region_panels")) { 

					$sql_from_hell .= " 
					and not exists( 
						select ballot_dr.id 
						from ballot as ballot_dr,judge as judge_dr,school as school_dr1, school as school_dr2, 
							region_setting as dioregion1, region_setting as dioregion2
						where ballot_dr.panel = $panel_id 		
						and ballot_dr.judge = judge_dr.id
						and judge_dr.school = school_dr1.id
						and school_dr2.id = judge.school
						and school_dr2.region = dioregion2.region
						and dioregion2.tag = \"region-$event\"
						and school_dr1.region = dioregion1.region
						and dioregion1.tag = \"region-$event\"
						and dioregion1.value = dioregion2.value
					)";

				}
			}
		}

		if ($wudc) { 
			$sql_from_hell .= " order by tab_rating.value DESC, rand () ";
		} elsif ($group->setting("tab_ratings")) { 
			$sql_from_hell .= " order by tab_rating.value DESC, judge.score DESC"
		} else { 
			$sql_from_hell .= " order by judge.score DESC";
		}


		Tab::Judge->set_sql(clean_judges => $sql_from_hell);
		push (@clean_judges, Tab::Judge->search_clean_judges($panel->id));


	}

	#uniq the judges
    my %seen = ();
	@clean_judges = grep { ! $seen{$_->id} ++ } @clean_judges;

	foreach my $cj (@clean_judges) { 
		next unless $is_standby{$cj->id};
		$cj->standby(1);
	}

	@clean_judges = sort {$a->standby <=> $b->standby} @clean_judges;

	return sort {$b->score <=> $a->score} @clean_judges unless $group->setting("tab_ratings");
	return sort {$b->tab_rating <=> $a->tab_rating} @clean_judges if $group->setting("tab_ratings");

</%init>
