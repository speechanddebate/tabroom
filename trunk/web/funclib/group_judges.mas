<%args>
	$group
	$hires => undef
	$active => undef
</%args>
<%init>

	return unless $group;

	my $limits = " and judge.school = 0" if $hires;
	$limits .= " and judge.active = 1" if $active;

	my $prefs = $group->setting("prefs");

	Tab::debuglog("I am here are you are not");

	if ($prefs && $prefs ne "none" && $prefs ne "ordinals") { 

		Tab::Judge->set_sql( prefs_by_group => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg, tab_rating.value as tab_rating
			from judge
			left outer join rating on rating.judge = judge.id
			left outer join rating_tier on rating_tier.id = rating.rating_tier
			left outer join judge_setting tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			where judge.judge_group = ?
			$limits
			group by judge.id
			order by judge.code, judge.last");

		return Tab::Judge->search_prefs_by_group($group->id);

	} elsif ($prefs eq "ordinals") { 

		Tab::Judge->set_sql( ordinals_by_group => "
			select distinct judge.*, group_concat(distinct rating.id, rating.percentile) as avg, tab_rating.value as tab_rating
			from judge
			left outer join rating on rating.judge = judge.id
			left outer join judge_setting tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			where judge.judge_group = ?
			$limits
			group by judge.id
			order by judge.code, judge.last");

		return Tab::Judge->search_ordinals_by_group($group->id);

	} else { 

		Tab::Judge->set_sql( by_group => "
			select distinct judge.*, tab_rating.value as tab_rating
			from judge
			left outer join judge_setting tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			where judge.judge_group = ?
			$limits
			order by judge.code, judge.last");

		return Tab::Judge->search_by_group($group->id);

	}

</%init>
