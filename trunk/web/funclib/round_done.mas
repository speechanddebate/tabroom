<%args>
	$round
</%args>
<%init>

	#this is driving me UP THE GODDAMNED WALL.

	my @ranks = Tab::BallotValue->search( tag => "", tiebreak => 1);
	my @ballots = Tab::BallotValue->search( tag => "", tiebreak => 2);
	my @points = Tab::BallotValue->search( tag => "", tiebreak => 3);
	my @rfds = Tab::BallotValue->search( tag => "", tiebreak => 4);
	my @comments = Tab::BallotValue->search( tag => "", tiebreak => 5);

	my $return;

	foreach my $rank (@ranks) { 
		$rank->tag("rank");
		eval{ $rank->update; };

		my $id = $rank->id;
		undef $rank;
		$rank = Tab::BallotValue->retrieve($id);
		$rank->delete if $rank->tag eq "";
	}

	foreach my $ballot (@ballots) { 
		$ballot->tag("ballot");
		eval{ $ballot->update; };

		my $id = $ballot->id;
		undef $ballot;
		$ballot = Tab::BallotValue->retrieve($id);
		$ballot->delete if $ballot->tag eq "";
	}

	foreach my $point (@points) { 
		$point->tag("points");
		eval{ $point->update; };

		my $id = $point->id;
		undef $point;
		$point = Tab::BallotValue->retrieve($id);
		$point->delete if $point->tag eq "";
	}

	foreach my $rfd (@rfds) { 
		$rfd->tag("rfd");
		eval{ $rfd->update; };

		my $id = $rfd->id;
		undef $rfd;
		$rfd = Tab::BallotValue->retrieve($id);
		$rfd->delete if $rfd->tag eq "";
	}

	foreach my $comment (@comments) { 
		$comment->tag("comment");
		eval{ $comment->update; };

		my $id = $comment->id;
		undef $comment;
		$comment = Tab::BallotValue->retrieve($id);
		$comment->delete if $comment->tag eq "";
	}

	my @left = $m->comp("/funclib/round_judges.mas", round => $round, not_in => "1");
	my $judges_left = scalar @left;

	my $event = $round->event;

	#First ballot in notification
	my $first_notified = $event->setting("first_round_notified");

	if ($first_notified < $round->name) { 

		my $follower_ids = $event->setting("followers");
		my $subject = $event->name;
		my $body = "\n\n".$round->realname." of ".$event->name." first ballot entered.  $judges_left  left.\n";

		foreach my $id (split(/,/, $follower_ids)) {

			next unless $id;

			my $person = Tab::Account->retrieve($id);
			my $to;

			if ($person->phone && $person->provider) { 
				$to = $person->phone.'@'.$person->provider;
			} else { 
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas", 
				from    => 'Tab Central <live@tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body
			);
		}

		$event->setting("first_round_notified", $round->name);

	}

	return if $judges_left > 0;

	# Last ballot in notification

	my $notified = $event->setting("round_notified");

	if ($notified < $round->name) { 

		my $follower_ids = $event->setting("followers");
		my $subject = $event->name;
		my $body = "\n\n".$round->realname." of ".$event->name." last ballot entered.\n";

		foreach my $id (split(/,/, $follower_ids)) {

			next unless $id;

			my $person = Tab::Account->retrieve($id);
			my $to;

			if ($person->phone && $person->provider) { 
				$to = $person->phone.'@'.$person->provider;
			} else { 
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas", 
				from    => 'Tab Central <live@tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body
			);
		}

		$event->setting("round_notified", $round->name);

	}


</%init>
