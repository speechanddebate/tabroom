<%args>
	$round_id
</%args>
<%perl>

	# returns a hash with 6 fields; 
	# $judge_hash{$judge.id}{'oblig'} -- prelim rounds obligated to hear
	# $judge_hash{$judge.id}{'judged_already'} -- rounds judged so far
	# $judge_hash{$judge.id}{'will_judge'} -- rounds scheduled to judge after this one
	# $judge_hash{$judge.id}{'future_possible'} -- rounds available for this event in future rounds
	# $judge_hash{$judge.id}{'lost'} -- rounds lost, including current round
	# $judge_hash{$judge.id}{'lost_current'} -- boolean; did you lose a round from the judge in THIS round	
	# $judge_hash{$judge.id}{'avail_current'} -- boolean; is judge avail this round
	# $judge_hash{$judge.id}{'in_round'} -- assigned to judge in the current round
	# $judge_hash{$judge.id}{'left'} -- obligated-judged_already-will_judge

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $judge_group = $event->judge_group;

	my %judge_hash;

	my $dbh = Tab::DBI->db_Main();

	my $j_sth = $dbh->prepare("
		select judge.id, judge.obligation, judge.hired
		from judge
		where judge_group = ".$judge_group->id."
		order by judge.id");

	$j_sth->execute();

	while (my ($judge, $obligation, $hired)  = $j_sth->fetchrow_array() ) {
		$judge_hash{$judge}{"oblig"} = $obligation + $hired;
		$judge_hash{$judge}{"avail_current"} = 1;
	}

	my $sth = $dbh->prepare("
		select judge.id, round.id, round.name, panel.flight, round.type
		from ballot, panel, round, judge, event
		where event.judge_group = ".$event->judge_group->id."
		and round.event = event.id
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
	");

	my $current_name = $round->name;

	$sth->execute();
	my %used;

	while (my ($judge, $round, $roundname, $flight, $type)  = $sth->fetchrow_array() ) {
		next if $used{$judge."-".$round}++;
		$judge_hash{$judge}{"judged_all"}++ if $roundname < $current_name;
		next if $type eq "elim" || $type eq "final";
		$judge_hash{$judge}{"judged_already"}++ if $roundname <= $current_name;
		$judge_hash{$judge}{"will_judge"}++ if $roundname > $current_name;
		$judge_hash{$judge}{"in_round"}++ if $roundname == $current_name;
	}

	my $future_count;
	my @future;

	foreach my $round ($event->rounds) { 

		next if $round->type eq "elim";
		next if $round->type eq "final";
	
		next unless $round->name > $current_name;

		$future_count++;
		push @future, $round;
	}

	foreach my $judge (keys %judge_hash) { 
		$judge_hash{$judge}{"future_possible"} = $future_count;
	}

	#future round availability
	
	foreach my $round (@future) { 

		my $event_strikes_sth = $dbh->prepare("
			select distinct strike.id, strike.judge
			from strike, judge
			where judge.judge_group = ".$judge_group->id."
			and strike.judge = judge.id
			and strike.event = ".$event->id."
			order by judge.id
		");

		my $future_strikes_sth = $dbh->prepare("
			select distinct strike.id, strike.judge
			from strike, judge, timeslot
			where judge.judge_group = ".$judge_group->id."
			and timeslot.id = ".$round->timeslot->id."
			and strike.judge = judge.id
			and strike.start <= timeslot.end
			and strike.end >= timeslot.start
		");

		$future_strikes_sth->execute();

		while (my ($strike, $judge)  = $future_strikes_sth->fetchrow_array() ) {
			$judge_hash{$judge}{'future_possible'}--;
		}

		$event_strikes_sth->execute();

		while (my ($strike, $judge)  = $event_strikes_sth->fetchrow_array() ) {
			undef $judge_hash{$judge}{'future_possible'};
			$judge_hash{$judge}{"avail_current"} = 0;
		}
	
	}

	#current round availability

	my $current_strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge
		from strike, judge, timeslot
		where judge.judge_group = ".$judge_group->id."
		and timeslot.id = ".$round->timeslot->id."
		and strike.judge = judge.id
		and strike.start <= timeslot.end
		and strike.end >= timeslot.start
	");

	$current_strikes_sth->execute();

	while (my ($strike, $judge)  = $current_strikes_sth->fetchrow_array() ) {
		$judge_hash{$judge}{"avail_current"} = 0;
	}

	
	#calculate rounds lost
	
	foreach my $key (keys %judge_hash) {

#		Tab::debuglog("Judge $key oblig is $judge_hash{$key}{'oblig'} already is $judge_hash{$key}{'judged_already'} future is $judge_hash{$key}{'future_possible'}");

		$judge_hash{$key}{'lost'} = $judge_hash{$key}{'oblig'} - $judge_hash{$key}{'judged_already'} - $judge_hash{$key}{'future_possible'};
		$judge_hash{$key}{'left'} = $judge_hash{$key}{'oblig'} - $judge_hash{$key}{'judged_already'} - $judge_hash{$key}{'will_judge'};
		if ($judge_hash{$key}{'in_round'} == 0 and $judge_hash{$key}{'avail_current'} == 1 and $judge_hash{$key}{'left'} >= $future_count) { $judge_hash{$key}{'lost_current'} = 1; }
		$judge_hash{$key}{'left'} = 0 if $judge_hash{$key}{'left'} < 0;
		$judge_hash{$key}{'left'} = $judge_hash{$key}{'future_possible'} if $judge_hash{$key}{'left'} > $judge_hash{$key}{'future_possible'};
		$judge_hash{$key}{'left'} = 0 unless $judge_hash{$key}{'left'};
		$judge_hash{$key}{'lost'} = 0 if $judge_hash{$key}{'lost'} < 0;
	}

	return \%judge_hash;

</%perl>
