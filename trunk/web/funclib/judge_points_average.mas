<%args>
	$event
	$round => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main(); 

	my $round_limit = " and round.name <= ".$round->name if $round;
	
	my $sth = $dbh->prepare('
		select distinct ballot.judge, 
				round(avg(ballot_value.value),6) as avg, 
				round(stddev_samp(ballot_value.value), 6) as stddev_samp, 
				count(ballot_value.value) as count, 
				sum(ballot_value.value) as total
			from ballot, ballot_value, panel, round, event
			where ballot.id = ballot_value.ballot
			and ballot_value.tag = "points"
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and event.judge_group = '.$event->judge_group->id.'
			and ballot_value.value > 2
			group by ballot.judge
	');

	$sth->execute();

	my %judge_averages = ();
	my %judge_stddevs = ();
	my %judge_ballots = ();
	my %judge_total = ();


	while( my ($judge_id, $avg, $stddev, $count, $total) = $sth->fetchrow_array() ) {
		$judge_averages{$judge_id} = $avg;
		$judge_stddevs{$judge_id} = $stddev;
		$judge_ballots{$judge_id} = $count;
		$judge_total{$judge_id} = $total;
	}

	my $total_sth = $dbh->prepare('
		select distinct event.judge_group, round(avg(ballot_value.value),6) as avg, round(stddev_samp(ballot_value.value),6) as stddev, count(ballot_value.value) as count, sum(ballot_value.value) as total
			from ballot_value, ballot, panel, round, event
			where event.judge_group = '.$event->judge_group->id.'
			and event.id = round.event
			and round.type != "elim"
			and round.type != "final"
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot_value.ballot = ballot.id
			and ballot_value.tag = "points"
			and ballot_value.value > 2
	');

	$total_sth->execute();

	my ($group_id, $total_avg, $total_std, $total_count, $total_points) = $total_sth->fetchrow_array();
	
	my $judge_sth = $dbh->prepare('
		select distinct jballot.judge, 
				round(avg(ballot_value.value),6) as avg, 
				round(stddev_samp(ballot_value.value),6) as stddev, 
				count(ballot_value.value) as count, 
				sum(ballot_value.value) as total
			from ballot_value, ballot, panel, round, event, ballot jballot, judge

			where event.judge_group = '.$event->judge_group->id.'
            and event.id = round.event
            and round.id = panel.round
            and round.type != "elim"
            and round.type != "final"
			'.$round_limit.'

            and panel.id = jballot.panel
            and jballot.judge = judge.id
            and ballot.entry = jballot.entry
            and ballot_value.ballot = ballot.id
            and ballot_value.tag = "points"
            and ballot_value.value > 2 
            group by jballot.judge
	');

	$judge_sth->execute();

	my %judge_z2_averages = ();
	my %judge_z2_stddevs = ();
	my %judge_z2_ballots = ();
	my %judge_z2_total = ();

	while( my ($judge_id, $avg, $stddev, $count, $total) = $judge_sth->fetchrow_array() ) {
		$judge_z2_averages{$judge_id} = $avg;
		$judge_z2_stddevs{$judge_id} = $stddev;
		$judge_z2_ballots{$judge_id} = $count;
		$judge_z2_total{$judge_id} = $total;
	}

	return \%judge_averages, \%judge_ballots, \%judge_total, \%judge_stddevs, $total_avg, $total_std, \%judge_z2_averages, \%judge_z2_ballots, \%judge_z2_total, \%judge_z2_stddevs;

</%init>
