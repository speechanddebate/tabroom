<%args>
	$school
	$group
	$debug => 0
</%args>
<%init>


	use POSIX;

	# Find out how many judges we're obligated for. 
    my $judge_burden = $m->comp("/funclib/judgemath/judges_needed_by_group.mas", group => $group, school => $school);

    my @useful_judges = $m->comp("/funclib/judgemath/judges_by_group.mas", group => $group, school => $school);

	my $uncovered = $m->comp("/funclib/judgemath/uncovered_burden_by_group.mas", group => $group, school => $school);

	$uncovered = ceil($uncovered / $group->setting("judge_per")) if $group->setting("judge_per") > 0;

	Tab::debuglog("There are $uncovered missing judges") if $debug;

	my ($requested, $accepted) = $m->comp("/funclib/school_hires.mas", school => $school, group => $group);

	$accepted = ceil($accepted / $group->setting("judge_per")) if $group->setting("judge_per") > 0;

	my $totals = scalar @useful_judges;
	$totals += $accepted;

	Tab::debuglog("$judge_burden burden") if $debug;
	Tab::debuglog("$totals useful judges including hires") if $debug;

	# Excess establishes how many judges over obligation we are, so if someone has 
	# covered all their judging with extra judges, it won't penalize them 

	my $excess = $totals - $judge_burden; 

	my %stimes_under = ();

	foreach my $stime (Tab::StrikeTime->search(judge_group => $group->id) ) {

		my @struck_judges = $m->comp("/funclib/judge_strike_time.mas", school => $school, group => $group, strike_time => $stime );

		my $stime_strikes = scalar @struck_judges; 
		next unless $stime_strikes;

		Tab::debuglog("There are $stime_strikes struck judges for ".$stime->name." in ".$group->name) if $debug;

		if ($stime_strikes > ($excess + $uncovered) ) { 
			$stimes_under{$stime->id} = $stime_strikes - $excess - $uncovered; 
		
			Tab::debuglog("I am now ".$stimes_under{$stime->id}." short in this time block");
		}
		

	} #end of foreach stime

	return %stimes_under;

</%init>
