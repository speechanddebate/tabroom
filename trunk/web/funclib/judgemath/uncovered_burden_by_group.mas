<%args>
	$school
	$group
	$debug => 0
</%args>
<%perl>

	use POSIX;

	my $no_free = $group->setting("free_strikes_dont_count");

	if ($group->setting("rounds_per")) { 

		# Function to tell whether a school has met its judging obligation in a
		# given judge group.  Returns the number of rounds owed
	
		Tab::debuglog("Calculating for ".$group->abbr."  No free is $no_free") if $debug;
	
    	my @judges = $m->comp("judges_by_group.mas", group => $group, school => $school);

		my @requests = Tab::JudgeHire->search( school => $school->id, judge_group => $group->id );

		my $rounds;
		foreach my $judge (@judges) { 
			$rounds += $judge->obligation unless ($no_free && $judge->setting('free_strike')); 
		}

		Tab::debuglog("I found ".scalar @requests." requests and ".scalar @judges." judges ") if $debug;

		my $rounds_to_cover = $m->comp("judges_needed_by_group.mas", group => $group, school => $school); 

		Tab::debuglog(" There are ".$rounds_to_cover." rounds to cover ") if $debug;

		$rounds_to_cover -= $rounds;

		Tab::debuglog(" There are ".$rounds_to_cover." rounds left to cover after judging is applied") if $debug;

		foreach my $request (@requests) { 
			$rounds_to_cover -= $request->rounds_accepted;
		}

		Tab::debuglog(" There are ".$rounds_to_cover." rounds left to cover after hireds are applied") if $debug;
	
		my $overage; 

		if ($rounds_to_cover < 0) {
			$overage = abs($rounds_to_cover);
			$rounds_to_cover = 0;
		}
	
		return $rounds_to_cover, $overage;

	} else { 

		Tab::debuglog("Calculating for ".$group->abbr) if $debug;
	
    	my @judges = $m->comp("judges_by_group.mas", group => $group, school => $school);
		my @requests = Tab::JudgeHire->search( school => $school->id, judge_group => $group->id );

		Tab::debuglog("I found ".scalar @requests." requests and ".scalar @judges." judges ") if $debug;

		my $slots_to_cover = $m->comp("slots_needed_by_group.mas", group => $group, school => $school); 

		Tab::debuglog(" There are ".$slots_to_cover." slots to cover ") if $debug;

		my $count;
			
		if ($no_free) { 
			foreach my $judge (@judges) { 
				$count++ unless $judge->setting('free_strike'); 
			}
		} else {
			$count = scalar @judges;
		}

		$slots_to_cover -= $count * $group->setting("judge_per");

		Tab::debuglog(" There are ".$slots_to_cover." slots left to cover after judging is applied") if $debug;

		foreach my $request (@requests) { 
			$slots_to_cover -= $request->accepted;
		}

		Tab::debuglog(" There are ".$slots_to_cover." slots left to cover after hireds are applied") if $debug;

		my $overage; 

		if ($slots_to_cover < 0) {
			$overage = $slots_to_cover * -1;
			$slots_to_cover = 0;
		}

		$overage = 0 if $overage < $group->setting("judge_per") && $group->setting("hired_fee");

		return $slots_to_cover, $overage;

	}

	return 0;

</%perl>
