<%args>
	$round_id
</%args>
<%perl>

	# returns 3 basic global hash/arrays; this allows the functions to access
	# the information they need @entries is a global array of all entries in
	# the event; %entries is a hash with record and SOP information in it
	# %precluded stores which teams can't hit each other; 
	
	use POSIX;
	use List::Util 'shuffle';
	use Time::HiRes qw( time );

	my $debug=0;
	print "<strong>In make_pairing_hash.mas<br></strong>" if $debug;
			
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $side_locked; 
	my $side_lock_against = $round->setting('sidelock_against');

    if ($side_lock_against) { 
        if ($side_lock_against ne "NONE") { 
            $side_locked++;
        }
    } else { 
        $side_locked++ unless ($round->name % 2);  
        undef $side_locked if $event->setting("no_side_constraints");
    }    

	#use this round to seed
	my $round_for_seeding;
	my $round_for_sides; 

	my $seeding_round_name = $round->name - 1;
	while ( (not defined $round_for_seeding) && $seeding_round_name > 0) { 
		$round_for_seeding = Tab::Round->search( name => $seeding_round_name, event => $round->event )->first;
		$seeding_round_name--;
	}

	if ($side_lock_against) { 
		$round_for_sides = Tab::Round->retrieve($side_lock_against);
	} else { 
		$round_for_sides = $round_for_seeding;
	}

	# print "This round ID:".$round->id." this round
	# name:".$round->name."<br>"; print "round for seeding
	# id:".$round_dummy[0]->id." round for seeding
	# name:".$round_dummy[0]->name."<br>";

	my $panel = 0; 
	my $team1; 
	my $team2; 
	my $pullup1; 
	my $pullup2;
	my $side;

	my $start = time(); 
	my $end = time();

	Tab::Entry->set_sql( pairing_entries => "
		select entry.* from entry 
		where waitlist = 0
		and dropped = 0
		and dq = 0
		and event = ? 
		order by code ");

	my @entries = Tab::Entry->search_pairing_entries($event->id);

	my $ncfl++ if $event->tourn->setting("ncfl");
	my %school_region;

	my $school_debates_self++ if $event->setting("school_debates_self");
	my $bracket_by_ballots++ if $event->setting("bracket_by_ballots");

	if ($ncfl) { 
		my @schools = $m->comp("/funclib/event_schools.mas", event => $event);
		%school_region = map {$_->id => $_->region->id} @schools;
	}

	# create a hash that stores a boolean value indicating whether teams can
	# debate each other, marked false for same school, hit before, etc.
	my %precluded; 

	# CREATE A 2-DIMENSIONAL HASH WITH ALL THE STUFF YOU NEED TO PAIR
	
	#STEP ONE: create hash and put in entry info
	my %entries;
	undef %entries;

	foreach my $entry (@entries) {

		$entries{$entry->id}{'code'} = $entry->code;
		$entries{$entry->id}{'school'} = $entry->school;
		$entries{$entry->id}{'school'} = $school_region{$entry->school} if $ncfl;

		if ($school_debates_self) { 
			$entries{$entry->id}{'school'} = $entry->id;
		}

		$entries{$entry->id}{'placement'} = $entry->setting("placement");
		$entries{$entry->id}{'placement'} = 0 unless $entries{$entry->id}{'placement'};
		$entries{$entry->id}{'seed'} = $entry->setting("pairing_seed");
	}

	#only process if there are results
	if ( $round_for_seeding ) {	

		# STEP TWO: now load the number of wins

		my %winloss = $m->comp("/funclib/entry_wins.mas", event => $event, round => $round_for_seeding, first_tb => $bracket_by_ballots);

		foreach my $key ( sort { $entries{$a} <=> $entries{$b} } keys %entries ) {
			$entries{$key}{'wins'} = $winloss{$key}; 
			$entries{$key}{'wins'} = 0 if not defined $winloss{$key}; 
		}

		# Load the number of opp wins and the first tiebreaker for non-SOP pairing; should use seed-nowins for pairing, but next_tb is useful

		my ($points_entries_ref, $points_tbs_ref, $desc_ref, @junk) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding);

		my @tb_keys = keys %{$desc_ref};
		my $second_key = $tb_keys[1] if @tb_keys;

		foreach my $key (sort {$a <=> $b} keys %{$points_entries_ref}) { 
			foreach my $entry_id (@{${$points_entries_ref}{$key}}) { 
				$entries{$entry_id}{'next_tb'} = ${$points_tbs_ref}{$entry_id."-".$second_key};
			}
		}
	
		my ($oppwins_entries_ref, $oppwins_tbs_ref, $oppwins_desc_ref, @junque) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding, opp_wins_only => "yep");

		my @oppwins_tb_keys = keys %{$oppwins_desc_ref};
		my $oppwins_key = $tb_keys[1] if @oppwins_tb_keys;

		foreach my $key (sort {$a <=> $b} keys %{$points_entries_ref}) { 
			foreach my $entry_id (@{${$oppwins_entries_ref}{$key}}) { 
				$entries{$entry_id}{'opp_wins'} = ${$oppwins_tbs_ref}{$entry_id."-".$oppwins_key};
			}
		}

		#STEP THREE: assign the seeds

		if ($round->type ne "prelim") {

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding);

			my $counter;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 
				$counter++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 
					$entries{$entry_id}{'seed'} = $counter;
				}
			}
		}	

		#STEP 3.5: assign the seeds without wins. next_tb will display the next tiebreaker but won't fully re-seed

		if ($round->type ne "prelim") {

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding, skip_wins => 42);

			my $counter;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 
				$counter++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 
					$entries{$entry_id}{'seed_nowins'}=$counter;
				}
			}
		}	

		if ($debug) {
			$end = time();
			print "First 3.5 steps done:  "; printf("%.2f\n", $end - $start); print "<br>";
		}			

		#STEP FOUR: calculate oppseeds.  Also marks debated before preclusions and pullups

		# NOTE:  The code that was here was causing a number of bugs due to the
		# post-loop approach.  The entry getting counted for the bye was the
		# entry before the bye happened, not the actual bye, so their total
		# seed was increasing but the count of opponents wasn't, screwing
		# people over at random.  and the last ballot was being dumped without
		# a result recording.  
		
		# The below is my rewrite, which should also be faster since it does
		# not use the Class::DBI layer which slows things down.  -- CLP

		my $dbh = Tab::DBI->db_Main();

		my $ballots_sth = $dbh->prepare("
			select ballot.id, ballot.entry, ballot.panel, ballot.side, ballot.pullup, ballot.bye, panel.bye as panel_bye, opponent.entry, opponent.pullup, round.id
			from round
			left outer join panel on panel.round = round.id
			left outer join ballot on ballot.panel = panel.id
			left outer join ballot opponent on opponent.panel = ballot.panel and opponent.entry != ballot.entry
			where round.name < ".$round->name."
			and round.event = ".$event->id."
			order by round.name, ballot.panel
		");

		$ballots_sth->execute();

		while (my ($ballot, $entry, $panel, $side, $pullup, $bye, $panel_bye, $opponent, $pulldown, $round)  = $ballots_sth->fetchrow_array() ) {

			next unless $entry;

			if ($bye || $panel_bye || not defined $opponent) { 

				$precluded{$entry}{-1} = 1 if $bye; 			#Precludes them from the bye again
				$precluded{$entry}{-1} = 1 if $panel_bye;

			} elsif ($opponent) { 

				# mark as ineligible to hit b/c they debated before
				$precluded{$entry}{$opponent} = 1; 

				# count how many affs for some reason.  Does this ever get consulted again?
				$entries{$entry}{'n_aff'}++ if $side == 1;

				$entries{$entry}{'n_opp'}++;
				$entries{$entry}{'tot_opp_seed'} += $entries{$opponent}{'seed'};

				# You've been pulled up
				$entries{$entry}{'pullup'} += $pullup;
				$entries{$entry}{'pulled_up'} += $pullup;

				# You've been pulled down, you lucky duck.  Not for long...
				$entries{$entry}{'pullup'} -= $pulldown; 		
				$entries{$entry}{'got_pullup'} += $pulldown;

			}

			# Record side due if this is the last round before the present one
			# and we're in a sidelocked situation

			if ($round == $round_for_sides) { 
				if ($side_locked) { 
					$entries{$entry}{'sidedue'} = ($side % 2) + 1; # 2 becomes 1, 1 becomes 2.
				} else { 
					$entries{$entry}{'sidedue'} = 0;
				}
			}

		};

		# if there's some data detritus for teams paired against dropped
		# opponents it adds them to the %entries hash so this thing cleans it up
	
		foreach my $key ( keys %entries ) {
			if (not $entries{$key}{'code'} ) { 
				delete $entries{$key}; 
			}
		}
	
		foreach my $key ( keys %entries ) {
			if ( $entries{$key}{'n_opp'} > 0 ) {
				$entries{$key}{'oppseed'} = $entries{$key}{'tot_opp_seed'} / $entries{$key}{'n_opp'} ;
				$entries{$key}{'SOP'} = $entries{$key}{'oppseed'} + $entries{$key}{'seed'} ;
			}
			if ( $entries{$key}{'n_opp'} == 0 ) {
#				print "Entry with no opponents: ".$entries{$key}{'code'}." ".$entries{$key}{'tot_opp_seed'}." ".$entries{$key}{'n_opp'}."<br>";
			}
		}
	}
	
	if ($debug) {
		$end = time();
		print "Finished fourth step/SOP and pullups:  "; printf("%.2f\n", $end - $start); print "<br>";
	}			

	
	# CREATE HASH THAT KNOWS WHO CAN DEBATE WHO; hit before constraint added
	# above; hash declared at the very top, so we only need school conflicts

	unless ($school_debates_self) {

		#pull hybrid school conflicts
		my @strikes = Tab::Strike->search( tourn => $round->event->tourn, type => 'hybrid' );	

		my %school_entries;

		foreach my $entry (@entries) { 
			push @{$school_entries{$entry->school->id}}, $entry->id;
		}

		foreach my $strike (@strikes) { 
			push @{$school_entries{$strike->school->id}}, $strike->entry->id if $strike->entry && $strike->school;
		}

		foreach my $school (keys %school_entries) { 
			foreach my $entry (@{$school_entries{$school}}) { 
				foreach my $teammate (@{$school_entries{$school}}) { 
					$precluded{$entry}{$teammate} = 1;
				}
			}
		}
	}

	if ($debug) {
		$end = time();
		print "Finished school conflicts:  "; printf("%.2f\n", $end - $start); print "<br>";
	}			

	# LOAD CURRENT PAIRINGS AND STORE THEM IN THE HASH

	Tab::Ballot->columns(TEMP => qw/bye/);

	Tab::Ballot->set_sql(current_ballots => "
		select ballot.id, ballot.entry, ballot.panel, ballot.side, panel.bye as bye
		from ballot, panel, round
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.id = $round_id
		order by round.name, panel.id
	");
	
	my @pairings_current = Tab::Ballot->search_current_ballots;

	my $bye;

	my %panel_entries;
	my %entry_panel;
	my @current_entries;
	
	foreach my $pairing (@pairings_current) {

		next unless $pairing->entry && $pairing->entry->id;

		my $me = $pairing->entry->id;

		push @current_entries, $me;
		$entry_panel{$me} = $pairing->panel->id;

		push @{$panel_entries{$pairing->panel->id}}, $me;

		$entries{$me}{'side'} = $pairing->side;
		$entries{$me}{'opponent'}= -1 if $pairing->bye; 
		$entries{$me}{'panel'}= $pairing->panel->id; 
	}

	foreach my $me (@current_entries) {
		foreach my $other (@{$panel_entries{$entry_panel{$me}}}) { 
			next if $me == $other;
			$entries{$me}{'opponent'}= $other;
		}
	}

	if ($debug) {
		$end = time();
		print "finished final loop and <STRONG>make_pairing_hash DONE</STRONG>:  "; printf("%.2f\n", $end - $start); print "<br>";
	}			

	return \%entries, \%precluded ;

</%perl>
