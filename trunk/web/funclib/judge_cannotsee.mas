<%args>
    $group
	$round => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my %judge_constraint;

	unless ($round && $round->event->setting("allow_judge_own")) { 

		my $same_school_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, entry
			where judge.school = entry.school
			and judge.judge_group = ".$group->id."
		");

		$same_school_sth->execute;

		while (my ($judge, $entry) = $same_school_sth->fetchrow_array() ) { 
			$judge_constraint{$judge."-".$entry}++;
		}

		my $hybrid_same_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, strike, entry
			where judge.judge_group = ".$group->id."
			and judge.school = strike.school
			and strike.type = \"hybrid\"
			and strike.school = entry.school
		");

		$hybrid_same_sth->execute;

		while (my ($judge, $entry) = $hybrid_same_sth->fetchrow_array() ) { 
			$judge_constraint{$judge."-".$entry}++;
		}

	}

	my $hybrid_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike hybrid, strike schoolstrike, entry
		where judge.judge_group = ".$group->id."
		and hybrid.type = \"hybrid\"
		and hybrid.school = entry.school
		and hybrid.school = schoolstrike.school
		and schoolstrike.judge = judge.id
	");

	$hybrid_strike_sth->execute;

	while (my ($judge, $entry) = $hybrid_strike_sth->fetchrow_array() ) { 
		$judge_constraint{$judge."-".$entry}++;
	}

	my $round_limit = "and panel.round != ".$round->id if $round;

	unless ($round && $round->event->setting("allow_repeat_judging")) { 

		if ($round && $round->event->setting("allow_repeat_prelim_side")) { 

			my $judged_sth = $dbh->prepare("
				select judge.id, ballot.entry, ballot.side
				from judge, ballot, panel, round
				where ballot.judge = judge.id
				and judge.judge_group = ".$group->id."
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.type != \"elim\"
				and round.type != \"final\"
				".$round_limit."
			");

			$judged_sth->execute;

			while (my ($judge, $entry, $side) = $judged_sth->fetchrow_array() ) { 
				$judge_constraint{$judge."-".$entry."_".$side}++;
			}

		} elsif ( $round->event->setting("allow_repeat_elims") && ($round->type eq "elim" || $round->type eq "final")) { 

		
		} else { 	

			my $judged_sth = $dbh->prepare("
				select judge.id, ballot.entry
				from judge, ballot, panel, round
				where ballot.judge = judge.id
				and judge.judge_group = ".$group->id."
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.type != \"elim\"
				and round.type != \"final\"
				".$round_limit."
			");

			$judged_sth->execute;

			while (my ($judge, $entry) = $judged_sth->fetchrow_array() ) { 
				$judge_constraint{$judge."-".$entry}++;
			}

		}

	}

	my $school_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry
		where judge.id = strike.judge
		and judge.judge_group = ".$group->id."
		and strike.type = \"school\"
		and strike.school = entry.school
	");

	$school_strike_sth->execute;

	while (my ($judge, $entry) = $school_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge."-".$entry}++;
	}

	my $conflict_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry
		where judge.id = strike.judge
		and judge.judge_group = ".$group->id."
		and strike.type = \"conflict\"
		and strike.school = entry.school
	");

	$conflict_strike_sth->execute;

	while (my ($judge, $entry) = $conflict_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge."-".$entry}++;
	}

	my $entry_strike_sth = $dbh->prepare("
		select judge.id, strike.entry
		from judge, strike
		where judge.judge_group = ".$group->id."
		and judge.id = strike.judge
	");

	$entry_strike_sth->execute;

	while (my ($judge, $entry) = $entry_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge."-".$entry}++;
	}

	return %judge_constraint;

</%init>

