<%args>
	$event
	$round    => undef
	$last     => undef
	$public   => undef
	$elimstoo => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main(); 

	my $round_limit = " and round.name <= ".$round->name." " if $round && $round->name;
	$round_limit .= " and round.post_results > 0 " if $public;
	my $bye_limit .= " and panel.bye = 0" if $round && $round->type ne "elim" && $round->type ne "final";

	my $lastq = 'and round.type != "elim" and round.type != "final" ';
	$lastq = " and round.name = ".$round->name if $last;

	undef $lastq if $elimstoo == 42;

	# Do not do the below.  It breaks elim round advancement by removing the
	# limit on counting ballots from only the last elim round, which is what
	# the $last flag asks for -- Palmer

	# unless ($elimstoo == 42) {
	#	$lastq = 'and round.type != "elim" and round.type != "final" ';
	# } else {
	#	$lastq='';
	# }
	
	my %entry_wins = ();
	my %entry_byes = ();

	if ($round && $round->event) { 
		foreach my $entry ($round->event->entries) { 
			$entry_wins{$entry->id} = 0;
		}
	}

	my $sth = $dbh->prepare('
	    select entry.id, count(distinct panel.id) as wins
        from round, panel, entry, ballot exist
        where entry.event = '.$event->id.'
        and entry.id = exist.entry
        and panel.id = exist.panel
		and panel.round = round.id
		and not exists ( select setting.id from setting where setting.type = "round" and setting.tag = "ignore_results" and setting.round = round.id )
		and not exists ( select setting.id from setting where setting.type = "round" and setting.tag = "ignore_results" and setting.round = round.id )
		'.$round_limit .'
		'.$bye_limit .'
		'.$lastq.'

        and (select count(distinct winner.id) as winner
            from ballot as winner, ballot_value
            where winner.entry = entry.id
            and winner.panel = panel.id
			and winner.noshow = 0
			and winner.bye = 0
            and ballot_value.ballot = winner.id
            and ballot_value.tag = "ballot"
            and ballot_value.value = 1 ) 
        >
         (select count(distinct loser.id) as loser
            from ballot as loser, ballot_value
            where loser.entry = entry.id
            and loser.panel = panel.id
			and loser.noshow = 0
			and loser.bye = 0
            and ballot_value.ballot = loser.id
            and ballot_value.tag = "ballot"
            and ballot_value.value = 0 ) 

        group by entry.id
        order by entry.code
	');

	$sth->execute();

	while( my ($entry_id, $wins) = $sth->fetchrow_array() ) {
		$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
		$entry_wins{$entry_id} += $wins;
	}

	my $bye_sth = $dbh->prepare('
		select entry.id, count(distinct panel.id) as wins
        from round, panel, entry, ballot exist
        where entry.event = '.$event->id.'
        and entry.id = exist.entry
        and panel.id = exist.panel
		and panel.round = round.id
		and not exists ( select setting.id from setting where setting.type = "round" and setting.tag = "ignore_results" and setting.round = round.id )
		and panel.bye = 1
		and exist.bye < 1
		and exist.noshow < 1
		'.$round_limit .'
		'.$lastq.'
		and not exists ( 
			select ballot_value.id
			from ballot_value, ballot bany
			where ballot_value.tag = "ballot"
			and ballot_value.ballot = bany.id
			and ballot_value.value = 1
			and bany.panel = panel.id
		)
        group by entry.id
        order by entry.code
	');

	$bye_sth->execute();

	while( my ($entry_id, $wins) = $bye_sth->fetchrow_array() ) {
		$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
		$entry_wins{$entry_id} += $wins;
		$entry_byes{$entry_id} += $wins;
	}

	my $ballot_bye_sth = $dbh->prepare('
		select entry.id, count(distinct panel.id) as wins
        from round, panel, entry, ballot
        where entry.event = '.$event->id.'
        and entry.id = ballot.entry
        and panel.id = ballot.panel
		and panel.round = round.id
		and not exists ( select setting.id from setting where setting.type = "round" and setting.tag = "ignore_results" and setting.round = round.id )
		'.$round_limit .'
		'.$lastq.'
		and ballot.bye = 1
		and ballot.noshow = 0
        group by entry.id
        order by entry.code
	');

	$ballot_bye_sth->execute();

	while( my ($entry_id, $wins) = $ballot_bye_sth->fetchrow_array() ) {
		$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
		$entry_wins{$entry_id} += $wins;
		$entry_byes{$entry_id} += $wins;
	}

	my $bye_min;

	if ($event->setting("round_robin")) { 
		foreach my $entry_key (keys %entry_wins) { 
			$bye_min = $entry_byes{$entry_key} if $entry_byes{$entry_key} && not defined $bye_min;
			$bye_min =  $entry_byes{$entry_key} if  $entry_byes{$entry_key} < $bye_min;
		}
	}

	foreach my $entry_key (keys %entry_wins) { 
		$entry_wins{$entry_key} -= $bye_min;
	}

	return %entry_wins;

</%init>
