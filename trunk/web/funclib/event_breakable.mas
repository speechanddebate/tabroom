<%args>
	$tourn
	$group => undef 
</%args>
<%init>
	

	my $group_limit = " and event.judge_group = ".$group->id if $group;

	# Events in progress

	Tab::Event->set_sql( in_progress => "
		select event.*
		from event, round, panel, ballot, entry
		where event.tourn = ? 
		and event.id = round.event
		$group_limit
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.audit != 1
		and ballot.bye != 1
		and ballot.noshow != 1
		and panel.bye != 1
		and ballot.entry = entry.id
		and entry.dropped != 1
	");

	# Events all done

	Tab::Event->set_sql( had_final => "
		select event.*
		from event
		where event.tourn = ? 
		$group_limit
		and exists (
			select round.id
			from round, panel, ballot
			where round.type = \"final\"
			and round.event = event.id
			and round.id = panel.round
			and panel.id = ballot.panel
		)
		and not exists (
			select ballot.id
			from ballot, panel, round, entry
			where round.event = event.id
			and round.type = \"final\"
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.audit != 1
			and ballot.bye != 1
			and ballot.noshow != 1
			and panel.bye != 1
			and ballot.entry = entry.id
			and entry.dropped != 1
		)
	");

	# Events with a round with one panel that are done.   For those who mark
	# finals as elims.

	Tab::Event->set_sql( had_single => "
		select event.*, count(panel.id) count
		from event, round, panel
		where event.tourn = ? 
		$group_limit
		and round.event = event.id
		and round.type = \"final\"
		and round.id = panel.round
		and not exists (
			select ballot.id
			from ballot, panel, entry
			where panel.id = ballot.panel
			and ballot.audit != 1
			and ballot.bye != 1
			and ballot.noshow != 1
			and panel.bye != 1
			and ballot.entry = entry.id
			and entry.dropped != 1
		)
		having (count = 1)
	");

	# Events ready to advance

	Tab::Event->set_sql( advance_me => "
		select event.*
		from event
		where event.tourn = ? 
		$group_limit
		and not exists ( 
			select ballot.id
			from ballot, panel, round, entry
			where round.event = event.id
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.audit != 1
			and ballot.bye != 1
			and ballot.noshow != 1
			and panel.bye != 1
			and ballot.entry = entry.id
			and entry.dropped != 1
		)
		and exists (
			select ballot.id
			from ballot, panel, round, entry
			where round.event = event.id
			and round.id = panel.round
			and panel.id = ballot.panel
		)

	");

	my @d_in_progress = Tab::Event->search_in_progress($tourn->id);
	my @had_single = Tab::Event->search_had_single($tourn->id);
	my @had_final = Tab::Event->search_had_final($tourn->id);
	my @d_advance_me = Tab::Event->search_advance_me($tourn->id);

	my @done = (@had_single, @had_final);

	my @advance_me;
	my @in_progress;

	my %used = map {$_->id => 1} @done;

	foreach my $dip (@d_in_progress) { 
		push @in_progress, $dip unless $used{$dip->id}++;
	}

	foreach my $dip (@d_advance_me) { 
		push @advance_me, $dip unless $used{$dip->id}++;
	}

	@in_progress = sort {$a->name cmp $b->name} @in_progress;
	@in_progress = sort {$a->type cmp $b->type} @in_progress;

	@advance_me = sort {$a->name cmp $b->name} @advance_me;
	@advance_me = sort {$a->type cmp $b->type} @advance_me;

	@done = sort {$a->name cmp $b->name} @done;
	@done = sort {$a->type cmp $b->type} @done;

	return \@in_progress, \@advance_me, \@done;

</%init>
