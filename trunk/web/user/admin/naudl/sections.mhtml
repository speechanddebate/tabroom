<%args>
	$startdate
	$enddate
	$circuit_id
	$internal => undef
</%args>
<%flags>
	inherit => undef
</%flags>
<%init>

	my $start;
	my $end;

	my $now = DateTime->now;

	eval{
		$start = Tab::dateme($startdate);
		$end = Tab::dateme($enddate);
	};

	unless ($start) { 
		$start = $now;
	}

	unless ($end) {
		$end = $start->clone;
		$end->subtract(days => 7);
	}

	# Find the tournaments who have competed in that time frame with NAUDL entrants

	Tab::School->columns(TEMP => qw/region_code/);

	Tab::School->set_sql( naudl_competed => "
		select school.*, region.code as region_code
		from chapter, school, tourn, region, chapter_circuit
		where chapter.naudl = 1
		and chapter.id = school.chapter
		and school.tourn = tourn.id
		and chapter.id = chapter_circuit.chapter
		and chapter_circuit.circuit = $circuit_id
		and chapter_circuit.region = region.id
		and tourn.end > ?
		and tourn.end < ?
		group by school.id
		order by tourn.start
	");

	my @schools = Tab::School->search_naudl_competed( DateTime::Format::MySQL->format_datetime($start), DateTime::Format::MySQL->format_datetime($end) 
	);

    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";

	$r->content_type('application/csv');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
	$m->print("tournamentid,tournstartdate,tournlocation,sectionid,judgename,round,sectionname,sectionunique,eventname,division,pdiid,speechwireid,speakerpoints,rank,side,winloss\r\n");

	my %tourn_circuit;

	foreach my $school (@schools) { 

		my $tourn = $school->tourn;

		Tab::debuglog("School ".$school->name." competed in ".$tourn->name);

		my $dbh = Tab::DBI->db_Main();
		my $sth = $dbh->prepare("
			select value.id, value.tag, value.value, value.student, ballot.entry, ballot.judge, panel.bye, ballot.bye, ballot.noshow, 
				ballot.chair, round.name, ballot.side, panel.id, panel.letter, ballot.id
			from (ballot, panel, round, event, entry)
			left join ballot_value value on value.ballot = ballot.id
			where ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and ballot.entry = entry.id
			and entry.school = ".$school->id."
			and event.type != \"speech\"
			and event.type != \"congress\"
			order by round.name, ballot.entry, value.student, ballot.chair, ballot.judge, CASE value.tag WHEN ".' "ballot" then 1 when "rank" then 2 when "points" then 3 end'."
		");

		$sth->execute(); 

		my %entry_round;
		my %entry_round_decision;
		my %entry_round_side;
		my %entry_round_section;
		my %entry_round_ballot;
		my %entry_round_section_letter;
		my %student_round_points;
		my %student_round_ranks;
		my %student_round_ballot;
		my %entry_round_judges;

		my %entry_ballots;
		my $notfirst;

		while (my ($id, $tag, $value, $studentid, $entryid, $judge, $pbye, $bye, $noshow, $chair, $roundname, $side, $panel, $letter, $ballot) = $sth->fetchrow_array() ) { 

			$entry_ballots{$entryid}++;

			if ($pbye) { 
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "Bye"
			} elsif ($bye) { 
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "Bye"
			} elsif ($noshow) { 
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "FFT"
			} elsif ($tag eq "ballot") { 
				push @{$entry_round_judges{$entryid."-".$roundname}}, $judge;
				$entry_round_side{$entryid."-".$roundname."-".$judge} = "Aff" if $side == 1;
				$entry_round_side{$entryid."-".$roundname."-".$judge} = "Neg" if $side == 2;
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "-" if $value == 0;
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "L" if $value == 0;
				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "W" if $value == 1;
				$entry_round_section{$entryid."-".$roundname."-".$judge} = $panel;
				$entry_round_section_letter{$entryid."-".$roundname."-".$judge} = $letter;
			} elsif ($tag eq "points") { 
				$student_round_points{$studentid."-".$roundname."-".$judge} .= ", " if $student_round_points{$studentid."-".$roundname."-".$judge};
				$student_round_points{$studentid."-".$roundname."-".$judge} .= $value;
				$student_round_ballot{$studentid."-".$roundname."-".$judge} = $id;
			} elsif ($tag eq "rank") { 
				$student_round_ranks{$studentid."-".$roundname."-".$judge} .= $value." ";
			}
		}

		my $tourn_id = "TR".$tourn->id;
		my $tourn_name = $tourn->name;
		my $tourn_start = $tourn->start->set_time_zone($tourn->tz);
		$tourn_start->set_time_zone("UTC");
		my $start_string = $tourn_start->year."-".$tourn_start->month."-".$tourn_start->day."T00:00:00.00Z";
		my $tourn_place = $tourn->state;

		foreach my $event ($tourn->events) { 

			next if $event->type eq "speech";
			next if $event->type eq "congress";

			my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");

			my @rounds;
			foreach my $round (@all_rounds) { 
				push @rounds, $round;
			}

			my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
			my %judge_name_by_id = map { $_->id => $_->first." ".$_->last } @judges;

			my $event_name = $event->type."-".$event->name;
			my $event_level = $event->setting("level");

			my $level = $event->name;

			foreach my $student ($m->comp("/funclib/event_students.mas", event => $event, by_results => 1)) { 

				my $entry_id = $student->entry;
				my $studentid = $student->id;

				foreach my $round (@rounds) { 

					my $roundname = $round->name;
					next if $round->type eq "elim";
					next if $round->type eq "final";

					foreach my $judge (@{$entry_round_judges{$entry_id."-".$roundname}}) { 
		
						my $side = substr($entry_round_side{$entry_id."-".$roundname."-".$judge},0,1);

						my $rank = $student_round_ranks{$studentid."-".$roundname."-".$judge};
						my $points = $student_round_points{$studentid."-".$roundname."-".$judge};
						my $result = $entry_round_decision{$entry_id."-".$roundname."-".$judge};
						my $section = $entry_round_section{$entry_id."-".$roundname."-".$judge};
						my $letter = $entry_round_section_letter{$entry_id."-".$roundname."-".$judge};
						my $ballot = $student_round_ballot{$studentid."-".$roundname."-".$judge};

						next unless $result;
						next if $result eq "FFT" || $result eq "Bye";
						next unless $rank || $points;

						$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","'.$tourn_place.'","TR'.$section.'","'.$judge_name_by_id{$judge}.'","'.$roundname.'","'.$letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","'.$level.'","TR'.$ballot.'","TR'.$studentid.'","'.$points.'","'.$rank.'","'.$side.'","'.$result.'"'."\r\n");

					}
				}
			}

			my @elims;

			foreach my $round (@rounds) { 
				push @elims, $round if $round->type eq "final";
				push @elims, $round if $round->type eq "elim";
			}

			my @labels = ("F", "S", "Q", "O", "D", "T");
			@elims = sort {$b->name <=> $a->name} @elims;

			foreach my $round (@elims) { 
	
				my $letter = shift @labels;
				my $roundname = substr($round->label,0,1);
				$roundname = $letter unless $roundname;

				foreach my $panel ($round->panels) { 

					next if $panel->bye;
					my $letter = $panel->letter;
					my $section = $panel->id;

					my ($winner, $winningside) = $m->comp("/funclib/panel_winner.mas", panel => $panel, noob => 1);

					foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 

						my $result = "L";
						$result = "W" if $winner == $entry->id;
						my $side = "A";
						$side = "N" if $entry->side == 2;

						my $ballot = $entry->ballot;
						my $counter;

						foreach my $student ($entry->students) { 
							my $studentid = $student->id;
							$counter++;
							$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","'.$tourn_place.'","TR'.$section.'","ELIM","'.$roundname.'","'.$letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","'.$level.'","TR'.$ballot.'-'.$counter.'","TR'.$studentid.'",..,..,"'.$side.'","'.$result.'"'."\r\n");
						}
					}
				}
			}
		}
	}

</%init>
