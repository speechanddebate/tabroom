<%args> 
	$username   => undef
	$password   => undef
	$tourn_id   => undef
	$session_id => undef
	$url        => undef
</%args>
<%flags>
	inherit => undef
</%flags>
<%init>

	use Tab::NSDA::Login;
	use Crypt::PasswdMD5;
	use Digest::MD5 qw(md5_hex);

	my $now = DateTime->now;

	my $shauser;
	my $shakey;
	my $session;
	my $login;
	my $person;

	my $log = $now->mdy('/')." ".$now->hms;

	if ($session_id) { 

		$session = Tab::Session->retrieve($session_id);
		$person = $session->account;
		$shakey = $session->authkey;
		$shauser = $session->userkey;

		$log .= " Login attempt via IDEA cookie by ".$person->email." from ".$ENV{REMOTE_ADDR}."...." if $session->account;

	} else { 


		$log .= " Login attempt by ".$username." from ".$ENV{REMOTE_ADDR}."....";

		$username =~ tr/[A-Z]/[a-z]/;
		$username =~ s/\s+//g;
		$password =~ s/\s+$//g;  #only you can prevent trailing whitespace.

		unless ($username) { 
			my $err = "You must enter an email address or username.  Please try again.";
			Tab::log("Failed: no username entered. $log");
			$m->redirect("/index/index.mhtml?err=$err");
		}

		unless ($password) { 
			my $err = "You must enter a password.  Please try again.";
			Tab::log("Failed: blank password.  $log");
			$m->redirect("/index/index.mhtml?err=$err");
		}

		$login = Tab::Login->search(username => $username)->first;

		unless ($login) { 
			my $err = "No login with that email or username exists.  Please try again.";
			Tab::log("Failed: no such login. $log");
			$m->redirect("/index/index.mhtml?err=$err");
		}
			
		my $db_password = $login->password;
		my $verify_password = unix_md5_crypt($password,$db_password);

		unless ($verify_password eq $db_password) { 

			# Check if the login password exists in the NSDA database and has
			# changed.

			if ($login->source eq "nsda") { 

				my $nsda_login = Tab::NSDA::Login->search( username => $username )->first;
				my $nsda_db_password = $nsda_login->password;
				my $nsda_hash = md5_hex($password.$username.$Tab::points_salt);

				if ($nsda_db_password eq $nsda_hash) { 

					# The point system password has changed.  Rehash and cache
					# for a local copy for speed.

					my $salt = $m->comp("/funclib/generate_randomstring.mas");
					my $new_hash = Crypt::PasswdMD5::unix_md5_crypt($password,$salt);
					$login->password($new_hash);
					$login->update;

				} else { 

					my $err = "Your password was not correct";
					Tab::log("Failed: wrong password. $log");
					$m->redirect("/index/index.mhtml?err=$err");
				}

			} else { 

				my $err = "Your password was not correct";
				Tab::log("Failed: wrong password. $log");
				$m->redirect("/index/index.mhtml?err=$err");

			}
		}

		$person = $login->person;
		
		# To maintain state, the sha keys are encoded.  Change the value below
		# to something unique for your site to maintain a passing fantasy of
		# security.

		my $key = "$Tab::string";
		my $auth = $m->comp("/funclib/generate_randomstring.mas", length => 16);

		$shauser = Digest::SHA::sha1_hex($key, $person->id);
		$shakey = Digest::SHA::sha1_hex($key, $auth);

		$session = Tab::Session->create( { 
			account   => $person->id,
			authkey   => $shakey,
			userkey   => $shauser,
			ip        => $ENV{REMOTE_ADDR},
			timestamp => $now,
		});

		if ($person->site_admin) { 

			# Trigger an LDAP change to be sure the login servers are kept up
			# to date

			$m->comp("/funclib/ldap_account.mas", login => $login, ad_password => $password);

		}

	}	

	# Remove existing sessions to prevent mass logins from one account. 

	my $allowed_sessions = $person->multiple;
	$allowed_sessions = 3 unless $allowed_sessions;  
	
	# let ppl use their computer & phone, but not share with the world...

	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
		$sess->delete unless $allowed_sessions;
		$allowed_sessions--;
	}

	my $passwordcookie = Apache2::Cookie->new(
		$r,
        -name    => 'Tab-AuthKey',
        -value   => $shakey,
        -expires => '+96h',
        -path    => '/'
        );

	my $tokencookie = Apache2::Cookie->new(
		$r,
        -name    => 'Tab-AuthToken',
        -value   => $shauser,
        -expires => '+96h',
        -path    => '/'
	);

    $tokencookie->bake($r);
    $passwordcookie->bake($r);

	$log .= "....Succeeded.";
	Tab::log("$log");

	unless ($person->email && $person->first && $person->last) { 
		$m->redirect("/user/login/profile.mhtml?idebate=1"); 
	}   

	$login->accesses($login->accesses + 1);
	$login->last_access($now);
	$login->update;

    $m->redirect("http://$url") if $url;
    $m->redirect("/index/register.mhtml?tourn_id=$tourn_id") if $tourn_id;
    $m->redirect("/user/home.mhtml");

</%init>
	
