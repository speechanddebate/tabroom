<%args>
	$account
	$panel_id => undef
	$judge_id => undef
	$skipme => undef
</%args>
<%init>

	my %entry_win = ();
	my %entry_rank = ();
	my %entry_points = ();
	my %entry_speakerorder = ();

	my %student_values = ();

    unless ($panel_id && $judge_id) { 
        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);
	my $round = $panel->round;

	my $tz = $round->event->tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now( time_zone => $tz );

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    unless ($judge->account->id == $account->id) { 
        my $err = "You are not authorized to enter ballots for that judge.";
        $m->redirect("/user/home.mhtml?err=$err")
    }   

    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );

    unless (@ballots) { 
        my $err = "That judge does not judge in that room.";
        $m->redirect("/user/home.mhtml?err=$err");
	}

    my $type = $panel->round->event->type;
    my $tiebreaks = $panel->round->tb_set;

    my $wins;
    my $points;
    my $ranks;
    my $team_ranks;

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);

	foreach my $ballot (@ballots) { 

		if ($ARGS{"rfd"}) { 

			Tab::BallotValue->create({
				tag => "rfd",
				ballot => $ballot->id,
				content => $ARGS{"rfd"}
			});
		}
	}

	if ($skipme) { 

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

		foreach my $key (keys %ARGS) { 
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&msg=RFD Saved";
		$m->redirect("ballot.mhtml".$url_args);

	} 

	my $champ;

	if ($round->type eq "elim" || $round->type eq "final") { 

		my $win_count;
		my %positions_taken;

		my $errs;

		foreach my $ballot (@ballots) { 

			$win_count++ if $ARGS{$ballot->id."_win"};
			$champ = $ballot->entry->id if $ARGS{$ballot->id."_win"} && $round->type eq "final";
		
			if ($ARGS{$ballot->id."_speakerorder"}) { 
				$errs .= "You assigned two teams to the same position.  Try again <br />" if $positions_taken{$ARGS{$ballot->id."_speakerorder"}};
				$entry_speakerorder{$ballot->entry->id} = $ARGS{$ballot->id."_speakerorder"};
				$positions_taken{$ARGS{$ballot->id."_speakerorder"}}++;
			} else { 
				$errs .= "You must assign a position to each entry.  Try again. <br />";
			}

		}

		if ($round->type eq "elim" && $win_count != 2) {
			$errs .= "You must select exactly two teams to advance.  Try again. <br />";
		}
			
		if ($round->type eq "final" && $win_count != 1) {
			$errs .= "You must select exactly one teams to win the championship.  Try again. <br />";
		}

		$m->redirect("ballot.mhtml?panel_id=$panel_id&judge_id=$judge_id&errs=$errs") if $errs;

		foreach my $ballot (@ballots) { 

			my $win = 0;
			$win++ if $ARGS{$ballot->id."_win"};

			$entry_win{$ballot->entry->id}++ if $win;

			my $value = Tab::BallotValue->search( ballot => $ballot->id, tag => "ballot")->first;

			$ballot->speakerorder($entry_speakerorder{$ballot->entry->id});
			$ballot->update;

			if ($value) { 
				$value->value($win);
				$value->update;

			} else { 

				Tab::BallotValue->create({
					ballot => $ballot->id,
					tag => "ballot",
					value => $win
				});
			}

		}

	} 

	if ($round->type eq "final") { 

		my $result_set = Tab::ResultSet->search( event => $round->event->id, bracket => 1)->first;

		$result_set = Tab::ResultSet->create({
			tourn     => $round->event->tourn->id,
			event     => $round->event->id,
			generated => $now,
			bracket   => 1,
			label     => "Bracket"
		}) unless $result_set;

		my $result = Tab::Result->search( entry => $champ, round => $round->id, result_set => $result_set->id)->first;

		$result = Tab::Result->create({
			entry      => $champ,
			round      => $round->id,
			result_set => $result_set->id
		}) unless $result;

		Tab::ResultValue->set_sql( champ => "
			delete result_value.*
			from result_value, result
			where result.result_set = ? 
			and result.id = result_value.result
			and result_value.tag = \"Champion\"
		");

		Tab::ResultValue->sql_champ->execute($result_set->id);

		Tab::ResultValue->create({ 
			result    => $result->id,
			tag       => "Champion",
			value     => 1,
			priority  => 2,
			sort_desc => 0,
		});

	}

	if ($round->type ne "final" && $round->type ne "elim") { 

		my $tourn = $judge->judge_group->tourn;
		my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);

		my $max_points = $panel->round->event->setting("max_points");
		my $min_points = $panel->round->event->setting("min_points");
		my $point_increments = $panel->round->event->setting("point_increments");
		my $point_ties = $panel->round->event->setting("point_ties");

		my $errs;
		my %entry_values = ();

		my %points_taken;

		foreach my $student (@students) { 

			my $points = $ARGS{$student->id."_points"};

			$errs .= "<p>Points missing</p>"  unless $points;
			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") { 
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			if ($point_increments eq "half") { 
				my $rounded_points = $points + .5;
				$rounded_points = $rounded_points - ($points % .5);
				$points = $rounded_points;
			}

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);
			$errs .= "<p>Points $points are outside of range</p>" if $points < $min_points || $points > $max_points;

			$points_taken{$points}++;
			$student_values{$student->id."_points"} = $points;
			$entry_points{$student->entry} += $points;

		}

		my %used_points = ();

		foreach my $entry (@entries) { 
			$errs .= "<p>You gave two teams points of ".$entry_points{$entry->id}.".  Please correct</p>" if $used_points{$entry_points{$entry->id}};
			$used_points{$entry_points{$entry->id}}++;
		}

		if ($errs) { 

			my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

			foreach my $key (keys %ARGS) { 
				next if $key eq "panel_id";
				next if $key eq "judge_id";
				next if $key eq "rfd";
				$url_args .= "&$key=$ARGS{$key}";
			}

			$url_args .= "&errs=$errs";

			$m->redirect("ballot.mhtml".$url_args);

		} else { 

			#Clear the old cruft

			Tab::BallotValue->set_sql( clear_cruft => "
				delete ballot_value.*
				from ballot_value, ballot
				where ballot.panel = ?
				and ballot.judge = ? 
				and ballot.id = ballot_value.ballot");

			Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

			my @entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;

			my $rank = 1;

			foreach my $entry (@entries) { 
				$entry_rank{$entry->id} = $rank;
				$rank++;
			}

			foreach my $ballot (@ballots) { 

				$entry_speakerorder{$ballot->entry->id} = $ballot->speakerorder;

				$ballot->audit("");
				$ballot->update;

				Tab::BallotValue->create({
					tag => 'rank',
					ballot => $ballot->id,
					value => $entry_rank{$ballot->entry->id},
					student => 0
				});

				foreach my $student (@students) { 

					next unless $student->entry == $ballot->entry->id;

					Tab::BallotValue->create({
						tag => 'points',
						ballot => $ballot->id,
						student => $student->id,
						value => $student_values{$student->id."_points"}
					});

				}

			}

		}

	}


</%init>

	<div class="main">
	
		<h2>Confirm Please!</h2>

%		if ($round->type eq "elim" || $round->type eq "final") { 

%			my $switch;

%			@entries = sort {$entry_speakerorder{$a->id} <=> $entry_speakerorder{$b->id}} @entries;

%			foreach my $entry (@entries) { 

				<div class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">

					<span class="threequarter divider">

						<span class="quarter divider">
							<% $entry_speakerorder{$entry->id} == 1 ? "1st Gov" : "" %>
							<% $entry_speakerorder{$entry->id} == 2 ? "1st Opp" : "" %>
							<% $entry_speakerorder{$entry->id} == 3 ? "2nd Gov" : "" %>
							<% $entry_speakerorder{$entry->id} == 4 ? "2nd Opp" : "" %>
						</span>

						<span class="threequarter">
							<% $entry->code %>
						</span>

					</span>

					<span class="quarter">
						<h5>
							<% $round->type eq "elim" ? $entry_win{$entry->id} ? "Advances" : "Does not advance" : "" %>
							<% $round->type eq "final" && $entry_win{$entry->id} ? "Champion" : "" %>
							&nbsp;
						</h5>
					</span>

				</div>

%			}

%		} else { 

			<table cellpadding="4">

				<tr class="yellowrow">

					<th>
						Rank
					</th>

					<th>
						Pts
					</th>

					<th>
						Pos
					</th>

					<th>
						Team
					</th>

					<th>
						Speakers
					</th>

					<th>
						Tot. Speaks
					</th>

				</tr>

%				my $switch;
%				@entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;
%				foreach my $entry (@entries) { 
	
				<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">

					<td>
						<% Lingua::EN::Numbers::Ordinate::ordinate( $entry_rank{$entry->id}) %>
					</td>

					<td>
						<% 4 - $entry_rank{$entry->id} %> points
					</td>

					<td>
						<% ($entry_speakerorder{$entry->id} == 1) ? "1G" : "" %>
						<% ($entry_speakerorder{$entry->id} == 2) ? "1O" : "" %>
						<% ($entry_speakerorder{$entry->id} == 3) ? "2G" : "" %>
						<% ($entry_speakerorder{$entry->id} == 4) ? "2O" : "" %>
					</td>

					<td>
						<% $entry->code %>
					</td>

					<td>
%						foreach my $student ($entry->students) { 

							<span class="quarter">
								<% $student_values{$student->id."_points"} %>
							</span>
							<span class="threequarter">
								<% $student->first." ".$student->last %>
							</span>

							<br />
%						}
					</td>

					<td>
						<% $entry_points{$entry->id} %>
					</td>

				</tr>

%			}

			</table>

%		}

		<br />

		<div class="half centeralign">
			<a class="dkred confirm" href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
				RE-ENTER BALLOT
			</a>
		</div>

		<div class="half centeralign">
			<a class="dkblue confirm" href="ballot_confirm.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
				YES CORRECT! CONFIRM IT
			</a>
		</div>

		<p class="martop explain">
			Once you confirm your ballot, you cannot change it online.  You'll
			have to contact the tournament staff to make any further changes.
		</p>

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>RFD</h4>

			<% $ARGS{"rfd"} %>

		</div>

	</div>

