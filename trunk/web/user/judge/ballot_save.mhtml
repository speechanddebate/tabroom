<%args>
	$account
	$panel_id => undef
	$judge_id => undef
	$skipme => undef
</%args>
<%init>

	use Math::Round qw(nearest);

    unless ($panel_id && $judge_id) { 
        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    unless ($account->site_admin || $judge->account->id == $account->id) { 
        my $err = "You are not authorized to enter ballots for that judge.";
        $m->redirect("/user/home.mhtml?err=$err")
    }   

    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );

    unless (@ballots) { 
        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
        $m->redirect("/user/home.mhtml?err=$err");
	}

    my $type = $panel->round->event->type;
    my $tiebreaks = $panel->round->tb_set;

    my $wins;
    my $team_points;
    my $points;
    my $ranks;
    my $team_ranks;

	foreach my $ballot (@ballots) { 

		if ($ARGS{"rfd"}) { 
			
			my $rfd = Tab::BallotValue->search( tag => "rfd", ballot => $ballot->id )->first;

			if ($rfd) { 
				$rfd->content($ARGS{"rfd"});
				$rfd->update;
			} else { 

				Tab::BallotValue->create({
					tag     => "rfd",
					ballot  => $ballot->id,
					content => $ARGS{"rfd"},
					student => 0
				});

			}
		}
	}

	if ($skipme) { 

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

		foreach my $key (keys %ARGS) { 
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&msg=RFD Saved";
		$m->redirect("ballot.mhtml".$url_args);

	} 

    foreach my $tb ($tiebreaks->tiebreaks) {
        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals") && $type ne "speech";
        $team_ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals") && $type eq "speech";
        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
        $points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points") && $type ne "speech";
        $team_points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points") && $type eq "speech";
    }


    my $tourn = $judge->judge_group->tourn;

    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
    my $tv++ if $type eq "speech" && $tiebreaks->setting("mfl_time_violation");
    my $noshow++ if $type eq "speech" && $tiebreaks->setting("noshows_never_break");

	my $event = $panel->round->event;

    my $max_points = $event->setting("max_points");
    my $min_points = $event->setting("min_points");

	my $max_ob_points = $event->setting("max_ob_points");
	my $min_ob_points = $event->setting("min_ob_points");

	$min_ob_points = $min_points unless $min_ob_points;
	$max_ob_points = $max_points unless $max_ob_points;

	$min_ob_points = 0 unless $min_ob_points;

    my $point_increments = $panel->round->event->setting("point_increments");
    my $point_ties = $panel->round->event->setting("point_ties");

	my $errs;

	my %student_values = ();
	my %entry_values = ();

	my $side_disagree;

	my $no_side_constraints++ if $panel->round->event->setting('no_side_constraints');
    my $sidelocks++ if ($panel->round->type eq "elim" || $panel->round->type eq "final") && not defined $no_side_constraints;
	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;

	if ($no_side_constraints || ($sidelocks && not defined $locked)) { 

		my %taken = ();
		my %sides = ();

		foreach my $ballot (@ballots) { 

			my $side = $ARGS{$ballot->id."_side"};
			$errs .= "<p>You must specify a side for both debaters</p>" unless $side;

			if ($taken{$side}) {
				$errs .= "<p>You cannot make debaters all on one side.  Try again</p>"
			} else { 
				$taken{$side}++;
				$ballot->side($side);
				$ballot->update;
				$sides{$side} = $ballot->entry->id;
			}
		}
	
		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
			next if $other_judge->id == $judge->id;
			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
			next unless $win && $winside;
			$side_disagree++ if $sides{$winside} != $win->id;
		}

	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);

	my %entry_headcount;
	my $max_headcount;

	foreach my $entry (@entries) { 
		my @students = $entry->students;
		$entry_headcount{$entry->id} = scalar @students;
		$max_headcount = $entry_headcount{$entry->id} if $max_headcount < $entry_headcount{$entry->id};
	}

	if ($ranks) { 

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) { 

			my $rank = $ARGS{$student->id."_ranks"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;
			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range.</p>" if $rank < 1 || $rank > scalar @students;

			$rank_taken{$rank}++;
			$student_values{$student->id."_rank"} = $rank;
			
			if ($points) { 
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}

		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) { 
			$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
			$current = $rank_points{$rk};
		}

	}

	if ($team_ranks) { 

		my %rank_taken;
		foreach my $ballot (@ballots) { 
			my $rank = $ARGS{$ballot->id."_ranks"};

			$errs .= "<p>Rank Missing</p>" unless $rank;
			next unless $rank;
			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);

			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range</p>" if $rank < 1 || $rank > scalar @ballots;

			$rank_taken{$rank}++;
			$entry_values{$ballot->id."_rank"} = $rank;
		}
	}

	my %entry_points = ();

	if ($points) { 

		my %points_taken;

		foreach my $student (@students) { 

			my $points = $ARGS{$student->id."_points"};

			$errs .= "<p>Points missing</p>" if $min_ob_points > 0 && not defined $points;
			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") { 
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

			$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"  if $points_taken{$points} && $point_ties < 1;
			$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>" if $points < $min_ob_points || $points > $max_ob_points;

			$points_taken{$points}++;
			$student_values{$student->id."_points"} = $points;
			$entry_points{$student->entry} += $points;

		}

	}

	if ($team_points) { 

		my %points_taken;

		foreach my $ballot (@ballots) { 

			my $points = $ARGS{$ballot->id."_points"};

#			push (@errs, "Points missing") unless $points;
			next unless $points;

			$points =~ s/\D//g; #Strip non-numerics;
#			push (@errs, "Points must be a number") unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";
			$points = printf("%.1f", $points) if $point_increments eq "tenths";

			if ($point_increments eq "half") { 
				my $rounded_points = $points + .5;
				$rounded_points = $rounded_points - ($points % .5);
				$points = $rounded_points;
			}

#			push (@errs, "You have repeated the points $points") if $points_taken{$points} && $point_ties < 1;
#			push (@errs, "Points $points are outside of range") if ($min_ob_points && $points < $min_ob_points) || ($max_ob_points && $points > $max_ob_points);

			$points_taken{$points}++;
			$entry_values{$ballot->id."_points"} = $points;
			$entry_points{$ballot->entry->id} += $points;
		}

	}

	my $winner;

	if ($wins)  {

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>" unless $winner;
		$errs .= "<p>Your winner and your chosen side did not agree</p>" if $winner && $winner->side != $ARGS{"winner_side"};

		if ($winner && $entry_headcount{$winner->entry->id} == $max_headcount) {   #2nd bit avoid mavericks

			my $winner_points = $entry_points{$winner->entry->id};

			foreach my $ballot (@ballots) { 
	
				my $bal_points = $entry_points{$ballot->entry->id};
		
				if ($panel->round->event->setting("no_lpw")) {
					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>" if $winner_points < $bal_points;
				} else { 
					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>" if $winner_points < $bal_points && not defined $ARGS{"lpw"};
				}
		
			}

		}
	
	}

	if ($errs) { 

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

		foreach my $key (keys %ARGS) { 
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&errs=$errs";

		$m->redirect("ballot.mhtml".$url_args);

	} else { 

		# Clear the old cruft

		Tab::BallotValue->set_sql( clear_cruft => "
			delete ballot_value.*
			from ballot_value, ballot
			where ballot.panel = ?
			and ballot.judge = ? 
			and ballot_value.tag != \"rfd\"
			and ballot_value.tag != \"comments\"
			and ballot.id = ballot_value.ballot");

		Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

		foreach my $ballot (@ballots) { 

			$ballot->audit("");
			$ballot->update;

			if ($wins) { 

				my $tigers_blood = 0;
				$tigers_blood++ if $winner->id == $ballot->id;

				unless (Tab::BallotValue->search({ ballot => $ballot->id, tag => "ballot"})->first) { 
					Tab::BallotValue->create({
						ballot  => $ballot->id,
						value   => $tigers_blood,
						tag     => "ballot",
						student => 0
					});
				}

			}

			if ($points) { 

				foreach my $student (@students) { 

					next unless $student->entry == $ballot->entry->id;

					unless (Tab::BallotValue->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first) { 
						Tab::BallotValue->create({
							ballot  => $ballot->id,
							student => $student->id,
							tag     => "points",
							value   => $student_values{$student->id."_points"}
						});
					}

				}

			}

			if ($ranks) { 

				foreach my $student (@students) { 

					next unless $student->entry == $ballot->entry->id;

					my $value = 0;
					$value = $student_values{$student->id."_rank"} if $student_values{$student->id."_rank"};

					unless (Tab::BallotValue->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first) { 
						Tab::BallotValue->create({
							ballot  => $ballot->id,
							student => $student->id,
							tag     => "rank",
							value   => $value
						});
					}

				}

			}

		}

	}



</%init>

	<div class="main">

%		if ($wins && $side_disagree < 1) { 
	
%			my $winside = $ARGS{"winner_side"};
%			my $side = "Affirmative" if $winside == 1;
%			$side = "Negative" if $winside == 2;

%			$side = "Pro" if $winside == 1 && $type eq "pf";
%			$side = "Con" if $winside == 2 && $type eq "pf";

			<h5>Your winner was</h5>

			<br />
			<br />

			<div class="block padmuchmore martop centeralign">

				<h1 class="centeralign">
					<% $winner->entry->code %> on the <% $side %>
				</h1>

				<h5 class="martop centeralign">
					(<% $winner->entry->name %>)
				</h5>

			</div>

			<br />
%		}

%		if (($points || $ranks) && $side_disagree < 1) { 

%			foreach my $entry (@entries) { 

				<div class="half">

					<p class="bold centeralign">
						<% $entry->code %> (<% $entry->name %>)
					</p>

%					my $switch;
%					foreach my $student ($entry->students) { 

						<div class="<% ($switch++ % 2) ? "odd" : "even" %>">

							<span class="half rightalign">
								<%	$student->first." ".$student->last %>
							</span>

%							if ($points) { 
								<span class="quarter">
									<% $student_values{$student->id."_points"} ?  $student_values{$student->id."_points"} : "ZERO"  %>
								</span>
%							}

%							if ($ranks) { 
								<span class="quarter">
									<% Lingua::EN::Numbers::Ordinate::ordinate($student_values{$student->id."_rank"}) %>
								</span>
%							}

						</div>

%					}

				</div>
%			}

%		}

%		if ($side_disagree) { 
			
			<h2>WHOOOPSIE DAISY!</h2>
			
			<p class="warning centeralign padmore" style="margin-top: 20px;">
				Your ballot disagreed with another judge's on sides.  You had a
				team on aff that the other judge had on negative and
				vice-versa.
			</p>

			<br class="clear;" />

			<h4>Please confirm: which team was actually affirmative?</h4>

			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />

			<div class="centeralign">
%				foreach my $entry (@entries) { 
					<a class="dkblue" style="padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;" href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>">
						<% $entry->code %> was AFF
					</a>
%				}
			</div>


%		}  else { 


			<br />
			<br />
			<hr />
			<br />
			<br />

			<div class="half centeralign">
				<a class="dkred full confirm" href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					NO! <% $side_disagree ? "FIX SIDES PLEASE" : "RE-ENTER BALLOT" %>
				</a>
			</div>

			<div class="half centeralign">
				<a class="dkgreen full confirm" href="ballot_confirm.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					YES! CORRECT! CONFIRM IT
				</a>
			</div>

			<br style="clear: both;">

			<h5 style="margin-top: 20px; line-height: 25px;" class="centeralign">
				Once you confirm your ballot, you cannot change it online.  You'll have to contact the tournament staff to make any further changes
			</h5>

%		}

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>RFD</h4>

			<% $ARGS{"rfd"} %>

		</div>

	</div>

