<%args>
	$account
	$panel_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);

    unless ($panel_id && $judge_id) { 
        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    unless ($account->site_admin || $judge->account->id == $account->id) { 
        my $err = "You are not authorized to enter ballots for that judge.";
        $m->redirect("/user/home.mhtml?err=$err")
    }   

    my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id, audit => 0 );

    unless (@ballots) { 
        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $unconfirmed;

	foreach my $ballot (@ballots) { 
		$unconfirmed++ unless $ballot->audit > 0;
	}

	unless ($unconfirmed) { 
        my $err = "Those ballots were already confirmed.  Please contact tab if you believe there was an error";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $round = $panel->round;
	my $event = $round->event;
	my $group = $event->judge_group;
    my $tourn = $group->tourn;
    my $type = $event->type;

	my $aff_string = $event->setting("aff_label");
	my $neg_string = $event->setting("neg_label");
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_lpw++ if $event->setting("no_lpw");
	$no_lpw++ if $event->type eq 'speech' || $event->type eq 'congress';
	undef $no_lpw if $event->setting("allow_lowpoints");

    my $tiebreaks = $round->tb_set;
	my $ballot_entry_name = $group->setting("ballot_entry_names");
	my $ballot_entry_first_name = $group->setting("ballot_entry_first_names");
	my $ballot_entry_title = $group->setting("ballot_entry_titles");
	my $ballot_school_code = $group->setting("ballot_school_codes");
	my $ballot_school_name = $group->setting("ballot_school_names");

    my $wins;
    my $team_points;
    my $points;
    my $ranks;
    my $team_ranks;

	my @entries;
	my %entry_values = ();
	my %entry_headcount = ();
	my %entry_students = ();
	my %student_entry = ();
	my $max_headcount;
	my %already;
	my %drop_ballot;

	foreach my $ballot (@ballots) { 

		my $entry = $ballot->entry;
		$drop_ballot{$ballot->id}++ if $entry->dropped;

		unless ($already{$entry->id}++) { 
			$entry->speaks($ballot->speakerorder);
			push @entries, $entry;
			my @students = $entry->students;
			@{$entry_students{$entry->id}} = @students;
			foreach my $student (@students) {
				$student_entry{$student->id} = $entry;
			}
			$entry_headcount{$entry->id} = scalar @students;
			$max_headcount = $entry_headcount{$entry->id} if $max_headcount < $entry_headcount{$entry->id};
		}

		if ($ARGS{"rfd"}) { 
			
			my $rfd = Tab::BallotValue->search( tag => "rfd", ballot => $ballot->id )->first;

			if ($rfd) { 
				$rfd->content($ARGS{"rfd"});
				$rfd->update;
			} else { 

				eval { 
					Tab::BallotValue->create({
						tag      => "rfd",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $ARGS{"rfd"},
						student  => 0
					});
				};

			}
		}

		if ($ARGS{"comments_".$ballot->id}) {

			my $comments = Tab::BallotValue->search( tag => "comments", ballot => $ballot->id )->first;

			if ($comments) { 
				$comments->content($ARGS{"comments_".$ballot->id});
				$comments->update;
			} else { 

				eval { 
					Tab::BallotValue->create({
						tag      => "comments",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $ARGS{"comments_".$ballot->id},
						student  => 0
					});
				};
			}
		}

		if ($ARGS{"title_".$ballot->id}) {

			my $title = Tab::BallotValue->search( tag => "title", ballot => $ballot->id )->first;

			if ($title) { 
				$title->content($ARGS{"title_".$ballot->id});
				$title->update;
			} else { 

				eval { 
					Tab::BallotValue->create({
						tag      => "title",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $ARGS{"title_".$ballot->id},
						student  => 0
					});
				};
			}

			$entry_values{$entry->id."_title"} = $ARGS{"title_".$ballot->id};
		}
	}

	if ($skipme) { 

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

		foreach my $key (keys %ARGS) { 
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			next if index($key, 'comments') != -1;
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&msg=RFD and comments Saved";
		$m->redirect("ballot.mhtml".$url_args);

	} 

    foreach my $tb ($tiebreaks->tiebreaks) {
        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
        $points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
    }

	my $total_points;

	if ($type eq "speech" || $type eq "congress") { 
		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;
	} elsif ($event->setting("team_points")) { 
		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;
	}


    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
    my $tv++ if $type eq "speech" && $tiebreaks->setting("mfl_time_violation");
    my $noshow++ if $type eq "speech" && $tiebreaks->setting("noshows_never_break");

    my $max_points = $event->setting("max_points");
    my $min_points = $event->setting("min_points");

	my $max_ob_points = $event->setting("max_ob_points");
	my $min_ob_points = $event->setting("min_ob_points");

	$min_ob_points = $min_points unless $min_ob_points;
	$max_ob_points = $max_points unless $max_ob_points;

	$min_ob_points = 0 unless $min_ob_points;

    my $point_increments = $event->setting("point_increments");
    my $point_ties = $event->setting("point_ties");

	my $errs;

	my %student_values = ();

	my $side_disagree;

	my $no_side_constraints++ if $event->setting('no_side_constraints');
    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;

	if ($no_side_constraints || ($sidelocks && not defined $locked)) { 

		my %taken = ();
		my %sides = ();

		foreach my $ballot (@ballots) { 

			my $side = $ARGS{$ballot->id."_side"};
			$errs .= "<p>You must specify a side for both debaters</p>" unless $side;

			if ($taken{$side}) {
				$errs .= "<p>You cannot make debaters all on one side.  Try again</p>"
			} else { 
				$taken{$side}++;
				$ballot->side($side);
				$ballot->update;
				$sides{$side} = $ballot->entry->id;
				$sides{$ballot->entry->id} = $side;
			}
		}
	
		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
			next if $other_judge->id == $judge->id;
			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);

			if ($win && $winside) { 
				$side_disagree++ if $sides{$winside} != $win->id;
			} else { 
    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
				foreach my $ballot (@ballots) { 
					$ballot->side($sides{$ballot->entry->id});
					$ballot->update;
				}
			}
		}
	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

	if ($ranks) { 

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) { 

			my $rank = $ARGS{$student->id."_ranks"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;
			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range.</p>" if $rank < 1 || $rank > scalar @students;

			$rank_taken{$rank}++;
			$student_values{$student->id."_rank"} = $rank;
			
			if ($points) { 
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}
		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) { 
			$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
			$current = $rank_points{$rk};
		}

	}

	if ($team_ranks) { 

		my %rank_taken;
		my %rank_points;

		BALLOT:
		foreach my $ballot (@ballots) { 

			my $rank = $ARGS{$ballot->id."_ranks"};

			unless ($drop_ballot{$ballot->id}) { 

				$errs .= "<p>Rank Missing</p>" unless $rank;
				next BALLOT unless $rank;

				$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);

				$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>" if $rank_taken{$rank};
				$errs .= "<p>Rank $rank is outside of range</p>" if $rank < 1 || $rank > scalar @ballots;
			}

			$rank_taken{$rank}++ if $rank;
			$entry_values{$ballot->entry->id."_rank"} = $rank if $rank;

			if ($team_points) {
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}
				
		} 

		my $current;
		my $not_ok;
		my $ok;

		foreach my $rk (sort keys %rank_points) {
			next unless $rk;
			$current =  $rank_points{$rk} unless $current;
			$ok++ if $rank_points{$rk} < $current;
			$not_ok .= ", " if ($rank_points{$rk} > $current) && $not_ok;
			$not_ok .= $rk if $rank_points{$rk} > $current;
			Tab::debuglog("Rank $rk has points $rank_points{$rk} compared to current $current. OK $ok NOT $not_ok");
			$current = $rank_points{$rk};
		}

		Tab::debuglog($ARGS{"lpw"}." first is LPW and not ok is $not_ok");

		if ($ARGS{"lpw"} && $not_ok && $no_lpw) { 
			$errs .= "<p>Rank order must match the order of points given.</p>";
		} elsif ($not_ok && not defined $ARGS{"lpw"}) { 
			$errs .= "<p>Entry ranked $not_ok has worse points than a lower ranked entry</p>";
			$errs .= "<p>Rank order must match the order of points given.</p>" if $no_lpw;
			$errs .= "<p>You must mark the low-point rank checkbox if that's what you intend.</p>" unless $no_lpw;
		} elsif ($ARGS{"lpw"} && not defined $not_ok) { 
			$errs .= "<p>You marked the low-point rank checkbox, but the ranks are in order of points.  Please check for errors and correct them.</p>";
		}

		Tab::debuglog($ARGS{"lpw"}." is LPW and not ok is $not_ok");


	}

	if ($team_points) { 

		my %points_taken = ();

		BALLOT:
		foreach my $ballot (@ballots) { 

			my $points = $ARGS{$ballot->id."_points"};

			unless ($drop_ballot{$ballot->id}) { 
				$errs .= "<p>Points missing</p>" if $min_ob_points > 0 && not defined $points;
				next BALLOT unless $points;
			}

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") { 
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			unless ($drop_ballot{$ballot->id}) { 
				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"  if $points_taken{$points} && $point_ties < 1;
				$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>" if $points < $min_ob_points || $points > $max_ob_points;
			}

			$points_taken{$points}++;
			$entry_values{$ballot->entry->id."_points"} += $points;

		}

	} 

	if ($points) { 

		my %points_taken;

		foreach my $student (@students) { 

			my $points = $ARGS{$student->id."_points"};

			$errs .= "<p>Points missing</p>" if $min_ob_points > 0 && not defined $points;
			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") { 
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

			$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"  if $points_taken{$points} && $point_ties < 1;
			$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>" if $points < $min_ob_points || $points > $max_ob_points;

			$points_taken{$points}++;
			$student_values{$student->id."_points"} = $points;
			$entry_values{$student_entry{$student->id}."_points"} += $points;

			$total_points += $points;

		}
	}

	my $winner;

	if ($wins)  {

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>" unless $winner;
		$errs .= "<p>Your winner and your chosen side did not agree</p>" if $winner && $winner->side != $ARGS{"winner_side"};

		if ($winner && $entry_headcount{$winner->entry->id} == $max_headcount) {   #2nd bit avoid mavericks

			my $winner_points = $entry_values{$winner->entry->id."_points"};

			foreach my $ballot (@ballots) { 
	
				my $bal_points = $entry_values{$ballot->entry->id."_points"};
		
				if ($no_lpw) {
					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>" if $winner_points < $bal_points;
				} else { 
					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>" if $winner_points < $bal_points && not defined $ARGS{"lpw"};
					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>" if $winner_points > $bal_points && $ARGS{"lpw"};
				}
		
			}

		}
	
	}

	if ($errs) { 

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

		foreach my $key (keys %ARGS) { 
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			next if index($key, 'comments') != -1;
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&errs=$errs";

		$m->redirect("ballot.mhtml".$url_args);

	} else { 

		# Clear the old cruft

		Tab::BallotValue->set_sql( clear_cruft => "
			delete ballot_value.*
			from ballot_value, ballot
			where ballot.panel = ?
			and ballot.judge = ? 
			and ballot_value.tag != \"rfd\"
			and ballot_value.tag != \"comments\"
			and ballot_value.tag != \"title\"
			and ballot.id = ballot_value.ballot");

		Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

		sleep 1;

		foreach my $ballot (@ballots) { 

			$ballot->audit("");

			$ballot->update;

			if ($wins) { 

				my $tigers_blood = 0;

				$tigers_blood++ if $winner->id == $ballot->id;

				my $winner = Tab::BallotValue->search({ ballot => $ballot->id, tag => "ballot"})->first;

				unless ($winner) { 

					eval { 
						$winner = Tab::BallotValue->create({
							ballot   => $ballot->id,
							value    => $tigers_blood,
							tag      => "ballot",
							tiebreak => 2,
							student  => 0
						});
					};

				}

			}

			if ($team_points) { 
		
				if ($type eq "speech" || $type eq "congress") { 

					my $points = Tab::BallotValue->search(ballot => $ballot->id, tag => "points")->first;

					eval { 
						$points = Tab::BallotValue->create({
							ballot   => $ballot->id,
							tag      => "points",
							tiebreak => 3,
							value    => $entry_values{$ballot->entry->id."_points"}
						});
					} unless $points;

				} else { 

					foreach my $student (@students) { 

						next unless $student_entry{$student->id} == $ballot->entry->id;

						my $points = Tab::BallotValue->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;

						eval { 
							$points = Tab::BallotValue->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "points",
								tiebreak => 3,
								value    => $entry_values{$ballot->entry->id."_points"}
							}); 
						} unless $points;
					}
				}
			}
				
			if ($points) { 

				foreach my $student (@students) { 

					next unless $student_entry{$student->id} == $ballot->entry->id;

					my $points = Tab::BallotValue->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;

					eval { $points = Tab::BallotValue->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "points",
							tiebreak => 3,
							value    => $student_values{$student->id."_points"}
						}); 
					} unless $points;
				}
			}

			if ($ranks) { 

				foreach my $student (@students) { 

					next unless $student_entry{$student->id} == $ballot->entry->id;

					my $value = 0;
					$value = $student_values{$student->id."_rank"} if $student_values{$student->id."_rank"};

					my $ranks = Tab::BallotValue->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;

					eval { 
						$ranks = Tab::BallotValue->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "rank",
							tiebreak => 1,
							value    => $value
						});
					} unless $ranks;

				}

			}

			if ($team_ranks) { 
		
				if ($type eq "speech" || $type eq "congress") { 

					my $ranks = Tab::BallotValue->search(ballot => $ballot->id, tag => "rank")->first;

					eval { 
						$ranks = Tab::BallotValue->create({
							ballot   => $ballot->id,
							tag      => "rank",
							tiebreak => 1,
							value    => $entry_values{$ballot->entry->id."_rank"}
						});
					} unless $ranks;

				} else { 

					foreach my $student (@students) { 

						next unless $student_entry{$student->id} == $ballot->entry->id;

						my $ranks = Tab::BallotValue->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;

						eval { 
							$ranks = Tab::BallotValue->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "rank",
								tiebreak => 3,
								value    => $entry_values{$ballot->entry->id."_rank"}
							}); 
						} unless $ranks;
					}
				}
			}
		}
	}


</%init>

	<div class="main">

%		if ($points && not defined $total_points) { 

			<div class="block padmuchmore martop centeralign">

				<br />
				<br />
				<br />
				<br />
				<br />

				<h1 class="centeralign redtext" style="font-size: 48px;">
					YOU GAVE NO POINTS?!
				</h1>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

				<h4 class="martop centeralign">
					If you are trying to enter a forfeit, stop.  Contact the tab room. 
					They have to enter noshow/forfeit wins, not you.   
				</h4>

                <p>
                    If you are at some college tournament and some random
                    sophomore told you that's how you should enter a forfeit,
                    tell Danny he is wrong, that the author of the software says
                    that's not how to do it, and that tab needs to be notified.
                </p>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

			</div>

%		}

%		if ($wins && $side_disagree < 1) { 
	
%			my $winside = $ARGS{"winner_side"};
%			my $side = $aff_string if $winside == 1;
%			$side = $neg_string if $winside == 2;

			<h5>Your winner was</h5>

			<br />
			<br />

			<div class="block padmuchmore martop centeralign">

				<h1 class="centeralign">
					<% $winner->entry->code %> on the <% $side %>
				</h1>

				<h5 class="martop centeralign">
					(<% $winner->entry->name %>)
				</h5>

			</div>

			<br />
%		} else {  

			<h4>Please confirm your ranking of this round:</h4>

			<br />
			<br />
%		}

%		if (($team_points || $team_ranks) && $side_disagree < 1) { 

%			my $switch;

%			@entries = sort {$entry_values{$a->id."_points"} <=> $entry_values{$b->id."_points"}} @entries if $team_points;
%			@entries = sort {$entry_values{$a->id."_rank"} <=> $entry_values{$b->id."_rank"}} @entries if $team_ranks;

			<& "/funclib/tablesorter.mas", table => "final" &>

			<table id="final">

				<thead>

				<tr class="smallish yellowrow nosort centeralign">

%					if ($team_ranks) { 
						<th>
							Rank
						</th>
%					}

%					if ($team_points) { 
						<th>
							Points
						</th>
%					}

					<th>
						Code
					</th>

%	               if ($ballot_school_code) {
						<th>
							School
						</th>
%	               }
%	               if ($ballot_school_name) {
						<th>
							School
						</th>
%	               }

%	               if ($ballot_entry_name) {
						<th>
							Name
						</th>
%	               }
%	               if ($ballot_entry_first_name) {
						<th>
							First Name
						</th>
%	               }
%	               if ($ballot_entry_title) {
						<th>
							Title/Question
						</th>
%	               }
%					if ($type eq "speech") { 
						<th>
							Spoke
						</th>
%					}


				</tr>
				</thead>

				<tbody>

%				foreach my $entry (@entries) { 
%					next if $entry->dropped &! $entry_values{$entry->id."_rank"} &! $entry_values{$entry->id."_points"};

					<tr>

%						if ($team_ranks) { 
							<td class="centeralign">
								<% $entry_values{$entry->id."_rank"} %>
							</td>
%						}

%						if ($team_points) { 
							<td class="centeralign">
								<% $entry_values{$entry->id."_points"} ?  $entry_values{$entry->id."_points"} : "ZERO"  %>
							</td>
%						}

						<td class="centeralign">
							<% $entry->code %>
						</td>

%						if ($ballot_school_code) {
							<td class="centeralign">
								<% $entry->school->code %>
							</td>
%		               	}
%		               if ($ballot_school_name) {
							<td>
								<% $entry->school->name %>
							</td>
%		               }

%		               if ($ballot_entry_name) {
							<td>
								<% $entry->name %>
							</td>
%		               }
%		               if ($ballot_entry_first_name) {
							<td>
%								foreach my $student (@{$entry_students{$entry->id}}) { 
									<% $student->first %>
%								}
							</td>
%		               }
%		               if ($ballot_entry_title) {
							<td>
								<% $entry_values{$entry->id."_title"} %>
							</td>
%		               }

%						if ($type eq "speech") { 
							<td class="centeralign">
								<% Lingua::EN::Numbers::Ordinate::ordinate($entry->speaks) %>
							</td>
%						}



					</tr>
%				}

				</tbody>
			</table>

%		}

%		if (($points || $ranks) && $side_disagree < 1) { 

%			foreach my $entry (@entries) { 

				<span class="pagehalf">

					<span class="bold centeralign full">
						<% $entry->code %> (<% $entry->name %>)
					</span>

%					my $switch;
%					foreach my $student (@{$entry_students{$entry->id}}) { 

						<div class="row padmore">

							<span class="half rightalign">
								<%	$student->first." ".$student->last %>:
							</span>

%							if ($points) { 
								<span class="quarter centeralign">
									<% $student_values{$student->id."_points"} ?  $student_values{$student->id."_points"} : "ZERO"  %>
								</span>
%							}

%							if ($ranks) { 
								<span class="quarter centeralign">
									<% Lingua::EN::Numbers::Ordinate::ordinate($student_values{$student->id."_rank"}) %>
								</span>
%							}

						</div>

%					}

				</span>
%			}

%		}

%		if ($side_disagree) { 
			
			<h2>WHOOOPSIE DAISY!</h2>
			
			<p class="warning centeralign padmore martopmore">
				Your ballot disagreed with another judge's on sides.  You had a
				team on aff that the other judge had on negative and
				vice-versa.
			</p>

			<br class="clear;" />

			<h4>Please confirm: which team was actually affirmative?</h4>

			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />

			<div class="centeralign">
%				foreach my $entry (@entries) { 
					<a class="dkblue" style="padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;" href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>">
						<% $entry->code %> was AFF
					</a>
%				}
			</div>

%		}  else { 

			<br />
			<br />
			<hr />
			<br />
			<br />

			<span class="pagehalf centeralign">
				<a class="dkred full confirm" href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					NO! <% $side_disagree ? "FIX SIDES PLEASE" : "RE-ENTER BALLOT" %>
				</a>
			</span>

			<span class="pagehalf centeralign">
				<a class="dkgreen full confirm" href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					YES! CORRECT! CONFIRM IT
				</a>
			</span>

			<br style="clear: both;">

			<h5 class="centeralign martopmore padmuchmore redtext">
				Once you confirm your ballot, you cannot change it online.  You'll have to contact the tournament staff to make any further changes
			</h5>

%		}

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>RFD</h4>

			<% $ARGS{"rfd"} %>

		</div>

	</div>

