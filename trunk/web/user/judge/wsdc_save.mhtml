<%args>
	$account
	$panel_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);
	use Data::Dumper; 


    unless ($panel_id && $judge_id) { 
        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/user/home.mhtml?err=$err");
    }   

    unless ($account->site_admin || $judge->account->id == $account->id) { 
        my $err = "You are not authorized to enter ballots for that judge.";
        $m->redirect("/user/home.mhtml?err=$err")
    }   

    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );
	my %ballot_by_id = map {$_->id => $_} @ballots;

    unless (@ballots) { 
        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $unconfirmed;

	foreach my $ballot (@ballots) { 
		$unconfirmed++ unless $ballot->audit > 0;
	}

	unless ($unconfirmed) { 
        my $err = "Those ballots were already confirmed.  Please contact tab if you believe there was an error";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $round = $panel->round;
	my $event = $round->event;
	my $group = $event->judge_group;
    my $tourn = $group->tourn;
    my $type = $event->type;

	my $aff_string = $event->setting("aff_label");
	my $neg_string = $event->setting("neg_label");
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_lpw;

	if ($event->setting("no_lpw") || $type eq "speech" || $type eq "congress") { 
		$no_lpw++;
	}

    my $tiebreaks = $round->tb_set;

    my $wins;
    my $points;
	my $total_points;
    my $ranks;

	my @entries;
	my %ballot_points = ();
	my %already;

	foreach my $ballot (@ballots) { 

		my $entry = $ballot->entry;

		if ($ARGS{"rfd"}) { 
			
			my $rfd = Tab::BallotValue->search( tag => "rfd", ballot => $ballot->id )->first;

			if ($rfd) { 
				$rfd->content($ARGS{"rfd"});
				$rfd->update;
			} else { 

				eval { 
					Tab::BallotValue->create({
						tag      => "rfd",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $ARGS{"rfd"},
						student  => 0
					});
				};

			}
		}

		if ($ARGS{"comments_".$ballot->id}) {

			my $comments = Tab::BallotValue->search( tag => "comments", ballot => $ballot->id )->first;

			if ($comments) { 
				$comments->content($ARGS{"comments_".$ballot->id});
				$comments->update;
			} else { 

				eval { 
					Tab::BallotValue->create({
						tag      => "comments",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $ARGS{"comments_".$ballot->id},
						student  => 0
					});
				};
			}
		}

	}

	# If the user only wants to save the RFD and comments, this reconstructs
	# the ballot for the user and then puts them back there because I'm too
	# lazy to do a jquery post right now.  This is also useful later in case
	# the user screws something up and we need to kick them back to their
	# ballot.

	my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";

	foreach my $key (keys %ARGS) { 
		next if $key eq "panel_id";
		next if $key eq "judge_id";
		next if $key eq "rfd";
		next if index($key, 'comments') != -1;
		$url_args .= "&$key=$ARGS{$key}";
	}

	if ($skipme) { 
		$url_args .= "&msg=RFD and comments Saved";
		$m->redirect("wsdc_ballot.mhtml".$url_args);
	} 

	# Process the tiebreakers

    foreach my $tb ($tiebreaks->tiebreaks) {
        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
        $points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
    }

    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
	my %student_by_id = map {$_->id => $_} @students;

    my $min_content_points = $event->setting("min_content_points");
    my $max_content_points = $event->setting("max_content_points");

    my $min_style_points = $event->setting("min_style_points");
    my $max_style_points = $event->setting("max_style_points");

    my $min_strategy_points = $event->setting("min_strategy_points");
    my $max_strategy_points = $event->setting("max_strategy_points");

    $max_content_points = 32 unless $max_strategy_points;
    $max_style_points = 32 unless $max_strategy_points;
    $max_strategy_points = 16 unless $max_strategy_points;

    my $point_increments = $event->setting("point_increments");
    my $point_ties = $event->setting("point_ties");

	my $errs;

	my %student_values = ();

	my $side_disagree;

	my $no_side_constraints++ if $event->setting('no_side_constraints');
    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;


	if ($no_side_constraints || ($sidelocks && not defined $locked)) { 

		my %taken = ();
		my %sides = ();

		foreach my $ballot (@ballots) { 

			my $side = $ARGS{$ballot->id."_side"};
			$errs .= "<p>You must specify a side for both entries</p>" unless $side;

			if ($taken{$side}) {
				$errs .= "<p>You cannot make entries all on one side.  Try again</p>"
			} else { 
				$taken{$side}++;
				$ballot->side($side);
				$ballot->update;
				$sides{$side} = $ballot->entry->id;
				$sides{$ballot->entry->id} = $side;
			}
		}
	
		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
			next if $other_judge->id == $judge->id;
			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);

			if ($win && $winside) { 
				$side_disagree++ if $sides{$winside} != $win->id;
			} else { 
    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
				foreach my $ballot (@ballots) { 
					$ballot->side($sides{$ballot->entry->id});
					$ballot->update;
				}
			}
		}
	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

	my %student_by_position = ();

	foreach my $ballot (@ballots) { 
		
		foreach my $position (1 .. 4) { 

			my $key = $position."_".$ballot->id."_student";

			my $student_id = $ARGS{$key};
			
			if ($student_by_id{$student_id}) { 

				$student_by_position{$ballot->id}{$position} = $student_by_id{$student_id};
				$student_values{$student_id}{"position"} = $position unless $position == 4;
				$student_values{$student_id}{"tag"} = $position."_".$ballot->id unless $position == 4;
				$student_values{$student_id}{"ballot"} = $ballot->id; 

			} else { 
				$errs .= "<p>Student $student_id selected for key $key position $position on ".$ballot->entry->code." was not valid</p>";
			}
		}
	}

	if ($ranks) { 

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) { 

			my $rank = $ARGS{$student->id."_ranks"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;

			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range.</p>" if $rank < 1 || $rank > 6;

			$rank_taken{$rank}++;
			$student_values{$student->id}{"rank"} = $rank;
			
			if ($points) { 
				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_content"};
				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_style"};
				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_strategy"};
			}
		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) { 
			$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
			$current = $rank_points{$rk};
		}

	}

	if ($points) { 

		foreach my $ballot (@ballots) { 

			foreach my $position (1 .. 4) { 

				my $student = $student_by_position{$ballot->id}{$position};
				my $multiplier = 1;
				$multiplier = .5 if $position == 4;

				next unless $student && $student->id;
				next unless $student_values{$student->id}{"position"};

				foreach my $category ("content", "style", "strategy") { 

					my $speech_string = ucfirst($category)." points for ".$student->first." ".$student->last;
					$speech_string .= " in the reply speech " if $position == 4;

					my $tag = $category;
					$tag .= "_reply" if $position == 4;

					$student_values{$student->id}{$tag} = $ARGS{$position."_".$ballot->id."_".$category};

					$errs .= "<p> $speech_string were below minimum </p>" 
						if $student_values{$student->id}{$tag} < $min_content_points * $multiplier;

					my $ballot_points = $student_values{$student->id}{$tag};

					$errs .= "<p> $speech_string  missing for ".$student->first." ".$student->last ."</p>" if not defined $ballot_points;
					next unless $ballot_points;

					$ballot_points = int($ballot_points + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") { 
						$ballot_points = $ballot_points * 10;
						$ballot_points = int($ballot_points + 0.5);
						$ballot_points = $ballot_points/10;
					}

					$ballot_points = nearest(.5, $ballot_points) if $point_increments eq "half";

					$errs .= "<p>$speech_string must be a number</p>" unless ($ballot_points eq $ballot_points + 0);

					$student_values{$student->id}{"points"} += $ballot_points if $position != 4;
					$student_values{$student->id}{"rebuttal_points"} += $ballot_points if $position == 4;
					$ballot_points{$student_values{$student->id}{"ballot"}} += $ballot_points;

					$total_points += $ballot_points;

				}

			}
		}

		unless ($point_ties) { 

			my %points_taken = ();

			foreach my $ballot (@ballots) { 

				if ($points_taken{$ballot_points{$ballot->id}}++) { 
					$errs .= "<p>Both teams have the same number of points.  Ties are not allowed</p>";
				}
			}
		}
	}

	my $winner;

	if ($wins)  {

		$winner = $ballot_by_id{$ARGS{"winner"}};

		$errs .= "<p>You didn't choose a winner.</p> <p>There are no ties in debate, though there are sometimes tears.  Be strong.</p>" unless $winner;
		$errs .= "<p>Your winner and your chosen side did not agree</p>" if $winner && $winner->side != $ARGS{"winner_side"};

		if ($winner) { 

			my $winner_points = $ballot_points{$winner->id};

			foreach my $ballot (@ballots) { 
	
				my $bal_points = $ballot_points{$ballot->id};
		
				if ($no_lpw) {
					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>" 
						if $winner_points < $bal_points;
				} else { 
					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>" 
						if $winner_points < $bal_points && not defined $ARGS{"lpw"};
					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>" 
						if $winner_points > $bal_points && $ARGS{"lpw"};
				}
		
			}

		}
	
	}

	if ($errs) { 
		
		# If there are errors we send them back from whence they came with the
		# error messages

		$url_args .= "&errs=$errs";
		$m->redirect("wsdc_ballot.mhtml".$url_args);

	} else { 

		# Clear the old cruft

		Tab::BallotValue->set_sql( clear_cruft => "
			delete ballot_value.*
			from ballot_value, ballot
			where ballot.panel = ?
			and ballot.judge = ? 
			and ballot_value.tag != \"rfd\"
			and ballot_value.tag != \"comments\"
			and ballot_value.tag != \"title\"
			and ballot.id = ballot_value.ballot");

		Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

		sleep 1;

		foreach my $ballot (@ballots) { 

			$ballot->audit("");
			$ballot->update;


			if ($wins) { 

				my $tigers_blood = 0;

				$tigers_blood++ if $winner->id == $ballot->id;

				my $winner = Tab::BallotValue->search({ ballot => $ballot->id, tag => "ballot"})->first;

				unless ($winner) { 

					eval { 
						$winner = Tab::BallotValue->create({
							ballot   => $ballot->id,
							value    => $tigers_blood,
							tag      => "ballot",
							tiebreak => 2,
							student  => 0
						});
					};

				}

			}

			foreach my $position (1 .. 4) { 

				my $student = $student_by_position{$ballot->id}{$position};

				if ($points) { 

					Tab::debuglog("OK now can I have points for $student?");

					my $tag = "points";
					my $tiebreak = 3;

					$tag = "rebuttal_points" if $position == 4;
					$tiebreak = 6 if $position == 4;

					my $existing_points = Tab::BallotValue->search({ 
						ballot  => $ballot->id,
						tag     => $tag,
						student => $student->id})->first;

					eval { 
						$existing_points = Tab::BallotValue->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => $tag,
							tiebreak => $tiebreak,
							position => $position,
							value    => $student_values{$student->id}{$tag}
						}); 
					} unless $existing_points;
				}

				if ($ranks) { 

					my $value = 0;
					$value = $student_values{$student->id}{"rank"} if $student_values{$student->id}{"rank"};

					my $existing_ranks = Tab::BallotValue->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;

					eval { 
						$existing_ranks = Tab::BallotValue->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "rank",
							tiebreak => 1,
							value    => $value
						});
					} unless $existing_ranks;

				}

			}

		}

	}

</%init>

	<div class="main">

%		if ($points && not defined $total_points) { 

			<div class="block padmuchmore martop centeralign">

				<br />
				<br />
				<br />
				<br />
				<br />

				<h1 class="centeralign redtext" style="font-size: 48px;">
					YOU GAVE NO POINTS?!
				</h1>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

				<h4 class="martop centeralign">
					If you are trying to enter a forfeit, stop.  Contact the tab room. 
					They have to enter noshow/forfeit wins, not you.   
				</h4>

				<p>
					If you are at some college tournament and some random
					sophomore told you that's how you should enter a forfeit,
					tell Danny he is wrong, that the author of the software says
					that's not how to do it, and that tab needs to be notified.
				</p>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

			</div>

%		}

%		if ($side_disagree) { 
			
			<h2>WHOOOPSIE DAISY!</h2>
			
			<p class="warning centeralign padmore martopmore">
				Your ballot disagreed with another judge's on sides.  You had a
				team on aff that the other judge had on negative and
				vice-versa.
			</p>

			<br class="clear;" />

			<h4>Please confirm: which team was actually affirmative?</h4>

			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />
			<br class="clear;" />

			<div class="centeralign">
%				foreach my $entry (@entries) { 
					<a class="dkblue" style="padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;" href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>">
						<% $entry->code %> was AFF
					</a>
%				}
			</div>

			<br />
			<br />
			<hr />
			<br />
			<br />

			<span class="pagehalf centeralign">
				<a class="dkred full confirm" href="wsdc_ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>&url_args=<% $url_args %>">
					NO! FIX MY SIDES!
				</a>
			</span>

			<span class="pagehalf centeralign">
				<a class="dkgreen full confirm" href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					YES! I AM CORRECT! CONFIRM IT
				</a>
			</span>

			<br style="clear: both;">

			<h5 class="centeralign martopmore padmuchmore redtext">
				Once you confirm your ballot, you cannot change it online.  You'll have to contact the tournament staff to make any further changes
			</h5>

%		} else { 

%			if ($wins) { 
		
%				my $winside = $ARGS{"winner_side"};
%				my $side = $aff_string if $winside == 1;
%				$side = $neg_string if $winside == 2;

				<h5>Your winner was</h5>

				<br />
				<br />

				<div class="block padmuchmore martop centeralign">

					<h1 class="centeralign">
						<% $winner->entry->code %> on the <% $side %>
					</h1>

					<h5 class="martop centeralign">
						(<% $winner->entry->name %>)
					</h5>

				</div>

				<br />

%			} else {  

				<h4>Please confirm your ranking of this round:</h4>

				<br />
				<br />
%			}

%			if ($points || $ranks) { 

%				foreach my $ballot (@ballots) { 

%					my $entry = $ballot->entry;

					<span class="pagehalf">

						<span class="bold centeralign full">
							<div class="full">
								<% $entry->code %> 
							</div>
							<div class="full">
								(<% $entry->name %>)
							</div>
						</span>

%						foreach my $position (1 .. 4) { 

%							my $student = $student_by_position{$ballot->id}{$position};

							<div class="row padmore">

								<span class="eighth">
									<% $position == 4 ? "Reply" : "Spkr ".$position %>
								</span>

								<span class="threeeighths">
									<%	$student->first." ".$student->last %>:
								</span>

%								if ($points) { 
%									if ($position == 4) { 
										<span class="quarter">
											<% $student_values{$student->id}{"rebuttal_points"} ?  $student_values{$student->id}{"rebuttal_points"} : "ZERO"  %>
										</span>
%									} else { 
										<span class="quarter">
											<% $student_values{$student->id}{"points"} ?  $student_values{$student->id}{"points"} : "ZERO"  %>
										</span>
%									}
%								}

%								if ($ranks) { 
									<span class="quarter rightalign">
										<% Lingua::EN::Numbers::Ordinate::ordinate($student_values{$student->id}{"rank"}) %>
									</span>
%								}

							</div>

%						}

					</span>
%				}

%			}

			<br />
			<br />
			<hr />
			<br />
			<br />

			<span class="pagehalf centeralign">
				<a class="dkred full confirm" href="wsdc_ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>&url_args=<% $url_args %>">
					NO!  RE-ENTER BALLOT
				</a>
			</span>

			<span class="pagehalf centeralign">
				<a class="dkgreen full confirm" href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
					YES! CORRECT! CONFIRM IT
				</a>
			</span>

			<br style="clear: both;">

			<h5 class="centeralign martopmore padmuchmore redtext">
				Once you confirm your ballot, you cannot change it online.  You'll have to contact the tournament staff to make any further changes
			</h5>

%		}

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>RFD</h4>

			<% $ARGS{"rfd"} %>

		</div>

	</div>

