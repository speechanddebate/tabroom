<%args>
	$entry_id
	$group_id
</%args>
<%init>

	use POSIX;

	my $now = DateTime->now();
	my $err;

	my $entry = Tab::Entry->retrieve($entry_id);
	my $group = Tab::JudgeGroup->retrieve($group_id);

	my $prefs_style = $group->setting("prefs");

	Tab::Entry->set_sql(wipe_prefs => " delete from rating where entry = ? and ordinal = 0");
	Tab::Entry->sql_wipe_prefs->execute($entry->id);

    my @rating_tiers = Tab::RatingTier->search(  judge_group => $group->id, type => "mpj" );
    @rating_tiers = sort {$b->name <=> $a->name} @rating_tiers;

	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
	my %conflicts_by_id = ();
	foreach (@conflicts, @school_conflicts) { 
		$conflicts_by_id{$_->judge->id}++; 
	}

	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
	my %event_struck = map {$_->id => 1} @event_struck_judges;

    my @judges;
	my @all_judges = Tab::Judge->search_where({ active => 1, judge_group => $group->id });

	my %judges_at_tier = ();

	my $no_frees = $group->setting("free_strikes_no_pref");
    my $freebieref = $m->comp("/funclib/free_strikes.mas", group => $group); 
    my %freebie = %{$freebieref}; 

	my $rounds_per++ if $group->setting("prefs") eq "tiered_round";

	my $judge_pool;

    foreach my $judge (@all_judges) {

        next if $judge->school->id == $entry->school->id;
        next if $conflicts_by_id{$judge->id};
		next if $event_struck{$judge->id};
		next if $no_frees && $freebie{$judge->id};

        push (@judges, $judge);

		next if $freebie{$judge->id};

		if ($rounds_per) { 
			$judges_at_tier{$ARGS{$judge->id}} += $judge->obligation;
			$judges_at_tier{$ARGS{$judge->id}} += $judge->hired;
			$judge_pool += $judge->obligation;
			$judge_pool += $judge->hired;
		} else { 
			$judges_at_tier{$ARGS{$judge->id}}++;
			$judge_pool++;
		}
    }

    my %tier_min = ();
	my %tier_name = ();
    my %tier_limit = ();

	foreach my $tier (@rating_tiers) {

		if ($prefs_style eq "caps" || $prefs_style eq "ndt") { 
	        $tier_limit{$tier->id} = $tier->max;
	        $tier_min{$tier->id} = $tier->min;
		} else { 
	        $tier_limit{$tier->id} = ceil($judge_pool * $tier->max / 100);
	        $tier_min{$tier->id} = ceil($judge_pool * $tier->min / 100);
		}

		$tier_name{$tier->id} = $tier->name;
    }

    my $cumulate++ if $group->setting("cumulate_mjp");
    my %spares_at_tier;

    if ($cumulate) { 
		foreach my $tier (@rating_tiers) {
			if ($judges_at_tier{$tier->id} < $tier_limit{$tier->id} && $tier_limit{$tier->id}) {
				$spares_at_tier{$tier->id} += ceil($tier_limit{$tier->id} - $judges_at_tier{$tier->id});
			}   
        }   
    }

	my $spares_available;
	my %tier_count;

	foreach my $tier (@rating_tiers) { 

		$spares_available += $spares_at_tier{$tier->id};

		my $tier_count;

		JUDGE:
		foreach my $judge (@judges) { 

			next unless $ARGS{$judge->id} == $tier->id;
	
			my $spared;

			unless ($freebie{$judge->id}) { 

				if ($rounds_per) { 
					$tier_count += $judge->obligation;
					$tier_count += $judge->hired;
				} else { 
					$tier_count++;
				} 

				if ($tier_count > $tier_limit{$ARGS{$judge->id}} ) { 

					if ( ($spares_available + $tier_limit{$ARGS{$judge->id}}) >= $tier_count) { 

						if ($rounds_per) { 
							$spares_available -= $judge->obligation;
							$spares_available -= $judge->hired;
							$spared++;
						} else { 
							$spares_available--;
							$tier_count--;
							$spared++;
						}

					}
			
					unless ($spared || $tier_limit{$ARGS{$judge->id}} == 0) {
						my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
						$err = "You had too many judges rated ".$tier->name." <br/>" unless $err;
						$err .= " - ".$judge->first." ".$judge->last." not rated <br />\n";
						next JUDGE;
					}
				}
			
			}

			Tab::Rating->create({
				type => "entry",
				tourn => $group->tourn->id,
				judge => $judge->id,
				entry => $entry->id,
				rating_tier => $ARGS{$judge->id},
				entered => $now
			});

		}

		$tier_count{$tier->id} = $tier_count;

	}

    @rating_tiers = sort {$a->name <=> $b->name} @rating_tiers;
	my $min_spares_available;

	foreach my $tier (@rating_tiers) { 

		my $diff = $tier_min{$tier->id} - $tier_count{$tier->id};

		unless ($diff <= $min_spares_available || $diff < 1) {
			$err .= "You are $diff under on tier ".$tier->name." <br /> You have ".$tier_count{$tier->id}." and need ".$tier_min{$tier->id}." <br />";
		}

		$min_spares_available -= $diff;

	}	

	my $msg = $entry->name."'s prefs saved in ".$group->abbr;
	$msg =~ s/\&/and/g;
	$m->redirect("tiered_prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&group_id=".$group->id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");

</%init>
