<%args>
	$school_id
	$group_id
</%args>
<%init>

	use POSIX;

	my $now = DateTime->now();
	my $err;

	my $group = Tab::JudgeGroup->retrieve($group_id);
	my $school = Tab::School->retrieve($school_id);

	my @all_judges = Tab::Judge->search( judge_group => $group_id, active => 1 );
    my @quals = Tab::Qual->search(  judge_group => $group->id, type => "mpj" );

	my @conflicts = $school->conflicts;
	my %conflicts_by_id = ();
	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }

	my @judges;

	foreach my $judge (@all_judges) { 
		next if $judge->school->id == $school_id;
		next if $conflicts_by_id{$judge->id};
		push (@judges, $judge);
	}

	my $judge_jpool = scalar @judges;

	my %qual_limit = ();
	foreach my $qual (@quals) {
		$qual_limit{$qual->id} = ceil($judge_jpool * $qual->max / 100);
	}
	my %judges_at_qual = ();

	Tab::School->sql_wipe_prefs->execute($school_id);

	JUDGE:
	foreach my $judge (@judges) { 

		next unless $ARGS{$judge->id};

		if ($judges_at_qual{$ARGS{$judge->id}} >= $qual_limit{$ARGS{$judge->id}}) { 
			my $qual = Tab::Qual->retrieve($ARGS{$judge->id});
			$err = "You have too many judges rated ".$qual->name."  ".$judge->first." ".$judge->last." has not been rated.<br>\n";
			next JUDGE;
		}

		$judges_at_qual{$ARGS{$judge->id}}++;

		Tab::Rating->create({
			type => "school",
			tournament => $group->tournament->id,
			judge => $judge->id,
			school => $school_id,
			qual => $ARGS{$judge->id},
			entered => $now
		});

	}	

	my $msg = "School ratings saved in ".$group->abbr;

	$m->redirect("/user/tourn/entry/ratings/school_ratings.mhtml?school_id=$school_id&group_id=".$group->id."&err=".$err."&msg=".$msg);

</%init>
