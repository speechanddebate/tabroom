<%args>
	$entry_id
	$title   => undef
	$code    => undef
	$name    => undef
	$ada     => undef
	$seed    => undef
	$atlarge => undef
	$from    => undef
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);
	my $event = $entry->event;
	my $tourn = $event->tourn;
	my $school = $entry->school;
	my $code_style = $event->setting("code_style");

	my $max = $event->setting("max_entry");
	my $min = $event->setting("min_entry");

	my $err;

	if ($event->setting("ask_for_titles")) {

		unless ($title) { 
			$err = "You must enter a piece title (and/or ISBN number)";
		}

		$entry->setting("title", $title);

	}

	my @quals = $entry->qualifiers;
	my %used_quals;

	my $quals = $event->setting('ask_quals');
	my $required = $quals;
	$quals = 15 if $event->setting("more_quals");

	foreach my $step (1 .. $quals) { 

		my $name = $ARGS{"qual_".$step};
		my $result = $ARGS{"qualpts_".$step};

		$err = "Qualifier $step missing" unless $name || $step > $required || $atlarge;

		next unless $name;

		my $foundit;

		foreach my $qual (@quals) {
			if ($qual->name eq $name) { 
				$used_quals{$qual->id}++ ;
				$qual->result($result);
				$qual->update;
				$foundit++;
			}
		}

		unless ($foundit) { 
			Tab::Qualifier->create({
				entry => $entry->id,
				name => $name,
				result => $result
			});
		}
	}

	foreach my $qual (@quals) {
		$qual->delete unless $used_quals{$qual->id};
	}

	my $other = Tab::Entry->search_where({ name => $name, school => $school->id, event => $event->id, id => {'!=', $entry->id} })->first;

	if ($other) { 
		$err .= "Name $name is already taken.  Choose another";
	} else { 
		$entry->name($name);
	}

	my %used_student = ();
	my %students_by_id = ();

	my @students = $entry->students;

	foreach my $student (@students) {
		$students_by_id{$student->id} = $student;
	}

	my $first_name;
	my $last_name;
	my $notfirst;

	foreach my $step (1 .. $max) { 

		my $student_id = $ARGS{"student_".$step};
		next unless $student_id;
		next if $used_student{$student_id};

		my $student = Tab::Student->retrieve($student_id);
		next unless $student;

		if ($students_by_id{$student_id}) { 

			$used_student{$student_id}++;

		} else { 

			unless (Tab::EntryStudent->search( entry => $entry->id, student => $student_id)->first) { 
				Tab::EntryStudent->create({
					entry   => $entry->id,
					student => $student_id
				});
			}

		}

		$first_name = $student->first;
		$last_name .= " & " if $notfirst;
		$last_name .= $student->last;
		$notfirst++;

	}

	if ($notfirst == 1) { 
		$name = $first_name." ".$last_name unless $name;
	} else { 
		$name = $last_name unless $name;
	}

	my $housed;

	foreach my $student (@students) { 

		next if $used_student{$student->id};

		my $es = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
		$es->delete;

		my @housing = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);

		if (@housing) { 
			$housed .= "-" if $housed;
			$housed .= $student->id;
		}

	}

	my @count = $entry->students;
	$err .= "You don't have the minimum students to fill this entry." if scalar @count < $min;

	if ($code && $code ne $entry->code) { 

		my $other = Tab::Entry->search_where({
			code => $code, 
			school => $school->id, 
			event => $event->id,
			id => {'!=', $entry->id}	
		})->first;

		if ($other) { 
			$err .= "Code $code is already taken.  Choose another";
		} else { 
			$entry->code($code);
		}

	} elsif ($code ne $entry->code) { 

		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));

	}
	
	$entry->name($name);
	$entry->ada($ada);
	$entry->setting("registered_seed", $seed);

	if ($seed eq "full") { 
		$entry->setting("pairing_seed", 10);
	} elsif ($seed eq "half") { 
		$entry->setting("pairing_seed", 20);
	} elsif ($seed eq "free") { 
		$entry->setting("pairing_seed", 30);
	} elsif ($event->setting("apda")) { 
		$entry->setting("pairing_seed", 40);
	}

	$entry->setting("regsitered_seed", $atlarge);


	unless ($code_style eq "numbers" || $code_style eq "school_number" || $code_style eq "schoolname_code" || $code_style eq "school_name_only" || $code_style eq "register") { 
		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
	}
	
	$entry->update;

	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&err=$err") if $err;

	if ($housed) { 
		my $msg = "One of the removed entries had housing.  Transfer or drop housing request?";
		$m->redirect("details_housing.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&housed=$housed&msg=$msg");
	}

	my $msg = "Entry ".$entry->name." details saved";

	$m->redirect("onsite.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg") if $from eq "onsite";
	$m->redirect("students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");

</%init>
