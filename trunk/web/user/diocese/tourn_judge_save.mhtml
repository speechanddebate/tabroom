<%args>
	$group_id
	$region
	$tourn
	$first     => undef
	$last      => undef
	$judge_id  => undef
	$school_id => undef
	$alt_group => 0
	$gender    => undef
	$parli     => undef
	$jpool_id  => undef
	$notes     => undef
	$save      => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);

	my $msg;
	my $err;

	my $missing;

	my $group = Tab::JudgeGroup->retrieve($group_id);
	my $school = Tab::School->retrieve($school_id);

	my $judge;

	if ($judge_id) { 

		$judge = Tab::Judge->retrieve($judge_id);

		$judge->last($last);
		$judge->first($first);
		$judge->school($school->id);
		$judge->alt_group($alt_group);
		$judge->setting("parli", $parli);
		$judge->setting('gender', $gender);
		$judge->setting('notes', $notes);
		$judge->update;

		my $cj = $judge->chapter_judge;
		$cj->first($first);
		$cj->last($last);
		$cj->gender($gender);
		$cj->update;

		$msg = "Changes to Judge $first $last saved ";

	} else { 

		if ($first && $last && $gender && $school) { 

			my $cj = Tab::ChapterJudge->create({
				first   => $first,
				last    => $last,
				chapter => $school->chapter->id,
				gender  => $gender,
				created => $now
			});


			$judge = Tab::Judge->create({
				first         => $first,
				last          => $last,
				tourn         => $tourn->id,
				school        => $school->id,
				judge_group   => $group_id,
				alt_group     => $alt_group,
				active        => 1,
				chapter_judge => $cj->id,
				hired         => 0,
				obligation    => 0
			});

			$judge->setting("parli", $parli);
			$judge->setting('notes', $notes);
			$judge->setting('gender', $gender);

			$msg = "Judge $first $last added to the tournament";

		} else { 

			$missing .= "first," unless $first;
			$missing .= "last," unless $last;
			$missing .= "gender" unless $gender;
			$missing .= "school" unless $school;

			$err = "You did not fill in all required info.  All fields except for Notes are needed.  Try again. <br />";
			$m->redirect("/user/diocese/judge_edit.mhtml?group_id=".$group->id."&tourn_id=".$tourn->id."&region_id=".$region->id."&err=$err");
	
		}

	}

	if ($group->setting("ask_alts") &! $alt_group) { 
		$missing .= "alt_group" unless $alt_group;
		$err .= "You did not specify an alternative judging group.  Please fix.<br />";
	}

	if ($group->setting("ask_parli") &! $parli) { 
		$missing .= "parli" unless $parli;
		$err .= "You did not specify if the judge can be a parliamentarian.  Please fix.<br />";
	} elsif ($group->setting("ask_parli") && $region->quota > 4 && $parli ne "Y") { 
		$err .= "Your Congress judge is not a qualified parliamentarian.  Dioceses with quotas of 5 or 6 must bring a parliamentarian as their judge.  Substitute another judge <br />";
	}

	my @prelim_jpools = $m->comp("/funclib/group_jpools.mas", judge_group => $group, limit => "ncfl_prelims");

	if (@prelim_jpools) { 

		unless ($jpool_id) { 
			$missing .= "jpool";
			$err .= "You did not specify a prelim pool.  Please fix. <br />";
		} else { 

			my $jpool = Tab::JPool->retrieve($jpool_id);

			unless ($jpool->id == $judge->setting("prelim_jpool")) { 

				my @already = $m->comp("/funclib/judge_jpools.mas", judge => $judge, limit => "ncfl_prelims");

				foreach (@already) { $_->delete; }
				$judge->setting("prelim_jpool", $jpool_id);
				$judge->setting("prelim_jpool_name", $jpool->name);
				Tab::JPoolJudge->create({ judge => $judge->id, jpool => $jpool->id});

			}
		}

	}
			
    my @subsets = sort {$a->name cmp $b->name} $group->rating_subsets;
    my @tiers = sort {$a->name cmp $b->name} $group->rating_tiers;

	if (@subsets) { 
			
		SUBSET:
		foreach my $subset (@subsets) {
		
			unless ($ARGS{$subset->id}) { 
				$missing .= "rating";
				$err .= "You did not rate the judge's experience.  Please try again<br /.>";
				next SUBSET;
			}

			my $rating = Tab::Rating->search( judge => $judge->id, type => "coach", rating_subset => $subset->id )->first;

			if ($rating) { 

				$rating->rating_tier($ARGS{$subset->id});
				$rating->update;

			} else { 

				$rating = Tab::Rating->create({
					tourn         => $tourn->id,
					judge         => $judge->id,
					rating_subset => $subset->id,
					rating_tier   => $ARGS{$subset->id},
					type          => "coach",
					entered       => $now
				});

			}
			

		}

	} else {

		unless ($ARGS{"rating_tier"}) { 

			$err .= "You did not rate the judge's experience.  Please try again.<br />";
			$missing .= "rating";

		} else { 

			my @ratings = Tab::Rating->search( judge => $judge->id, type => "coach" );

			my $rating = shift @ratings if @ratings;
			foreach (@ratings) { $_->delete; }

			if ($rating) { 

				$rating->rating_tier($ARGS{"rating_tier"});
				$rating->update;

			} else { 

				$rating = Tab::Rating->create({
					tourn       => $tourn->id,
					judge       => $judge->id,
					rating_tier => $ARGS{"rating_tier"},
					type        => "coach",
					entered     => $now
				});

			}
			
		}

	}

	if ($err) { 

		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?judge_id=".$judge->id."&group_id=".$group->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&missing=$missing&err=$err");

	} elsif ($save eq "Save and Return To Roster") {

		$m->redirect("/user/diocese/tourn_judges.mhtml?group_id=".$group->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");

	} else { 

		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?group_id=".$group->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");

	}

</%init> 

