<%args>
	$tourn_id
</%args>
<%init>

	if ($tourn->setting("nsda_points_posted")) { 
		my $err = $tourn->name."'s NSDA points have already been posted";
		$m->redirect("autopost.mhtml?tourn_id=$tourn_id&err=$err");
	}

	use Tab::NSDA::EventCategories;
	use Tab::NSDA::Event;
	use Tab::NSDA::Instance;
	use Tab::NSDA::Login;
	use Tab::NSDA::MemberSchool;
	use Tab::NSDA::Person;
	use Tab::NSDA::PersonSchool;
	use Tab::NSDA::Points;
	use Tab::NSDA::School;
	use Tab::NSDA::SpeechCategories;

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $tourn->start->set_time_zone($tz);
	my $end = $tourn->end->set_time_zone($tz);

	my $site = $tourn->site->first;
	my $location = $site->name if $site;

    my $dbh = Tab::DBI->db_Main(); 

    my $bye_sth = $dbh->prepare('
		select entry.id, group_concat(student.ualt_id), chapter.nsda
		from entry, entry_student, student, school, chapter
		where school.tourn = '.$tourn->id.'
		and entry.school = school.id
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		and student.chapter = chapter.id
		and student.ualt_id > 0 
		group by entry.id
	')

    $bye_sth->execute();

	my %entry_nsda = ();
	while( my ($entry_id, $student_ualts, $chapter_id)) { 	
		$entry_nsda{$entry_id}{"students"} = $student_ualts;
		$entry_nsda{$entry_id}{"chapter"} = $chapter_id;
	}

	my $instance = Tab::NSDA::Instance->create({
		status     => "N",
		tourn_id   => $tourn->id,
		source     => "TR",
		start_date => $start->year."-".$start->strftime(%m)."-".$start->strftime(%d),
		end_date   => $end->year."-".$end->strftime(%m)."-".$end->strftime(%d),
		tournament => $tourn->name,
		location   => $location,
		state      => $tourn->state,
		type       => 1
	});

	EVENT:
	foreach my $event ($tourn->events) { 

		next if $ARGS{"exclude_".$event->id};

		my $nsda_event_category;
		my $nsda_cat;
		my $nsda_subcat;

		if ($event->type eq "congress") { 

			next EVENT;  # until we meet again
			$nsda_cat = 2;
			$nsda_subcat = 2;

		} else { 

			next EVENT unless $ARGS{$event->id};
			$nsda_event_category = Tab::NSDA::EventCategories->retrieve($ARGS{$event->id});
			next EVENT unless $nsda_event_category;
			$event->setting("nsda_event_category", $ARGS{$event->id});
	
			$nsda_cat = 0;
			$nsda_cat = 1 if $event->type eq "speech";
			$nsda_subcat = $nsda_event_category->nsda_id;

		} 
		
		my $size = $event->setting('max_entry');

		Tab::NSDA::Event->create({
			instance_id   => $instance_id,
			event_id      => $event->id,
			type          => uc($nsda_event_category->type),
			size          => $size,
			name          => $event->name,
			category      => -1,
			alt_id        => $event->id,
			nfl_cat_id    => $nsda_cat,
			nfl_subcat_id => $nsda_subcat
		});

		foreach my $round ($event->rounds) { 

			next if $event->type eq "congress"; 

			my ($entries_ref, $tb_ref, $z, $f, $q, $p, $letter_ref, $c, $code, $meh) 
				= $m->comp("/tabbing/results/order_entries.mas", round => $round, nsda => 1);

			my ($bye_ref, $fft_ref) 
				= $m->comp("/funclib/entry_byes.mas", event => $event, round => $round, last => 1, forfeits => 1);

			my %entry_order;
			my %entry_result;
			my %panel_entries;
			my %entry_points;
			my %panel_round;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					$entry_order{$entry_id} = $key;
					push @{$panel_entries{${$letter_ref}{$entry_id}}}, $entry_id; 
				}
			}

			if ($event->type eq "speech") { 

				foreach my $panel ( keys %panel_entries ) { 

					@{$panel_entries{$panel}} = sort {$entry_order{$a} <=> $entry_order{$b}} @{$panel_entries{$panel}};

					my $rank;
					my $last_order;
					my $base_points = 7 - $nsda_event_category->nat_category;

					foreach my $entry (@{$panel_entries{$panel}}) { 
						if (${$fft_ref}{$entry}) {
							$entry_result{$entry} = "F";
							$entry_points{$entry} = 0;
						} else {
							unless ($last_order == $entry_order{$entry}) {
								$last_order = $entry_order{$entry};
								$rank++;
							}
							$entry_result{$entry} = $rank;
							$entry_points{$entry} = $base_points - $rank;
							$entry_points{$entry} = 1 if $entry_points{$entry} < 1;

						}
					}
				}

			} else { 

				foreach my $panel ( keys %panel_entries ) { 

					@{$panel_entries{$panel}} = sort {$entry_order{$a} <=> $entry_order{$b}} @{$panel_entries{$panel}};

					my $win_points = 6 - ($nsda_event_category->nat_category * 2);

					my $win = 1;
					foreach my $entry (@{$panel_entries{$panel}}) { 

						if (${$fft_ref}{$entry}) {
							$entry_result{$entry} = "F";
							$entry_points{$entry} = 0;
						} elsif (${$bye_ref}{$entry}) {
							$entry_result{$entry} = "B";
							$entry_points{$entry} = 0;
						} elsif ($win) { 
							$entry_result{$entry} = "W";
							$entry_points{$entry} += $win_points;
							undef $win;
						} else { 
							$entry_result{$entry} = "L";
							$entry_points{$entry} += $win_points / 2;
						}
					}
				}
			}

			foreach my $panel ( keys %panel_entries ) { 

				foreach my $entry (@{$panel_entries{$panel}}) { 
				
					next unless $entry_nsda{$entry};
					next unless $entry_nsda{$entry}{"students"};
					next unless $entry_nsda{$entry}{"chapter"};

					foreach my $student (split (/\,/, $entry_nsda{$entry}{"students"}) {

						Tab::NSDA::Points->create({
							instance_id      => $instance->id,
							nfl_school_id    => $entry_nsda{$entry}{"chapter"},
							nfl_student_id   => $student,
							round            => $round->name,
							result           => $entry_result{$entry},
							event_cat_id     => $nsda_cat,
							event_sub_cat_id => $nsda_subcat,
							alt_event_id     => $event->id,
							points           => $entry_points{$entry},
							type             => uc($nsda_event_category->type),
						});

					}
				}
			}
		}
	}

	$tourn->setting("nsda_points_posted", 1);

</%init>
