<%args>
	$tourn_id
</%args>
<%init>

	use Tab::NSDA::EventCategories;
	use Tab::NSDA::Event;
	use Tab::NSDA::Instance;
	use Tab::NSDA::Login;
	use Tab::NSDA::MemberSchool;
	use Tab::NSDA::Person;
	use Tab::NSDA::PersonSchool;
	use Tab::NSDA::Points;
	use Tab::NSDA::School;
	use Tab::NSDA::SpeechCategories;

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	$m->print('<div class="blankfull">');

	foreach my $event ($tourn->events) { 

		$m->print("<h2>".$event->name." setting ".$ARGS{$event->id}." </h2>");

		next if $ARGS{"exclude_".$event->id};
		next unless $ARGS{$event->id};

		$event->setting("nsda_event_category", $event->id);

		foreach my $round ($event->rounds) { 

			$m->print("<h3>".$round->realname."</h3>");

			next if $event->type eq "congress"; 

			my ($entries_ref, $tb_ref, $z, $f, $q, $p, $letter_ref, $c, $code, $meh) = $m->comp("/tabbing/results/order_entries.mas", round => $round, nsda => 1);

			my ($bye_ref, $fft_ref) = $m->comp("/funclib/entry_byes.mas", event => $event, round => $round, last => 1, forfeits => 1);

			Tab::debuglog("bye ref is $bye_ref fft ref is $fft_ref");

			my %entry_order;
			my %entry_result;
			my %panel_entries;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					$entry_order{$entry_id} = $key;
					push @{$panel_entries{${$letter_ref}{$entry_id}}}, $entry_id; 
				}
			}

			if ($event->type eq "speech") { 

				foreach my $panel ( keys %panel_entries ) { 

					@{$panel_entries{$panel}} = sort {$entry_order{$a} <=> $entry_order{$b}} @{$panel_entries{$panel}};
					my $rank;
					my $last_order;

					foreach my $entry (@{$panel_entries{$panel}}) { 
						if (${$fft_ref}{$entry}) {
							$entry_result{$entry} = "F";
						} else {
							unless ($last_order == $entry_order{$entry}) {
								$last_order = $entry_order{$entry};
								$rank++;
							}
							$entry_result{$entry} = $rank;
						}
					}
				}

			} else { 

				foreach my $panel ( keys %panel_entries ) { 
					@{$panel_entries{$panel}} = sort {$entry_order{$a} <=> $entry_order{$b}} @{$panel_entries{$panel}};

					my $win = 1;
					foreach my $entry (@{$panel_entries{$panel}}) { 

						if (${$fft_ref}{$entry}) {
							$entry_result{$entry} = "F";
						} elsif (${$bye_ref}{$entry}) {
							$entry_result{$entry} = "B";
						} elsif ($win) { 
							$entry_result{$entry} = "W";
							undef $win;
						} else { 
							$entry_result{$entry} = "L";
						}
					}
				}

			}


			foreach my $panel ( keys %panel_entries ) { 

				$m->print("Panel $panel <br />");
				foreach my $entry (@{$panel_entries{$panel}}) { 
					$m->print("Entry ${$code}{$entry} has result $entry_result{$entry} with seed $entry_order{$entry}<br />");
				}
				$m->print("<br />");

			}

		}

	}

	$m->print('</div>');

</%init>
