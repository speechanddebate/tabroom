<%args>
	$tourn
	$account
</%args>
<%init>

	my @admins = $tourn->admins;

	my @perms = Tab::Permission->search( tourn => $tourn->id );

	my $num_owners;
	my $num_contacts;
	my %admin_perms;

	foreach my $perm (@perms) { 
		$admin_perms{$perm->account->id}{$perm->tag} = $perm;
	}


	# Tournament Owners.  Supersedes all other permissions except contacts;
	# Only accessible to site admins and tournament owners themselves.

	if ($admin_perms{$account->id}{"owner"} || $account->site_admin) { 

		my $owner_count; # Do not allow the tournament to delete the last owner

		foreach my $admin (@admins) { 
			if ($ARGS{$admin->id."-owner"}) { 
				$owner_count++;
			}
		}

		foreach my $admin (@admins) { 

			if ($ARGS{$admin->id."-owner"} && not defined $admin_perms{$admin->id}{"owner"}) { 

				Tab::Permission->create({
					tourn   => $tourn->id,
					account => $account->id,
					tag     => "owner"
				});

				# If I'm an owner I need no other permissions;
				foreach my $other (sort keys %{ $admin_perms{$admin->id} } ) { 
					next if $other->key eq "owner";
					next if $other->key eq "contact";
					$other->delete;
				}

			} elsif ($admin_perms{$admin->id}{"owner"}) { 

				if ($owner_count > 1) { 
					$owner_count--;
					$admin_perms{$admin->id}{"owner"}->delete;
				} else { 
					$err .= " You attempted to delete the last tournament owner.  At least one user must be marked as tournament owner.";
				}

			}
		}
	}

	# Tournament Contacts.  Contacts can delete themselves.  Owners can delete
	# everyone else.   But there must be at least one. 

	if ($admin_perms{$account->id}{"owner"} || $admin_perms{$account->id}{"contact"} || $account->site_admin) { 

		my $contact_count; # Do not allow the tournament to delete the last contact

		foreach my $admin (@admins) { 
			if ($ARGS{$admin->id."-contact"}) { 
				$contact_count++;
			}
		}

		ADMIN:
		foreach my $admin (@admins) { 

			if ($ARGS{$admin->id."-contact"} && not defined $admin_perms{$admin->id}{"contact"}) { 

				Tab::Permission->create({ tourn => $tourn->id, account => $account->id, tag => "contact" });

			} elsif ($admin_perms{$admin->id}{"contact"}) { 

				next ADMIN unless ($admin_perms{$account->id}{"owner"} || $account->site_admin);

				if ($contact_count > 1) { 
					$contact_count--;
					$admin_perms{$admin->id}{"contact"}->delete;
				} else { 
					$err .= " You attempted to delete the last tournament contact.  At least one user must be marked as tournament contact.";
				}

			}

		}

	}

	if ($admin_perms{$account->id}{"owner"} || $admin_perms{$account->id}{"full_admin"} || $account->site_admin) { 

		ADMIN:
		foreach my $admin (@admins) { 

			next if $admin_perms{$admin->id}{"owner"};  # Full admin rights are redundant

			if ($ARGS{$admin->id."-full_admin"} && not defined $admin_perms{$admin->id}{"full_admin"}) { 

				Tab::Permission->create({ tourn => $tourn->id, account => $account->id, tag => "full_admin" });

				# If I'm a full admin I need no other permissions;
				foreach my $other (sort keys %{ $admin_perms{$admin->id} } ) { 
					next if $other->key eq "owner";
					next if $other->key eq "contact";
					next if $other->key eq "full_admin";
					$other->delete;
				}

				next ADMIN;

			} elsif ($admin_perms{$admin->id}{"full_admin"}) { 

				$admin_perms{$admin->id}{"full_admin"}->delete;

			}

			if ($ARGS{$admin->id."-limited"} && not defined $admin_perms{$admin->id}{"limited"}) { 

				Tab::Permission->create({ tourn => $tourn->id, account => $admin->id, tag => "limited" });
				Tab::Permission->create({ tourn => $tourn->id, account => $admin->id, tag => "registration" }) if $ARGS{$admin->id."-registration"};
				Tab::Permission->create({ tourn => $tourn->id, account => $admin->id, tag => "tabbing" }) if $ARGS{$admin->id."-tabbing"};

				Tab::Permission->create({ tourn => $tourn->id, judge_group => $ARGS{$admin->id."-group_tabbing"}, account => $admin->id, tag => "group_tabbing" }) if $ARGS{$admin->id."-group_tabbing"};

				$admin_perms{$admin->id}{"entry_only"}->delete if $admin_perms{$admin->id}{"entry_only"};
				next ADMIN;

			} elsif ($admin_perms{$admin->id}{"limited"}) { 

				$admin_perms{$admin->id}{"limited"}->delete;
				$admin_perms{$admin->id}{"registration"}->delete if $admin_perms{$admin->id}{"registration"};
				$admin_perms{$admin->id}{"tabbing"}->delete if $admin_perms{$admin->id}{"tabbing"};
				$admin_perms{$admin->id}{"group_tabbing"}->delete if $admin_perms{$admin->id}{"group_tabbing"};

			}

			if ($ARGS{$admin->id."-entry_only"} && not defined $admin_perms{$admin->id}{"entry_only"}) { 

				Tab::Permission->create({ tourn => $tourn->id, account => $account->id, tag => "entry_only" });
				next ADMIN;

			} elsif ($admin_perms{$admin->id}{"entry_only"}) { 
				$admin_perms{$admin->id}{"entry_only"}->delete;
			}


		}

	}


	ADMIN:
	foreach my $admin (@admins) { 

		next if $admin_perms{"owner-".$admin->id} && not defined $sudo;
		next if $admin_perms{"full_admin-".$admin->id} && not defined $sudo && $not_defined $full_admin;

		if ($ARGS{$admin->id."-owner"}) { 

			if ($admin_perms{"owner-".$admin->id}}) { 
				$dont_delete{$admin_perms{"owner-".$admin->id}}++ 
			}


		} elsif ($ARGS{$admin->id."-full_admin"}) { 


		} elsif ($ARGS{$admin->id."-limited"}) { 


		} elsif ($ARGS{$admin->id."-entry_only"}) { 

		}

		foreach my $perm (@perms) { 

			next if $perm->tag eq "owner" && $


			$admin_perms{$admin}{$perm->tag}++
			if ($perm->tag eq "event_tabbing") { 
				push @{$admin_perms{$admin}{"events"}}, $perm->event 
				$admin_perms{$admin}{$perm->event}++;
			}
		}



	}

</%init>
