<%args>
	$account
	$clone
	$start
	$end
	$name
	$webname
</%args>
<%doc> 
	
	This script will take a tournament and clone it into another one; so if you
	set up your previous year's tournament you can pull everything (settings,
	events, etc) without pulling in judges, schools or entries.

	The dates for deadlines, tourn_settings, etc will be translated to the new
	tournament's; so if your registration deadline for last year was 3 days
	before, then this year it will be the same, etc. 

</%doc>
<%perl>

	return unless $clone;

	my $old_tourn = Tab::Tourn->retrieve($clone);
	my $ostart = $old_tourn->start;

	$name =~ tr/a-zA-Z0-9 //cd;

	# Convert the dates for registration opening & closing to be the same time
	# from the old tournament.

	# $diff is the change between the old start & the new start.  translates
	# all dates.

	my $diff = $start->delta_days($ostart);  

	my $reg_start = $old_tourn->reg_start->clone;
	$reg_start->add_duration($diff);

	my $reg_end = $old_tourn->end->clone;
	$reg_end->add_duration($diff);

	my $already = Tab::Tourn->search( name => $name, start => $start, end => $end )->first;

	if ($already) { 

		$m->print("<p>That tournament already exists.  Click your email address above and you'll see it on the right</p>");
		$m->abort;

	} else { 

		my $tourn = Tab::Tourn->create({ 
			name       => $name,
			start      => $start,
			end        => $end,
			reg_start  => $reg_start,
			reg_end    => $reg_end,
			webname    => $webname,
			country    => $old_tourn->country,
			state      => $old_tourn->state,
			tz         => $old_tourn->tz,
			hidden     => 0,
			created_by => $account->id
		});

		my $owner = Tab::Permission->create({ tourn   => $tourn->id, account => $account->id, tag => "owner" });
		my $contact = Tab::Permission->create({ tourn   => $tourn->id, account => $account->id, tag => "contact" });

		#Settings
		foreach my $setting ($old_tourn->settings) {

			my $nsetting = $setting->copy({
				tourn => $tourn->id
			});

			if ($nsetting->value eq "date") { 
				my $new_date = $nsetting->value_date->clone;
				$new_date->add_duration($diff);
				$nsetting->value_date($new_date);
				$nsetting->update;
			}

		}
		
		#Circuits
		foreach my $circuit ($old_tourn->tourn_circuits) { 
			my $ncircuit = $circuit->copy({
				tourn    => $tourn->id,
				approved => 0
			});
		}


		#Housing slots
		foreach my $housing ($old_tourn->housing_slots) { 

			my $nhousing = $housing->copy({
				tourn => $tourn->id
			});

			my $new_night = $housing->night;
			$new_night->add_duration($diff);
			$nhousing->night($new_night);
			$nhousing->update;
		}

		#Limits on Double Entry
		my %event_double_translator = ();
		foreach my $ed ($old_tourn->event_doubles) { 
			my $ned = $ed->copy ({
				tourn => $tourn->id
			});
			$event_double_translator{$ed->id} = $ned->id;
		}

		#Tournament Sites
		foreach my $tournsite ($old_tourn->tourn_sites) {
			my $ntournsite = $tournsite->copy ({
				tourn => $tourn->id
			});
		}

		#Webpages
		if ($tourn->webname eq $old_tourn->webname) { 
			foreach my $webpage ($tourn->webpages) {
				my $nwebpage = $webpage->copy ({
					tourn => $tourn->id
				});
			}
		}

		#Concessions
		foreach my $concession ($old_tourn->concessions) {

			my $nconcession = $concession->copy ({
				tourn => $tourn->id
			});

			my $new_deadline = $concession->deadline;
			$new_deadline->add_duration($diff) if $new_deadline;
			$nconcession->deadline($new_deadline) if $new_deadline;

			$nconcession->update;
		}


		#Tournament Standing Fees
		foreach my $tourn_fee ($old_tourn->tourn_fees) {

			my $ntourn_fee = $tourn_fee->copy ({
				tourn => $tourn->id
			});

			my $new_start = $ntourn_fee->start;
			$new_start->add_duration($diff) if $new_start;
			$ntourn_fee->start($new_start) if $new_start;

			my $new_end = $ntourn_fee->end;
			$new_end->add_duration($diff) if $new_end;
			$ntourn_fee->end($new_end) if $new_end;

			$ntourn_fee->update;
		}

		#Followers of this tournament, if it's actually the same tournament.
		if ($webname eq $old_tourn->webname) {
			foreach my $follower (Tab::Follower->search( tourn => $old_tourn->id, type => "tourn" )) { 
				my $nfollow = $follower->copy ({
					tourn => $tourn->id
				});
			}
		}

		#Timeslots
		my %timeslot_translator = ();
		foreach my $ts ($old_tourn->timeslots) { 

			my $nts = $ts->copy({
				tourn => $tourn->id
			});

			my $ntstart = $nts->start;
			$ntstart->add_duration($diff);
			$nts->start($ntstart);
			
			my $ntend = $nts->end;
			$ntend->add_duration($diff);
			$nts->end($ntend);

			$nts->update;

			$timeslot_translator{$ts->id} = $nts->id;

		}

		#Judge Groups
		my %judge_group_translator = ();
		my %jpool_translator = ();
		my %rating_subset_translator = ();

		foreach my $jg ($old_tourn->judge_groups) { 

			my $njg = $jg->copy({
				tourn => $tourn->id
			});

			$judge_group_translator{$jg->id} = $njg->id;

			#Settings

			foreach my $setting ($jg->settings) {

				my $nsetting = $setting->copy({
					judge_group => $njg->id
				});

				if ($nsetting->value eq "date") { 
					if ($nsetting->value_date) { 
						my $new_date = $nsetting->value_date->clone;
						$new_date->add_duration($diff);
						$nsetting->value_date($new_date);
					}
				}

				$nsetting->update;
			}

			foreach my $jpool ($jg->jpools) { 
				my $npool = $jpool->copy({
					judge_group => $njg->id
				});
				$jpool_translator{$jpool->id} = $npool->id;
			}

			foreach my $rs ($jg->rating_subsets) { 

				my $nrs = $rs->copy({
					judge_group => $njg->id
				});

				$rating_subset_translator{$rs->id} = $nrs->id;

				#Rating/Preference Tiers
				foreach my $rating_tier ($rs->rating_tiers) {
					my $nrating_tier = $rating_tier->copy({
						rating_subset => $nrs->id
					});
				}

			}

			foreach my $rt ($jg->rating_tiers) { 
				my $nrt = $rt->copy({
					judge_group => $njg->id
				});
			}

			foreach my $strike_time ($jg->strike_times) { 

				my $nstrike_time = $strike_time->copy({
					judge_group => $njg->id
				});

				my $new_start = $strike_time->start;
				$new_start->add_duration($diff);
				$nstrike_time->start($new_start);

				my $new_end = $strike_time->end;
				$new_end->add_duration($diff);
				$nstrike_time->end($new_end);

				$nstrike_time->update;

			}

		}

		#Tiebreakers and sets
		my %tb_set_translator = ();
		foreach my $tb_set ($old_tourn->tiebreak_sets) {

			my $ntb_set = $tb_set->copy({
				tourn => $tourn->id
			});

			foreach my $tb ($tb_set->tiebreaks) { 
				my $ntb = $tb->copy({
					tb_set => $ntb_set->id
				});
			}

			$tb_set_translator{$tb_set->id} = $ntb_set->id;

		}

		#Events
		my %event_translator = ();
		my %round_translator = ();

		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 

			my $nevent = $event->copy({
				tourn       => $tourn->id,
				judge_group => $judge_group_translator{$event->judge_group->id}
			});

			$nevent->event_double($event_double_translator{$event->event_double->id}) if $event->event_double;
			$nevent->rating_subset($rating_subset_translator{$event->rating_subset->id}) if $event->rating_subset;
			$nevent->update;

			$event_translator{$event->id} = $nevent->id;

			foreach my $setting ($event->settings) { 
			
				next if $setting->tag eq "round_notified";
				next if $setting->tag eq "first_round_notified";

				my $nsetting = $setting->copy({
					event => $nevent->id
				});

				if ($setting->tag eq "speaker_tbset") { 
					$nsetting->value($tb_set_translator{$setting->value});
					$nsetting->update;
				}

				if ($nsetting->value eq "date") { 
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
					$nsetting->update;
				}

			}

			# Copy the ballots from the old tournament into it
			system "$Tab::s3_cmd cp -r $Tab::s3_bucket/tourns/".$old_tourn->id."/events/".$event->id." $Tab::s3_bucket/tourns/".$tourn->id."/events/".$nevent->id;

			foreach my $round ($event->rounds) { 

				my $nround = $round->copy({
					event => $nevent->id,
				});

				$nround->timeslot($timeslot_translator{$round->timeslot->id}) if $round->timeslot;


				$nround->tb_set($tb_set_translator{$round->tb_set->id}) if $round->tb_set;
				$nround->update;

				$round_translator{$round->id} = $nround->id;
		
				foreach my $setting ($round->settings) {

					next if $setting->value eq "date";
					next if $setting->tag eq "entry_list_published";
					next if $setting->tag eq "motion";
					next if $setting->tag eq "cat_id";

					my $nsetting = $setting->copy({
						round => $nround->id
					});

				}
			}

			if ($nevent->setting("bid_round")) { 
				my $new_bid = $round_translator{$nevent->setting("bid_round")};
				$nevent->setting("bid_round",  $new_bid);
			}

		} # End of events

		foreach my $jpool ($old_tourn->jpools) { 

			my $njpool = $jpool->copy({ tourn => $tourn->id });

			foreach my $round ($jpool->rounds) { 

				Tab::JPoolRound->create({
					round => $round_translator{$round->id},
					jpool => $njpool->id
				});
			}
		}

		foreach my $rpool ($old_tourn->rpools) { 

			my $nrpool = $rpool->copy({ tourn => $tourn->id });

			foreach my $round ($rpool->rounds) { 

				next unless $round_translator{$round->id};

				Tab::RPoolRound->create({
					round => $round_translator{$round->id},
					rpool => $nrpool->id
				});
			}

		}


    Tab::Round->set_sql(clear_publish => "
        delete round_setting.* 
        from round_setting, round, event
        where event.tourn = ? 
        and round.event = event.id
        and round.id = round_setting.round
        and round_setting.tag in (
            'publish_entry_list',
            'motion',
            'motion_published',
            'completed',
            'blasted');
    ");

    Tab::Round->set_sql(clear_publish_fields => "
        update round, event
            set round.published = 0,
            round.created = NULL,
			round.post_results = 0
        where round.event = event.id
        and event.tourn = ?
    ");

    Tab::Round->sql_clear_publish->execute($tourn->id);
    Tab::Round->sql_clear_publish_fields->execute($tourn->id);

		foreach my $room_strike ($old_tourn->room_strikes) { 
			
			next if $room_strike->type eq "entry";
			next if $room_strike->type eq "judge";

			my $nroom_strike = $room_strike->copy({
				tourn => $tourn->id
			});

			$nroom_strike->event($event_translator{$room_strike->event->id}) if $room_strike->event;

			if ($nroom_strike->start) { 
				my $new_start = $nroom_strike->start;
				$new_start->add_duration($diff);
				$nroom_strike->start($new_start);
			}
		
			if ($nroom_strike->end) { 
				my $new_end = $nroom_strike->end;
				$new_end->add_duration($diff);
				$nroom_strike->end($new_end);
			}
			
			$nroom_strike->update;

		}

		#Sweepstakes
		my %sweep_set_translator = ();
		foreach my $sweep_set ($old_tourn->sweep_sets) {

			my $nsweep_set = $sweep_set->copy({
				tourn => $tourn->id
			});

			$sweep_set_translator{$sweep_set->id} = $nsweep_set->id;

			foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) { 

				my $nsweep_event = $sweep_event->copy({  
					event     => $event_translator{$sweep_event->event},
					sweep_set => $nsweep_set->id 
				});
			}

			foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) { 

				if ($sweep_rule->tag eq "ignore_round") { 

					my $nsweep_rule = $sweep_rule->copy({  
						sweep_set => $nsweep_set->id,
						value     => $round_translator{$sweep_rule->value}
					});

				} else { 

					my $nsweep_rule = $sweep_rule->copy({  
						sweep_set => $nsweep_set->id 
					});

				}

			}

		}

		foreach my $sweep_set ($old_tourn->sweep_sets) {

			my @links = Tab::SweepInclude->search( parent => $sweep_set );

			foreach my $link (@links) { 

				my $nlink = $link->copy({ 
					parent => $sweep_set_translator{$link->parent->id},
					child => $sweep_set_translator{$link->child->id},
				});

			}

		}

		$m->comp("/funclib/update_calendar.mas", tourn => $tourn) unless $tourn->hidden;
		$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);
	}


</%perl>
