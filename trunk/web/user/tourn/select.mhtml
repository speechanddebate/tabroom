<%args>
	$session
	$tourn_id
	$account
</%args>
<%init>

	# Make sure the user has access to that tournament through whatever pathway.
	my $tourn = Tab::Tourn->retrieve($tourn_id);

    Tab::Tourn->set_sql( by_director => "
        select distinct tourn.* 
        from tourn, permission
        where tourn.id = permission.tourn
        and permission.account = ? 
        order by tourn.end DESC");

	my @auth_tourns = Tab::Tourn->search_by_director($account->id);

    Tab::Circuit->set_sql(by_admin => "
        select distinct circuit.* 
        from circuit, permission
        where circuit.id = permission.circuit
        and permission.account = ? 
		and permission.tag = 'circuit'
        order by circuit.name");

	my @auth_circuits = Tab::Circuit->search_by_admin($account->id);

	my $ok;

	if ($tourn) { 

		$ok++ if $account->site_admin;

		$ok++ if grep $_->id eq $tourn->id, @auth_tourns;

		foreach my $circuit ($tourn->circuits) { 
			$ok++ if grep $_->id eq $circuit->id, @auth_circuits;
		}

		if ($ok) { 

			my @ta = Tab::Permission->search( tourn => $tourn->id, account => $account->id );

			my $no_reg;
			foreach (@ta) {   
				$no_reg++ if $_->tag eq "no_registration";
				$no_reg++ if $_->tag eq "entry_only";
			}
			undef $no_reg if $account->site_admin;

			$session->tourn($tourn->id);
			$session->update;

			if ($no_reg) { 
				$m->redirect("/tabbing/entry/index.mhtml");
			} else { 
				$m->redirect("/register/index.mhtml");
			}

		} else { 

			my $err = "You do not have administrative access to that tournament.  Please contact the tournament director ";
			$err .= "or your circuit administrators if you think this in error";
			$m->redirect("/user/home.mhtml?err=$err");
		}


	} else { 

		$m->print("<p>That tournament doesn't exist.  Quit messing around with the system.</p>");
		$m->abort;

	}


</%init>
