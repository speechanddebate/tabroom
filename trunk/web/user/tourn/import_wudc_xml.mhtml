<%args>
   $account
   $session
</%args>
<%init>

	use XML::Simple;
	use Math::Round;

	my $now = DateTime->now;
	my $tz = $account->tz if $account->tz;
	$tz = "UTC" unless $tz;

	$now->set_time_zone($tz);

	my $req = Apache2::Request->new($r);
	my $xml_file = $req->upload("xml");
	my $xml_filename = $xml_file->tempname;
	my $webname=$xml_file->filename;

	`/bin/cp $xml_filename /tmp/keeper.xml`;
	`perl -pi -e s/'&'/'&amp;'/g  $xml_filename`;

	my $xml = new XML::Simple ( SuppressEmpty => 1,  ForceArray => [ qw(TOURN ENTRY SCHOOL) ]);
	my $data = $xml->XMLin($xml_filename);

	#Show tourn values
	my $tournname; 
	my $startdate; 
	my $location; 
	my $weight;

	foreach my $xml_tourn (@{$data->{TOURN}}) {
		$tournname = $xml_tourn->{TOURNNAME};
		$location  = $xml_tourn->{LOCATION};
		$startdate = $xml_tourn->{STARTDATE};
		$weight    = $xml_tourn->{WEIGHT};
	}

	print "As variable:".$tournname."<br>";
	print "Straight from data object=".$data->{TOURN}[0]."<br>";
	
	#CREATE THE TOURNEY

	my ($tourn_id, $judge_group_id) = SaveTourney($tournname, $startdate, $location, $tz, $webname, $account, $weight);
	print "Tourney id=".$tourn_id."<Br>";
	print "Tourney is saved.<br>";
	print "weight=".$weight."<Br>";
	
	#CREATE AN EVENT

	my $event_id = CreateEvent($tourn_id, $judge_group_id);
	print "Event ID=".$event_id;
	
	#DO SCHOOLS

	#Loop each school and put into an array; save to Tabroom as you go
	my @schoolrec; #=0 name, 1=XML ID, 2=new Tabroom ID
	my $x; $x=0;

	foreach my $xml_school (@{$data->{SCHOOL}}) {
		$schoolrec[$x][0]=$xml_school->{SCHOOLNAME};
		$schoolrec[$x][1]=$xml_school->{ID};
		$schoolrec[$x][2]=SaveSchool($schoolrec[$x][0], $tourn_id);
		$x++;
	}

	print "N schools".$#schoolrec."<br>";
    # print "School 1=".$schoolrec[1][0]."<br>";
    # print "School 100=".$schoolrec[100][0]."<br>";
	# Schools are now added to the database and the array has stored Tabroom number

	#DO ENTRIES

	#Loop each ENTRY and put into an array; save to Tabroom as you go
	my @entry; #=0 name, 0=XML ID, 2=xml school, 3=points, 4=rank, 5=Tabroom ID, 6=Tabroom School
	$x=0;
	foreach my $xml_entry (@{$data->{ENTRY}}) {
		$entry[$x][0]=$xml_entry->{FULLNAME};
		$entry[$x][1]=$xml_entry->{ID};
		$entry[$x][2]=$xml_entry->{SCHOOLID};
		$entry[$x][3]=$xml_entry->{POINTS};
		$entry[$x][4]=$xml_entry->{RANK};
		#print $x." name=".$entry[$x][0]." id=".$entry[$x][1]." school=".$entry[$x][2];
		#print " points=".$entry[$x][3]." rank=".$entry[$x][4]."<br>";
		$x++;
	}

	#Match up school; now entry(x)(6)=itab school id#
	for ($x = 0; $x <=$#entry; $x++) {   
		for (my $i = 0; $i <= $#schoolrec; $i++) {
			if ($entry[$x][2]==$schoolrec[$i][1]) {$entry[$x][6]=$schoolrec[$i][2];}
		}
	}

#  for ($x = 0; $x <=$#entry; $x++)
#        {
#		print $x."-".$entry[$x][0]." xml school=".$entry[$x][2]." Tabroom school=".$entry[$x][6]."<br>";
#        }
	
	#Write all the entries to Tabroom and stick Tabroom Id in entry(x)(5)
	for ($x = 0; $x <=$#entry; $x++) {
		$entry[$x][5]=SaveEntry($tourn_id, $event_id, $entry[$x][6], $entry[$x][0]);
	}

	#Tourn, entries, schools, events are now saved in Tabroom

	#CREATE RESULT_SET
	my $result_set_final_places=CreateResultSet($tourn_id, $event_id, $tz, "Final Places");
	my $result_set_wudc_points=CreateResultSet($tourn_id, $event_id, $tz, "WUDC Points");

	#Create result field for each entry and populate result_value

	my $result;
	
  	for ($x = 0; $x <=$#entry; $x++) {
		$result=CreateResult($entry[$x][5], $entry[$x][$6], $result_set_final_places, $entry[$x][4], $#entry);
		SaveResultSet($result, $entry[$x][4], 0, 1, "Place", "Final finish at tournament including elims"); 
		$result=CreateResult($entry[$x][5], $entry[$x][$6], $result_set_wudc_points, $entry[$x][4], $#entry);
		SaveResultSet($result, $entry[$x][3] * $weight, 0, 0, "WUDC Points", "Points for WUDC rankings");
	}

	#ALL DONE; GO MATCH UP CHAPTERS TO SCHOOLS

	$m->redirect("/user/circuit/chapter_by_tourn.mhtml?tourn_id=$tourn_id&circuit_id=50");	

##NOW ALL THE SUBROUTINES

	sub SaveResultSet {

		my ($result, $value, $priority, $sort_desc, $tag, $long_tag) = @_;

		my $object = Tab::ResultValue->create( {
			result => $result,
			value => $value,
			priority => $priority,
			sort_desc => $sort_desc,
			long_tag => $long_tag,
			tag => $tag
		});

	}

	sub CreateResult {

		my ($entry_id, $entry_school, $result_set, $rank, $nentries) = @_;

		my $pct = round((($nentries-$rank+1)/$nentries)*1000);
		
		my $result = Tab::Result->create( {
			entry => $entry_id,
			result_set => $result_set,
			rank => $rank,
			percentile => $pct,
			school => $entry_school
		});

		return $result->id;
	}

	sub CreateResultSet {
	 
		#creates a standard results set to store the WUDC points

		my ($tourn_id, $event_id, $tz, $rsname) = @_;
		
		my $now = DateTime->now( time_zone => $tz);

		my $RSobject = Tab::ResultSet->create( {
			tourn => $tourn_id,
			event => $event_id,
			label => $rsname,
			generated => $now,
			bracket => 0
		});
			
		return $RSobject->id;
	}

	sub SaveEntry {

		my ($tourn_id, $event_id, $school_id, $entry_name) = @_;

		my $entryobject = Tab::Entry->create( {
			tourn => $tourn_id,
			school => $school_id,
			event => $event_id,
			code => $entry_name,
			name => $entry_name
		});
		

		return $entryobject->id;

	}

	sub CreateEvent {

		my ($tourn_id, $judge_group_id) = @_;

		my $eventobject = Tab::Event->create( {
			tourn => $tourn_id,
			name => "Open Parliamentary Debate",
			type => "wudc",
			judge_group => $judge_group_id,
			abbr => "OPD"
		});

		#publish the field report
		Tab::Setting->create( {
			event => $eventobject->id,
			tag   => "field_report",
			type  => "event",
			value => 1
		});

		#set published to true
		Tab::Setting->create( {
			event => $eventobject->id,
			type  => "event",
			tag   => "results_published",
			value => 1
		});
		
		#set max entries to 2 so that competitors can claim spots
		Tab::Setting->create( {
			event => $eventobject->id,
			type  => "event",
			tag   => "max_entry",
			value => 2
		});

		return $eventobject->id;

	}

	sub GetChapterID {
	 
		my ($schoolname) = @_;

		my @chapters = Tab::Chapter->search( name => $schoolname);
		
		my $chapter; $chapter=0;
		
		foreach my $candidate (@chapters) {
			next if $chapter;
			$chapter=$candidate->id;	
		}

		return $chapter;
	}

	sub SaveSchool {
		#Adds the school to the database and returns new Tabroom record ID
		my ($schoolname, $tourn_id) = @_;

		my $newschool = Tab::School->create({
			chapter => GetChapterID($schoolname),
			name => $schoolname,
			tourn => $tourn_id,
			code => $schoolname
		});
	  
		return $newschool->id;
	}

	sub SaveTourney {

		#you're in strict mode, so must these values must be read in for local variables
		my ($tournname, $startdate, $location, $tz, $webname, $account, $weight) = @_;

		my $judge          = $startdate;
		my $drops          = $startdate;
		my $fines          = $startdate;
		my $country        = "UK";

		my $tourn = Tab::Tourn->create( {
			name      => $tournname,
			webname   => $webname,
			start     => $startdate,
			end       => $startdate,
			reg_start => $startdate,
			reg_end   => $startdate,
			hidden    => 0,
			country   => $country,
			tz        => $tz
		});

		$tourn->setting("freeze_deadline", "date", $startdate);
		$tourn->setting("fine_deadline", "date", $startdate);
		$tourn->setting("judge_deadline", "date", $startdate);
		$tourn->setting("drops_deadline", "date", $startdate);
		$tourn->setting("school_codes", "shortname");

		#set up admin
		Tab::TournAdmin->create ({
			tourn => $tourn->id,
			account => $account,
			contact => '1'
		});

		#link to circuit
		Tab::TournCircuit->create ({
			tourn => $tourn->id,
			circuit => 50
		});
		
		#make a judge group
		my $judge_group = Tab::JudgeGroup->create( {
			tourn => $tourn->id,
			name => "Judges",
			abbr => "Judges"
		});

		#save the weight
		Tab::Setting->create( {
			tourn => $tourn->id,
			tag   => "weight",
			type  => "tourn",
			value => $weight
		});

		#allow students to claim competitor spots
		Tab::Setting->create( {
			tourn => $tourn->id,
			tag   => "student_claim",
			type  => "tourn",
			value => 1
		});

		return ($tourn->id, $judge_group->id);

	}

</%init>
