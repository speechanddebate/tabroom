<%args>
	$account
	$session
	$debug    => 0
	$tourn_id => undef
</%args>
<%init>

	use XML::Simple;

	Tab::Student->columns(TEMP => qw/cat_id/);

	my $now = DateTime->now;

	my $tz = $account->tz if $account->tz;
	$tz = "UTC" unless $tz;

	$now->set_time_zone($tz);

	#PROCESS THE XML

	my $req = Apache2::Request->new($r);
	my @xml_handles = $r->upload;
	my $xml_file = $req->upload($xml_handles[0]);
	my $xml_filename = $xml_file->tempname;

	my $epoch = $now->epoch;
 
	system "/bin/mkdir -p ".$Tab::file_root."tmp/$epoch";
	system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/TourneyData.xml";

	my $xml = new XML::Simple ( SuppressEmpty => 1, ForceArray => [ qw(TIEBREAK_SET RESULT_BALLOT RESULT_SCORE EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]);
	my $data = $xml->XMLin($Tab::file_root."tmp/$epoch/TourneyData.xml");

	#TOURNAMENT
	my $tourn;
	my $judge_group;
    my %event_by_id = ();

	if ($tourn) { 
			
		unless (Tab::TournAdmin->search( account => $account->id, tourn => $tourn->id) ) { 
			$m->print("NOT_AUTHORIZED");
			$m->abort;
		}

	} else { 

		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});

		if ($through eq "through") {
			$start = Tab::dateme($start);
			$end = Tab::dateme($end);
		} else {
			$start = Tab::dateme($data->{TOURN}->{STARTDATE});
			$end = Tab::dateme($data->{TOURN}->{ENDDATE});
		}

		unless ($start) { 

			$start = DateTime->now;

			while ($start->day_of_week != 6) { 
				$start->subtract( days => 1);
			}

			$end = $start->clone;
			$end->add(days => 2);

		}

		$start->set_time_zone($tz);
		$end->set_time_zone($tz);

		$start->set( hour => 8, minute => 0);
		$end->set( hour => 22, minute => 0);
		
		my $reg_start = $start->clone;
		$reg_start->subtract( months => 2);

		my $reg_end = $end->clone;
		$reg_end->subtract( weeks => 1);

		my %tournament_settings = map {$_->{TAG}, $_->{VALUE}} @{$data->{TOURN_SETTING}};

		if ($tourn_id) { 
			$tourn = Tab::Tourn->retrieve($tourn_id);
		}

		unless ($tourn && $tourn > 0) {

			$tourn = Tab::Tourn->create({
				name         => $data->{TOURN}->{TOURNNAME},
				start        => $start,
				end          => $end,
				reg_start    => $reg_start,
				reg_end      => $reg_end,
				foreign_site => $tournament_settings{"DownloadSite"},
				foreign_id   => $tourn_id,
				tz           => $tz
			});

			my $tourn_admin = Tab::TournAdmin->create({
				account => $account->id,
				tourn   => $tourn->id,
				contact => 1
			});

			my $sname = $tourn->name;
			$sname =~ s/Invitation$//g;
			$sname =~ s/Invitational$//g;
			$sname =~ s/Classic$//g;
			$sname =~ s/Tournament$//g;
			my $newsite;

			my $site = Tab::Site->search( name => $sname )->first;
			
			unless ($site) { 
				$newsite++;
				$site = Tab::Site->create({
					name => $sname,
					host => $account->id
				});
			}

			my $tsite = Tab::TournSite->create({
				site  => $site->id,
				tourn => $tourn->id
			});
		}

		$judge_group = Tab::JudgeGroup->create({
			name  => ucfirst(lc($tournament_settings{"TourneyType"})),
			tourn => $tourn->id,
			abbr  => ucfirst(substr(lc $tournament_settings{"TourneyType"}, 0, 3))
		});

		$judge_group->setting("no_codes", 1); #for debate this is almost always sensible
		$judge_group->setting("prefs", "tiered"); #this is the most common import style for TRPC

	    #EVENTS
   		my @events = @{$data->{EVENT}};

		foreach my $xml_event (@events) { 

			my $type = lc($xml_event->{TYPE});

			$type =~ s/debate$//g;

			$type = "ld" if $type eq "lincoln-douglas";
			$type = "ld" if $type eq "lincoln douglas";
			$type = "ld" if $type eq "lincoln-douglass";
			$type = "ld" if $type eq "lincoln douglass";

			$type = "policy" if $type eq "cx";

			$type = "pf" if $type eq "public forum";
			$type = "pf" if $type eq "pfd";

			$type = "debate" if ($type ne "pf" && $type ne "ld" && $type ne "policy");

			my $event = Tab::Event->create({
				tourn       => $tourn->id,
				name        => $xml_event->{EVENTNAME},
				type        => $type,
				abbr        => $xml_event->{ABBR},
				judge_group => $judge_group->id
			});

			$event_by_id{$xml_event->{ID}} = $event;
			$event_by_id{$event->id} = $event;

			$m->print("Event ".$xml_event->{EVENTNAME}." has been created<br />") if $debug;

			$event->setting("code_style", "initials"); #for debate this is almost always sensible
			$event->setting("min_points", 1);
			$event->setting("max_points", 30);
			$event->setting("point_increments", "tenths");  #this allows us to accept whatever

		} 

	} 

	my @tournament_settings = @{$data->{TOURN_SETTING}};

	foreach my $setting (@tournament_settings) { 
		if ($setting->{TAG} eq "DownloadSite" || $setting->{TAG} eq "Online" || $setting->{TAG} eq "TourneyType" ||
			$setting->{TAG} eq "SuppressNavMessages" || $setting->{TAG} eq "UseActualTime" || $setting->{TAG} eq "CrossEventEntry") { 
			$tourn->setting($setting->{TAG}, lc($setting->{VALUE}) );
		}
	}  

	my %tb_set_by_id = ();
	my %tb_set_by_cat_id = ();

	my $elim_tb_set;
	my $speaker_tb_set;

	foreach my $tb_set ($tourn->tiebreak_sets) { 
		$tb_set_by_id{$tb_set->id} = $tb_set;

		foreach my $tb ($tb_set->tiebreaks) { 
			$tb->delete;
		}
	}

	my @tb_sets = @{$data->{TIEBREAK_SET}};
	
	foreach my $xml_tb_set (@tb_sets) { 

		my $id = $xml_tb_set->{ID};
		next if $tb_set_by_id{$id};

		my $name = $xml_tb_set->{TBSET_NAME};
		my $type = $xml_tb_set->{SCOREFOR};
		my $elim = $xml_tb_set->{ELIM};

		$name = "Debate Prelims" if $name eq "2 teams - Team Prelims";
		$name = "Debate Speakers" if $name eq "2 teams - Speakers";

		my $tb_set = Tab::TiebreakSet->search( name => $name, tourn => $tourn->id)->first;

		$tb_set = Tab::TiebreakSet->create({
			name  => $name,
			type  => $type,
			tourn => $tourn->id,
			elim  => $elim
		}) unless $tb_set;

		$elim_tb_set = $tb_set if $elim;
		$speaker_tb_set = $tb_set if $type eq "Speaker" || $name eq "Debate Speakers" || $name eq "Speakers";

		$tb_set_by_id{$tb_set->id} = $tb_set;
		$tb_set_by_cat_id{$id} = $tb_set;
	}

	my @tbs = @{$data->{TIEBREAK}};

	foreach my $xml_tb (@tbs) {

		my $name = $xml_tb->{LABEL};

		my $priority = $xml_tb->{SortOrder};
		my $tb_set_id = $xml_tb->{TB_SET};

		my $tb_set = $tb_set_by_id{$tb_set_id};
		$tb_set = $tb_set_by_cat_id{$tb_set_id} unless $tb_set;

		next unless $tb_set;

		my $realname;
		my $highlow = 0;
		my $highlow_count = 0;

		if ($name eq "Wins") { 

			$realname = "winloss";
			$highlow = 0;

		} elsif ($name eq "High-Low Speaker Points") { 

			$realname = "points";
			$highlow = 1;
			$highlow_count = 1;

		} elsif ($name eq "Total Points") { 

			$realname = "points";
			$highlow = 0;
			$highlow_count = 0;

		} elsif ($name eq "Ranks") { 

			$realname = "ranks";
			$highlow = 0;
			$highlow_count = 0;

		} elsif ($name eq "2x High-Low Speaker Points") { 

			$realname = "points";
			$highlow = 1;
			$highlow_count = 2;

		} elsif ($name eq "Opponent Wins") { 

			$realname = "opp_wins";
			$highlow = 0;
			$highlow_count = 0;

		} elsif ($name eq "Opponent Points") { 

			$realname = "opp_points";
			$highlow = 0;
			$highlow_count = 0;

		} elsif ($name eq "Judge Variance") { 

			$realname = "judgevar";
			$highlow = 0;
			$highlow_count = 0;

		} elsif ($name eq "Random") { 

			$realname = "coinflip";
			$highlow = 0;
			$highlow_count = 0;

		}
	
		my $tb = Tab::Tiebreak->create({
			name          => $realname,
			tb_set        => $tb_set->id,
			count         => "prelim",
			highlow       => $highlow,
			highlow_count => $highlow_count,
			multiplier    => 1,
			priority      => $priority
		});

	}

	unless ($elim_tb_set) { 

		$elim_tb_set = Tab::TiebreakSet->search({ name => "Debate Elims", tourn => $tourn->id })->first;

		$elim_tb_set = Tab::TiebreakSet->create({
			name  => "Debate Elims",
			type  => "Team",
			tourn => $tourn->id,
			elim  => 1,
		}) unless $elim_tb_set;

		my @tiebreaks = $elim_tb_set->tiebreaks if $elim_tb_set;;

		unless (@tiebreaks) { 

			my $tiebreak = Tab::Tiebreak->create({
				name          => "winloss",
				tb_set        => $elim_tb_set->id,
				count         => "last elim",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 1
			}); 

		}
	}

	my %timeslot_by_id = ();

	foreach my $timeslot ($tourn->timeslots) { 
		$timeslot_by_id{$timeslot->id} = $timeslot;
	}

	my %used_timeslots;
	my $stepper = $tourn->start;

	foreach my $xml_timeslot (@{$data->{TIMESLOT}}) { 

		my $timeslot = $timeslot_by_id{$xml_timeslot->{ID}};

		unless ($timeslot && $timeslot->tourn->id == $tourn->id) { 
		
			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;

			my $start;
			my $end;

			$start = Tab::xmldtme($xml_timeslot->{START}, $tz) if $xml_timeslot->{START};
			$end = Tab::xmldtme($xml_timeslot->{END}, $tz) if $xml_timeslot->{END};

			unless ($start) { 
				$start = $stepper->clone;
				$stepper->add( hours => 2 );
			}

			if ($start->hour > 20) { 
				$start->add( days => 1 );
				$start->set( hour => 8, minute => 0);

				$stepper->set( hour => 10, minute => 0);
				$stepper->add( days => 1 );
			}

			unless ($end) { 
				$end = $start->clone;
				$end->add( hours => 1, minutes => 55 );
			}

			$timeslot = Tab::Timeslot->search( start => $start, end => $end, tourn => $tourn->id)->first;

			$timeslot = Tab::Timeslot->create({
				name => $xml_timeslot->{TIMESLOTNAME},
				start => $start,
				end => $end,
				tourn => $tourn->id
			}) unless $timeslot;

			$timeslot_by_id{$xml_timeslot->{ID}} = $timeslot;
			$used_timeslots{$xml_timeslot->{ID}}++;

		} else { 

			$used_timeslots{$timeslot->id}++;

			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;

			my $start = Tab::xmldtme($xml_timeslot->{START}, $tz);
			my $end = Tab::xmldtme($xml_timeslot->{END}, $tz);

			$timeslot->start($start);
			$timeslot->end($end);
			$timeslot->name( $xml_timeslot->{TIMESLOTNAME} );
			$timeslot->update;

		}
	}

	my %school_by_id = ();

	foreach my $school ($tourn->schools) { 
		$school_by_id{$school->id} = $school;
	}

	foreach my $xml_school (@{$data->{SCHOOL}}) { 

		next if $xml_school->{ID} == -1;

		my $school = $school_by_id{$xml_school->{ID}};

		unless ($school && $school->tourn->id == $tourn->id) { 

			my $chapter = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} )->first;

			unless ($chapter) { 
				$chapter = Tab::Chapter->create({
					name => $xml_school->{SCHOOLNAME}
				});
			}
			
			my $school = Tab::School->search( name => $xml_school->{SCHOOLNAME}, tourn => $tourn->id )->first;

			unless ($school) { 
				$school = Tab::School->create({
					name    => $xml_school->{SCHOOLNAME},
					code    => $xml_school->{CODE},
					chapter => $chapter->id,
					tourn   => $tourn->id,
				});
			}

			$school_by_id{$xml_school->{ID}} = $school;

		} else { 

			$school->name( $xml_school->{SCHOOLNAME} );
			$school->code( $xml_school->{CODE} );
			$school->update
		}

	}

	my %student_by_id = ();
	my %student_by_cat_id = ();
	my %students_by_entry = ();

	foreach my $student ($m->comp("/funclib/tourn_students.mas", tourn => $tourn)) { 
		$student_by_id{$student->id} = $student;
	}

	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) { 

		my $student = $student_by_id{$xml_student->{ID}};
		my $school = $school_by_id{@{$xml_student->{SCHOOL}}[0]};

		next unless $school;

		unless ($student) { 

			$student = Tab::Student->search(   
				first   => $xml_student->{FIRST},
				last    => $xml_student->{LAST},
				chapter => $school->chapter->id )->first;

			unless ($student) { 

				my $first = $xml_student->{FIRST};
				my $last = $xml_student->{LAST};

				$first = "-" unless $first;

				$student = Tab::Student->create({
					 first   => $first,
					 last    => $xml_student->{LAST},
					 chapter => $school->chapter->id
				});
			}

			$student_by_id{$student->id} = $student;

		} else { 

			$student->first( $xml_student->{FIRST} );
			$student->last( $xml_student->{LAST} );
			$student->update;

		}

		$student_by_cat_id{$xml_student->{ID}} = $student;
		push @{$students_by_entry{$xml_student->{ENTRY}}}, $student;
		$student->cat_id($xml_student->{ID});

	}

	foreach my $event ($tourn->events) { 
		$event_by_id{$event->id} = $event;
	}

	my @rounds;
	my %round_by_name = ();
	my @used_events;

	foreach my $xml_event (@{$data->{EVENT}}) { 

		my $event = $event_by_id{$xml_event->{ID}};

		next unless $event;
		push @used_events, $event;

		if ($event) { 

			my $type = lc($xml_event->{TYPE});
			$type = "ld" if $type eq "lincoln-douglas";
			$type = "ld" if $type eq "lincoln douglas";

			$judge_group = $event->judge_group;
			$event->name( $xml_event->{EVENTNAME} );
			$event->abbr( $xml_event->{ABBR} );
			$event->type($type);
			$event->update;
			push (@rounds, $event->rounds);
		}
		
		my @event_settings = @{$data->{EVENT_SETTING}};

		foreach my $setting (@event_settings) { 
			next unless $setting->{EVENT} == $event->id;
			$event->setting($setting->{TAG}, lc($setting->{VALUE}) );
		}  

		$event->setting("speaker_tbset", $speaker_tb_set->id) if $speaker_tb_set;

	}

	my %entry_by_id = ();
	my %used_entries = ();
	my %entry_students = ();

	foreach my $event (@used_events) { 
		foreach my $entry ($event->entries( waitlist => 0, unconfirmed => 0, dropped => 0)) {
			$entry_by_id{$entry->id} = $entry;
		}
	}

	foreach my $xml_entry (@{$data->{ENTRY}}) { 

		my $entry = $entry_by_id{$xml_entry->{ID}};
		my $event = $event_by_id{@{$xml_entry->{EVENT}}[0]};
		my $school = $school_by_id{@{$xml_entry->{SCHOOL}}[0]};
	
		next unless $event && $school;
		next unless $school;

		$entry = Tab::Entry->search( event => $event->id, code => $xml_entry->{CODE} )->first unless $entry;

		unless ($entry && $entry->event->tourn->id == $tourn->id) { 

			my $dropped = 0;
			$dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";
			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
			
			$entry = Tab::Entry->create({
				 code    => $xml_entry->{FULLNAME},
				 dropped => $dropped,
				 event   => $event->id,
				 seed    => $xml_entry->{RATING},
				 school  => $school->id,
				 ada     => $ada
			});

			$used_entries{$xml_entry->{ID}}++;
			$entry_by_id{$xml_entry->{ID}} = $entry;

		} else { 

			$entry_by_id{$xml_entry->{ID}} = $entry;
			$used_entries{$xml_entry->{ID}}++;
			$used_entries{$entry->id}++;

			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
			my $dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";

			$entry->code($xml_entry->{FULLNAME}); 
			$entry->seed($xml_entry->{RATING});
			$entry->school($school->id);
			$entry->event($event->id);
			$entry->ada($ada);
			$entry->dropped($dropped);
			$entry->update;

		}

		my %es_yup = ();

		my @students = @{$students_by_entry{$xml_entry->{ID}}} if $students_by_entry{$xml_entry->{ID}};

		foreach my $entry_student ($entry->entry_students) { 
			my $ok;
			foreach my $student (@students) { 
				$ok++ if $student->id == $entry_student->student->id;
			}
			$entry_student->delete unless $ok;
		}

		my $first;
		my $last;

		foreach my $student (@students) { 

			$first = $student->first;

			undef $first if $last;
			$last .= " & " if $last;
			$last .= $student->last;

			my $ok;
			foreach my $entry_student ($entry->entry_students) { 
				$ok++ if $student->id == $entry_student->student->id;
			}
			unless ($ok) {
				Tab::EntryStudent->create({ entry => $entry, student => $student});
			}
		}


		$entry->name($first." ".$last) if $first;
		$entry->name($last) unless $last;
		$entry->update;

	}

	foreach my $id (keys %event_by_id) { 
		$m->comp("/funclib/event_rename.mas",  event => $event_by_id{$id}, from => "importer");
	}

	foreach my $entry_id (keys %entry_by_id) { 
		next if $used_entries{$entry_id};
		$entry_by_id{$entry_id}->delete;
	}


	my %judge_by_id = ();

	foreach my $judge ($judge_group->judges) { 
		$judge_by_id{$judge->id} = $judge;
	}

	my %used_judge = ();

	my $rating_type = "tiered";

    Tab::Setting->set_sql(upload_id => "
        select distinct judge_setting.*
        from judge_setting, judge
        where judge.judge_group = ? 
        and judge.id = judge_setting.judge
        and judge_setting.tag = \"upload_id\""
    );  

    my %judge_id_translator = (); 

    foreach my $setting (Tab::Setting->search_upload_id( $judge_group->id )) { 
        $judge_id_translator{$setting->judge->id} = $setting->value;
    }   

	foreach my $xml_judge (@{$data->{JUDGE}}) { 

		my $judge = $judge_by_id{$xml_judge->{ID}};

		if ($judge_id_translator{$xml_judge->{ID}}) { 
			my $judge_me_maybe = Tab::Judge->retrieve($xml_judge->{ID});
			$judge = $judge_me_maybe if $judge_me_maybe;
		}

		my $school = $school_by_id{@{$xml_judge->{SCHOOL}}[0]};
		$school = 0 unless $school;

		my $active = 1;
		$active = 0 if $xml_judge->{STOPSCHEDULING} eq "true";

		my $first = $xml_judge->{FIRST};
		my $last = $xml_judge->{LAST};
		$first = " " unless $first;
		$last = " " unless $last;

		unless ($judge && $judge->judge_group->id == $judge_group->id) { 

			$judge = Tab::Judge->create({
				first       => $first,
				last        => $last,
				school      => $school,
				judge_group => $judge_group->id,
				obligation  => $xml_judge->{OBLIGATION},
				hired       => $xml_judge->{HIRED},
				active      => $active
			});

			$judge->setting("upload_id", $xml_judge->{ID});
			$judge_by_id{$xml_judge->{ID}} = $judge;
			$used_judge{$xml_judge->{ID}}++;

		} else { 

			$rating_type = $judge->judge_group->setting("prefs") unless $rating_type;

			$judge->first($xml_judge->{FIRST});
			$judge->last($xml_judge->{LAST});
			$judge->school($school);
			$judge->obligation($xml_judge->{OBLIGATION});
			$judge->hired($xml_judge->{HIRED});
			$judge->notes($xml_judge->{NOTES});
			$judge->update;

			$used_judge{$judge->id}++;

		}

	    my @time_strikes =  $tourn->strikes( judge => $judge->id, type => "time"); 
		my %used_strikes;

		foreach my $id (keys %timeslot_by_id) { 
		
			next unless $used_timeslots{$id};
			
			my $timeslot = $timeslot_by_id{$id};
			next unless $timeslot;
			next unless $timeslot->id;
			my $key = "TIMESLOT".$timeslot->id;

			if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {

				my $already;

				foreach my $ts (@time_strikes) {
					$already++ if ($ts->start < $timeslot->end && $ts->end > $timeslot->start);
					$used_strikes{$ts->id}++ if $already;
					last if $already;
				}

				unless ($already) { 

					Tab::Strike->create({
						judge => $judge->id,
						type => "time",
						tourn => $tourn->id,
						start => $timeslot->start->set_time_zone($tourn->tz),
						end => $timeslot->end->set_time_zone($tourn->tz)
					});

				}

			}

		}

		foreach my $ts (@time_strikes) { 
			$ts->delete unless $used_strikes{$ts->id};
		}

		my %event_strikes = ();

		foreach my $es (Tab::Strike->search( judge => $judge->id, type => "event" )) { 
			$event_strikes{$es->id} = $es;
		}

		EVENT:
		foreach my $event ($tourn->events) { 
			
			my $key = "EVENT".$event->id;
			my $already = $event_strikes{$event->id};

			if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {

				next EVENT if $already;

				Tab::Strike->create({
					event => $event->id,
					judge => $judge->id,
					type => "event",
					tourn => $tourn->id
				});

			} else { 

				$already->delete if $already;

			}

		}

	}

	foreach my $judge_id (keys %judge_by_id) { 
		next if $used_judge{$judge_id};
		$judge_by_id{$judge_id}->delete;
	}

	my %rating_by_id = ();
	my %used_rating = ();

	foreach my $event (@used_events) { 
		foreach my $rating ($m->comp("/funclib/event_ratings.mas", event => $event)) { 
			$rating_by_id{$rating->id} = $rating;
		}
	}

	my %tier_by_name = ();

	foreach my $tier ($m->comp("/funclib/tourn_rating_tiers.mas", tourn => $tourn)) { 
		$tier_by_name{$tier->name} = $tier;
	}

	if ($rating_type eq "tiered") { 

		foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 

			next unless $xml_rating->{RATING};

			next if $tier_by_name{$xml_rating->{RATING}};

			my $tier = Tab::RatingTier->create({
				name        => $xml_rating->{RATING},
				max         => 100,
				min         => 0,
				strike      => 0,
				conflict    => 0,
				judge_group => $judge_group->id,
				type        => "mpj"
			});

			$tier_by_name{$xml_rating->{RATING}} = $tier;
		}

	}

	foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 

		my $rating = $rating_by_id{$xml_rating->{ID}};

		unless ($rating && $rating->judge->judge_group->tourn->id == $tourn->id) { 

			next if $xml_rating->{RATING} == 333;
			my $conflict++ if $xml_rating->{RATING} == 999;

			my $ordinal = 0;
			$ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";

			my $tier = $tier_by_name{$xml_rating->{RATING}} if $rating_type eq "tiered";
			$tier = 0 unless $tier;

			my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
			my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};

			next unless $entry && $judge;

			if ($conflict) { 

				unless (Tab::Strike->search( judge => $judge, entry => $entry, type => "conflict")) { 

					Tab::Strike->create({
						tourn => $tourn->id,
						judge => $judge,
						entry => $entry,
						type => "conflict",
					});

				}

			} else {
		
				$rating = Tab::Rating->create({
					tourn       => $tourn->id,
					entry       => $entry,
					rating_tier => $tier,
					ordinal     => $ordinal,
					judge       => $judge
				});

			}

			$rating_by_id{$xml_rating->{ID}} = $rating;
			$used_rating{$xml_rating->{ID}}++;

		} else { 

			if ($xml_rating->{RATING} == 333) { 
				$rating->delete;
			} else { 

				my $ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";
				my $percentile = $xml_rating->{ORDPCT} if $rating_type eq "ordinals";

				my $tier = $tier_by_name{$xml_rating->{RATING}}->id if ($rating_type eq "tiered");

				my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
				my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};

				unless ($entry && $judge) { 

					$rating->delete;

				} else {

					$rating->entry($entry);
					$rating->judge($judge);
					$rating->rating_tier($tier);
					$rating->ordinal($ordinal);
					$rating->percentile($percentile);
					$rating->update;
				}

			}

			$used_rating{$xml_rating->{ID}}++;

		}

	}

	foreach my $rating_id (keys %rating_by_id) { 
		next if $used_rating{$rating_id};
		$rating_by_id{$rating_id}->delete;
	}

	my %ok_sites = ();
	my $default_site_id;

	my @rooms;

	foreach my $site ($tourn->sites) { 
		push @rooms, $site->rooms;
		$ok_sites{$site->id}++;
		$default_site_id = $site->id unless $default_site_id;
	}

	my %room_by_id = ();
	my %rooms_by_name = ();

	foreach my $room (@rooms) { 
		$room_by_id{$room->id} = $room;
		$rooms_by_name{$room->name} = $room;
	}

	foreach my $xml_room (@{$data->{ROOM}}) { 

		my $room = $room_by_id{$xml_room->{ID}};
		$room = $rooms_by_name{$xml_room->{ROOMNAME}} unless $room;

		unless ($room && $ok_sites{$room->site->id} ) { 
		
			my $inactive = 0;
			$inactive = 1 if $xml_room->{INACTIVE} eq "true";

			$room = Tab::Room->create({
				name => $xml_room->{ROOMNAME},
				capacity => $xml_room->{CAPACITY},
				quality => $xml_room->{QUALITY},
				building => $xml_room->{BUILDING},
				inactive => $inactive,
				notes => $xml_room->{NOTES},
				site => $default_site_id
			});

			$room_by_id{$xml_room->{ID}} = $room;

		} else { 

			my $inactive = 1 if $xml_room->{INACTIVE} eq "true";

			$room->name( $xml_room->{ROOMNAME} );
			$room->capacity( $xml_room->{CAPACITY} );
			$room->quality( $xml_room->{QUALITY} );
			$room->building( $xml_room->{BUILDING} );
			$room->inactive( $inactive );
			$room->update;

			$room_by_id{$xml_room->{ID}} = $room;
		}

	}

	my @all_rounds;
	my %used_rounds = ();
	my %round_by_id = ();
	my %round_by_cat_id = ();

	foreach my $round (@rounds) { 
		$round_by_id{$round->id} = $round;
		$round_by_cat_id{$round->cat_id} = $round;
	}
	
	ROUND:
	foreach my $xml_round (@{$data->{ROUND}}) { 

		my $round = $round_by_id{$xml_round->{ID}};
		$round = $round_by_cat_id{$xml_round->{ID}} unless $round;

		my $event = $event_by_id{${$xml_round->{EVENT}}[0]};
		my $timeslot = $timeslot_by_id{$xml_round->{TIMESLOT}};

		my $type = lc($xml_round->{PAIRINGSCHEME});

		my $tb_set = $tb_set_by_id{$xml_round->{TB_SET}};
		$tb_set = $tb_set_by_cat_id{$xml_round->{TB_SET}} unless $tb_set;

		$tb_set = $elim_tb_set if $type eq "elim";
		$tb_set = $elim_tb_set if $type eq "final";

		next ROUND unless $event && $timeslot;
			
		unless ($round && $round->event == $event->id && $round->event->tourn->id == $tourn->id) { 

			my $e_name = $event->name." ";

			my $label = $xml_round->{LABEL};
			$label =~ s/^Open//;
			$label =~ s/^Opn//;
			$label =~ s/$e_name//g;
			$label =~ s/prelim/Rnd/g;

			$type = "final" if $label eq "Final";

			$round = Tab::Round->create({
				name     => $xml_round->{RD_NAME},
				flighted => $xml_round->{FLIGHTING},
				label    => $label,
				type     => lc($xml_round->{PAIRINGSCHEME}),
				judges   => $xml_round->{JUDGESPERPANEL},
				event    => $event,
				timeslot => $timeslot,
				tb_set   => $tb_set,
				site     => $default_site_id,
				cat_id   => $xml_round->{ID}
			});


		} else { 

			my $label = $xml_round->{LABEL};
			$label =~ s/^Open//;

			$round->name($xml_round->{RD_NAME});
			$round->label( $label );
			$round->event($event->id);
			$round->tb_set($tb_set->id);
			$round->timeslot($timeslot->id);

			$round->flighted( $xml_round->{FLIGHTING} );
			$round->setting("num_judges", $xml_round->{JUDGESPERPANEL} );
			$round->name( $xml_round->{RD_NAME} );
			$round->type( lc($xml_round->{PAIRINGSCHEME}) );

			$round->site($default_site_id) unless $round->site;
			$round->update

		}

		$round_by_name{$xml_round->{LABEL}} = $round;
		$round_by_id{$xml_round->{ID}} = $round;
		$round_by_id{$round->id} = $round;
		$used_rounds{$round->id}++;
		$used_rounds{$xml_round->{ID}}++;
		push @all_rounds, $round;

	}

	foreach my $round_id (keys %round_by_id) { 
		next if $used_rounds{$round_id};
		$round_by_id{$round_id}->delete;
	}

	Tab::Round->set_sql("high_lett" => "select max(letter) from panel where round = ?");

	my %panel_by_cat_id = ();

	foreach my $event (@used_events) { 
		foreach my $panel ($m->comp('/funclib/event_panels.mas', event => $event)) { 
			$panel_by_cat_id{$panel->cat_id} = $panel if $panel->cat_id;
			$panel->delete unless $panel->cat_id;
		}
	}

	my %used_panels = ();

	PANEL:
	foreach my $xml_panel (@{$data->{PANEL}}) { 

		my $id = $xml_panel->{ID};
		$id = $xml_panel->{PanelID} unless $id;

		my $panel = $panel_by_cat_id{$id};
		my $round = $round_by_id{$xml_panel->{ROUND}};
		my $room = $room_by_id{$xml_panel->{ROOM}};

		$room = $room->id if $room;
		$room = 0 unless $room;

		next unless $round && $round->id;

		unless ($panel && $round_by_id{$panel->round->id} && $panel->round->id == $round->id) { 
			
			my $letter = Tab::Round->sql_high_lett->select_val($round->id);
			$letter++;

			$panel = Tab::Panel->create({
				letter => $letter,
				round  => $round->id,
				room   => $room,
				flight => $xml_panel->{FLIGHT},
				cat_id => $id
			});

			$panel_by_cat_id{$id} = $panel;
			$used_panels{$id}++;

		} else { 

			$panel_by_cat_id{$id} = $panel;
			$used_panels{$id}++;

			$panel->room($room);
			$panel->flight($xml_panel->{FLIGHT});
			$panel->cat_id($id);
			$panel->update;

		}

	}

	foreach my $panel_id (keys %panel_by_cat_id) { 
		next if $used_panels{$panel_id};
		$panel_by_cat_id{$panel_id}->delete;
	}


	my %result_by_entry = ();
	my %seed_set_by_event = ();

	foreach my $event (@used_events) { 

		foreach my $result_set ($event->result_sets) { 

			next unless $result_set->bracket;

			my $notfirst;

			$seed_set_by_event{$event->id} = $result_set;

			foreach my $result ($result_set->results) { 
				$result_by_entry{$result->entry->id."-".$result->round->id} = $result;
				$notfirst++;
			}

		}
	}

	my %used_ballots = ();
	my %entry_ballot = ();

	#ROUND PAIRINGS AND RESULTS
	foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 

		my $round = $round_by_id{$xml_result->{RoundId}};	
		$round = $round_by_name{$xml_result->{RoundName}} unless $round; 	

		my %panel_by_id = ();

		next unless $xml_result->{RESULT_BALLOT};

		PANEL:
		foreach my $xml_panel (@{$xml_result->{RESULT_BALLOT}}) { 

			my $id = $xml_panel->{Panel};
			$id = $xml_panel->{PanelID} unless $id;
	
			my $panel = $panel_by_id{$id};

			unless ($panel) { 

				my $room = 0;
				$room = $room_by_id{$xml_panel->{RoomID}} if $room_by_id{$xml_panel->{RoomID}};

				$panel = Tab::Panel->create({
					letter => $id,
					room   => $room,
					round  => $round,
					flight => $xml_panel->{Flight},
					cat_id => $xml_panel->{ID}
				});

				$panel_by_id{$id} = $panel;
				$panel_by_cat_id{$id} = $panel;
			
			}

            my $judge_id = 0;
            unless ($xml_panel->{JudgeID} < 1) {
                eval {
                    $judge_id = $judge_by_id{$xml_panel->{JudgeID}}->id;
                };
            }

			my @xml_results = @{$xml_panel->{RESULT_SCORE}};

            my %ballot_by_entry = ();
            my %ballot_by_student = ();

			my $count;
		    my $byes;

			BALLOTS:
			foreach my $xml_ballot (@xml_results) { 

                next unless $xml_ballot->{Score_Name} eq "Ballot";
                my $entry = $entry_by_id{$xml_ballot->{Recipient}};
                next unless $entry && $entry->id;

				$count++;

                my $bye = 0;
                my $forfeit = 0;

                my $value = $xml_ballot->{content};
                my $side = $xml_ballot->{Side};

                if (($side == -1) || $judge_id == 0) { 
                    $bye = 1 if $value == "1";
                    $forfeit = 1 if $value == "0";
                    $side = $count;
                }

                $byes = 1 if $bye;
                $byes = 1 if $forfeit;

                my $ballot;

				$ballot = Tab::Ballot->create({
					entry  => $entry->id,
					panel  => $panel->id,
					side   => $side,
					judge  => $judge_id,
					audit  => 1,
					bye    => $bye,
					noshow => $forfeit
				});

                $panel->room(0) if $bye;
                $panel->room(0) if $forfeit;

                $ballot_by_entry{$xml_ballot->{Recipient}} = $ballot;

                foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
                    $ballot_by_student{$student->cat_id} = $ballot;
                }

				$used_ballots{$ballot->id}++;
				$entry_ballot{$round."-".$entry} = $ballot;

			}

            if ($count == 1) {
                $panel->bye(1);
                $panel->room(0);
            }

            if ($byes && ($round->type eq "elim" || $round->type eq "final")) {
                $panel->bye(1);
                $panel->room(0);
            }

            $panel->update;

            foreach my $xml_value (@xml_results) {

                my $tag = lc($xml_value->{Score_Name});

                next if $byes;

                $tag = "rank" if $tag eq "ranks";

                my $value = $xml_value->{content};

                my $ballot;
                my $student;

                if ($xml_value->{ScoreFor} eq "Speaker") {
                    $student = $student_by_cat_id{$xml_value->{Recipient}}->id if $student_by_cat_id{$xml_value->{Recipient}};
                    $ballot = $ballot_by_student{$xml_value->{Recipient}}->id if $ballot_by_student{$xml_value->{Recipient}};
                } else {
                    $ballot = $ballot_by_entry{$xml_value->{Recipient}}->id if $ballot_by_entry{$xml_value->{Recipient}};
                }

                next unless $ballot;

                my $ballot_value = Tab::BallotValue->create({
                    tag     => $tag,
                    value   => $value,
                    student => $student,
                    ballot  => $ballot
                });

            }

		}

	}

	my %used_results = ();

	ELIMSEED:
	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) { 

		my $entry_id = $xml_elimseed->{ENTRY};


		next if $entry_id == "-99";

		my $entry = $entry_by_id{$entry_id};

		next unless $entry;

		my $round_id = $xml_elimseed->{ROUND};
		my $event_id = ${$xml_elimseed->{EVENT}}[0];

		my $event = $event_by_id{$event_id};
		my $round = $round_by_id{$round_id};

		next unless $event && $round;

		my $result = $result_by_entry{$entry->id."-".$round->id};
		my $set = $seed_set_by_event{$event->id};

		unless ($set) { 

			$set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event->id,
				bracket   => 1,
				label     => "Bracket",
				generated => $now
			});

			$seed_set_by_event{$event->id} = $set;
		}


		my $seed_done;

		if ($result) { 

			$used_results{$result->id}++;

			foreach my $value ($result->values) { 

				$value->delete unless $value->tag eq "Seed";

				if ($value->tag eq "Seed") { 
					$value->value($xml_elimseed->{SEED});
					$value->update;
					$seed_done++;
				}

			}

		} else { 

			$result = Tab::Result->create({
				result_set => $set->id,
				entry => $entry->id,
				round => $round->id
			});
		}

		my $result_value;

		unless ($seed_done) { 

			$result_value = Tab::ResultValue->create({
				result => $result->id,
				value => $xml_elimseed->{SEED},
				priority => 1,
				tag => "Seed",
				sort_desc => 0,
				no_sort => 0
			});
		}

	}

	my %ballot_by_id = ();
	my %ballot_by_cat_id = ();
	my %ballot_event_type = ();

	foreach my $event (@used_events) { 

		my $type = $event->type;

		foreach my $ballot ($m->comp('/funclib/event_ballots.mas', event => $event)) { 
			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$ballot->cat_id} = $ballot;
			$ballot_event_type{$ballot->id} = $type;
			$ballot_event_type{$ballot->cat_id} = $type;
		}
	}

	my %used_cat_ballots = ();

	foreach my $xml_ballot (@{$data->{BALLOT}}) { 

		my $ballot = $ballot_by_cat_id{$xml_ballot->{ID}};
		$ballot = $ballot_by_id{$xml_ballot->{ID}} unless $ballot;
	
		next if $xml_ballot->{ENTRY} == -99;
		next if $xml_ballot->{JUDGE} == 0;

		my $panel = $panel_by_cat_id{$xml_ballot->{PANEL}};
		$panel = $panel_by_cat_id{$xml_ballot->{PANEL}} unless $panel;
		
		my $bye = 0;
		$bye++ if $xml_ballot->{JUDGE} == -1;
		$bye++ if $xml_ballot->{SIDE} == -1;

		my $judge = 0;

		unless ($xml_ballot->{JUDGE} == -99 || $bye) { 
			$judge = $judge_by_id{$xml_ballot->{JUDGE}} if $judge_by_id{$xml_ballot->{JUDGE}};
		}

		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};

		next unless ($panel && ($bye > 0 || $judge > 0 || $entry > 0));

		my $entry_id = $entry->id if $entry;
		$entry_id = 0 unless $entry_id;

		unless ($ballot && $ballot->panel && $ballot->panel->id == $panel->id) { 
				
			$ballot = Tab::Ballot->create({
				judge  => $judge,
				panel  => $panel,
				entry  => $entry_id,
				side   => $xml_ballot->{SIDE},
				bye    => $bye,
				cat_id => $xml_ballot->{ID}
			});

			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;

			$used_ballots{$ballot->id}++;
			$used_ballots{$xml_ballot->{ID}}++;
			$used_cat_ballots{$ballot->cat_id}++;

			$ballot_event_type{$ballot->id} = $panel->round->event->type;
			$ballot_event_type{$xml_ballot->{ID}} = $panel->round->event->type;

		} else { 

			$ballot->judge($judge);
			$ballot->panel($panel);
			$ballot->entry($entry_id);
			$ballot->side($xml_ballot->{SIDE});
			$ballot->cat_id($xml_ballot->{ID});
			$ballot->bye($bye);
			$ballot->update;

			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;

			$used_ballots{$ballot->id}++;
			$used_ballots{$xml_ballot->{ID}}++;
			$used_cat_ballots{$ballot->cat_id}++;

		}

	}

	foreach my $ballot_id (keys %ballot_by_id, keys %ballot_by_cat_id) { 
		next if $used_ballots{$ballot_id};
		next if $used_cat_ballots{$ballot_id};
		$ballot_by_id{$ballot_id}->delete if $ballot_by_id{$ballot_id};
	}

	my %score_type = ();
	my %score_by_id = ();
	my %score_by_cat_id = ();

	foreach my $event (@used_events) { 

		my $type = $event->type;

		foreach my $value ($m->comp('/funclib/event_values.mas', event => $event)) { 
			$score_by_id{$value->id} = $value;
			$score_by_cat_id{$value->cat_id} = $value;
		}
	}

	my %used_scores;
	my %scored_ballot;

	SCORE:
	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 

		my $score = $score_by_cat_id{$xml_score->{ID}};
		my $ballot = $ballot_by_cat_id{$xml_score->{BALLOT}};

		my $type = $xml_score->{SCORE_ID};
		my $event_type = $ballot_event_type{$xml_score->{BALLOT}};

		my $tag = "ballot" if $type == 1;
		$tag = "points" if $type == 2 || $type == 4;
		$tag = "rank" if $type == 3 || $type == 5;

		unless ($tag eq "ballot") { 
			next SCORE if $xml_score->{SCORE} == 0;
		}

		my $student = $student_by_id{$xml_score->{RECIPIENT}} if ( $type == 2 || $type == 3 ) && $event_type ne "speech";
		my $entry = $entry_by_id{$xml_score->{RECIPIENT}} if ($type == 1 || $type == 4 || $type == 5 ) || $event_type eq "speech";

		unless ($ballot && ($student || $entry)) { 
			next SCORE;
		}

		$scored_ballot{$ballot->id}++;

		unless ($score && $score->ballot && $score->ballot->id == $ballot->id) { 
		
			$score = Tab::BallotValue->create({
				tag     => $tag,
				ballot  => $ballot->id,
				student => $student,
				value   => $xml_score->{SCORE},
				cat_id  => $xml_score->{ID}
			}) if $student;

			$score = Tab::BallotValue->create({
				tag    => $tag,
				ballot => $ballot->id,
				value  => $xml_score->{SCORE},
				cat_id => $xml_score->{ID}
			}) unless $student;

			$score_by_id{$xml_score->{ID}} = $score;
			$score_by_cat_id{$xml_score->{ID}} = $score;
			$used_scores{$xml_score->{ID}}++;

		} else { 

			my $sid = 0;
			$sid = $student->id if $student;

			$score_by_cat_id{$xml_score->{ID}} = $score;
			$used_scores{$xml_score->{ID}}++;

			$score->ballot($ballot->id);
			$score->student($sid);
			$score->tag($tag);
			$score->value($xml_score->{SCORE});
			$score->cat_id($xml_score->{ID});
			$score->update;
			$used_scores{$score->id}++;

		}

	}

	foreach my $score_id (keys %score_by_id) { 
		next if $used_scores{$score_id};
		my $score = $score_by_id{$score_id};
		next unless $scored_ballot{$score->ballot->id};
		$score_by_id{$score_id}->delete;
	}

	foreach my $round (@all_rounds) { 
		$m->comp("/funclib/round_audit.mas", round => $round);
	}

	my $msg = "Tournament imported into Tabroom";
	$m->redirect("/user/tourn/select.mhtml?tourn_id=".$tourn->id."&msg=$msg");

</%init>

