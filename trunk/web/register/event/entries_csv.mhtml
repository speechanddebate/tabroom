<%args>
	$tourn
	$account
	$session
	$event_id => 0
	$drops    => undef
	$waitlist => undef
	$at_large => undef
	$sort     => undef
	$breakout => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my @events;
	my $namestring;

	if ($event_id) { 
		$events[0] = Tab::Event->retrieve($event_id);
		$namestring = $events[0]->abbr;
	} else {
		@events = sort{$a->name cmp $b->name} $tourn->events;
		$namestring = "all-events";
	}

	my $filename = "entry-".$namestring."-".$session->id;
	my $filepath = $Tab::file_root."/tmp/$filename";
	my $garbage = `rm -f $filepath.*`;

	open (CSVOUT, ">$filepath.csv");
	print CSVOUT "sep=,\n";

	print CSVOUT "\"Code\",";
	print CSVOUT "\"Event\",";
	print CSVOUT "\"Status\",";
	print CSVOUT "\"DioCode\","  if $tourn->setting("ncfl");
	print CSVOUT "\"Diocese\","  if $tourn->setting("ncfl");
	print CSVOUT "\"Region\","   if $tourn->setting("regions");
	print CSVOUT "\"Schcode\","  if $tourn->setting("school_codes") && not defined $tourn->setting("ncfl");
	print CSVOUT "\"School\",";
	print CSVOUT "\"Name\",";
	print CSVOUT "\"ADA\",";
	print CSVOUT "\"Seed\",";
	print CSVOUT "\"Pairing Seed\",";
	print CSVOUT "\"Registered At\",";
	print CSVOUT "\"Dropped At\",";
	print CSVOUT "\"Piece Title\",";
	print CSVOUT "\"Individual Students\",,";
	print CSVOUT "\"Breakouts\",";
	print CSVOUT "\n";

	foreach my $event (@events) { 
	
		my $titles++ if $event->setting("ask_for_titles");

		my $breakouts = $event->setting("breakouts");
		my %breakout = ();

		foreach my $breakout_key (1 .. $breakouts) { 
			$breakout{$breakout_key}{"deleted"} = $event->setting("breakout_".$breakout_key."_deleted");
			$breakout{$breakout_key}{"label"} = $event->setting("breakout_".$breakout_key."_label");
			my @settings = $m->comp("/funclib/event_entry_settings.mas", event => $event, tag => "breakout_".$breakout_key);
			foreach my $setting (@settings) { 
				$breakout{$breakout_key}{$setting->entry->id}++;
			}
		}
		
		my @entries;

		if ($drops) { 
			@entries = Tab::Entry->search( event => $event->id, dropped => 1 )  if $drops;
		} elsif ($waitlist) { 
			@entries = Tab::Entry->search( event => $event->id, waitlist => 1 )  if $waitlist;
		} elsif ($at_large) { 
			@entries = $m->comp("/funclib/event_entries.mas", event => $event, at_larges => "living");
		} elsif ($breakout) { 
			@entries = $m->comp("/funclib/event_entries.mas", event => $event, breakout => $breakout);
		} else { 
			@entries = Tab::Entry->search( event => $event->id );
		}

		@entries = sort {$a->code <=> $b->code} @entries;
		
		foreach my $entry (@entries) { 

			print CSVOUT "\"".$entry->code."\",";
			print CSVOUT "\"".$event->abbr."\",";

			print CSVOUT "\"";
			if ($entry->dropped) { 
				print CSVOUT "DROP";
			} elsif ($entry->waitlist) { 
				print CSVOUT "WL";
			} 
			print CSVOUT "\",";

			if ($tourn->setting("ncfl")) { 
				print CSVOUT "\"".$entry->school->region->code."\",";
				print CSVOUT "\"".$entry->school->region->name."\",";
			} elsif ($tourn->setting("school_codes")) { 
				print CSVOUT "\"".$entry->school->code."\",";
			} 
			
			if ($tourn->setting("regions")) { 
				print CSVOUT "\"";
				print $entry->school->region->name if $entry->school->region;
				print CSVOUT "\",";
			}

			print CSVOUT "\"".$entry->school->name."\",";
			print CSVOUT "\"".$entry->name."\",";

			print CSVOUT "\"";
			print CSVOUT "ADA" if $entry->ada;
			print CSVOUT "\",";
			print CSVOUT "\"".$entry->setting("registered_seed")."\",";
			print CSVOUT "\"".$entry->setting("pairing_seed")."\",";

			print CSVOUT "\"";
			print CSVOUT &Tab::csvdt($entry->created_at->set_time_zone($tz)) if $entry->created_at;
			print CSVOUT "\",";
			print CSVOUT "\"";
			my $dropped_at = $entry->setting("dropped_at");
			print CSVOUT &Tab::csvdt($dropped_at->set_time_zone($tz)) if $dropped_at;
			print CSVOUT "\",";
			print CSVOUT "\"";
			print CSVOUT $entry->setting("title") if $titles;
			print CSVOUT "\",";

			my $counter;
			foreach my $student ($entry->students) { 
				$counter++;
				print CSVOUT "\"".$student->first." ".$student->last."\",";
			}
			print CSVOUT "," if $counter < 2;

			my %done;

			if ($event->type eq "speech"|| $event->type eq "congress") { 
				foreach my $ballot ($m->comp("/funclib/entry_ballots.mas", entry => $entry)) {
					next if $done{$ballot->panel->id}++;
					print CSVOUT "\"".$ballot->speakerorder."\",";
				}
			}

			foreach my $breakout_key (1 .. $breakouts) { 
				next if $breakout{$breakout_key}{"deleted"};
				print CSVOUT "\"".$breakout{$breakout_key}{"label"}."\"," if $breakout{$breakout_key}{$entry->id};
			}

			print CSVOUT "\n";

		}

	}

	close CSVOUT;

	$m->redirect("$Tab::url_prefix/tmp/$filename.csv");

</%init>

