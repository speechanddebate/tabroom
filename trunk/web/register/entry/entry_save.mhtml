<%args>
	$tourn
	$entry_id
	$name
	$code         => undef
	$ada          => undef
	$title        => undef
	$seed         => undef
	$pairing_seed => undef
	$pod          => undef
</%args>
<%init>

	my $err;

	my $entry = Tab::Entry->retrieve($entry_id);

	if ($name && $name ne $entry->name) { 

		my @existing = Tab::Entry->search( name => $name, tourn => $entry->event->tourn->id );

		if (@existing) { 
	
			my $err = "An entry with name $name already exists.  Names must be unique.";
			$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err");
		
		} else { 
	
			$entry->name($name);
			$entry->update;
	
		}

	}

	my $code_setting = $entry->event->setting("code_style");

	$code =~ s/[^\w\s]//g;

	if ($code && $code ne $entry->code) { 

		my @existing = $m->comp("/funclib/entry_by_code.mas", tourn => $tourn, code => $code);
		push @existing, $m->comp("/funclib/judge_by_code.mas", tourn => $tourn, code => $code) if $code eq int($code);

		if (@existing) { 
			my $err = "An entry or judge with code $code already exists.  Codes must be unique.  @existing";
			$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err");
	
		} else { 
	
			$entry->code($code);
		}

	}

	$entry->ada($ada);
	$entry->update;

	$entry->setting("registered_seed", $seed);
	$entry->setting("pairing_seed", $pairing_seed);
	$entry->setting("pod", $pod);
	$entry->setting("title", $title);

	my $msg = "Entry information updated";
	$m->redirect("edit.mhtml?entry_id=$entry_id&msg=$msg");
		
</%init>
