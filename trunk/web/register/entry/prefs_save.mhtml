<%args> 
	$tourn
	$entry_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now( time_zone => $tz );

	my $entry = Tab::Entry->retrieve($entry_id);

	$m->abort unless $entry;

	my $event = $entry->event;
	my $group = $event->judge_group;

	my $prefs = $group->setting("prefs");

	my %tier_by_name = ();

	if ($prefs eq "tiered" || $prefs eq "tiered_round" || $prefs eq "caps") { 
		foreach my $tier ($group->rating_tiers) { 
			$tier_by_name{$tier->name} = $tier->id;
		}
	}

	Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ? ");
	Tab::Entry->sql_wipe_prefs->execute($entry->id);

	my @conflicts = Tab::Strike->search( entry => $entry->id, type => "conflict" );
	push @conflicts, Tab::Strike->search( school => $entry->school->id, type => "school" );
	my %conflicts_by_id = map {$_->judge->id => $_} @conflicts;
	Tab::debuglog("Fleh. I have @conflicts conflicts");

	my $school_id = $entry->school->id;
	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school, group => $group);
	my %school_conflicts_by_id = map {$_->judge->id => $_} @school_conflicts;

	my @all_judges = Tab::Judge->search_where({ active => 1, judge_group => $group->id });

	my %rating_by_judge = ();
	my %ordinal_by_judge = ();
	my %judges_at_rating = ();

	my $total_rounds;

	JUDGE:
    foreach my $judge (@all_judges) {

        next if $school_conflicts_by_id{$judge->id};
		next if $judge->school->id == $school_id;

        if ($conflicts_by_id{$judge->id}) { 

			Tab::debuglog($judge->last." is a conflict.  Marked ".$ARGS{"conflict_".$judge->id});

			next JUDGE if $ARGS{"conflict_".$judge->id};
			$conflicts_by_id{$judge->id}->delete;

		} elsif ($ARGS{"conflict_".$judge->id}) {
			Tab::Strike->create({
				judge => $judge->id,
				entry => $entry->id,
				type  => "conflict",
				tourn => $tourn->id
			});
		}

		next unless $ARGS{$judge->id};

		unless ($ARGS{$judge->id} == 999) { 
			$total_rounds += $judge->obligation;
			$total_rounds += $judge->hired;
		}

		if ($prefs eq "ordinals") { 

			next JUDGE unless $ARGS{$judge->id};

			my $rating = Tab::Rating->create({
				type    => "entry",
				tourn   => $tourn->id,
				judge   => $judge->id,
				entry   => $entry->id,
				ordinal => $ARGS{$judge->id},
				entered => $now
			});

			$rating_by_judge{$judge->id} = $rating;
			$ordinal_by_judge{$judge->id} = $ARGS{$judge->id};
			push (@{$judges_at_rating{$ARGS{$judge->id}}}, $judge );

		} else { 

			next JUDGE unless $tier_by_name{$ARGS{$judge->id}};

			Tab::Rating->create({
				type        => "entry",
				tourn       => $tourn->id,
				judge       => $judge->id,
				entry       => $entry->id,
				rating_tier => $tier_by_name{$ARGS{$judge->id}},
				entered     => $now
			});
		}
	}	

	my $rounds_before;

	if ($prefs eq "ordinals") { 
		
		$total_rounds = scalar @all_judges unless $total_rounds;

		my $rounds_before;
		my $count;

		foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {

			next unless $ordinal > 0;

			my $rounds_add;
			my $judge_count;
		
			foreach my $judge (@{$judges_at_rating{$ordinal}}) { 

				$judge_count++;
				$count++;

				my $percentile = ( ($rounds_before + 1) / $total_rounds) * 100;
		
				$rounds_add += $judge->obligation;
				$rounds_add += $judge->hired;

				my $rating = $rating_by_judge{$judge->id};

				$rating->percentile($percentile);
				$rating->update;

			}

			$rounds_before += $rounds_add;
			$rounds_before += $judge_count unless $rounds_add;

		}

	}

	my $msg = $entry->code." prefs saved in ".$group->abbr." to $rounds_before rounds";

	$m->redirect("prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&group_id=".$group->id."&style=entry_ratings&msg=".$msg);

</%init>

