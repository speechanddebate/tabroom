<%args>
	$tourn
	$session
	$account
</%args>
<%init>


	my $tourn_name = $tourn->name;
	$tourn_name =~ s/[\W_]//g;

	my $filename = $tourn_name.".txt";

	$m->clear_buffer;
	$r->content_type('application/txt');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	my $start_string = Tab::pickerdate($tourn->start);

	$m->print("[Data]\n");
	$m->print("Signature=www.joyoftournaments.com\nVersion=5.6\nStartDate=$start_string\nEvents=webevents.csv\nSchools=webschools.csv\nJudges=webjudges.csv\nEntrys=webentrys.csv\nTeams=webteams.csv\nStudents=webstudents.csv\nJudpat=webjudpat.csv\nGroups=webgroups.csv\nGroupMembers=webgmem.csv\nFees=webfees.csv\nJFlags=webjflag.csv\n4Man=web4man.csv\nSelections=webtitles.csv\nEBlocks=eblocks.csv\nMultiPart=1\nWebTournID=".$tourn->id."\nWebURL=".$tourn->webname.".tabroom.com\nVJudges=0\nJudgeTimes=0\n\n");

	$m->print("[webevents.csv]\n");

	$m->print('"ID","Name","Abbr","Min Team Size","Max Team Size","isdebate","isgroup","fee","Drop Fee 1","Drop Fee 2","Drop Fee 3","Pattern","judpat","iscongress","division","code"'."\n");

	my $drop_fine = $tourn->setting("drop_fine"); # in tabroom there can be only one.

	my %judge_patterns = ();
	my $counter;
	foreach my $group (sort $tourn->groups) { 
		$counter++;
		$judge_patterns{$group->id} = $counter;
	}

	foreach my $event ($tourn->events) { 

		$m->print($event->id.",");
		$m->print('"'.$event->name.'",');
		$m->print('"'.$event->abbr.'",');
		$m->print($event->setting("min_entry").',');
		$m->print($event->setting("max_entry").',');
		$m->print("1,") if $event->type ne "speech" && $event->type ne "congress";
		$m->print("0,") if $event->type eq "speech" || $event->type eq "congress";
		$m->print("1,") if $event->setting("max_entry") > 2;
		$m->print("0,") if $event->setting("max_entry") <= 2;
		$m->print($event->fee.',');
		$m->print($drop_fine.',');
		$m->print($drop_fine.',');
		$m->print($drop_fine.',');  # why are there three of these?  I dunno...
		$m->print('"'.$event->event_double->name.'",') if $event->event_double;
		$m->print('"All Events",') unless $event->event_double;
		$m->print($judge_patterns{$event->judge_group->id}.',');

		$m->print("1,") if $event->type eq "congress";
		$m->print("0,") if $event->type ne "congress";

		my $level = lc($event->setting("level"));

		if ($level eq "novice" || $level eq "spanish-novice") { 
			$m->print("3,");
		} elsif ($level eq "jv" || $level eq "spanish-jv") { 
			$m->print("2,");
		} else { 
			$m->print("1,");
		}

		$m->print('""');
		$m->print("\n");
	}

	$m->print("\n");
	$m->print("[webschools.csv]\n");
	$m->print('"ID","School","Coach","Addl Coaches","City","State","School Phone","Cell Phone","Home Phone","Fax","E-mail","Alternate E-Mail","Code","Address","Zip",'."\n");

	foreach my $school ($tourn->schools) { 

		$m->print($school->id.",");
		$m->print('"'.$school->name.'",');
		$m->print('"'.$school->setting("contact_name").'",');
		$m->print('"",');

		if ($school->chapter) { 
			$m->print('"'.$school->chapter->city.'",');
			$m->print('"'.$school->chapter->state.'",');
		} else {
			$m->print('"",');
			$m->print('"",');
		}

		$m->print('"",');
		$m->print('"'.$school->setting("contact_number").'",');
		$m->print('"",');
		$m->print('"",');
		$m->print('"'.$school->setting("contact_email").'",');
		$m->print('"",');
		$m->print('"'.$school->code.'",');
		$m->print('"",');
		$m->print('"",');
		$m->print("\n");
	}


	$m->print("\n");
	$m->print("[webjflag.csv]\n");
	$m->print("No judge flags\n");

	$m->print("\n");
	$m->print("[webjudpat.csv]\n");
	$m->print('"seq","name","abbr"'."\n");

	foreach my $group (sort $tourn->groups) { 
		$m->print($judge_patterns{$group->id}.",");
		$m->print('"'.$group->name.'",');
		$m->print('"'.$group->abbr.'"'."\n");
	}

	$m->print("\n");
	$m->print("[webjudges.csv]\n");

	$m->print('"ID","Name","School","rating","Notes",');

	my @days = ("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday");

	foreach my $day (@days) { 
		$m->print('"'.$day.'",');
	}

	foreach my $seq (1 .. 10) { 
		$m->print('"seq'.$seq.'",');
	}

	$m->print('"flag1","flag2","flag3","flag4","flag5","cellphone","email"'."\n");

	my @tourn_days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);
	my %tourn_day_names;

	foreach my $day (@tourn_days) { 

		my $day_start = $day->clone();
		$day_start->set_hour(00);
		$day_start->set_minute(01);

		my $day_end = $day->clone();
		$day_end->set_hour(23);
		$day_end->set_minute(59);

		my $span = DateTime::Span->from_datetimes( start => $day_start, end => $day_end );
		$tourn_day_names{$day->day_name} = $span;
	}

	foreach my $group ($tourn->groups) { 

		my %rating_by_judge = (); 
		my $coach_ratings = $group->setting("coach_ratings");

		if ($coach_ratings) { 
			my @ratings = $m->comp("/funclib/group_ratings.mas", group => $group, type => "coach");
			my @tiers = $group->rating_tiers;
			my %tier_names = (); 
			foreach my $tier (@tiers) { 
				$tier_names{$tier->id} = $tier->name; 
			}
			foreach my $rating (@ratings) { 
				$rating_by_judge{$rating->judge->id} = $tier_names{$rating->rating_tier->id} if $rating && $rating->rating_tier; 
			}
		}  

		my $tab_ratings = $group->setting("tab_ratings");

		if ($tab_ratings) { 
			my @tab_ratings = $m->comp("/funclib/group_judge_settings.mas", group => $group, tag => "tab_rating");
			%rating_by_judge = map {$_->judge->id => $_->value} @tab_ratings if @tab_ratings;
		}

		foreach my $judge ($group->judges(active => 1)) { 

			$m->print($judge->id.",");
			$m->print('"'.$judge->first." ".$judge->last.'",');
			$m->print('"'.$judge->school->id.'",') if $judge->school;
			$m->print('"1",') unless $judge->school;
			$m->print('"'.$rating_by_judge{$judge->id}.'",');
			$m->print('"'.$judge->setting("notes").'",');

			my @days = ("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday");
			my @strikes = $judge->strikes( type => "time" );
			my @strike_spans;

			foreach my $strike (@strikes) { 
				my $span = DateTime::Span->from_datetimes( start => $strike->start, end => $strike->end );
				push @strike_spans, $span;
			}

			foreach my $day (@days) { 
				if ($tourn_day_names{$day}) { 
					my $nope;
					foreach my $span (@strike_spans) { 
						$nope++ if $span->intersects($tourn_day_names{$day});
						last if $nope;
					}
					$m->print('"X"') unless $nope;
				}
				$m->print(',');
			}

			my @patterns = sort keys %judge_patterns;

			foreach my $seq (1 .. 10) { 
				my $judge_id = shift @patterns if @patterns;
				$m->print('"X"') if $judge_id == $judge->judge_group->id;
				$m->print('"X"') if $judge_id == $judge->alt_group->id;
				$m->print(',');
			}

			$m->print(',,,,,');  #flags
			$m->print('"'.$judge->setting("phone").'",');
			$m->print('"'.$judge->setting("email").'"');
			$m->print("\n");
		}
	}

	$m->print("\n");
	$m->print("[webstudents.csv]\n");
	$m->print('"student_id","coach_id","name"'."\n");

	my %student_by_entry = ();
	my %partner_by_entry = ();

	my %tourn_students = $m->comp("/funclib/tourn_students.mas", tourn => $tourn, by_entry => 1, no_drops => 1 );

	foreach my $entry (keys %tourn_students) { 

		my $student = shift @{$tourn_students{$entry}{"students"}} if $tourn_students{$entry}{"students"} && @{$tourn_students{$entry}{"students"}};
		my $partner = shift @{$tourn_students{$entry}{"students"}} if $tourn_students{$entry}{"students"} && @{$tourn_students{$entry}{"students"}};

		$partner_by_entry{$entry} = $partner if $partner;
		$student_by_entry{$entry} = $student if $student;

		$m->print("$partner,".$tourn_students{$entry}{$partner}{"school"}.',"'.$tourn_students{$entry}{$partner}{"name"}."\"\n") 
			if $partner;
		$m->print("$student,".$tourn_students{$entry}{$student}{"school"}.',"'.$tourn_students{$entry}{$student}{"name"}."\"\n") 
			if $student;

	}

	$m->print("\n");
	$m->print("[webentrys.csv]\n");
	$m->print('"entry_id","tourn_id","student_id","event_id","code"'."\n");

	foreach my $entry ($m->comp("/funclib/tourn_entries.mas", tourn => $tourn, )) { 
		$m->print($entry->id.",");
		$m->print($tourn->id.",");
		$m->print($student_by_entry{$entry->id}.",");
		$m->print($entry->event->id.",");
		$m->print('"'.$entry->code."\"\n");
	}

	$m->print("\n");
	$m->print("[webteams.csv]\n");
	$m->print('"tourn_id","squad_id","event_id","entry_id","student_id","partner_id","seq","team_id","code"'."\n");

	foreach my $event ($tourn->events) { 

		next unless $event->setting("max_entry") > 1;

		my %school_seq = ();

		foreach my $entry ($event->entries(dropped => 0, waitlist => 0)) { 

			$school_seq{$entry->school->id}++;

			$m->print($tourn->id.",");
			$m->print($entry->school->id.",");
			$m->print($event->id.",");
			$m->print($entry->id.",");
			$m->print($student_by_entry{$entry->id}.",");
			$m->print($partner_by_entry{$entry->id}.",");
			$m->print($school_seq{$entry->school->id}.",");
			$m->print($entry->id.",");
			$m->print('"'.$entry->code."\"\n");

		}
	}

	$m->print("\n");
	$m->print("[webgroups.csv]\n");
	$m->print("No groups recorded\n");

	$m->print("\n");
	$m->print("[webgmem.csv]\n");
	$m->print("No groups members recorded\n");

	$m->print("\n");
	$m->print("[webfees.csv]\n");
	$m->print("No fees recorded\n");

	$m->print("\n");
	$m->print("[webjflags.csv]\n");
	$m->print("No judge flags\n");

	$m->print("\n");
	$m->print("[web4man.csv]\n");
	$m->print("No 4man debate teams\n");

	$m->print("\n");
	$m->print("[webtitles.csv]\n");
	$m->print("No selections\n");

	$m->print("\n");
	$m->print("[eblocks.csv]\n");
	$m->print("No event blocks\n");


	$m->flush_buffer;
	$m->abort;

</%init>
