<%args>
	$account
	$debug => 1
	$add   => undef
	$tourn
</%args>
<%init>

	use XML::Simple;
	use Data::Dumper;

	my $now = DateTime->now;
	my $tz = $account->tz if $account->tz;
	$tz = "UTC" unless $tz;

	$now->set_time_zone($tz);

	#PROCESS THE XML
	my $req = Apache2::Request->new($r, DISABLE_UPLOADS => 0);
	my $xml_file = $req->upload('trpc_xml');
	my $xml_filename = $xml_file->tempname;

	system "/bin/mkdir -p ".$Tab::file_root."tmp/".$tourn->id."/$now->epoch";
	my $xml_path = $Tab::file_root."tmp/".$tourn->id."/$now->epoch";

	`/bin/cp $xml_filename $xml_path`;
	`perl -pi -e s/'&'/'&amp;'/g  $xml_path/$xml_filename`;

	my $xml = new XML::Simple ( SuppressEmpty => 1, ForceArray => [ qw(RESULT_BALLOT RESULT_SCORE EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]); 
	my $data = $xml->XMLin($xml_filename);

	my $judge_group;

	#EVENTS
	my %event_by_id = ();

	my @events;

	my @xml_events;
	eval { 
		@xml_events = @{$data->{EVENT}};
	};

	push (@xml_events, $data->{EVENT}) unless @xml_events;

	my @used_events;

	foreach my $xml_event (@xml_events) { 

		my $event;

		if ($ARGS{"event_id_".$xml_event->{ID}} eq "new") { 

			$judge_group = Tab::JudgeGroup->create({ 
				name  => $xml_event->{ABBR}." Judges",
				tourn => $tourn->id,
				abbr  => $xml_event->{ABBR}
			}) unless $judge_group;

			$event = Tab::Event->create({
				tourn       => $tourn->id,
				name        => $xml_event->{EVENTNAME},
				type        => lc($xml_event->{TYPE}),
				abbr        => $xml_event->{ABBR},
				judge_group => $judge_group->id
			});

			$event_by_id{$xml_event->{ID}} = $event;
			$m->print("Event ".$xml_event->{EVENTNAME}." has been created<br />") if $debug;

			$event->setting("code_style", "full_initials"); #for debate this is almost always sensible
			$event->setting("min_points", "0");
			$event->setting("max_points", "30");

			foreach my $xml_setting (@{$data->{EVENT_SETTING}}) { 

				next unless $xml_setting->{EVENT} == $xml_event->{ID};

				$event->setting("live_updates", 1);
				$event->setting("online_ballots", 1);

				if ($xml_setting->{TAG} eq "DebatersPerTeam") {
					$event->setting("min_entry", $xml_setting->{VALUE});
					$event->setting("max_entry", $xml_setting->{VALUE});
				} else {
					$event->setting( $xml_setting->{TAG}, $xml_setting->{VALUE} );
				}
			}

		} elsif ($ARGS{"event_id_".$xml_event->{ID}}) { 

			$event = Tab::Event->retrieve($ARGS{"event_id_".$xml_event->{ID}});
			$event_by_id{$xml_event->{ID}} = $event if $event;
			$judge_group = $event->judge_group if $event;

		} else { 

			$event = Tab::Event->retrieve($xml_event->{ID});

			unless ($event && $event->tourn) { 
				$m->print("You did not specify an event/division for an event in this TourneyData file.  Hit back and try again");
				$m->abort;
			}

			if ($event->tourn && $event->tourn->id == $tourn->id) { 
				$event_by_id{$xml_event->{ID}} = $event if $event;
				$judge_group = $event->judge_group if $event;
			}

		} 


		push @events, $event;
		push @used_events, $event;

	}

	$m->print("<h2>Rooms</h2>") if $debug;

	#ROOMS 
	my $sname = $tourn->name;
	$sname =~ s/Invitation$//g;
	$sname =~ s/Invitational$//g;
	$sname =~ s/Classic$//g;
	$sname =~ s/Tournament$//g;
	my $newsite;

	my @sites = $tourn->sites;
	my $site = shift @sites if @sites;
	
	if ($site) { 

		$m->print("Using existing site ".$site->name." for the rooms. <br />") if $debug;

	} else { 
	
		$site = Tab::Site->search( name => $sname )->first;
		$m->print("Using existing site ".$site->name." for the rooms. <br />") if $debug && $site;

		$newsite++;
		$m->print("Creating site ".$site->name." for the rooms. <br />") if $debug && not defined $site;

		$site = Tab::Site->create({
			name => $sname,
			host => $account->id
		}) unless $site;

		my $tsite = Tab::TournSite->create({
			site => $site->id,
			tourn => $tourn->id
		});

	}

	my @rooms = @{$data->{ROOM}} if $data->{ROOM};
	my %room_by_id = ();

	foreach my $xml_room (@rooms) {

		my $room = Tab::Room->search( site => $site->id, name => $xml_room->{ROOMNAME})->first unless $newsite;

		if ($room) { 
			$m->print("Room name ".$room->name." found already <br />") if $debug;
		} else { 
			$room = Tab::Room->create({
				name => $xml_room->{ROOMNAME},
				quality => $xml_room->{QUALITY},
				capacity => $xml_room->{CAPACITY},
				site => $site->id
			});
		}

		$room_by_id{$xml_room->{ID}} = $room;
	}

	$m->print("<h2>Schools</h2>") if $debug;

	#SCHOOLS
	my %students_by_entry = ();
	my %students_by_school = ();

	foreach my $student (@{$data->{ENTRY_STUDENT}}) {
		next unless $student->{LAST};
		my $school = shift @{$student->{SCHOOL}};
		push @{$students_by_school{$school}}, $student;
		push @{$students_by_entry{$student->{ENTRY}}}, $student;
	}

	my %school_by_id = ();
	my %chapter_by_id = ();
	my %chapter_new = ();

	my $hired_school;

	SCHOOL:
	foreach my $xml_school (@{$data->{SCHOOL}}) {

		if ($xml_school->{SCHOOLNAME} eq "Hired") { 
			$hired_school = $xml_school->{ID};
			$m->print("Not creating a school for Hired <br /><br />") if $debug;
			next SCHOOL;
		}

		unless ($students_by_school{$xml_school->{ID}}) { 
			$m->print("School $xml_school->{SCHOOLNAME} has no entries; not bothering <br /><br />") if $debug;
			next SCHOOL;
		}

		my $school = Tab::School->retrieve($xml_school->{DOWNLOADRECORD}) if $xml_school->{DOWNLOADRECORD};

		if ($school && $school->tourn->id == $tourn->id) { 
			$school_by_id{$xml_school->{ID}} = $school if $school;
			$chapter_by_id{$xml_school->{ID}} = $school->chapter;
			next SCHOOL;
		}

		unless ($school && $school->tourn->id == $tourn->id) { 
			$school = Tab::School->search_where( tourn => $tourn->id, name => { "like", $xml_school->{SCHOOLNAME}."%"})->first;
		} else {
			undef $school;
		}

		$school_by_id{$xml_school->{ID}} = $school if $school;
		$chapter_by_id{$xml_school->{ID}} = $school->chapter if $school && $school->chapter;

		unless ($school) { 

			my @chapters = Tab::Chapter->search_where( name => { "like", $xml_school->{SCHOOLNAME}.'%'} );
			my $chapter;

			foreach my $candidate (@chapters) { 

				next if $chapter;

				#Find at least one matching student
				foreach my $xml_student (@{$students_by_school{$xml_school->{ID}}}) {

					next if $chapter;

					my ($student) = Tab::Student->search( chapter => $candidate->id, first => ucfirst($xml_student->{FIRST}), last => ucfirst($xml_student->{LAST}));

					if ($student) {
						$m->print("SUCCESS! Chapter match made with chapter ".$candidate->id." student $xml_student->{FIRST} $xml_student->{LAST} <br />") if $debug;
						$chapter = $candidate;
					}
				}
			}

			if ($add) {

				unless ($chapter) { 

					$chapter = Tab::Chapter->create({
						name => $xml_school->{SCHOOLNAME}
					});

					$chapter_new{$xml_school->{ID}}++;
					$m->print("No match found.  Creating new chapter ".$chapter->id." for ".$chapter->name." <br />") if $chapter && $debug;

				} 
						
				$chapter_by_id{$xml_school->{ID}} = $chapter;
				
				my $school = Tab::School->create({
					chapter => $chapter->id,
					name => $chapter->name,
					tourn => $tourn->id,
					code => $xml_school->{CODE}
				});

				$school_by_id{$xml_school->{ID}} = $school;

				$m->print("School ".$school->name." created within chapter ".$chapter->name." ".$chapter->id." <br />") if $debug;
				$m->print("<br />") if $debug;
			}

		}

	}

	$m->print("<h2>Entries</h2>") if $debug;

	#ENTRIES
	my %entry_by_id = ();
	my %student_by_id = ();

	ENTRY:
	foreach my $xml_entry (@{$data->{ENTRY}}) {

		my $event = $event_by_id{$xml_entry->{EVENT}};

		next unless $event;

		next unless $students_by_entry{$xml_entry->{ID}};

		if ($xml_entry->{DOWNLOADRECORD}) { 
			my $already = Tab::Entry->retrieve($xml_entry->{DOWNLOADRECORD}) ;

			if ($already && $already->event && $already->event->id == $event->id) { 
				$entry_by_id{$xml_entry->{ID}} = $already;
				next ENTRY;
			}
		}

		my $full_name = $xml_entry->{FULLNAME};
		my $already = Tab::Entry->search( event => $event->id, code => $full_name )->first;

		unless ($already) { 
			$full_name =~ s/&/and/g;
			$already = Tab::Entry->search( event => $event->id, code => $full_name )->first;
		}

		$already = Tab::Entry->search( event => $event->id, code => $xml_entry->{CODE} )->first unless $already;


		if ($already) {
			$entry_by_id{$xml_entry->{ID}} = $already;
			next ENTRY;
		}

		my @students;
		foreach my $student (@{$students_by_entry{$xml_entry->{ID}}}) { 
			next unless $student->{LAST};
			push (@students, $student);
		}

		my $name;
		my $notfirst;

		if (scalar @students == 1) { 
			$name = $students[0]->{FIRST}." ".$students[0]->{LAST};
		} else { 
			foreach my $student (@students) { 
				$name .= " & " if $notfirst;
				$name .= $student->{LAST};
				$notfirst++;
			}
		}

		$already = Tab::Entry->search( event => $event->id, name => $name )->first;

		if ($already) {
			$entry_by_id{$xml_entry->{ID}} = $already;
			$already->code($xml_entry->{FULLNAME});
			$already->update;
			next ENTRY;
		}

		$already = Tab::Entry->search( event => $event->id, name => $xml_entry->{FULLNAME} )->first;

		my $waitlist = 0;
		$waitlist = 1 if $xml_entry->{WAITLIST};

		if ($already) {
			$entry_by_id{$xml_entry->{ID}} = $already;
			$already->code($xml_entry->{FULLNAME});
			$already->waitlist($waitlist);
			$already->update;
			next ENTRY;
		}

		my $xml_school = shift @{$xml_entry->{SCHOOL}};
		my $school = $school_by_id{$xml_school};
		my $school_id = 0;
		$school_id = $school->id if $school;

		if ($add) { 

			my $entry = Tab::Entry->create({
				tourn    => $tourn->id,
				name     => $name,
				code     => $xml_entry->{FULLNAME},
				dropped  => $xml_entry->{DROPPED},
				ada      => $xml_entry->{TUBDISABILITY},
				seed     => $xml_entry->{RATING},
				waitlist => $waitlist,
				reg_time => $now,
				school   => $school_id,
				event    => $event->id
			});

			$m->print("Entry with event $event->id from school $xml_school chapter $chapter_by_id{$xml_school}") if $debug;
			$entry_by_id{$xml_entry->{ID}} = $entry;
		}

	}

	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) {

		my $entry = $entry_by_id{$xml_student->{ENTRY}};
		next unless $entry;
		next unless $entry->school;
		next unless $entry->school->chapter;

		my $student;

		my $first = $xml_student->{FIRST};
		my $last = $xml_student->{LAST};
		$first = "-" unless $first;

		$student = Tab::Student->retrieve($xml_student->{DOWNLOADRECORD}) if $xml_student->{DOWNLOADRECORD};
		$student = Tab::Student->search( first => $first, last => $last, chapter => $entry->school->chapter->id)->first if not defined $student;

		if ($add) { 
	
			unless ($student) { 

				if ($xml_student->{FIRST} && $xml_student->{LAST}) { 
					$student = Tab::Student->create({
						first   => ucfirst($xml_student->{FIRST}),
						last    => ucfirst($xml_student->{LAST}),
						chapter => $entry->school->chapter->id
					});
				
					$student_by_id{$xml_student->{ID}} = $student;
				}

			}

			if ($entry && $student) { 

				next if Tab::EntryStudent->search( entry => $entry->id, student => $student->id );

				my $es = Tab::EntryStudent->create({
					entry   => $entry->id,
					student => $student->id
				});
			}

		}

		$student_by_id{$xml_student->{ID}} = $student;

	}

	$m->print("<h2>Judges</h2>") if $debug;

	#JUDGES
	my %judge_by_id = ();

	JUDGE:
	foreach my $xml_judge (@{$data->{JUDGE}}) {

		my $judge = Tab::Judge->search_where( 
			first       => {'like', $xml_judge->{FIRST}."%"},
			last        => {'like', $xml_judge->{LAST}."%"},
			judge_group => $judge_group->id
		)->first;

		if ($judge) { 

			$judge_by_id{$xml_judge->{ID}} = $judge;
			next JUDGE;

		} elsif ($add) { 

			my $xml_school = shift @{$xml_judge->{SCHOOL}};

			if ($xml_school == $hired_school || $xml_school == 0 || not defined $school_by_id{$xml_school}) {

				my $active = 1;
				$active = 0 if ($xml_judge->{STOPSCHEDULING} eq "true");

				my $obligation = 0;
				my $hired = 0;

				$obligation = $xml_judge->{OBLIGATION} if $xml_judge->{OBLIGATION};
				$hired = $xml_judge->{HIRED} if $xml_judge->{HIRED};


				$judge = Tab::Judge->create({
					school        => 0,
					first         => ucfirst($xml_judge->{FIRST}),
					last          => ucfirst($xml_judge->{LAST}),
					judge_group   => $judge_group->id,
					active        => $active,
					chapter_judge => 0,
					reg_time      => $now,
					obligation    => $obligation,
					hired         => $hired,
				});
					
				$judge->setting("notes", $xml_judge->{NOTES});

			} else { 

				my $chapter_judge = Tab::ChapterJudge->search( first => ucfirst($xml_judge->{FIRST}), last => ucfirst($xml_judge->{LAST}), chapter => $chapter_by_id{$xml_school})->first;

				if ($chapter_judge) { 
					
					$m->print("Judge ".$chapter_judge->id." found for $xml_judge->{FIRST} $xml_judge->{LAST} <br />") if $debug;

				} else { 

					$chapter_judge = Tab::ChapterJudge->create({
						first => ucfirst($xml_judge->{FIRST}),
						last => ucfirst($xml_judge->{LAST}),
						chapter => $chapter_by_id{$xml_school},
						created => $now
					});

					$m->print("Created chapter Judge ".$chapter_judge->id." found for $xml_judge->{FIRST} $xml_judge->{LAST} <br />") if $debug;

				}

				my $active = 1;
				$active = 0 if ($xml_judge->{STOPSCHEDULING} eq "true");

				my $obligation = $xml_judge->{OBLIGATION} if $xml_judge->{OBLIGATION};
				my $hired = $xml_judge->{HIRED} if $xml_judge->{HIRED};
				$obligation = 0 unless $obligation;
				$hired = 0 unless $hired;

				$judge = Tab::Judge->create({
					school        => $school_by_id{$xml_school},
					first         => ucfirst($xml_judge->{FIRST}),
					last          => ucfirst($xml_judge->{LAST}),
					judge_group   => $judge_group->id,
					chapter_judge => $chapter_judge->id,
					reg_time      => $now,
					active        => $active,
					obligation    => $obligation,
					hired         => $hired,
				});

				$judge->setting("notes", $xml_judge->{NOTES});
				$m->print("Put judge into the tournament as id ".$judge->id." <br /><br />") if $debug;

			}

			$judge_by_id{$xml_judge->{ID}} = $judge;

		}

	}

	#ROUNDS
	$m->print("<h2>Rounds</h2>") if $debug;

	my @xml_rounds = sort {$a->{ID} <=> $b->{ID}} @{$data->{ROUND}};
	@xml_rounds = sort {$a->{RD_NAME} <=> $b->{RD_NAME}} @{$data->{ROUND}};

	my %round_by_id = ();
	my %round_by_name = ();
	my %round_count = ();

	my @rounds;
	
	ROUND:
	foreach my $xml_round (@xml_rounds) {

		my $event = $event_by_id{$xml_round->{EVENT}};
		next unless $event;

		$round_count{$event->id}++;
		my $round_name = $round_count{$event->id};
		my $round = Tab::Round->search( event => $event->id, name => $round_name)->first;

		if ($round) { 
			$round_by_id{$xml_round->{ID}} = $round;
			$round_by_name{$xml_round->{LABEL}} = $round;
			$round->flighted($xml_round->{FLIGHTING});
			$round->update;
			push (@rounds, $round);
			$m->comp("/funclib/round_dump.mas", round => $round, xml => 1);
			next ROUND;
		}

		my @all_rounds = sort {$b->timeslot->start->epoch <=> $a->timeslot->start->epoch} $event->rounds;
		my $last_round = shift @all_rounds;

		my $start_time = $last_round->timeslot->end->set_time_zone($tz) if $last_round && $last_round->timeslot;
		$start_time = $tourn->start unless $start_time;

		my $round_end = $start_time->clone;
		$round_end->add(hours => 2, minutes => 30);

		my $timeslot = Tab::Timeslot->create({
			name => $event->abbr." ".$round_name,
			tourn => $tourn->id,
			start => $start_time,
			end => $round_end,
		});

		$m->print("Timeslot ".$timeslot->name." has been created from ".$start_time->hour.":".$start_time->minute." to ".$round_end->hour.":".$round_end->minute." <br />") if $debug;

		my $label = $xml_round->{LABEL};
		$label =~ s/.*\W(\w)/$1/;

		$round = Tab::Round->create({
			name     => $round_name,
			label    => $label,
			timeslot => $timeslot->id,
			event    => $event->id,
			type     => lc($xml_round->{PAIRINGSCHEME}),
			site     => $site->id,
			judges   => $xml_round->{JUDGESPERPANEL},
			flighted => $xml_round->{FLIGHTING},
			created  => $now
		});

		push (@rounds, $round);
		$round_by_id{$xml_round->{ID}} = $round;
		$round_by_name{$xml_round->{LABEL}} = $round;

		$m->print("Round ".$round->label." has been created<br />") if $debug;
	}

	my $did_results;
	my %panel_by_id = ();

	#ROUND PAIRINGS AND RESULTS
	$m->print("<h2>Pairings and Results</h2>") if $debug;

	foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 

		my $round = $round_by_id{$xml_result->{RoundId}};	
		$round = $round_by_name{$xml_result->{RoundName}} unless $round; 	

		my @panels = @{$xml_result->{RESULT_BALLOT}} if $xml_result->{RESULT_BALLOT};

		my $letter;

		PANEL:
		foreach my $xml_panel (@panels) { 

			$did_results++;
			$letter++;

			my $panel_id = $xml_panel->{Panel} if $xml_panel->{Panel};
			$panel_id = $xml_panel->{PanelID} if $xml_panel->{PanelID};
	
			my $panel = $panel_by_id{$panel_id};

			unless ($panel) { 

				my $room = 0;
				$room = $room_by_id{$xml_panel->{RoomID}} if $room_by_id{$xml_panel->{RoomID}};

				my $flight = $xml_panel->{Flight};
				$flight = 1 unless $flight && $flight > 0;

				$panel = Tab::Panel->create({
					letter => $letter,
					room   => $room,
					round  => $round,
					flight => $flight
				});
				
				$panel_by_id{$panel_id} = $panel;
			
			}

			my $judge_id = 0;

			unless ($xml_panel->{JudgeID} < 1) { 
				eval { 
					$judge_id = $judge_by_id{$xml_panel->{JudgeID}}->id;
				};
			}

			my @xml_results = @{$xml_panel->{RESULT_SCORE}} if $xml_panel->{RESULT_SCORE};

			my %ballot_by_entry = ();
			my %ballot_by_student = ();

			my $count;
			my $byes;

			BALLOTS:
			foreach my $xml_ballot (@xml_results) { 

				next unless $xml_ballot->{Score_Name} eq "Ballot";
				my $entry = $entry_by_id{$xml_ballot->{Recipient}};
				next unless $entry && $entry->id;

				$count++;

				my $bye = 0;
				my $forfeit = 0;

				my $value = $xml_ballot->{content};
				my $side = $xml_ballot->{Side};

				if (($side == -1) || $judge_id == 0) { 
					$bye = 1 if $value == "1";
					$forfeit = 1 if $value == "0";
					$side = $count;
				}

				$byes = 1 if $bye;
				$byes = 1 if $forfeit;

				my $ballot;

				unless (Tab::Ballot->search( entry => $entry->id, judge => $judge_id, panel => $panel->id)->first) { 

					$ballot = Tab::Ballot->create({
						entry  => $entry->id,
						panel  => $panel->id,
						side   => $side,
						judge  => $judge_id,
						audit  => 1,
						bye    => $bye,
						noshow => $forfeit
					});

				}

				$panel->room(0) if $bye;
				$panel->room(0) if $forfeit;

				$ballot_by_entry{$xml_ballot->{Recipient}} = $ballot;
		
				foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
					$ballot_by_student{$student->{ID}} = $ballot;
				}

			}

			if ($count == 1) { 
				$panel->bye(1);
				$panel->room(0);
			}

			if ($byes && ($round->type eq "elim" || $round->type eq "final")) { 
				$panel->bye(1);
				$panel->room(0);
			}

			$panel->update;

			foreach my $xml_value (@xml_results) { 

				my $tag = lc($xml_value->{Score_Name});

				next if $byes;

				$tag = "rank" if $tag eq "ranks";

				my $value = $xml_value->{content};

				my $ballot;
				my $student;

				if ($xml_value->{ScoreFor} eq "Speaker") { 
					$student = $student_by_id{$xml_value->{Recipient}}->id if $student_by_id{$xml_value->{Recipient}};
					$ballot = $ballot_by_student{$xml_value->{Recipient}}->id if $ballot_by_student{$xml_value->{Recipient}};
				} else { 
					$ballot = $ballot_by_entry{$xml_value->{Recipient}}->id if $ballot_by_entry{$xml_value->{Recipient}};
				}

				next unless $ballot;

				unless (Tab::BallotValue->search({ tag => $tag, value => $value, student => $student, ballot  => $ballot })) { 
					my $ballot_value = Tab::BallotValue->create({
						tag     => $tag,
						value   => $value,
						student => $student,
						ballot  => $ballot
					});
				}

			}

		}

	}

	#ROUND PAIRINGS AND RESULTS, PART DEUX; the EASIER WAY
	my %panel_count;

	foreach my $xml_panel (@{$data->{PANEL}}) { 

		my $round = $round_by_id{$xml_panel->{ROUND}};
		my $room = 0;

		$panel_count{$round}++;

		$room = $room_by_id{$xml_panel->{ROOM}} if $xml_panel->{ROOM};
		$room = 0 if $xml_panel->{ROOM} == -99;

		my $panel = $panel_by_id{$xml_panel->{ID}};
		next if $panel;

		my $flight = $xml_panel->{FLIGHT};
		$flight = 1 if (not defined $flight) || $flight == 0;

		$panel = Tab::Panel->create({
			round  => $round,
			room   => $room,
			letter => $panel_count{$round},
			flight => $flight
		});

		$panel_by_id{$xml_panel->{ID}} = $panel;

	}


	my %ballot_by_id = ();

	foreach my $xml_ballot (@{$data->{BALLOT}}) { 

		my $panel = $panel_by_id{$xml_ballot->{PANEL}};
		my $judge = $judge_by_id{$xml_ballot->{JUDGE}} if $judge_by_id{$xml_ballot->{JUDGE}};
		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};

		$judge = 0 if $xml_ballot->{JUDGE} == -99;
		$entry = 0 if $xml_ballot->{ENTRY} == -99;

		next unless $judge > 0 || $entry > 0;

		$judge = 0 unless $judge;
		$entry = 0 unless $entry;

		my $ballot = Tab::Ballot->create({
			panel => $panel,
			judge => $judge,
			entry => $entry,
			side => $xml_ballot->{SIDE}
		});

		$ballot_by_id{$xml_ballot->{ID}} = $ballot;

	}

	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 

		my $type = "ballot" if $xml_score->{SCORE_ID} == 1;
		$type = "points" if $xml_score->{SCORE_ID} == 2;
		$type = "rank" if $xml_score->{SCORE_ID} == 3;

		my $student = $student_by_id{$xml_score->{RECIPIENT}} if $type ne "Ballot";
		my $ballot = $ballot_by_id{$xml_score->{BALLOT}};

		my $score = Tab::BallotValue->create({
			tag     => $type,
			ballot  => $ballot,
			student => $student,
			value   => $xml_score->{SCORE}
		}) if $student;

		$score = Tab::BallotValue->create({
			tag    => $type,
			ballot => $ballot,
			value  => $xml_score->{SCORE}
		}) unless $student;

	}

	my %result_by_entry = ();
	my %seed_set_by_event = ();

	foreach my $event (@used_events) { 

		foreach my $result_set ($event->result_sets) { 
		
			next unless $result_set->bracket;

			my $notfirst;

			$seed_set_by_event{$event->id} = $result_set;

			foreach my $result ($result_set->results) { 
				$result_by_entry{$result->entry->id."-".$result->round->id} = $result;
				$notfirst++;
			}
		}
	}

	my %used_results = ();

	ELIMSEED:
	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) { 

		my $entry_id = $xml_elimseed->{ENTRY};

		next if $entry_id == "-99";

		my $entry = $entry_by_id{$entry_id};

		next unless $entry;

		my $round_id = $xml_elimseed->{ROUND};
		my $event_id = $xml_elimseed->{EVENT};

		my $event = $event_by_id{$event_id};
		my $round = $round_by_id{$round_id};

		next unless $event && $round;

		my $result = $result_by_entry{$entry->id."-".$round->id};
		my $set = $seed_set_by_event{$event->id};


		unless ($set) { 

			$set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event->id,
				bracket   => 1,
				label     => "Bracket",
				generated => $now
			});

			$seed_set_by_event{$event->id} = $set;
		}


		my $seed_done;

		if ($result) { 

			$used_results{$result->id}++;

			foreach my $value ($result->values) { 

				$value->delete unless $value->tag eq "Seed";

				if ($value->tag eq "Seed") { 
					$value->value($xml_elimseed->{SEED});
					$value->update;
					$seed_done++;
				}

			}

		} else { 

			$result = Tab::Result->create({
				result_set => $set->id,
				entry      => $entry->id,
				round      => $round->id
			});
		}

		my $result_value;

		unless ($seed_done) { 

			$result_value = Tab::ResultValue->create({
				result    => $result->id,
				value     => $xml_elimseed->{SEED},
				priority  => 1,
				tag       => "Seed",
				sort_desc => 0,
				no_sort   => 0
			});
		}

	}

	#Auto-audit any entered results
	foreach my $round (@rounds) {
		$m->comp("/funclib/round_audit.mas", round => $round);
	}

	Tab::Round->set_sql(update_flighting => "
		update round
    	set flighted = 
    	    (select max(panel.flight) 
    	        from panel
    	        where panel.round = round.id)
    		where event = ?
	");

	foreach my $event (@events) { 

		$m->comp("/funclib/event_clean.mas", event => $event);
		Tab::Round->sql_update_flighting($event->id);

		foreach my $entry ($event->entries) { 
			my $name;
			my $last_names;
			my $notfirst;
			foreach my $student ($entry->students) { 
				$name = $student->first." ".$student->last;
				$last_names .= " & " if $notfirst;
				$last_names .= $student->last;
				$notfirst++;
			}
			if ($notfirst > 1) { 
				$entry->name($last_names);
			} else { 
				$entry->name($name);
			}
			$entry->update;
		}
	}

	my $msg = "Tournament imported into Tabroom";
	$m->redirect("import_xml.mhtml?msg=$msg");

</%init>
