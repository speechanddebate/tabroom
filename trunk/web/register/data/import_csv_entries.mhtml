<%args>
	$tourn
	$account
	$event_id
</%args>
<%init>

	my $wsdc = $tourn->setting("usa_wsdc");
	my $event = Tab::Event->retrieve($event_id);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload; 
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;

	my @lines = <$io>;

	my $has_codes;

	my @entries;

	foreach (@lines) { 
		$_ =~ s/[\r]+/\n/g;
		$_ =~ s/[\r\n]+/\n/g;
		$_ =~ s/[\n]+/\n/g;
		push @entries, split (/\n/, $_);
	}

	ENTRY:
	foreach my $entry (@entries) { 

		my ($school_name, $code, $pairing_seed, 
			$onefirst, $onelast, $onenovice, $onegender, 
			$twofirst, $twolast, $twonovice, $twogender,
			$threefirst, $threelast, $threenovice, $threegender, 
			$fourfirst, $fourlast, $fournovice, $fourgender,
			$fivefirst, $fivelast, $fivenovice, $fivegender
		) = split(/,/, $entry);

		($school_name, $code, $pairing_seed, 
			$onefirst, $onelast, $onenovice, $onegender, 
			$twofirst, $twolast, $twonovice, $twogender,
			$threefirst, $threelast, $threenovice, $threegender,
			$fourfirst, $fourlast, $fournovice, $fourgender,
			$fivefirst, $fivelast, $fivenovice, $fivegender,
		) = split(/;/, $entry) unless $onefirst;

		next unless $school_name;
		next if $school_name eq "School Name";

		foreach ($school_name, $onefirst, $onelast, $onenovice, $onegender, $twofirst, $twolast, $twonovice, $twogender, $threefirst, $threelast, $threenovice, $threegender, $fourfirst, $fourlast, $fournovice, $fourgender, $fivefirst, $fivelast, $fivenovice, $fivegender) { 
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
		}

		my $school = Tab::School->search( name => $school_name, tourn => $tourn->id)->first;

		my $chapter;
		$chapter = $school->chapter if $school;

		unless ($school) { 

			foreach my $circuit ($tourn->circuits) { 
				my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit, name => $school_name);
				$chapter = shift @chapters;
				last if $chapter;
			}

			unless ($chapter) { 

				$chapter = Tab::Chapter->create({
					name    => $school_name,
					state   => $tourn->state,
					country => $tourn->country
				});

				foreach my $circuit ($tourn->circuits) { 
					Tab::ChapterCircuit->create({
						chapter => $chapter->id,
						circuit => $circuit->id
					});
				}
			}

			my ($school_code, $school_region) = $m->comp("/funclib/chapter_code.mas", tourn => $tourn, chapter => $chapter);

			$school = Tab::School->create({
				tourn      => $tourn->id,
				chapter    => $chapter->id,
				name       => $school_name,
				code       => $school_code
			});

			$school->setting("entered_on", "date", $now);

		}

		my @students;

		if ($onefirst) { 

			my $student = Tab::Student->search(chapter => $chapter->id, first => $onefirst, last => $onelast, retired => 0)->first;

			$onelast = $onefirst unless $onelast;

			undef $onegender unless $onegender eq "M" || $onegender eq "m" || $onegender eq "F" || $onegender eq "f";

			my $school_sid = $onenovice if $wsdc;
			$onenovice = 0 unless $onenovice eq "Y" || $onenovice eq "y";

			$student = Tab::Student->create({
				chapter    => $chapter->id,
				first      => $onefirst,
				last       => $onelast,
				novice     => $onenovice,
				gender     => $onegender,
				school_sid => $school_sid,
				grad_year  => ($now->year + 1)
			});

			push @students, $student;

		}

		if ($twofirst) { 

			my $student = Tab::Student->search(chapter => $chapter->id, first => $twofirst, last => $twolast, retired => 0)->first;

			undef $twogender unless $twogender eq "M" || $twogender eq "m" || $twogender eq "F" || $twogender eq "f";
			my $school_sid = $twonovice if $wsdc;
			$twonovice = 0 unless $twonovice eq "Y" || $twonovice eq "y";

			$student = Tab::Student->create({
				chapter    => $chapter->id,
				first      => $twofirst,
				last       => $twolast,
				novice     => $twonovice,
				gender     => $twogender,
				school_sid => $school_sid,
				grad_year  => ($now->year + 1)
			});

			push @students, $student;
		}

		if ($threefirst && $threelast) { 

			my $student = Tab::Student->search(chapter => $chapter->id, first => $threefirst, last => $threelast, retired => 0)->first;

			undef $threegender unless $threegender eq "M" || $threegender eq "m" || $threegender eq "F" || $threegender eq "f";
			my $school_sid = $threenovice if $wsdc;
			$threenovice = 0 unless $threenovice eq "Y" || $threenovice eq "y";

			$student = Tab::Student->create({
				chapter    => $chapter->id,
				first      => $threefirst,
				last       => $threelast,
				novice     => $threenovice,
				gender     => $threegender,
				school_sid => $school_sid,
				grad_year  => ($now->year + 1)
			});

			push @students, $student;
		}

		if ($fourfirst && $fourlast) { 

			my $student = Tab::Student->search( chapter => $chapter->id, first => $fourfirst, last => $fourlast, retired => 0)->first;

			undef $fourgender unless $fourgender eq "M" || $fourgender eq "m" || $fourgender eq "F" || $fourgender eq "f";
			my $school_sid = $fournovice if $wsdc;
			$fournovice = 0 unless $fournovice eq "Y" || $fournovice eq "y";

			$student = Tab::Student->create({
				chapter    => $chapter->id,
				first      => $fourfirst,
				last       => $fourlast,
				novice     => $fournovice,
				gender     => $fourgender,
				school_sid => $school_sid,
				grad_year  => ($now->year + 1)
			});

			push @students, $student;

		}

		if ($fivefirst && $fivelast) { 

			my $student = Tab::Student->search(chapter => $chapter->id, first => $fivefirst, last => $fivelast, retired => 0)->first;

			undef $fivegender unless $fivegender eq "M" || $fivegender eq "m" || $fivegender eq "F" || $fivegender eq "f";

			my $school_sid = $fivenovice if $wsdc;

			$fivenovice = 0 unless $fivenovice eq "Y" || $fivenovice eq "y";

			$student = Tab::Student->create({
				chapter    => $chapter->id,
				first      => $fivefirst,
				last       => $fivelast,
				novice     => $fivenovice,
				gender     => $fivegender,
				school_sid => $school_sid,
				grad_year  => ($now->year + 1)
			});

			push @students, $student;

		}

		
		my $name;
	
		if (scalar @students == 1) { 

			$name = $students[0]->first." ".$students[0]->last;

		} else { 

			my $counter;
			my $num_students = scalar @students;

			foreach my $student (@students) { 

				$counter++;

				if ($counter == $num_students) { 
					$name .= " & ";
				} elsif ($name) { 
					$name .= ", ";
				} 

				$name .= $student->last;
			}
		}

		my $entry = Tab::Entry->create({
			school      => $school->id,
			event       => $event->id,
			tourn       => $tourn->id,
			name        => $name,
			dropped     => 0,
			dq          => 0,
			waitlist    => 0,
			code        => $code
		});

		$entry->setting("pairing_seed", $pairing_seed);

		$has_codes++ if $code;

		unless ($code) { 
			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
			$entry->update;
		}

		foreach my $student (@students) { 
			Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $student->id
			});
		}

	}	

	my $msg = scalar @entries ." entries imported into ". $event->name;

	$m->redirect("entry_recode_save.mhtml?event_id=".$event->id."&sort_by=School") unless $has_codes;
	$m->redirect("index.mhtml?msg=$msg");

</%init>
