<%args>
	$tourn
	$account
	$group_id
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now( time_zone => $tz);

	my $group = Tab::JudgeGroup->retrieve($group_id);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @text_handles = $r->upload; 
	my $text_file = $req->upload($text_handles[0]);
	my $io = $text_file->io;

	my @judges;

	# Fix line breaks
	my @lines = (<$io>);

    foreach (@lines) { 
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @judges, split (/\n/, $_);
    }   

	my $skipped;
	my @timeslots = $m->comp("/funclib/group_timeslots.mas", group => $group);

	my @spanish_events;
	my @english_events;

	foreach my $event ($tourn->events) { 
		if (index($event->name, "Espanol") != -1) {
			push @spanish_events, $event;
		} else { 
			push @english_events, $event;
		}
	}

	my $ts1 = shift @timeslots;
	my $shift_1_start = $ts1->start->set_time_zone($tz);

	my $ts2 = shift @timeslots;
	my $shift_1_end = $ts2->end->set_time_zone($tz);

	my $elim_pool = Tab::Pool->search( judge_group => $group_id, name => "1st Elim")->first;
	my $champ_pool = Tab::Pool->search( judge_group => $group_id, name => "Champ")->first;

	my $spanish_pool = Tab::Pool->search( judge_group => $group_id, name => "Spanish")->first;
	my $varsity_pool = Tab::Pool->search( judge_group => $group_id, name => "Varsity")->first;

	my %judge_shifts = ();
	my %already_judge = ();

	my @processed_judges;
	my $counter;

	GROUP:
	foreach my $judge (@judges) { 

		my ($toss, $first, $last, $shift, $affiliation, $school_name, $level, $spanish, $email, $phone) = split(/,/,$judge);

		foreach ($school_name, $first, $last, $level, $email, $phone, $spanish) { 
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
			$_ =~ s/^'//;
			$_ =~ s/'$//g;
		}

		next unless $first && $last;

		next if $last eq "Last Name";
		next if $school_name eq "Affiliation";
		$school_name = "Hired" unless $school_name;

		my $already = $already_judge{$first."-".$last."-".$school_name};

		$counter++ if $last eq "Azaroff";

		if ($already) { 

			$judge = $already;

		} else { 

			my $school;
			my $chapter_judge;

			my $rating = 2;
			
			$rating = 1 if $affiliation eq "VIP";

			$rating = 2 if $affiliation eq "Parent";
			$rating = 2 if $affiliation eq "Teacher/Staff Member";
			$rating = 2 if $affiliation eq "No Affiliation";

			$rating = 3 if $affiliation eq "Alumni";
			$rating = 3 if $affiliation eq "Current Debater";

			$rating = 4 if $affiliation eq "Mentor";

			unless ($school_name eq "Hired") { 

				$school = Tab::School->search( name => $school_name, tourn => $tourn->id )->first;

				if ($school && $school->chapter) { 

					$chapter_judge = Tab::ChapterJudge->search(
							chapter => $school->chapter->id,
							first   => $first,
							last    => $last,
							retired => 0)->first;

					unless ($chapter_judge) { 
						$chapter_judge = Tab::ChapterJudge->create({
							chapter => $school->chapter->id,
							first   => $first,
							last    => $last,
							started => $now->year
						});
					} 

				} 
			}

			my $school_id = 0;
			$school_id = $school->id if $school;

			my $code = $m->comp("/funclib/group_code.mas", group => $group ) unless $group->setting("no_codes");
			my $chapter_judge_id = $chapter_judge->id if $chapter_judge;

			my $obligation = "6";

			$judge = Tab::Judge->create({
				first         => $first,
				last          => $last,
				school        => $school_id,
				chapter_judge => $chapter_judge_id,
				code          => $code,
				judge_group   => $group->id,
				active        => 1,
				obligation    => $obligation,
				hired         => 0,
				tab_rating    => $rating
			});

			if ($email) {
				$judge->setting("email", $email);
			}

			if ($phone) {
				$judge->setting("phone", $phone);
			}

			if ($spanish eq "I would only like to judge Spanish rounds") { 

				foreach my $event (@english_events) { 

					Tab::Strike->create({
						type => "event",
						tourn => $tourn->id,
						judge => $judge->id,
						event => $event->id,
					});

				}

				Tab::PoolJudge->create({
					judge => $judge->id,
					pool  => $spanish_pool->id
				});


			} elsif ($spanish eq "I'm willing to judge Spanish or English rounds") { 

				Tab::PoolJudge->create({
					judge => $judge->id,
					pool  => $spanish_pool->id
				});

			}

			if ($level eq "Champ" && $champ_pool) { 
				Tab::PoolJudge->create({
					judge => $judge->id,
					pool  => $champ_pool->id
				});
			
			} elsif ($level eq "Varsity" && $varsity_pool) { 

				Tab::PoolJudge->create({
					judge => $judge->id,
					pool  => $varsity_pool->id
				});

			}

			push @processed_judges, $judge;

		}

		$already_judge{$first."-".$last."-".$school_name} = $judge;

		if (index($shift, "16:00") != -1) {
			$judge_shifts{$judge->id."-1"}++;
		}

		if (index($shift, "8:00") != -1) {
			$judge_shifts{$judge->id."-2"}++;
		}

		if (index($shift, "12:30") != -1) {
			$judge_shifts{$judge->id."-3"}++;
		}



	}	

	my %seen = (); 
	@processed_judges = grep { ! $seen{$_->id} ++ } @processed_judges;

	foreach my $judge (@processed_judges) { 

		unless ($judge_shifts{$judge->id."-1"}) {

			Tab::Strike->create({
				type  => "time",
				tourn => $tourn->id,
				judge => $judge->id,
				start => $shift_1_start,
				end   => $shift_1_end
			});

		}

		if ($judge_shifts{$judge->id."-2"}) {
			$judge->notes( $judge->notes. " Saturday Judge Shift 2 ");
			$judge->update;
		}

		if ($judge_shifts{$judge->id."-3"}) {
			Tab::PoolJudge->create({
				judge => $judge->id,
				pool  => $elim_pool->id
			});
		}

	}

	my $msg = "I normally would not do this, but I have imported ".scalar @processed_judges ." judges into ".$group->id.".  Only because YOU are a BEAUTIFUL PERSON.";

	$m->redirect("import_csv.mhtml?msg=$msg");

</%init>
