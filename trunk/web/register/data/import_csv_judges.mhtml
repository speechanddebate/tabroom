<%args>
	$tourn
	$account
	$group_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	unless ($group_id) { 
		$m->print('<div class="blankfull"><p class="warning">You must select an existing judge group to import judges</p><p>Hit the Back button and try again</p>');
		$m->abort;
	}

	my $wsdc = $tourn->setting("usa_wsdc");

	my $now = DateTime->now( time_zone => $tz);

	my $group = Tab::JudgeGroup->retrieve($group_id);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @text_handles = $r->upload; 
	my $text_file = $req->upload($text_handles[0]);
	my $io = $text_file->io;

	my @judges;

	# Fix line breaks
	my @lines = (<$io>);

    foreach (@lines) { 
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @judges, split (/\n/, $_);
    }   

	my $skipped;

	GROUP:
	foreach my $judge (@judges) { 

		my ($school_name, $first, $last, $tab_rating, $obligation) = split(/,/,$judge);

		my $email = $obligation if $wsdc;
		my $real_school = $tab_rating if $wsdc;

		foreach ($school_name, $first, $last, $tab_rating, $obligation, $email, $real_school) { 
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
			$_ =~ s/^'//;
			$_ =~ s/'$//g;
		}

		next if $school_name eq "School Name";
		$school_name = "Hired" unless $school_name;
		next unless $first && $last;

		my $school;
		my $chapter_judge;

		unless ($school_name eq "Hired") { 

			$school = Tab::School->search( name => $school_name, tourn => $tourn->id)->first;

			my $chapter;
			$chapter = $school->chapter if $school;

			unless ($school) { 

				foreach my $circuit ($tourn->circuits) { 
					my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit, name => $school_name);
					$chapter = shift @chapters;
					last if $chapter;
				}

				unless ($chapter) { 

					$chapter = Tab::Chapter->create({
						name    => $school_name,
						state   => $tourn->state,
						country => $tourn->country
					});

					foreach my $circuit ($tourn->circuits) { 
						Tab::ChapterCircuit->create({
							chapter => $chapter->id,
							circuit => $circuit->id
						});
					}
				}

				my ($school_code, $school_region) = $m->comp("/funclib/chapter_code.mas", tourn => $tourn, chapter => $chapter);
				my $now = DateTime->now(time_zone => $tz);

				$school = Tab::School->create({
					tourn      => $tourn->id,
					chapter    => $chapter->id,
					name       => $school_name,
					code       => $school_code,
				});

				$school->setting("entered_on", "date", $now);

			}
		
			$chapter_judge = Tab::ChapterJudge->search(chapter => $chapter->id, first => $first, last => $last, retired => 0)->first;

			$chapter_judge = Tab::ChapterJudge->create({
				chapter => $chapter->id,
				first   => $first,
				last    => $last,
				started => $now->year
			});

		}

		my $school_id = 0;
		$school_id = $school->id if $school;

		my $code = $m->comp("/funclib/group_code.mas", group => $group ) unless $group->setting("no_codes");

		my $chapter_judge_id = $chapter_judge->id if $chapter_judge;

		$obligation = "9" unless $obligation;
		$tab_rating = "1" unless $tab_rating;

		$judge = Tab::Judge->create({
			first         => $first,
			last          => $last,
			school        => $school_id,
			chapter_judge => $chapter_judge_id,
			code          => $code,
			judge_group   => $group->id,
			active        => 1,
			obligation    => $obligation,
			tab_rating    => $tab_rating,
			hired         => 0
		});

		$judge->setting('email', $email) if $email;
		$judge->setting('real_school', $real_school) if $real_school;

	}	

	my $msg = scalar @judges ." judges imported into ".$group->id;

	$m->redirect("import_csv.mhtml?msg=$msg");

</%init>
