<%args>
	$panel_id
	$judge_id => undef
	$panel_bye => undef
</%args>
<%init>

	my $panel = Tab::Panel->retrieve($panel_id);
	$panel_bye = $panel->bye unless $panel_bye;

	my $round = $panel->round;

	my $now = DateTime->now;

	if ($panel_bye && ($round->type eq "elim" || $round->type eq "final")) { 

		my @ballots = Tab::Ballot->search( judge => $judge_id, panel => $panel->id ) if $judge_id;
		@ballots = Tab::Ballot->search( panel => $panel->id) unless $judge_id;

		foreach my $ballot (@ballots) { 
			foreach my $value ($ballot->values) { 
				$value->delete unless $value->tag eq "rfd" || $value->tag eq "comments";
			}
		}
	}

	$panel->bye($panel_bye);
	$panel->update;

	my $wudc++ if $round->event->type eq "wudc";
	my $studpoints++ if $round->event->type ne "congress" &&  $round->event->type ne "speech";
	my $team_points++ if $round->event->setting("team_points");

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;
	my %student_ballot = ();
	
	my $audit;
	my $no_audit;

	foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
	
		my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id, entry => $entry->id ) if $judge;
		@ballots = Tab::Ballot->search( panel => $panel->id, entry => $entry->id ) unless $judge;

		next unless @ballots;
		my $ballot = shift @ballots;

		foreach my $spare (@ballots) { $spare->delete; }

		my $win;
		my $rank;
		my $points;
		my %student_points = ();
		my %student_ranks = ();

		my %rank_done;
		my %points_done;
		my %win_done;

		my @students = $entry->students;

		Tab::Student->set_sql(by_panel => "
			select distinct student.*
			from student, ballot_value, ballot
			where ballot.panel = ?
			and ballot.id = ballot_value.ballot
			and ballot_value.student = student.id
			and ballot.entry = ? 
		");

		push @students, Tab::Student->search_by_panel($panel->id, $entry->id);

		my %seen = (); 
		@students = grep { ! $seen{$_->id} ++ } @students;

		foreach my $student (@students) { 
			$student_ballot{$student->id} = $ballot;
		}

		my $bye = 0;
		$bye = 1 if $ARGS{"bye_".$ballot->id} > 0;

		my $forfeit = 0;
		$forfeit = 1 if $ARGS{"noshow_".$ballot->id} > 0;

		VALUE:
		foreach my $value ($ballot->ballot_values) { 

			if ($value->tag eq "rank") { 

				if ($studpoints && not defined $wudc) { 

					if ($rank_done{$value->student->id}++) { 
						$value->delete;
						next VALUE;
					}

					$value->value($ARGS{"ranks_".$value->student->id}) if $value->student;
					$student_ranks{$value->student->id}++ if $value->student;

				} else { 

					if ($rank_done{$ballot->id}++) { 
						$value->delete;
						next VALUE;
					}

					$value->value($ARGS{"rank_".$ballot->id});
					$rank++ if $value->tag eq "rank";
				}
			}
		
			if ($value->tag eq "points") { 

				if ($studpoints) { 

					my $points = $ARGS{"points_".$value->student->id};
					my $position = $ARGS{"position_".$value->student->id};
					$points = $ARGS{"points_".$ballot->id} if $team_points;

					if ($points_done{$value->student->id}++) { 
						$value->delete;
						next VALUE;
					}

					if (length($points) == 0) { 
						$value->delete;
						next VALUE;
					}

					$value->value($points) if $value->student;
					$value->position($position);
					$student_points{$value->student->id}++;

				} else { 

					if ($points_done{$ballot->id}++) { 
						$value->delete;
						next VALUE;
					}

					$value->value($ARGS{"points_".$ballot->id});
					$points++ if $value->tag eq "points";
				}
			}

			if ($value->tag eq "rebuttal_points" && $studpoints) { 

				my $rebuttal_points = $ARGS{"rebuttal_points_".$value->student->id};

				if ($points_done{$value->student->id."_rebuttal"}++) { 
					$value->delete;
					next VALUE;
				}

				if (length($rebuttal_points) == 0) { 
					$value->delete;
					next VALUE;
				}

				$value->value($rebuttal_points) if $value->student;
				$student_points{$value->student->id."_rebuttal"}++;

			}

			if ($value->tag eq "ballot") { 

				if ($win_done{$ballot->id}++ && not defined $wudc) { 
					$value->delete;
					next VALUE;
				}

				$value->value("0");
				$value->value("1") if $ARGS{"winloss"} == $entry->id;
				$value->value("1") if $ARGS{$entry->id."_winloss"}; #for WUDC style
				$win++;

			}

			$value->update;

			$value->delete if $value->tag eq "ballot" && ($bye > 0 || $forfeit > 0);

		}

		if ($ARGS{"rank_".$ballot->id} > 0 && not defined $rank) { 

			Tab::BallotValue->create({
				ballot   => $ballot->id,
				tag      => "rank",
				tiebreak => 1,
				value    => $ARGS{"rank_".$ballot->id},
				student  => 0
			});
		}

		unless ($win || $bye || $forfeit) { 

			if ( $ARGS{$entry->id."_winloss"} || $ARGS{"winloss"} ) { 

				my $tigersblood = 0;
				$tigersblood++ if $ARGS{"winloss"} == $entry->id;
				$tigersblood++ if $wudc;

				Tab::BallotValue->create({
					ballot   => $ballot->id,
					tag      => "ballot",
					tiebreak => 2,
					value    => $tigersblood,
					student  => 0
				});

			} elsif ($wudc) { 

				Tab::BallotValue->create({
					ballot   => $ballot->id,
					tag      => "ballot",
					tiebreak => 2,
					student  => 0,
					value    => 0
				});

			}

		}

		if (($ARGS{"points_".$ballot->id} > 0) && (not defined $points) && (not defined $team_points)) { 

			Tab::BallotValue->create({
				ballot   => $ballot->id,
				tag      => "points",
				tiebreak => 3,
				value    => $ARGS{"points_".$ballot->id},
				student  => 0
			});
		}

		if (($ARGS{"rebuttal_points_".$ballot->id} > 0) && (not defined $points) && (not defined $team_points)) { 

			Tab::BallotValue->create({
				ballot   => $ballot->id,
				tag      => "rebuttal_points",
				tiebreak => 6,
				value    => $ARGS{"rebuttal_points_".$ballot->id},
				student  => 0
			});
		}

		if ($studpoints) { 

			foreach my $student (@students) { 

				my $points = $ARGS{"points_".$student->id};
				my $position = $ARGS{"position_".$student->id};
				$points = $ARGS{"points_".$ballot->id} if $team_points;

				if (length($points) > 0 && not defined $student_points{$student->id}) { 

					Tab::BallotValue->create({
						ballot   => $ballot->id,
						tag      => "points",
						tiebreak => 3,
						position => $position,
						value    => $points,
						student  => $student->id
					});
				}

				my $rebuttal_points = $ARGS{"rebuttal_points_".$student->id};

				if (length($rebuttal_points) > 0 && not defined $student_points{$student->id."_rebuttal"}) { 

					Tab::BallotValue->create({
						ballot   => $ballot->id,
						tag      => "rebuttal_points",
						tiebreak => 6,
						position => 4,
						value    => $points,
						student  => $student->id
					});
				}

				if ($ARGS{"ranks_".$student->id} > 0 && not defined $student_ranks{$student->id}) { 

					Tab::BallotValue->create({
						ballot   => $ballot->id,
						tag      => "rank",
						tiebreak => 3,
						value    => $ARGS{"ranks_".$student->id},
						student  => $student->id
					});
				}
			}
		}


		$ballot->tv($ARGS{"tv_".$ballot->id});
		$ballot->audit($ARGS{"audit_".$ballot->id});

		$audit++ if $ARGS{"audit_".$ballot->id};
		$no_audit++ unless $ARGS{"audit_".$ballot->id};

		$ballot->noshow($forfeit);
		$ballot->bye($bye); 

		$ballot->noshow($ARGS{"noshow_".$ballot->id});
		my $reply = $ballot->update;

		if ($ARGS{"audit_".$ballot->id}) { 
			$panel->started($now) unless $panel->started;
			$panel->confirmed($now) unless $panel->confirmed;
			$panel->update;
		}

	}

	my $err = "You've marked one ballot as done and not the other one.  The round won't be marked as complete unless both ballots are marked done" if $audit && $no_audit;

	$m->comp("/funclib/round_done.mas", round => $round);

	my $msg = "Panel scores saved forcibly.  I hope you know what you are doing.";

	$m->redirect("panel.mhtml?panel_id=".$panel_id."&judge_id=".$judge_id."&err=$err&msg=$msg");

</%init>


