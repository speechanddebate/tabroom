<%args>
	$account
	$panel_id => undef
	$judge_id => undef
</%args>
<%init>

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

	my $now = DateTime->now;

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/tabbing/entry/index.mhtml?err=$err");
    }   

	my $round = $panel->round;

    my @all_ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id);
	my @ballot_values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge);

	my @ballots;

	foreach my $ballot (@all_ballots) { 
		next if $ballot->entry->dropped;
		push @ballots, $ballot;
	}

    my $type = $round->event->type;
    my $tiebreaks = $round->tb_set;

	my $event = $round->event;
	my $truncate_fill = $tiebreaks->setting("truncate_ranks_to") if $event->setting("truncate_fill");

    my $wins;
    my $points;
    my $ranks;

	foreach my $ballot (@ballots) { 

		if ($ARGS{"rfd"}) { 
			Tab::BallotValue->create({
				tag     => "rfd",
				ballot  => $ballot->id,
				content => $ARGS{"rfd"},
				student => 0
			});
		}
	}

    foreach my $tb ($tiebreaks->tiebreaks) {
        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals" || $tb->name eq "opp_ranks");
        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss");
		next if $tb->count eq "prelim" && $round->type eq "elim" || $round->type eq "final";
        $points++ if ($tb->name eq "points" || $tb->name eq "opp_points");
    }

    my $tourn = $judge->judge_group->tourn;

    my $mfl_tv++ if $tiebreaks->setting("mfl_time_violation");
    my $noshow++ if $tiebreaks->setting("noshows_never_break");

    my $max_points = $round->event->setting("max_points");
    my $min_points = $round->event->setting("min_points");
	$min_points = 0 unless $min_points;
	$max_points = 100 unless $max_points;

    my $point_increments = $round->event->setting("point_increments");
    my $point_ties = $round->event->setting("point_ties");

	my $errs;

	my %ballot_values = ();
	my %ballot_noshow = ();

	if ($points) { 

		my %points_taken;

		foreach my $ballot (@ballots) { 

			my $points = $ARGS{$ballot->id."_points"};

			$errs .= "<p>Points missing</p>" if not defined $points || $ballot_noshow{$ballot->id};
			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") { 
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			if ($point_increments eq "half") { 
				my $rounded_points = $points + .5;
				$rounded_points = $rounded_points - ($points % .5);
				$points = $rounded_points;
			}

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points + 0);

			$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"  if $points_taken{$points} && $point_ties < 1;
			$errs .= "<p>Points $points are outside of range</p>" if $points < $min_points || $points > $max_points;

			$points_taken{$points}++;
			$ballot_values{$ballot->id."_points"} = $points;
		}
	}

	my %ballot_tv = ();

	if ($ranks) { 

		my %rank_taken;
		my %rank_points;

		foreach my $ballot (@ballots) { 
			
			$ballot_noshow{$ballot->id} = $ARGS{"noshow_".$ballot->id};
			$ballot_tv{$ballot->id} = $ARGS{"tv_".$ballot->id};

			my $rank = $ARGS{$ballot->id."_ranks"};

			$rank = $truncate_fill unless $rank;

			undef $errs if $ballot_noshow{$ballot->id};
			$errs .= "<p>Rank missing</p>" unless $rank || $ballot_noshow{$ballot->id};
			next unless $rank;

			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank + 0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank} && $rank != $truncate_fill;
			$errs .= "<p>Rank $rank is outside of range.</p>" if $rank < 1 || $rank > scalar @ballots;

			$rank_taken{$rank}++;
			$ballot_values{$ballot->id."_rank"} = $rank;
			
			if ($points) { 
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}

		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) { 
			$errs .= "<p>Entry ranked $rk has lower points than a worse-ranked ballot (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
			$current = $rank_points{$rk};
		}

	}

	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);

	if ($errs) { 

		$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&flight=".$panel->flight."&errs=$errs&err=Trouble in Paradise!");

	} else { 

		my $ballot_err;

		my $audit_method = $round->event->judge_group->setting("audit_method");
		$audit_method = "twice" unless $audit_method;

		my $audit = 0;
		$audit = 1 if $audit_method eq "none";

		my $shenanigan;

		if (@ballot_values && $audit_method eq "twice") { 

			my %ballot_rank;
			my %ballot_points;

			foreach my $bv (@ballot_values) { 
				$ballot_rank{$bv->ballot->id} = $bv->value if $bv->tag eq "rank";
				$ballot_points{$bv->ballot->id} = $bv->value if $bv->tag eq "points";
			}

			foreach my $ballot (@ballots) { 
				$ballot_err = "Time violations differed for results" if $ballot->tv != $ballot_tv{$ballot->id};
				$ballot_err = "No-shows differed for results" if $ballot->noshow != $ballot_noshow{$ballot->id};
			}

			if ($ranks) { 
				foreach my $ballot (@ballots) { 
					next if $ballot_rank{$ballot->id} == $ballot_values{$ballot->id."_rank"};
					$ballot_err .= "Ranks for ".$ballot->entry->code." differed from first entry ".$ballot_values{$ballot->id."_rank"}." vs ". $ballot_rank{$ballot->id} ."<br />";
				}
			}

			if ($points) { 
				foreach my $ballot (@ballots) {   
					next if $ballot_points{$ballot->id} == $ballot_values{$ballot->id."_points"};
					$ballot_err .= "Points for ".$ballot->entry->code." differed from first entry ".$ballot_values{$ballot->id."_points"}." vs ".$ballot_points{$ballot->id}." <br />";
				}
			}

			$audit = 2 unless ($ballot_err); 

			if ($audit) { 
				unless ($account->site_admin) { 
					foreach my $ballot (@ballots) { 
						next if $ballot->account && $account->id != $ballot->account->id;
						$ballot_err = "You did the first entry for that ballot, and thus are not permitted to do the second. <br/>";
						$shenanigan++;
					}
				}
			}

		} 

		unless ($audit == 2) { 

			#Clear the old cruft

			Tab::BallotValue->set_sql( clear_cruft => "
				delete ballot_value.*
				from ballot_value, ballot
				where ballot.panel = ?
				and ballot.judge = ? 
				and ballot_value.tag != \"rfd\"
				and ballot_value.tag != \"comments\"
				and ballot.id = ballot_value.ballot");

			Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

		}

		unless ($shenanigan) { 

			foreach my $ballot (@ballots) { 

				$ballot->audit(0);

				if ($audit > 1) { 
					$ballot->audit(1);
					$panel->started($now) unless $panel->started;
					$panel->confirmed($now) unless $panel->confirmed;
					$panel->update;
				}

				$ballot->account($account->id);

				$ballot->tv($ballot_tv{$ballot->id});
				$ballot->noshow($ballot_noshow{$ballot->id});

				$ballot->update;
		
				unless ($audit == 2) { 

					if ($points) { 

						unless (Tab::BallotValue->search( ballot => $ballot->id, tag => "points" )) {
							Tab::BallotValue->create({
								ballot   => $ballot->id,
								tag      => "points",
								tiebreak => 3,
								value    => $ballot_values{$ballot->id."_points"},
								student  => 0
							});
						}

					}

					if ($ranks) { 

						unless (Tab::BallotValue->search( ballot => $ballot->id, tag => "rank" )) {
							Tab::BallotValue->create({
								ballot   => $ballot->id,
								tag      => "rank",
								tiebreak => 1,
								value    => $ballot_values{$ballot->id."_rank"},
								student  => 0
							});
						}

					}
				}
			}

		}

		my $yellowmsg;
		my $greenmsg;
		my $err;

		if ($ballot_err) { 
			$err = "Trouble in paradise!";
		} else { 
			$yellowmsg = "Ballot first entry complete.  Ready for a doublecheck" unless $audit > 0;
			$greenmsg = "Ballot entry complete." if $audit > 0;
		}

		my $next_code = $ARGS{"next_code"};

		$m->comp("/funclib/round_done.mas", round => $round);

		$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_code=$next_code&greenmsg=$greenmsg&yellowmsg=$yellowmsg&err=$err&ballot_err=$ballot_err");

	}

</%init>
