<%args>
	$account
	$panel_id => undef
	$judge_id => undef
</%args>
<%init>

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);


	my $now = DateTime->now;

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("../index.mhtml?err=$err");
    }   

	my $round = $panel->round;
	my $event = $round->event;
	my $no_lpw++ if $event->setting("no_lpw");

    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel, drops => 1);

	my %student_entry = ();
	foreach my $student (@students) { 
		$student_entry{$student->id} = $student->entry;
	}

    my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id);
	my @ballot_values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge);

	my %student_ballot = ();
	foreach my $student (@students) { 
		
		my $mine;

		foreach my $ballot (@ballots) {
			$mine = $ballot if $ballot && $ballot->entry && $student && $ballot->entry->id == $student_entry{$student->id};
			last if $mine;
		}

		$student_ballot{$student} = $mine->id if $mine;
	}

    my $type = $event->type;
    my $tiebreaks = $round->tb_set;

    my $wins;
    my $points;
    my $ranks;

	foreach my $ballot (@ballots) { 

		if ($ARGS{"rfd"}) { 
			Tab::BallotValue->create({
				tag     => "rfd",
				ballot  => $ballot->id,
				content => $ARGS{"rfd"}
			});
		}
	}

    foreach my $tb ($round->tb_set->tiebreaks) {
        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals" || $tb->name eq "opp_ranks");
        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
        $points++ if ($tb->name eq "points" ||  $tb->name eq "opp_points") && $type ne "speech";
    }

	my $team_points++ if $points && $event->setting("team_points");
    my $tourn = $judge->judge_group->tourn;

    my $max_points = $event->setting("max_points");
    my $min_points = $event->setting("min_points");
	$min_points = 0 unless $min_points;

    my $point_increments = $event->setting("point_increments");

    my $point_ties = $event->setting("point_ties");

	my $errs;

	my %student_values = ();
	my %entry_values = ();

	my %ballot_bye;
	my %ballot_noshow;
	
	foreach my $ballot (@ballots) { 
		$ballot_bye{$ballot->id}++ if $ARGS{"bye_".$ballot->id};
		$ballot_noshow{$ballot->id}++ if $ARGS{"noshow_".$ballot->id};
		$errs = "Error type: HYC+EI2.  (Have Your Cake And Eat It Too).  <br /> You assigned ".$ballot->entry->code." a bye and a forfeit.  One or the other, plz." if $ballot_bye{$ballot->id} && $ballot_noshow{$ballot->id};;
	}

	if ($ranks) { 

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) { 
			
			next if ($ballot_bye{$student_ballot{$student->id}});
			next if ($ballot_noshow{$student_ballot{$student->id}});

			my $rank = $ARGS{$student->id."_ranks"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;
			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range. Maximum is ".scalar @students."</p>" if $rank < 1 || $rank > scalar @students;

			$rank_taken{$rank}++;
			$student_values{$student->id."_rank"} = $rank;
			
			if ($points) { 
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}

		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) { 
			$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
			$current = $rank_points{$rk};
		}

	}

	my %entry_points = ();

	if ($points) { 

		if ($team_points) { 

			foreach my $ballot (@ballots) { 

				my $points = $ARGS{$ballot->id."_points"};

				next if ($ballot_bye{$ballot->id}) && not defined $points;
				next if ($ballot_noshow{$ballot->id}) && not defined $points;
				$errs .= "<p>Points missing</p>" if not defined $points;
				next if not defined $points;

				if ($points > 0) { 

					$points = int($points + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") { 
						$points = $points * 10;
						$points = int($points + 0.5);
						$points = $points/10;
					}

					if ($point_increments eq "half") { 
						$points = $points * 2;
						$points = int($points + 0.5);
						$points = $points/2;
					}
				}

				foreach my $student (@students) { 
					next unless $student_entry{$student->id} == $ballot->entry->id;
					$student_values{$student->id."_points"} = $points;
				}

				$entry_points{$ballot->entry->id} += $points;

				next if ($ballot_bye{$ballot->id});
				next if ($ballot_noshow{$ballot->id});

				$errs .= "<p>$points Points must be a number</p>" unless ($points == 0 || $points eq $points + 0);
				$errs .= "<p>Points $points are outside of range</p>" if $points < $min_points || $points > $max_points;

			}

		} else { 

			foreach my $student (@students) { 

				my $points = $ARGS{$student->id."_points"};

				next if ($ballot_bye{$student_ballot{$student->id}}) && not defined $points;
				next if ($ballot_noshow{$student_ballot{$student->id}}) && not defined $points;

				$errs .= "<p>Points missing for ".$student->first." ".$student->last."</p>" if not defined $points;
				next if not defined $points;

				if ($points > 0) { 

					$points = int($points + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") { 
						$points = $points * 10;
						$points = int($points + 0.5);
						$points = $points/10;
					}

					if ($point_increments eq "half") { 
						$points = $points * 2;
						$points = int($points + 0.5);
						$points = $points/2;
					}
				}

				$student_values{$student->id."_points"} = $points;
				$entry_points{$student_entry{$student->id}} += $points;

				next if ($ballot_bye{$student_ballot{$student->id}});
				next if ($ballot_noshow{$student_ballot{$student->id}}); 

				$errs .= "<p>$points Points must be a number</p>" unless ($points == 0 || $points eq $points + 0);
				$errs .= "<p>Points $points are outside of range</p>" if $points < $min_points || $points > $max_points;

			}

		}
	}

	my $winner;

	if ($wins)  {

		my $byes;

		foreach my $ballot (@ballots) { 
			$byes++ if ($ballot_bye{$ballot->id} || $ballot_noshow{$ballot->id});
		}

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>" unless $winner || $byes;

		if ($winner) { 
			my $winner_points = $entry_points{$winner->entry->id};
			foreach my $ballot (@ballots) { 
				next unless $ballot->entry;
				my $bal_points = $entry_points{$ballot->entry->id};
				$errs .= "<p>Low point wins are not allowed by this tournament</p>" if $winner_points < $bal_points && $no_lpw;
			}
		}
	}

	my %points_taken;
	foreach my $ballot (@ballots) { 

		next if $ballot_bye{$ballot->id} || $ballot_noshow{$ballot->id};

		my $points = $entry_points{$ballot->entry->id};
		$errs .= "<p>Tied points forbidden: you have two entries with total points $points </p>"  if $points_taken{$points} && $point_ties < 1 && $points > 0;
		$points_taken{$points}++;
	}

	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);

	if ($errs) { 

		$m->redirect("../index.mhtml?timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&flight=".$panel->flight."&errs=$errs&err=Trouble in Paradise!");

	} else { 

		my $ballot_err;

		my $audit_method = $event->judge_group->setting("audit_method");
		$audit_method = "twice" unless $audit_method;

		my $audit = 0;
		$audit = 1 if $audit_method eq "none";

		if (@ballot_values && $audit_method eq "twice") { 

			my %student_rank;
			my %student_points;
			my $current_winner;
			my $current_loser;

			foreach my $bv (@ballot_values) { 
				$student_rank{$bv->student->id} = $bv->value if $bv->tag eq "rank";
				$student_points{$bv->student->id} = $bv->value if $bv->tag eq "points";
				$current_winner = $bv->ballot->id if $bv->tag eq "ballot" && $bv->value == 1;
				$current_loser = $bv->ballot->id if $bv->tag eq "ballot" && $bv->value == 0;
			}

			foreach my $ballot (@ballots) { 
				$ballot_err .= "Bye entry was different <br />" if $ballot_bye{$ballot->id} &&  $ballot->bye != $ballot_bye{$ballot->id};
				$ballot_err .= "Forfeiting entry was different <br />" if $ballot_noshow{$ballot->id} && $ballot->noshow != $ballot_noshow{$ballot->id};
			}

			if ($ranks) { 
				foreach my $student (@students) { 
					next if $student_rank{$student->id} == $student_values{$student->id."_rank"};
					$ballot_err .= "Ranks for ".$student->id." differed from first entry ".$student_values{$student->id."_rank"}." vs ". $student_rank{$student->id} ."<br />";
				}
			}

			if ($points) { 
				foreach my $student (@students) {   
					next if $student_points{$student->id} == $student_values{$student->id."_points"} && length($student_points{$student->id}) == length($student_values{$student->id."_points"});
					$ballot_err .= "Points for ".$student->last." differed from first entry (".$student_values{$student->id."_points"}." vs ".$student_points{$student->id}.") <br />";
				}
			}

			if ($wins) { 
				$ballot_err .= "Winner differed from first entry." if $winner && $current_winner != $winner->id;
			}

			$audit = 2 unless ($ballot_err); 

		} elsif ($audit_method eq "twice") { 

			my $byes;

			foreach my $ballot (@ballots) { 
				$ballot_err .= "Bye entry was different <br />" if $ballot_bye{$ballot->id} && $ballot->bye != $ballot_bye{$ballot->id};
				$ballot_err .= "Forfeiting entry was different <br />" if $ballot_noshow{$ballot->id} && $ballot->noshow != $ballot_noshow{$ballot->id};

				$byes++ if $ballot_bye{$ballot->id};
				$byes++ if $ballot_noshow{$ballot->id};
			}

			$audit = 2 if $byes && not defined $ballot_err; 

		}

		unless ($audit == 2) { 

			#Clear the old cruft

			Tab::BallotValue->set_sql( clear_cruft => "
				delete ballot_value.*
				from ballot_value, ballot
				where ballot.panel = ?
				and ballot.judge = ? 
				and ballot_value.tag != \"rfd\"
				and ballot_value.tag != \"title\"
				and ballot_value.tag != \"comments\"
				and ballot.id = ballot_value.ballot");

			Tab::BallotValue->sql_clear_cruft->execute($panel->id, $judge->id);

		}

		foreach my $ballot (@ballots) { 

			$ballot->audit(0);
			$ballot->account($account->id);

			if ($audit >= 1) { 
				$ballot->audit(1);
				$panel->started($now) unless $panel->started;
				$panel->confirmed($now) unless $panel->confirmed;
				$panel->update;
			}

			$ballot->bye($ballot_bye{$ballot->id});
			$ballot->noshow($ballot_noshow{$ballot->id});

			$ballot->update;
	
			unless ($audit == 2) { 

				if ($wins && $ballot_bye{$ballot->id} < 1 && $ballot_noshow{$ballot->id} < 1) { 

					my $tigers_blood = 0;
					$tigers_blood++ if $winner && $winner->id == $ballot->id;

					$tigers_blood = 0 if $ballot->noshow;
					$tigers_blood++ if $ballot->bye;

					next if Tab::BallotValue->search(tag => "ballot", ballot => $ballot->id);

					eval{ 
						Tab::BallotValue->create({
							ballot   => $ballot->id,
							value    => $tigers_blood,
							tag      => "ballot",
							tiebreak => 2,
							student  => 0
						});
					};

				}

				if ($points) { 

					foreach my $student (@students) { 

						next unless $student_entry{$student->id} == $ballot->entry->id;
						next unless length($student_values{$student->id."_points"}) > 0;

						next if Tab::BallotValue->search(tag => "points", ballot => $ballot->id, student => $student->id);

						eval{ 
							my $bv = Tab::BallotValue->create({
								ballot  => $ballot->id,
								student => $student->id,
								tag     => "points",
								tiebreak => 3,
								value   => $student_values{$student->id."_points"}
							});
						};

					}

				}

				if ($ranks) { 

					foreach my $student (@students) { 

						next unless $student_entry{$student->id} == $ballot->entry->id;
						next unless defined $student_values{$student->id."_points"};

						next if Tab::BallotValue->search(tag => "rank", ballot => $ballot->id, student => $student->id);

						eval{ 
							Tab::BallotValue->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "rank",
								tiebreak => 1,
								value    => $student_values{$student->id."_rank"}
							});
						};

					}
				}
			}
		}

		foreach my $ballot (@ballots) { 
			foreach my $value ($ballot->values(tag => "")) { 

				# This bug is driving me up the F#%)(*&#%(@*%&! wall.  for now
				# check for it and fix it on the fly.  NOTE:  This is an
				# incredibly ugly hack.

				Tab::debuglog("ALERT!  Score ".$value->id." has tag ".$value->tag." which appears to be a problem. Fixing:");
				$value->tag("rank") if $value->tiebreak == 1;
				$value->tag("ballot") if $value->tiebreak == 2;
				$value->tag("points") if $value->tiebreak == 3;
				$value->update;
			}
		}

		my $yellowmsg;
		my $greenmsg;
		my $err;

		$audit = 2 if $audit_method eq "none";

		if ($ballot_err) { 
			$err = "Trouble in paradise!";
		} else { 
			$yellowmsg = "Ballot first entry complete.  Pass to someone to enter for a doublecheck." if $audit < 2;
			$greenmsg = "Ballot entry complete." if $audit > 1;
		}

#		$m->comp("/funclib/round_done.mas", round => $round);

		$m->redirect("../index.mhtml?timeslot_id=".$round->timeslot->id."&greenmsg=$greenmsg&yellowmsg=$yellowmsg&err=$err&ballot_err=$ballot_err");

	}

</%init>
