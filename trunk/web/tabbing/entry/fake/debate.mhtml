<%args>
	$round_id => undef
	$event_id => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $event = Tab::Event->retrieve($event_id) if $event_id;

	my @rounds;

	if ($event) { 
		@rounds = $event->rounds;
	} else { 
		my $round = Tab::Round->retrieve($round_id);
		push @rounds, $round;
		$event = $round->event;
	}

	my $event_type = $event->type; 

	my $err;
	my $msg;

	my $min = $event->setting('min_points');
	my $max = $event->setting('max_points');

	my $range = $max - $min;

	foreach my $round (@rounds) { 

		foreach my $existing ($m->comp("/funclib/round_values.mas", round => $round)) { 
			$existing->delete;
		}

		my $counter;
		my $judges;

		foreach my $panel ($round->panels) { 
			
			foreach my $panel (Tab::Panel->search( bye => 1, round => $round->id)) { 
				
				foreach my $ballot ($panel->ballots) { 
					$ballot->audit(1);
					$ballot->update;
				}

			}

			foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 

				$judges++;
				$counter++;

				my @ballots = shuffle(Tab::Ballot->search( panel => $panel->id, judge => $judge->id )); 

				my $rank;
				my $winner = 1;

				BALLOT:
				foreach my $ballot (@ballots) { 

					$rank++;

					my $wsdc_count;
					my $used_student;

					foreach my $student (shuffle $ballot->entry->students) { 

						next if $wsdc_count++ >= 3 && $event_type eq 'wsdc';
						$used_student = $student unless $used_student;

						my $points = int(rand($range));
						$points += $min;

						Tab::BallotValue->create({
							ballot   => $ballot->id,
							tag      => "points",
							student  => $student->id,
							value    => $points,
							tiebreak => 3,
							position => $wsdc_count
						});

						Tab::BallotValue->create({
							ballot   => $ballot->id,
							tag      => "rank",
							student  => $student->id,
							value    => $rank,
							tiebreak => 1
						});

					} 

					if ($event_type eq "wsdc") { 

						my $points = int(rand($range / 2));
						$points += $min / 2;

						Tab::BallotValue->create({
							ballot   => $ballot->id,
							tag      => "rebuttal_points",
							student  => $used_student->id,
							value    => $points,
							tiebreak => 6,
							position => 4
						});

					}
				
					Tab::BallotValue->create({
						ballot   => $ballot->id,
						tag      => "ballot",
						value    => $winner,
						tiebreak => 2
					});

					$winner = 0;

				}

				foreach my $ballot (@ballots) { 
					$ballot->audit(1);
					$ballot->update;
				}

			}

		}
	
		$err .= "<br />Round ".$round->realname.": Without assigning judges there are no fake ranks or points.  Assign judges and try again please" unless $judges;
		$msg = "<br />$counter Ranks faked for round ".$round->realname if $judges;
		$round_id = $round->id if $judges;

	}

	$m->redirect("/panel/schemat/show.mhtml?event_id=$event_id&round_id=$round_id&msg=$msg&err=$err");

</%init>

