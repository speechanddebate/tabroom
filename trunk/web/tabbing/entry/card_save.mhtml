<%args>
	$entry_id
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);
	my $event = $entry->event;

	my @students = $entry->students;

    Tab::Student->set_sql(by_entry => "
        select distinct student.*
        from student, ballot_value, ballot
        where ballot.id = ballot_value.ballot
        and ballot_value.student = student.id
        and ballot.entry = ? 
    ");

    push @students, Tab::Student->search_by_entry($entry->id) if $entry;

    my %seen = (); 
    @students = grep { ! $seen{$_->id} ++ } @students;


	foreach my $panel ($m->comp("/funclib/entry_panels.mas", entry => $entry)) {

		my $wins;
		my $ranks;
		my $points;

		my $mfl_tv = $panel->round->tb_set->setting("mfl_time_violations");
		my $noshow = $panel->round->tb_set->setting("noshows_never_break");

		foreach my $tb ($panel->round->tb_set->tiebreaks) { 
			$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
			$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
			$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
		}   

		foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel), 0) { 

			my $ballot = Tab::Ballot->search( judge => $judge, panel => $panel->id, entry => $entry->id )->first;

			next unless $ballot;
			next if $event->type eq "wudc" &! $ballot->chair;

			my @scores = $ballot->ballot_values;

			my %seen = (); 
			@scores = grep { ! $seen{$_->id} ++ } @scores;

			$ballot->tv($ARGS{"tv_".$ballot->id});
			$ballot->bye($ARGS{"bye_".$ballot->id});

			my $noshow = $ARGS{"noshow_".$ballot->id};
			$noshow = 0 if $ballot->bye;
			$ballot->noshow($noshow);

			my $audit = $ARGS{"audit_".$ballot->id};
			$ballot->audit($audit);
			$ballot->update;

			if ($wins) { 

				my $win_score;
				foreach my $score (@scores) { 
					$win_score = $score if $score->tag eq "ballot" && not defined $win_score;
				}

				my $won = 0;
				$won++ if $ARGS{"winner_".$ballot->id};

				if ($win_score) { 
					$win_score->value($won);
					$win_score->update;
				} else { 
					Tab::BallotValue->create({
						ballot => $ballot->id,
						tag    => "ballot",
						value  => $won
					}); 
				}
			}

			if ($event->type eq "speech" || $event->type eq "congress") { 
				
				if ($points) { 

					if (length $ARGS{"points_".$ballot->id}) { 

						my $points_score;

						foreach my $score (@scores) { 
							$points_score = $score if $score->tag eq "points" && not defined $points_score;
						}

						if ($points_score) { 
							$points_score->value($ARGS{"points_".$ballot->id});
							$points_score->update;
						} else { 

							Tab::BallotValue->create({
								ballot => $ballot->id,
								tag    => "points",
								value  => $ARGS{"points_".$ballot->id},
							}); 
						}

					} elsif ($ballot->bye == 1 || $ballot->noshow == 1) { 

						foreach my $score (@scores) { 
							next unless $score && $score->tag eq "points";
							$score->delete;
							undef $score;
						}

					}
				}
			}

			if ($event->type eq "speech" || $event->type eq "congress" || $event->type eq "wudc") { 
				

				if ($ranks) {

					if (length $ARGS{"ranks_".$ballot->id}) { 

						my $ranks_score;

						foreach my $score (@scores) { 
							$ranks_score = $score if $score->tag eq "rank" && not defined $ranks_score;
						}

						if ($ranks_score) { 
							$ranks_score->value($ARGS{"ranks_".$ballot->id});
							$ranks_score->update;
						} else { 

							Tab::BallotValue->create({
								ballot => $ballot->id,
								tag => "rank",
								value => $ARGS{"ranks_".$ballot->id},
							}); 
						}

					} elsif ($ballot->bye == 1 || $ballot->noshow == 1) { 
						foreach my $score (@scores) { 
							next unless $score &&  $score->tag eq "rank";
							$score->delete;
							undef $score;
						}
					}
				}
			}

			unless ($event->type eq "speech" || $event->type eq "congress") { 
				
				foreach my $student (@students) {  

					if ($points) { 

						if (length $ARGS{"points_".$ballot->id."-".$student->id}) { 

							Tab::debuglog("Student ".$student->first." ".$student->last." has scores for judge ".$judge->code." round ".$panel->round->name);

							my $points_score;

							foreach my $score (@scores) { 
								next unless $score;
								$points_score = $score if $score->tag eq "points" && 
									not defined $points_score && $score->student && $score->student->id == $student->id;
							}

							if ($points_score) { 

								Tab::debuglog("Saving score of ".$ARGS{"points_".$ballot->id."-".$student->id});

								$points_score->value($ARGS{"points_".$ballot->id."-".$student->id});
								$points_score->update;

							} else { 

								Tab::debuglog("Creating score of ".$ARGS{"points_".$ballot->id."-".$student->id});

								Tab::BallotValue->create({
									ballot  => $ballot->id,
									tag     => "points",
									student => $student->id,
									value   => $ARGS{"points_".$ballot->id."-".$student->id},
								}); 
							}
							

						} elsif ($ballot->bye == 1 || $ballot->noshow == 1) { 

							foreach my $score (@scores) { 
								next unless $score && $score->tag eq "points";
								$score->delete;
								undef $score;
							}

						} else { 

							Tab::debuglog("Student ".$student->first." ".$student->last." has NO scores for j".$judge->code." ".$panel->round->realname);

							foreach my $score (@scores) { 
								next unless $score && $score->tag eq "points";
								next unless $score->student->id == $student->id;
								$score->delete;
								undef $score;
							}

						}

					}
				}
			}

			unless ($event->type eq "speech" || $event->type eq "congress" || $event->type eq "wudc") { 


				if ($ranks) { 
			
					foreach my $student (@students) {  

						if (length $ARGS{"ranks_".$ballot->id."-".$student->id}) { 

							my $ranks_score;

							foreach my $score (@scores) { 
								next unless $score;
								$ranks_score = $score if $score->tag eq "rank" && not defined $ranks_score 
									&& $score->student && $score->student->id == $student->id;
							}

							if ($ranks_score) { 
								$ranks_score->value($ARGS{"ranks_".$ballot->id."-".$student->id});
								$ranks_score->update;

							} else { 

								Tab::BallotValue->create({
									ballot  => $ballot->id,
									tag     => "rank",
									student => $student->id,
									value   => $ARGS{"ranks_".$ballot->id."-".$student->id},
								}); 
							}

						} elsif ($ballot->bye == 1 || $ballot->noshow == 1) { 

							foreach my $score (@scores) { 
								next unless $score && $score->tag eq "rank";
								$score->delete;
							}
						} else { 
							foreach my $score (@scores) { 
								next unless $score && $score->tag eq "rank";
								next unless $score->student->id == $student->id;
								$score->delete;
								undef $score;
							}
						}
					}
				}
			}   
		}
	}

	$m->redirect("card.mhtml?entry_id=".$entry_id);

</%init>


