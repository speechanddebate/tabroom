<%args>
	$tourn
	$session
	$school_id => undef
</%args>
<%init>

	my @schools;
	my @events;

	my $name = $tourn->name."SchoolReports" if $school_id eq "all";
	
	if ($school_id eq "all") { 
	
		@schools = sort {$a->name cmp $b->name} $tourn->schools if $school_id eq "all";
		@events = $tourn->events;
	
	} elsif ($school_id) { 
	
		my $school = Tab::School->retrieve($school_id) if $school_id && $school_id ne "all";

		unless ($school)  {
			$m->print("School does not exist");
			$m->abort;
		}

		push @schools, $school;
		@events = $m->comp("/funclib/school_events.mas", school => $school);
    	$name = $school->name."-Report";
	
	} else { 

		$m->redirect("index.mhtml?msg=No school selected");

	} 

    $name =~ s/[\W_]//g;

	my %values_by_entry = ();
	my %values_by_student = ();
	my %entry_place = ();
	my %entry_results = ();
	my %entry_ballots = ();

	foreach my $event (@events) { 

		my @values = $m->comp("/funclib/event_values.mas", event => $event);
		my $event_type = $event->type;

		foreach my $value (@values) { 
			push @{$values_by_entry{$value->entryid}}, $value if $value->entryid;
			push @{$values_by_student{$value->student->id}}, $value if $value->tag eq "points" and $value->student;
		}

		my @rounds = sort {$b->name <=> $a->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");

		my $final;
		my @elims;
		my $last_prelim;
		my @print_rounds;

		foreach my $round (@rounds) { 
			push (@print_rounds, $round) if $round->type eq "final";
			push (@print_rounds, $round) if $round->type eq "elim";
			push (@print_rounds, $round) if $round->type ne "elim" && $round->type ne "final" && not defined $last_prelim;
		}

		my %used;
		my $last_round;

		next unless @print_rounds;

		foreach my $round (@print_rounds) { 

			my $type = $round->type;
			my $label = substr($round->label, 0, 3);
			
			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $round) ;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				
				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

				foreach my $entry (@{${$entries_ref}{$key}}) {

					next if $used{$entry}++;

					$entry_place{$entry}  = Lingua::EN::Numbers::Ordinate::ordinate($key) if $type eq "final" || $event_type eq "wudc";
					$entry_place{$entry} .= "-T" if $tie && $type eq "final";
					$entry_place{$entry} .= $label if $type eq "elim";

				}

			}

			$last_round = $round unless $last_round;
			$last_round = $round if $round->name > $last_round->name;

		}

		my $points;
		my $ranks;
		my $wins;

		my %tb_done;

		foreach my $round (@print_rounds) { 
			foreach my $tb ($round->tb_set->tiebreaks) { 
				next if $tb_done{$tb->id}++;
				$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
				$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
				$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
			}
		}

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select value.id, value.tag, value.value, ballot.entry, ballot.judge, ballot.bye, ballot.chair, round.name, round.type
			from ballot_value value, ballot, panel, round
			where value.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ".$last_round->name."
			and round.event = ".$event->id."
			order by round.name, ballot.entry, ballot.chair, ballot.judge, value.student, CASE value.tag WHEN ".' "ballot" then 1 when "rank" then 2 when "points" then 3 end'."
		");

		$sth->execute(); 

		my %entry_round;

		my %rounds;
		my %round_last;
		my %round_last_type;

		while (my ($id, $tag, $value, $entryid, $judge, $bye, $chair, $roundname, $roundtype) = $sth->fetchrow_array() ) { 

			$rounds{$entryid}++ if $round_last{$entryid} != $roundname && $roundtype ne "elim" && $roundtype ne "final";

			if ( ($event_type eq "policy" && $rounds{$entryid} == 4) || (($event_type eq "pf" || $event_type eq "debate") && $rounds{$entryid} == 5) || ($event_type eq "ld" && $rounds{$entryid} == 7)) { 
				$entry_ballots{$entryid} .= "\n \\newline \n";
				undef $rounds{$entryid};
			}

			if ( ($roundtype eq "elim" || $roundtype eq "final") && ($round_last_type{$entryid} ne "elim" && $round_last_type{$entryid} ne "final") ) { 
				$entry_ballots{$entryid} .= "\\ \\ ";
			} elsif ($round_last{$entryid} && $round_last{$entryid} != $roundname) { 
				$entry_ballots{$entryid} .= "\\ \\ ";
			}


			$round_last_type{$entryid} = $roundtype;

			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "points" && not defined $points;
			next if $tag eq "ballot" && not defined $wins;

			next if $tag eq "points" && $value == "-1";

			$entry_round{$entryid} = $roundname;

			if ($tag eq "ballot") { 

				if ($bye) { 
					$entry_ballots{$entryid} .= "BYE";
					$entry_ballots{$entryid} .= "\\ \\ \\ \\ ";
					$entry_ballots{$entryid} .= "\\ \\ \\ \\ \\ " if $event_type eq "policy" || $event_type eq "pf";
					$entry_ballots{$entryid} .= "\\ \\ " if $event_type eq "policy";
				} else { 

					if ($entry_ballots{$entryid} && $round_last{$entryid} != $roundname) { 
						$entry_ballots{$entryid} .= " ";
					} 

					$entry_ballots{$entryid} .= "W" if $value > 0;
					$entry_ballots{$entryid} .= "L" if $value < 1;
				}

			} else { 

				$entry_ballots{$entryid} .= " ".$value;

				if ($tag eq "points" && $event_type eq "speech" || $event_type eq "congress" || $event_type eq "wudc") { 
					foreach (length($value) .. 4) { 
						$entry_ballots{$entryid} .= "\\ ";
					}
				} elsif ($tag eq "points") { 
					foreach (length($value) .. 4) { 
						$entry_ballots{$entryid} .= "\\ ";
					}
				}
			}

			$round_last{$entryid} = $roundname;

		}

	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    my $now = DateTime->now;    
    $now->set_time_zone($tourn->tz);

    my $filename = $name."-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`; 
    
    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1 );

    open (TEXOUT, ">>$filepath.tex");

	my $switch;

	foreach my $school (@schools) { 

		print TEXOUT "\\noindent\n";
		print TEXOUT "{\\LARGE \\bf ". Tab::texify($tourn->name)." \\hfill ".Tab::texify($school->short_name)."'s Results} \\\\ \n" if $school;
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

		my $tabular = "\\begin{tabular}{p{.5in}p{2.0in}p{.5in}p{3.5in}}\n";

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
		print TEXOUT "{\\bf Place } & {\\bf Name } & {\\bf Event } & {\\bf Ballots }\\\\ \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

		foreach my $entry ($school->entries(dropped => 0, waitlist => 0)) { 

			my $name = $entry->name;
			$name =~ s/amp;//g;

			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
			print TEXOUT Tab::texify($entry_place{$entry->id});
			print TEXOUT " & ". Tab::texify($name)." & ";
			print TEXOUT " ".Tab::texify($entry->event->abbr)." & ";
			print TEXOUT "\\texttt{".$entry_ballots{$entry->id}."}";
			print TEXOUT "\\\\ \n" ;
			print TEXOUT "\\end{tabular}\n" ;
			print TEXOUT "\\newline\n" ;

		}

		print TEXOUT "\\newpage\n";

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );

</%init>

