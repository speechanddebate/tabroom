<%args>
	$tourn
	$session
	$event_id => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id) if $event_id && $event_id ne "all";

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    my $now = DateTime->now(time_zone => $tz);    

	$m->abort unless $event;

    my $name = $event->name;
    $name =~ s/[\W_]//g;

    my $filename = "Packet-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`; 

	my $affstring = "Aff";
	my $negstring = "Neg";

	if ($event->type eq "pf") { 
		$affstring = "Pro";
		$negstring = "Con";
	}

	if ($event->type eq "parli") { 
		$affstring = "Gov";
		$negstring = "Opp";
	}
    
    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, nomargin => 1 );

    open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\renewcommand{\\TruncateMarker}{}\n";

	print TEXOUT "\\begin{center}\n";
	print TEXOUT "\\LARGE \n";
	print TEXOUT "\\bf{ ".Tab::texify($tourn->name)."---".Tab::texify($event->name)." } \n \n";
	print TEXOUT "\\large \n";
	print TEXOUT Tab::texify(Tab::shortdate($tourn->start->set_time_zone($tz)));
	print TEXOUT " to ".Tab::texify(Tab::shortdate($tourn->end->set_time_zone($tz))) if $tourn->start->day != $tourn->end->day;
	print TEXOUT " \n \n";
	print TEXOUT "\\end{center}\n";

	print TEXOUT "\\normalsize \n";

	my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");

	my @rounds;

	foreach my $round (@all_rounds) { 
		next if $round->type eq "elim";
		next if $round->type eq "final";
		push @rounds, $round;
	}

	unless (@rounds) { 
		$m->print("You have no rounds scheduled.  Can't print results");
		$m->abort;
	}

	my $size = "4.5";
	$size = $size / scalar @rounds;

	my $tabular = "\\begin{tabular}{p{1.25in}";

	foreach my $round (@rounds) { 
		$tabular .= "p{".$size."in}";
	}

	$tabular .= "p{1in}}\n";

	print TEXOUT $tabular;

	print TEXOUT " & ";

	my $last_round;
	my $last_round_name;

	foreach my $round (@rounds) { 
		print TEXOUT Tab::texify($round->realname);
		print TEXOUT " & ";
		$last_round = $round;
		$last_round_name = $round->name;
	}

	my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
	my %judge_name_by_id = map { $_->id => $_->last.", ".$_->first } @judges;

	print TEXOUT "\n \\end{tabular}\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\small \n";

	$tabular =~ s/in}/in}|/g;
	$tabular =~ s/{p/{|p/g;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select value.id, value.tag, value.value, value.student, ballot.entry, entry.code, ballot.judge, panel.bye, ballot.bye, ballot.noshow, ballot.chair, round.name, ballot.side, panel.id
		from ballot_value value, ballot, panel, round, entry
		where value.ballot = ballot.id
		and ballot.panel = panel.id
		and panel.round = round.id
		and round.name <= ".$last_round_name."
		and round.event = ".$event->id."
		and ballot.entry = entry.id
		order by round.name, ballot.entry, value.student, ballot.chair, ballot.judge, CASE value.tag WHEN ".' "ballot" then 1 when "rank" then 2 when "points" then 3 end'."
	");

	my $ballot_sth = $dbh->prepare("
		select ballot.entry, ballot.judge, panel.bye, ballot.bye, ballot.noshow, ballot.chair, round.name, ballot.side
		from ballot, panel, round
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.name <= ".$last_round_name."
		and round.event = ".$event->id."
		and not exists (
			select ballot_value.id
			from ballot_value
			where ballot_value.ballot = ballot.id
		)
		order by round.name, ballot.entry, ballot.chair, ballot.judge
	");

	$sth->execute(); 
	$ballot_sth->execute(); 

	my %entry_round;

	my %entry_round_decision;
	my %entry_round_side;
	my %entry_code;

	my %student_round_points;
	my %student_round_ranks;
	my %student_round_entry;
	my %entry_round_judges;
	my %entry_round_panel;
	my %entry_win_count;
	my %entry_loss_count;
	my %panel_entries;

	my %entry_ballots;

	my %entry_max_judges;

	while (my ($id, $tag, $value, $studentid, $entryid, $code, $judge, $pbye, $bye, $noshow, $chair, $roundname, $side, $panel) = $sth->fetchrow_array() ) { 

		$entry_ballots{$entryid}++;

		$student_round_entry{$studentid."-".$roundname} = $entryid;
		$entry_round_panel{$entryid."-".$roundname} = $panel;
		push @{$panel_entries{$panel}}, $entryid;
		$entry_code{$entryid} = $code;

		if ($pbye) { 
			$entry_round_decision{$entryid."-".$roundname} = "Bye"
		} elsif ($bye) { 
			$entry_round_decision{$entryid."-".$roundname} = "Bye"
		} elsif ($noshow) { 
			$entry_round_decision{$entryid."-".$roundname} = "FFT"
		} elsif ($tag eq "ballot") { 
			push @{$entry_round_judges{$entryid."-".$roundname}}, $judge;

			$entry_max_judges{$entryid} = scalar @{$entry_round_judges{$entryid."-".$roundname}} if (scalar @{$entry_round_judges{$entryid."-".$roundname}}) > $entry_max_judges{$entryid};

			$entry_round_side{$entryid."-".$roundname} = $affstring if $side == 1;
			$entry_round_side{$entryid."-".$roundname} = $negstring if $side == 2;

			$entry_loss_count{$entryid."-".$roundname}++ if $value == 0;
			$entry_win_count{$entryid."-".$roundname}++ if $value == 1;

			$entry_round_decision{$entryid."-".$roundname."-".$judge} = "-" if $value == 0;
			$entry_round_decision{$entryid."-".$roundname."-".$judge} = "L" if $value == 0;
			$entry_round_decision{$entryid."-".$roundname."-".$judge} = "W" if $value == 1;

		} elsif ($tag eq "points") { 
			$student_round_points{$studentid."-".$roundname."-".$judge} .= $value;
		} elsif ($tag eq "rank") { 
			$student_round_ranks{$studentid."-".$roundname."-".$judge} .= $value." ";
		}
	}

	while (my ($entryid, $judge, $pbye, $bye, $noshow, $chair, $roundname, $side) = $ballot_sth->fetchrow_array() ) { 

		if ($pbye) { 
			$entry_round_decision{$entryid."-".$roundname} = "Bye"
		} elsif ($bye) { 
			$entry_round_decision{$entryid."-".$roundname} = "Bye"
		} elsif ($noshow) { 
			$entry_round_decision{$entryid."-".$roundname} = "FFT"
		}
	}
	
	my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $last_round);
	my ($students_ref, $student_tbs_ref, $student_desc_ref) = $m->comp("/tabbing/results/order_speakers.mas", round => $last_round);

	my %entry_wins = $m->comp("/funclib/entry_wins.mas", event => $event, round => $last_round);
	my %entry_losses = $m->comp("/funclib/entry_losses.mas", event => $event, round => $last_round);

	foreach my $entry ($event->entries(waitlist => 0, unconfirmed => 0)) { 

		next unless $entry_ballots{$entry->id};

		my @students = $entry->students;

		Tab::Student->set_sql(by_entry_result => "
			select distinct student.*
			from student, ballot_value, ballot
			where ballot.id = ballot_value.ballot
			and ballot_value.student = student.id
			and ballot.entry = ? 
		");

		push @students, Tab::Student->search_by_entry_result($entry->id);

		my %seen = (); 
		@students = grep { ! $seen{$_->id} ++ } @students;

		print TEXOUT $tabular;
		print TEXOUT "\\hline\n";

		print TEXOUT " \\parbox{1.25in}{";
		print TEXOUT "\\smallskip\n";
		print TEXOUT "{\\bf \\truncate{1.2in}{".Tab::texify($entry->code)."}}\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\indent\n";
		print TEXOUT "\\truncate{1.2in}{ \\hspace{2ex}".Tab::texify($entry->school->short_name)."}\n";
		print TEXOUT "\\vspace{3mm}\n" if $entry_max_judges{$entry->id} == 1;
		print TEXOUT "\\vspace{9mm}\n" if $entry_max_judges{$entry->id} > 1;
		print TEXOUT "\\newline\n";

		my $factor = 2.5 * $entry_max_judges{$entry->id};

		my $notfirst;
		foreach my $student (@students) { 
			print TEXOUT "\\newline\n" if $notfirst++;
			print TEXOUT "\\truncate{1.2in}{ \\hspace{2ex}".Tab::texify($student->first." ".$student->last)."}\n";
			print TEXOUT "\\vspace{".$factor."mm}\n" if $entry_max_judges{$entry} > 1;
		}
		
		print TEXOUT " } & ";


		ROUND:
		foreach my $round (@rounds) { 

			my $num_judges = scalar @{$entry_round_judges{$entry->id."-".$round->name}} if $entry_round_judges{$entry->id."-".$round->name};

			print TEXOUT " \\parbox{".$size."in}{";

			print TEXOUT "\\vspace{1mm}\n";

			unless ($entry_round_decision{$entry->id."-".$round->name} || $entry_win_count{$entry->id."-".$round->name} || $entry_loss_count{$entry->id."-".$round->name}) { 
				print TEXOUT "No Debate";
				print TEXOUT " } & ";
				next ROUND;
			}

			my $result;

			if ($entry_round_decision{$entry->id."-".$round->name} eq "Bye" || $entry_round_decision{$entry->id."-".$round->name} eq "FFT") { 
				$result = $entry_round_decision{$entry->id."-".$round->name};
				print TEXOUT "| \n \n" 
			} elsif ($entry_win_count{$entry->id."-".$round->name} < 2 && $entry_loss_count{$entry->id."-".$round->name} < 2) { 
				$result = "W" if $entry_win_count{$entry->id."-".$round->name} > 0;
				$result = "L" if $entry_loss_count{$entry->id."-".$round->name} > 0;
				$result = "T" if $entry_win_count{$entry->id."-".$round->name} == $entry_loss_count{$entry->id."-".$round->name};
			} else { 
				$result = "T";
				$result = "L" if $entry_win_count{$entry->id."-".$round->name} < $entry_loss_count{$entry->id."-".$round->name};
				$result = "W" if $entry_win_count{$entry->id."-".$round->name} > $entry_loss_count{$entry->id."-".$round->name};
			}

			print TEXOUT "\\truncate{".$size."in}{\\normalsize \\bf ".$result." \\hspace{1.5ex} ".$entry_round_side{$entry->id."-".$round->name}."}\n";

			print TEXOUT "\\vspace{.1mm}\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\fontsize{7pt}{4pt}\\selectfont\n";

			my %used;

			foreach my $opponent (@{$panel_entries{$entry_round_panel{$entry->id."-".$round->name}}}) { 
				next if $opponent  == $entry->id;
				next if $used{$opponent}++;
				print TEXOUT "\\truncate{".$size."in}{ ".Tab::texify($entry_code{$opponent})."}\n\n";
			}

			print TEXOUT "\\vspace{1mm}\n\n";

			foreach my $judgeid (@{$entry_round_judges{$entry->id."-".$round->name}}) { 
				next if $used{$judgeid}++;
				my $result = $entry_round_decision{$entry->id."-".$round->name."-".$judgeid}." " if $num_judges > 1;
				print TEXOUT "\\truncate{".$size."in}{ {\\small \\tt $result }".Tab::texify($judge_name_by_id{$judgeid})."}\n\n";
			}

			print TEXOUT "\\small\n";
			print TEXOUT "\\vspace{.5mm}\n";

			my $notfirst;

			foreach my $student (@students) { 
				foreach my $judgeid (@{$entry_round_judges{$entry->id."-".$round->name}}) { 
					print TEXOUT "\\newline\n" if $notfirst++;
					print TEXOUT "\\truncate{".$size."in}{ ";
					if ($student_round_entry{$student->id."-".$round->name} == $entry->id) {
						print TEXOUT $student_round_ranks{$student->id."-".$round->name."-".$judgeid}." \\hspace{1ex} " if $student_round_ranks{$student->id."-".$round->name."-".$judgeid};
						print TEXOUT $student_round_points{$student->id."-".$round->name."-".$judgeid} if $student_round_points{$student->id."-".$round->name."-".$judgeid};
					}
					print TEXOUT "}\n";
				}
			}


			print TEXOUT " } & ";
		}

		print TEXOUT " \\parbox{1in}{";
		
		print TEXOUT "\\vspace{1mm}\n";

		print TEXOUT "{\\Large \\bf ".$entry_wins{$entry}."--".$entry_losses{$entry}."}\n";
		print TEXOUT " \\hspace{4mm} ";
		print TEXOUT "\\footnotesize\n";

		my $limit;

		print TEXOUT " \\parbox{.4in}{";

		foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
			next if ${$desc_ref}{$key} eq "W";
			next if $limit++ > 1;
			my $value = ${$tbs_ref}{$entry->id."-".$key};
			$value = sprintf("%.1f", $value);
			$value =~ s/\.(?:|.*[^0]\K)0*\z//;
			print TEXOUT Tab::texify($value);
			print TEXOUT "\n \n";
		}

		print TEXOUT " } ";

		if ($entry_max_judges{$entry->id} > 1) { 
			my $factor = 2.5 * $entry_max_judges{$entry->id};
			print TEXOUT "\\vspace{".$factor."mm}";
		}

		print TEXOUT "\\vspace{3mm}\n \\newline\n";

		foreach my $student (@students) { 
		
			undef $limit;

			foreach my $key (sort {$a <=> $b} keys %{$student_desc_ref}) {

				next if ${$student_desc_ref}{$key} eq "W";
				next if $limit++ > 2;

				print TEXOUT "\\parbox{.31in}{ ";
				print TEXOUT "\\truncate{.31in}{ ";
				my $value = ${$student_tbs_ref}{$student->id."-".$key};
				$value = sprintf("%.1f", $value);
				$value =~ s/\.(?:|.*[^0]\K)0*\z//;
				print TEXOUT Tab::texify($value);
				print TEXOUT "} } ";
			}


			if ($entry_max_judges{$entry->id} > 1) { 
				my $factor = 1.3 * $entry_max_judges{$entry->id};
				print TEXOUT "\\vspace{".$factor."mm}";
			}
			
			print TEXOUT "\n \n";
		}

		print TEXOUT " } ";
		
		print TEXOUT "\\\\ \n";

		print TEXOUT "\\hline\n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

	}

	close TEXOUT;
    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );

</%init>

