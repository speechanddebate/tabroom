<%args>
	$tourn
</%args>
<%perl>

	my @regions = $m->comp('/funclib/tourn_regions.mas', tourn => $tourn);
	my @entries = $m->comp("/funclib/tourn_entries.mas", tourn => $tourn, by_region => 'yesm');

	my %entry_points;
	my %entries_by_region = ();

	my %entry_code = map {$_->id => $_->code} @entries;

	foreach my $entry (@entries) { 
		next if $entry->dq;
		push @{$entries_by_region{$entry->region}}, $entry->id;
		$entry_points{$entry->id} = $entry->setting("sweeps");
	}

    my $dbh = Tab::DBI->db_Main();
    
    my $sth = $dbh->prepare("
		select distinct ballot_value.value, entry.id, ballot_value.id
		from ballot_value, ballot, entry, event
		where ballot_value.tag = \"rank\"
		and ballot_value.ballot = ballot.id
		and ballot.entry = entry.id
		and entry.event = event.id
		and event.tourn = ".$tourn->id."
		group by ballot_value.id
		order by entry.id
	");
    
    $sth->execute();

    while(my ($value, $entry, $id)  = $sth->fetchrow_array() ) { 
		my $points = 6 - $value;
		$points = 1 if $points < 1;
		$entry_points{$entry} += $points;
    }   
	
	my %region_points = ();
	my %counted_entries = ();

	foreach my $region (@regions) { 

		my @entries = sort {$entry_points{$b} <=> $entry_points{$a}} @{$entries_by_region{$region->id}} if $entries_by_region{$region->id};

		foreach (1 .. 10) { 
            my $counted_entry = shift @entries;
            next unless $counted_entry;
            $region_points{$region->id} += $entry_points{$counted_entry};
			$counted_entries{$region->id} .= $entry_code{$counted_entry}.": ".$entry_points{$counted_entry}."\n";
		}

	}

	return  \%region_points, \@regions, \%counted_entries;

</%perl>

