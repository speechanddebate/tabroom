<%args>
	$round
</%args>
<%init>

	return unless $round;

	my $event = $round->event;
	my $tourn = $event->tourn;
	my $seed = $tourn->start->epoch;

	my $speaker_max_scores = $event->setting("speaker_max_scores");

	my $tb_set_id = $event->setting("speaker_tbset");
	my $tb_set = Tab::TiebreakSet->retrieve($tb_set_id) if $tb_set_id;

	unless ($tb_set) {  
		my $err = "Event ".$event->name." does not have a speaker awards tiebreaker set applied to it.  Please pick one and try again";
		$m->redirect("/setup/events/tabbing.mhtml?event_id=".$event->id."&err=$err");
	}

	my $round_robin++ if $event->setting("round_robin");
	undef $round_robin if $round->type eq "elim" || $round->type eq "final";

	#Deduplicate Ballots
	$m->comp("/funclib/event_dedupe.mas", event => $event);

	my %student_name = map {$_->id => $_->first." ".$_->last} $m->comp("/funclib/event_students.mas",  event => $event);

	#Settings
	my $mfl_time_violation = $tb_set->setting("mfl_time_violation");
	my $truncate = $tb_set->setting("truncate_ranks_to") if $tb_set->setting("truncate_ranks_to");
	my $truncate_to_smallest = $tb_set->setting("truncate_to_smallest");
	my $noshows_never_break = $tb_set->setting("noshows_never_break");
	undef $noshows_never_break if $speaker_max_scores;

	my %used_tier = (); 
	my $all;
	my $elim;

	my %tb_tiers = ();
	my %tbid_tiers = ();

	foreach my $tb ($tb_set->tiebreaks) { 
		$used_tier{$tb->count}++;
		$all++ if $tb->count eq "all";
		$elim++ if $tb->count eq "elim";
		push @{$tb_tiers{$tb->priority}}, $tb;
		push @{$tbid_tiers{$tb->priority}}, $tb->id;
	}   

	# Get the data you'll need for Teh Sortingz.
	my $dbh = Tab::DBI->db_Main();

    my %entry_wins;

    my %entry_scores;
    my %entry_students;
    my %student_panels;
	my %student_round_scores;
    my %student_school;
    my %student_event;
    my %student_code;
    my %student_dq;
    my %student_novice;
    my %student_noshow;

    my %student_round_noshow;
	my %student_round_bye;
	my %student_bye;

	my %student_entry;

	my %entry_ranks;  		#For opp_ranks calculation
	my %entry_points;		#For opp_points calculation

    my %score_student;
    my %score_tag;
    my %score_value;
    my %score_panel;
    my %score_judge;
    my %score_event;
	my %score_chair;
	my %score_tv;

	my %round_panels;

	my %panel_letter;
	my %panel_roundname;
	my %panel_entries;

	my @rounds;
	my %round_type;
	my %round_name;

	my @scores;
	my @students;
	my @entries;

	my $last_elim_wins;

	if ($all) { 

		my $sth = $dbh->prepare("
			select value.id, student.id, value.student, student.first, student.last, student.novice, entry.id, entry.code, entry.dq, round.type, round.name, round.id, value.tag, value.value, event.id, panel.id, 
			ballot.judge, ballot.noshow, ballot.tv, panel.letter, entry.school, ballot.chair, ballot.bye, panel.bye
			from ballot_value value, ballot, panel, round, event, entry, entry_student, student
			where value.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and not exists ( select round_setting.id from round_setting where  round_setting.tag = 'ignore_results' and round_setting.round = round.id)
			and round.event = event.id
			and event.id = ".$event->id."
			and ballot.entry = entry.id
			and entry.dropped != 1
			and entry.waitlist != 1
			
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			group by value.id
			order by event.id, round.name
		");

		$sth->execute();

		while (my ($id, $student, $value_student, $first, $last, $novice, $entry, $code, $dq, $type, $roundname, $round, $tag, $value, $event, $panel, $judge, $noshow, $tv, $letter,  $school, $chair, $bye, $pbye)  = $sth->fetchrow_array() ) {

			$student = $value_student if $value_student;

			push @rounds, $round;
			$round_type{$round} = $type;
			$round_type{$round} = "prelim" if $type eq "preset" || $type eq "highhigh" || $type eq "highlow" || $type eq "random" || $type eq "power";
			$round_name{$round} = $roundname;
			push @{$round_panels{$round}}, $panel;

			push @students, $student;
			push @entries, $entry;
			push @{$entry_scores{$entry}}, $id;
			push @{$entry_students{$entry}}, $student;
			push @{$student_panels{$student}}, $panel;
			push @{$student_round_scores{$student."-".$round}}, $id;

			$student_school{$student} = $school;
			$student_novice{$student} = $novice;
			$student_event{$student} = $event;
			$student_code{$student} = $code;
			$student_dq{$student} = $dq if $dq;

			$student_noshow{$student}++ if $noshow;
			$student_round_noshow{$student."-".$round}++ if $noshow;

			$student_round_bye{$student."-".$round}++ if $bye;

			$student_round_bye{$student."-".$round}++ if $pbye;

			$student_bye{$student}++ if $bye;
			$student_bye{$student}++ if $pbye;

			$student_entry{$student} = $entry;

			push @scores, $id;
			$score_tag{$id} = $tag;
			$score_student{$id} = $student;
			$score_value{$id} = $value;
			$score_panel{$id} = $panel;
			$score_judge{$id} = $judge;
			$score_event{$id} = $event;
			$score_chair{$id}++ if $chair;
			$score_tv{$id} = $tv if $tv;

			$panel_letter{$panel} = $letter;
			$panel_roundname{$panel} = $roundname;
			push @{$panel_entries{$panel}}, $entry;

		}

	} else { 

		foreach my $key (keys %used_tier) { 

			if ($key eq "last elim" || $key eq "last_elim") { 

				%entry_wins = $m->comp("/funclib/entry_wins.mas", event => $event, round => $round, last => 1);

				$last_elim_wins++;

				my $sth = $dbh->prepare("
					select value.id, student.id, value.student, student.first, student.last, student.novice, entry.id, entry.code, entry.dq, round.type, round.name, round.id, value.tag, value.value, event.id, panel.id, 
			ballot.judge, ballot.noshow, ballot.tv, panel.letter, entry.school, ballot.chair, ballot.bye, panel.bye
					from ballot_value value, ballot, panel, round, event, entry, entry_student, student
					where value.ballot = ballot.id
					and ballot.panel = panel.id
					and panel.round = round.id
					and not exists ( select round_setting.id from round_setting where  round_setting.tag = 'ignore_results' and round_setting.round = round.id)
					and round.event = event.id
					and round.id = ".$round->id."
					and ballot.entry = entry.id
					and entry.dropped != 1
					and entry.waitlist != 1
					
					and entry.id = entry_student.entry
					and entry_student.student = student.id
					group by value.id
					order by event.id, round.name
				");

				$sth->execute();

				while (my ($id, $student, $value_student, $first, $last, $novice, $entry, $code, $dq, $type, $roundname, $round, $tag, $value, $event, $panel, $judge, $noshow, $tv, $letter,  $school, $chair, $bye, $pbye)  = $sth->fetchrow_array() ) {
			
					$student = $value_student if $value_student;

					push @rounds, $round;
					$round_type{$round} = $type;
					$round_type{$round} = "prelim" if $type eq "preset" || $type eq "highhigh" || $type eq "highlow" || $type eq "random" || $type eq "power";
					$round_name{$round} = $roundname;
					push @{$round_panels{$round}}, $panel;

					push @students, $student;
					push @entries, $entry;
					push @{$entry_scores{$entry}}, $id;
					push @{$entry_students{$entry}}, $student;
					push @{$student_panels{$student}},$panel;
					push @{$student_round_scores{$student."-".$round}}, $id;

					$student_school{$student} = $school;
					$student_novice{$student} = $novice;
					$student_event{$student} = $event;
					$student_code{$student} = $code;
					$student_dq{$student} = $dq if $dq;

					$student_noshow{$student}++ if $noshow;
					$student_round_noshow{$student."-".$round}++ if $noshow;

					$student_round_bye{$student."-".$round}++ if $bye;
					$student_round_bye{$student."-".$round}++ if $pbye;
					$student_bye{$student}++ if $bye;
					$student_bye{$student}++ if $pbye;

					$student_entry{$student} = $entry;

					push @scores, $id;
					$score_tag{$id} = $tag;
					$score_student{$id} = $student;
					$score_value{$id} = $value;
					$score_panel{$id} = $panel;
					$score_judge{$id} = $judge;
					$score_event{$id} = $event;
					$score_chair{$id}++ if $chair;
					$score_tv{$id} = $tv;
					
					$panel_letter{$panel} = $letter;
					$panel_roundname{$panel} = $roundname;
					push @{$panel_entries{$panel}}, $entry;
				}

			} else {

				my $sth = $dbh->prepare("
					select value.id, student.id, value.student, student.first, student.last, student.novice, entry.id, entry.code, entry.dq, round.type, round.name, round.id, value.tag, value.value, event.id, panel.id, 
					ballot.judge, ballot.noshow, ballot.tv, panel.letter, entry.school, ballot.chair, ballot.bye, panel.bye
					from ballot_value value, ballot, panel, round, event, entry, entry_student, student
					where value.ballot = ballot.id
					and ballot.panel = panel.id
					and panel.round = round.id
					and not exists ( select round_setting.id from round_setting where  round_setting.tag = 'ignore_results' and round_setting.round = round.id)
					and round.event = event.id
					and event.id = ".$event->id."
					and round.name <= ".$round->name."
					and ballot.entry = entry.id
					and entry.dropped != 1
					and entry.waitlist != 1
					
					and entry.id = entry_student.entry
					and entry_student.student = student.id
					group by value.id
					order by event.id, round.name
				");

				$sth->execute();

				while (my ($id, $student, $value_student, $first, $last, $novice, $entry, $code, $dq, $type, $roundname, $round, $tag, $value, $event, $panel, $judge, $noshow, $tv, $letter,  $school, $chair, $bye, $pbye)  = $sth->fetchrow_array() ) {

					$student = $value_student if $value_student;

					push @rounds, $round;
					$round_type{$round} = $type;
					$round_type{$round} = "prelim" if $type eq "preset" || $type eq "highhigh" || $type eq "highlow" || $type eq "random" || $type eq "power";
					$round_name{$round} = $roundname;
					push @{$round_panels{$round}}, $panel;

					push @students, $student;
					push @entries, $entry;
					push @{$entry_scores{$entry}}, $id;
					push @{$entry_students{$entry}}, $student;
					push @{$student_panels{$student}},$panel;
					push @{$student_round_scores{$student."-".$round}}, $id;

					$student_school{$student} = $school;
					$student_novice{$student} = $novice;
					$student_event{$student} = $event;
					$student_code{$student} = $code;
					$student_dq{$student} = $dq if $dq;

					$student_noshow{$student}++ if $noshow;
					$student_round_noshow{$student."-".$round}++ if $noshow;

					$student_round_bye{$student."-".$round}++ if $bye;
					$student_round_bye{$student."-".$round}++ if $pbye;
					$student_bye{$student}++ if $bye;
					$student_bye{$student}++ if $pbye;


					$student_entry{$student} = $entry;

					push @scores, $id;
					$score_tag{$id} = $tag;
					$score_student{$id} = $student;
					$score_value{$id} = $value;
					$score_panel{$id} = $panel;
					$score_judge{$id} = $judge;
					$score_event{$id} = $event;
					$score_chair{$id}++ if $chair;
					$score_tv{$id} = $tv;

					$panel_letter{$panel} = $letter;
					$panel_roundname{$panel} = $roundname;
					push @{$panel_entries{$panel}}, $entry;

				}
			}
		}
	}

	unless ($speaker_max_scores) { 

		my $bye_sth = $dbh->prepare("
			select entry_student.student, ballot.entry, panel.id, panel.round, panel.bye, ballot.bye, ballot.noshow
			from panel, ballot, round, entry_student
			where round.event = ".$event->id."
			and panel.round = round.id
			and not exists ( select round_setting.id from round_setting where  round_setting.tag = 'ignore_results' and round_setting.round = round.id)
			and round.name <= ".$round->name."
			and ballot.panel = panel.id
			and entry_student.entry = ballot.entry
			and not exists ( 
				select ballot_value.id
				from ballot_value
				where ballot_value.ballot = ballot.id
				and ballot_value.student = entry_student.student
			)
			group by entry_student.student
		");

		$bye_sth->execute();
		while (my ($student, $entry, $panel, $round, $pbye, $bbye, $noshow)  = $bye_sth->fetchrow_array() ) {

			if ($bbye) { 
				$student_round_bye{$student."-".$round}++;
				$student_bye{$student}++;
			} elsif ($noshow) { 
				$student_round_noshow{$student."-".$round}++;
			} else { 
				$student_round_bye{$student."-".$round}++;
				$student_bye{$student}++;
			}
		}
	}

	my %rseen = (); 
	@rounds = grep { ! $rseen{$_}++ } @rounds;

	my @all_rounds;

	my %round_done;
	my $round_name = $round->name;

	foreach my $all_round (@rounds) { 

		next if $round_name{$all_round} > $round_name;  # Do not measure the future
		push @all_rounds, $all_round;

		#Uniq the panels so there's no double counting
		my %pseen = (); 
		@{$round_panels{$all_round}} = grep { ! $pseen{$_}++ } @{$round_panels{$all_round}};

		#Uniq the panel entries so there's no double counting;
		foreach my $panel (@{$round_panels{$all_round}}) {   
			my %eseen = (); 
			@{$panel_entries{$panel}} = grep { ! $eseen{$_} ++ } @{$panel_entries{$panel}};
		}
	}

	foreach my $entry (@entries) { 
		my %studentseen = (); 
		@{$entry_students{$entry}} = grep { ! $studentseen{$_} ++ } @{$entry_students{$entry}};
	}

	my %dq_panel_threshold = ();

	my @keys = keys %student_dq;

	my %done_entry;

	my $event_type = $event->type;

	if ($event_type eq "speech" || $event_type eq "congress") { 

		foreach my $student (keys %student_dq) { 
			next unless $student_dq{$student};

			my $entry = $student_entry{$student};

			next if $done_entry{$entry}++;

			foreach my $score (@{$entry_scores{$entry}}) { 
				next unless $score_tag{$score} eq "rank";
				$dq_panel_threshold{$score_panel{$score}."-".$score_judge{$score}} = $score_value{$score};
			}
		}
	}

	my %round_truncate = ();

	if ($truncate_to_smallest) { 

		foreach my $round (@all_rounds) { 

			$round_truncate{$round} = $truncate; #Upper limit is the hard cap, if any

			foreach my $panel (@{$round_panels{$round}}) { 
				my $size = scalar @{$panel_entries{$panel}} if $panel_entries{$panel};
				$round_truncate{$round} = $size unless $round_truncate{$round};
				$round_truncate{$round} = $size if $round_truncate{$round} > $size;
			}
		}
	}

	my %sseen = (); 
	@students = grep { ! $sseen{$_} ++ } @students;

	my %eseen = (); 
	@entries = grep { ! $sseen{$_} ++ } @entries;

	my $bye_min;

	if ($round_robin) { 
		foreach my $student (sort {$student_bye{$b} <=> $student_bye{$a}} @students) { 
			$bye_min = $student_bye{$student} if $student_bye{$student} && not defined $bye_min;
			$bye_min = $student_bye{$student} if $student_bye{$student} < $bye_min;
		}
	}


	if ($round && ($round->type eq "elim" || $round->type eq "final")) { 

		#Eliminate everyone who has not advanced to the elim round in question.

		my @counted;
		my %last_round;
		my %done;

		foreach my $student (@students) { 

			next if $done{$student}++;

			foreach my $panel (@{$student_panels{$student}}) { 
				$last_round{$student} = $panel_roundname{$panel} if $last_round{$student} < $panel_roundname{$panel};
			}

			next if $last_round{$student} < $round_name;
			push @counted, $student;
		}

		@students = @counted;
	}

	my %entry_tbs = ();
	my %student_tbs = ();

	my %tier_dir = ();
	my %tier_descs = ();
	my %tier_long_descs = ();

	my $win_loss;
	my $judge_var;
	my $judge_var2;

	my @rinr_rounds;

	foreach my $key (sort keys %tb_tiers) { 

		foreach my $tb (sort {$a <=> $b} @{$tb_tiers{$key}}) { 

			$win_loss++ if $tb->name eq "winloss";
			$win_loss++ if $tb->name eq "ballots";
			$win_loss++ if $tb->name eq "opp_wins";
			$judge_var++ if $tb->name eq "judgevar";
			$judge_var2++ if $tb->name eq "judgevar2";

			if ($tb->name eq "rankinround") { 
				foreach my $round (@all_rounds) { 
					if ($round_type{$round} eq $tb->count) { 
						push @rinr_rounds, $round;
					} elsif ($tb->count eq "all") { 
						push @rinr_rounds, $round;
					}
				}
			}
		}
	}

	%entry_wins = $m->comp("/funclib/entry_wins.mas", event => $event, round => $round) if $win_loss && not defined $last_elim_wins;

	my ($judge_avg_ref, $judge_ballot_count_ref, $judge_total_ref, $judge_stddev_ref, $total_avg, $total_std, $judge_z2_avg_ref, $judge_z2_ballot_count_ref, $judge_z2_total_ref, $judge_z2_stddev_ref) = $m->comp("/funclib/judge_points_average.mas", round => $round, event => $event) if $judge_var || $judge_var2;

	my %entry_rankinround = ();

	my %rinr_seen = (); 
	@rinr_rounds = grep { ! $rinr_seen{$_} ++ } @rinr_rounds;

	foreach my $round_id (@rinr_rounds) { 

		my $round = Tab::Round->retrieve($round_id);

		my ($entries_ref, @others) = $m->comp("/tabbing/results/order_entries.mas", round => $round);

		my %absolute_rank;

		foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
			foreach my $entry (@{${$entries_ref}{$key}}) {
				$absolute_rank{$entry} = $key;
			}
		}

		foreach my $panel (@{$round_panels{$round}}) { 
			my $rank = 1;

			foreach my $entry (sort {$absolute_rank{$a} <=> $absolute_rank{$b}} @{$panel_entries{$panel}}) { 
				$entry_rankinround{$entry."-".$round} = $rank;
				$rank++;
			}
		}
	}

	my $opp_ranks;
	my $opp_points;
	my $ranks;
	my $points;

	my %max_scores;

	ENTRY:
	foreach my $student (@students) { 

		foreach my $this_round (@rounds) { 
		
			my $point_count;
			my $rank_count;

			next if $student_round_bye{$student."-".$this_round};
			next if $round_name{$this_round} > $round_name;

			my %erseen = ();  

			@{$student_round_scores{$student."-".$this_round}} = grep { ! $erseen{$_}++ } @{$student_round_scores{$student."-".$this_round}};

			unless (@{$student_round_scores{$student."-".$this_round}}) { 	
				$student_noshow{$student}++;
				next ENTRY;
			}

			foreach my $score (@{$student_round_scores{$student."-".$this_round}}) {
				$point_count++ if $score_tag{$score} eq "points";
				$rank_count++ if $score_tag{$score} eq "rank";
			}
		
			$max_scores{$this_round}{"points"} = $point_count if $point_count > $max_scores{"points"};
			$max_scores{$this_round}{"rank"} = $point_count if $point_count > $max_scores{"rank"};

		}

	}

	foreach my $key (sort keys %tb_tiers) { 

		my $tier_desc;
		my $tier_long_desc;
		foreach my $tb (sort {$a <=> $b} @{$tb_tiers{$key}}) { 

			my $tb_name = $tb->name;

			$tier_dir{$key} = "down" if (
				$tb_name eq "winloss" ||
				$tb_name eq "reciprocals" ||
				$tb_name eq "points" ||
				$tb_name eq "ballots" ||
				$tb_name eq "judgepref" ||
				$tb_name eq "opp_points" ||
				$tb_name eq "opp_wins" ||
				$tb_name eq "judgevar" ||
				$tb_name eq "judgevar2");

			$tier_dir{$key} = "up" if (
				$tb_name eq "ranks" ||
				$tb_name eq "opp_ranks" ||
				$tb_name eq "chair_ranks" ||
				$tb_name eq "rankinround" ||
				$tb_name eq "coinflip");

			$tier_desc .= "+" if $tier_desc;
			$tier_long_desc .= "+" if $tier_long_desc;

			$tier_desc .= "Rnk" if $tb_name eq "ranks";
			$tier_long_desc .= "Ranks" if $tb_name eq "ranks";

			$tier_desc .= "Pts" if $tb_name eq "points";
			$tier_long_desc .= "Speaker Points" if $tb_name eq "points";

			$tier_desc .= "Rcp" if $tb_name eq "reciprocals";
			$tier_long_desc .= "Reciprocals" if $tb_name eq "reciprocals";

			$tier_desc .= "JP" if $tb_name eq "judgepref";
			$tier_long_desc .= "Judge Preferences" if $tb_name eq "judgepref";

			$tier_desc .= "Rand" if $tb_name eq "coinflip";
			$tier_long_desc .= "Random" if $tb_name eq "coinflip";

			$tier_desc .= "ORk" if $tb_name eq "opp_ranks";
			$tier_long_desc .= "Opponents Ranks" if $tb_name eq "opp_ranks";

			$tier_desc .= "CRk" if $tb_name eq "chair_ranks";
			$tier_long_desc .= "Chair Judge Ranks" if $tb_name eq "chair_ranks";

			$tier_desc .= "SRk" if $tb_name eq "rankinround";
			$tier_long_desc .= "Rank within Section" if $tb_name eq "rankinround";

			$tier_desc .= "W" if $tb_name eq "winloss";
			$tier_long_desc .= "Wins" if $tb_name eq "winloss";

			$tier_desc .= "OpW" if $tb_name eq "opp_wins";
			$tier_long_desc .= "Opponent Wins" if $tb_name eq "opp_wins";

			$tier_desc .= "OPt" if $tb_name eq "opp_points";
			$tier_long_desc .= "Opponent Points" if $tb_name eq "opp_points";

			$tier_desc .= "Z" if $tb_name eq "judgevar";
			$tier_long_desc .= "Judge Points Variance" if $tb_name eq "judgevar";

			$tier_desc .= "Z2" if $tb_name eq "judgevar2";
			$tier_long_desc .= "Adjusted Judge Points Variance" if $tb_name eq "judgevar2";

			$tier_desc .= "Bal" if $tb_name eq "ballots";
			$tier_long_desc .= "Ballot Total" if $tb_name eq "ballots";

			$points++ if $tb_name eq "points";
			$ranks++ if $tb_name eq "ranks";

			$opp_points++ if $tb_name eq "opp_points" && not defined $points;
			$opp_ranks++ if $tb_name eq "opp_ranks" && not defined $ranks;

			my $tb_highlow = $tb->highlow;

			if ($tb_highlow) {

				$tier_desc .= " -".$tb->highlow_count;
				$tier_long_desc .= " -".$tb->highlow_count;

				$tier_desc .= "HL" if $tb_highlow == 1 || $tb_highlow == 2;
				$tier_long_desc .= " Best & Worst" if $tb_highlow == 1 || $tb_highlow == 2;

				$tier_desc .= "H" if $tb_highlow == 3;
				$tier_long_desc .= " Best" if $tb_highlow == 3;

				$tier_desc .= "L" if $tb_highlow == 4;
				$tier_long_desc .= " Worst" if $tb_highlow == 4;
			}

			$tier_long_desc .= " in ".ucfirst($tb->count) if $tb->count;
			$tier_long_desc .= " Rounds" if $tb->count && ($tb->count eq "all");
			$tier_long_desc .= "s" if $tb->count && ($tb->count eq "prelim" || $tb->count eq "elim");
			$tier_long_desc .= " multplied by ".$tb->multiplier if $tb->multiplier != 1;
			$tier_desc .= " x".$tb->multiplier if $tb->multiplier != 1;

			$points++ if $opp_points;
			$opp_ranks++ if $opp_ranks;

		}

		$tier_descs{$key} = $tier_desc;
		$tier_long_descs{$key} = $tier_long_desc;

		my %tb_name;
		my %tb_rounds;
		my %tb_highlow;
		my %tb_highlow_count;
		my %tb_multiplier;

		foreach my $tb (@{$tb_tiers{$key}}) { 

			$tb_name{$tb->id} = $tb->name;
			$tb_highlow{$tb->id} = $tb->highlow;
			$tb_highlow_count{$tb->id} = $tb->highlow_count;
			$tb_multiplier{$tb->id} = $tb->multiplier;

			foreach my $oround (@all_rounds) { 
				push (@{$tb_rounds{$tb->id}}, $oround) if $round_type{$oround} eq $tb->count;
				push (@{$tb_rounds{$tb->id}}, $oround) if $tb->count eq "all";
				push (@{$tb_rounds{$tb->id}}, $oround) if ($round_type{$oround} eq "elim" || $round_type{$oround} eq "final") && ($tb->count eq "last elim" || $tb->count eq "last_elim");
			}

		}

		foreach my $student (@students) { 

			my $entry = $student_entry{$student};

			my %seen = (); 
			@{$student_panels{$student}} = grep { ! $seen{$_} ++ } @{$student_panels{$student}};

			my $tier_total;

			foreach my $tb (@{$tbid_tiers{$key}}) { 

				my $name = $tb_name{$tb};
				next unless $tb_rounds{$tb};
				my @rounds = @{$tb_rounds{$tb}};

				my $tb_highlow = $tb_highlow{$tb};
				my $tb_highlow_count = $tb_highlow_count{$tb};

				my $total; 

				if ($name eq "winloss") { 

					$total += 100 * $entry_wins{$entry};

				} elsif ($name eq "ranks" || $name eq "reciprocals" || $name eq "chair_ranks") { 

					my @drop_best;
					my @drop_worst;

					my $count;
					my $bye; 

					foreach my $this_round (@rounds) { 

						my $done; 

						foreach my $score (@{$student_round_scores{$student."-".$this_round}}) { 

							if ($score_tag{$score} eq "rank") { 
							
								$done++;

								next if $name eq "chair_ranks" && $score_chair{$score} < 1;
							
								my $rank = $score_value{$score};

								if ($dq_panel_threshold{$score_panel{$score}."-".$score_judge{$score}}) { 
									$rank-- if $dq_panel_threshold{$score_panel{$score}."-".$score_judge{$score}} < $rank;
								}

								# Bump the rank up if it's a time violation.  Truncation below will correct if this 
								# makes it bigger (ie if the TV was last place);
								
								$rank++ if $score_tv{$score} && $mfl_time_violation;

								# Promote anyone over the hard cap for truncation
								$rank = $truncate if $truncate && $rank > $truncate && $round_type{$this_round} eq "prelim";

								# Promote anyone over the per-round floating cap for truncation
								$rank = $round_truncate{$this_round} if $truncate_to_smallest 
									&& $rank > $round_truncate{$this_round} && $round_type{$this_round} eq "prelim";

								if ($event_type eq "speech" || $event_type eq "congress") { 

									#Rank cannot be greater than the size of the round

									$rank = scalar @{$panel_entries{$score_panel{$score}}} 
										if $rank > scalar @{$panel_entries{$score_panel{$score}}};
								}

								$total += 100 * $rank if $name eq "ranks" || $name eq "chair_ranks";
								$total += sprintf("%d", (1 / $rank) * 100) if $rank && $name eq "reciprocals";
								$count++ if $name eq "ranks";

								if ($tb_highlow) {  

									#drop the best

									if ($tb_highlow == 1 || $tb_highlow == 2 || $tb_highlow == 3) {

										if (scalar @drop_best < $tb_highlow_count) {
											push @drop_best, $rank;
										} else {
											my $least_best = pop @drop_best;
											push @drop_best, $least_best if $least_best <= $rank;
											push @drop_best, $rank if $least_best > $rank;
										}

										@drop_best = sort {$a <=> $b} @drop_best;
									}

									#drop the worst

									if ($tb_highlow == 1 || $tb_highlow == 2 || $tb_highlow == 4) {

										if (scalar @drop_worst < $tb_highlow_count) {
											push @drop_worst, $rank;
										} else {
											my $least_worst = pop @drop_worst;
											push @drop_worst, $least_worst if $least_worst >= $rank;
											push @drop_worst, $rank if $least_worst < $rank;
										}

										@drop_worst = sort {$b <=> $a} @drop_worst;
									}
								}
							}
						}

						unless ($done) { 
							if ($student_round_bye{$student."-".$this_round}) { 
								$bye++ 
							} elsif ($student_round_noshow{$student."-".$this_round}) { 
								$bye++ 
							}
						}
					}

					$bye = $bye - $bye_min if $round_robin;

					if ($bye) { 
						my $average = sprintf("%d", 100 * ($total / $count)) if $count;
						$total += $average * $bye;
					}

                    foreach my $rank (@drop_best, @drop_worst) {
                        $total -= 100 * $rank if $name eq "ranks" || $name eq "chair_ranks";
                        $total -= sprintf("%d", 100 * (1 / $rank)) if $name eq "reciprocals";
						$count-- if $name eq "ranks";
                    }

					$entry_ranks{$entry} = sprintf("%d", ($total / $count)) if $count;

				} elsif ($name eq "points") { 

					my @scores; 
					my %round_count;

					ROUND:
					foreach my $this_round (@rounds) { 

						foreach my $score (@{$student_round_scores{$student."-".$this_round}}) { 
							next unless $score_tag{$score} eq "points";
							$round_count{$this_round}++;
							push @scores, $score_value{$score};
						}

					}

					my $average; 

					foreach my $score (@scores) { 
						$average += $score; 
					}

					$average = $average / (scalar @scores) if @scores; 

					foreach my $this_round (@rounds) { 

						my $diff = $max_scores{$this_round}{"points"} - $round_count{$this_round};

						while ($diff > 0) { 
							push @scores, $average;
							$diff--;
						}

					}

					@scores = sort {$a <=> $b} @scores;

					if ($speaker_max_scores) { 
						while (scalar @scores > $speaker_max_scores) { 
							shift @scores; 
						}
					}

					if ($tb_highlow == 1 || $tb_highlow == 3) {
						# Drop the best
						foreach (1 .. $tb_highlow_count) { 
							pop @scores;
						}
					}

					if ($tb_highlow == 1 || $tb_highlow == 4) { 
						# Drop the worst
						foreach (1 .. $tb_highlow_count) { 
							shift @scores;
						}
					}

					my $count;

                    foreach my $score (@scores) { 
                        $total += sprintf "%d", (100 * $score);  #Round to two digits.  Otherwise sorting is all kablooey.
                    }

					$entry_points{$entry} += sprintf("%.2f", ($total / scalar @scores)) if @scores; 

				} elsif ( $name eq "ballots") { 

					foreach my $this_round (@rounds) { 
						foreach my $score (@{$student_round_scores{$student."-".$this_round}}) { 
							if ($score_tag{$score} eq "ballot") { 
								$total++ if $score_value{$score} == 1;
							}
						}
					}
						
				} elsif ( $name eq "coinflip") { 

					# This is only semi random; product of the date epoch and
					# the random student ID's last four digits.  But it will be
					# the same every time this function is run and random
					# enough in that it cannot be pre-guessed easily.

					my $random_seed = $entry * $seed;
					$total = substr($random_seed, -8, -3);

				} elsif ( $name eq "judgepref") { 

					my $chosen_panel;
					my @chosen_entries;

					foreach my $this_round (@rounds) { 

						PANEL:
						foreach my $panel (@{$round_panels{$this_round}}) {    #Only counts in the current round;
							my @entries = @{$panel_entries{$panel}};
							next PANEL unless grep {$_ == $entry} @entries;
							$chosen_panel = $panel;
							@chosen_entries = @entries;
						} 

						my %beseen = (); 
						@chosen_entries = grep { ! $beseen{$_} ++ } @chosen_entries;

						my $entry_string;

						foreach my $okey (sort keys %tb_tiers) { 
							next if $key == $okey;
							$entry_string .= "-" if $entry_string;
							$entry_string .= $entry_tbs{$entry."-".$okey};
						}

						my @ties;

						foreach my $oentry (@chosen_entries) { 
							next if $oentry == $entry;
							my $test_string;
							foreach my $okey (sort keys %tb_tiers) { 
								next if $key == $okey;
								$test_string .= "-" if $test_string;
								$test_string .= $entry_tbs{$oentry."-".$okey};
							}
							push(@ties, $oentry) if $test_string eq $entry_string;
						}

						if (scalar @ties == 1) { 

							my $tie_id = shift @ties;

							my %judge_score = ();

							if ($chosen_panel && $entry) { 

								my %done;
								foreach my $score (@{$entry_scores{$entry}}) { 
									next if $done{$score}++;
									next unless $score_tag{$score} eq "rank";
									next unless $score_panel{$score} == $chosen_panel;
									$judge_score{$score_judge{$score}} = $score_value{$score};
								}

								foreach my $tie_score (@{$entry_scores{$tie_id}}) {
									next if $done{$tie_score}++;
									next unless $score_tag{$tie_score} eq "rank";
									next unless $score_panel{$tie_score} == $chosen_panel;
									$total++ if $score_value{$tie_score} > $judge_score{$score_judge{$tie_score}}; 
									#If my rank is better (lower) than the tie's rank, I get a JP point
								}
							}
						}
					}

				} elsif ( $name eq "rankinround") { 

					foreach my $this_round (@rounds) { 
						$total += (100 * $entry_rankinround{$entry."-".$this_round});
					}

				} elsif ( $name eq "opp_wins") { 

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_panels{$student}}) { 

						next if $panel_roundname{$panel} > $round_name;

						foreach my $other (@{$panel_entries{$panel}}) { 
							next if $other == $entry;
							$sub_total += $entry_wins{$other};
							$count++;
						}
					}

					$total += sprintf("%d", 100 * ($sub_total/$count)) if $count;

				} elsif ( $name eq "opp_points") { 

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_panels{$student}}) { 

						next if $panel_roundname{$panel} > $round_name;

						foreach my $other (@{$panel_entries{$panel}}) { 
							next if $other == $entry;
							$sub_total += $entry_points{$other} / (scalar @{$entry_students{$other}});
							$count++;
						}
					}

					$total += sprintf("%d", ($sub_total/$count)) if $count;

				} elsif ( $name eq "opp_ranks") { 

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_panels{$student}}) { 

						next if $panel_roundname{$panel} > $round_name;

						foreach my $other (@{$panel_entries{$panel}}) { 
							next if $other == $entry;
							$sub_total += $entry_ranks{$other};
							$count++;
						}
					}

					$total += sprintf("%d", ($sub_total/$count)) if $count;

				} elsif ( $name eq "judgevar") { 

					my $sub_total;
					my $count;
					my $bye;
						
					ROUND:
					foreach my $this_round (@rounds) { 
						
						if ($student_round_bye{$student."-".$this_round}) { 
							$bye++;
							next ROUND;
						}

						foreach my $score (@{$student_round_scores{$student."-".$this_round}}) { 

							next unless $score_tag{$score} eq "points";

							my $judge_avg  = ${$judge_avg_ref}{$score_judge{$score}};
							my $judge_stddev  = ${$judge_stddev_ref}{$score_judge{$score}};
							next unless $judge_stddev > 0;

							$sub_total += ( (  ($score_value{$score} - $judge_avg) / $judge_stddev) * $total_std) + $total_avg;
							$count++;

						}
					}

					if ($bye) { 
						my $average = $sub_total / $count if $count;
						$sub_total += $average * $bye;
					}

					$total += sprintf("%d", 100 * $sub_total);

				} elsif ($name eq "judgevar2") { 

					my $sub_total;
					my $bye;
					my $count;

					ROUND:
					foreach my $this_round (@rounds) { 

						if ($student_round_bye{$student."-".$this_round}) { 
							$bye++;
							next ROUND;
						}

						foreach my $score (@{$student_round_scores{$student."-".$this_round}}) { 

							next unless $score_tag{$score} eq "points";

							my $judge_avg  = ${$judge_avg_ref}{$score_judge{$score}};
							my $judge_stddev  = ${$judge_stddev_ref}{$score_judge{$score}};

							# These sample only the schools/stddevs for the
							# debaters the judge has judged, not all debaters.

							my $judge_sample_avg  = ${$judge_z2_avg_ref}{$score_judge{$score}};
							my $judge_sample_stddev  = ${$judge_z2_stddev_ref}{$score_judge{$score}};

							next unless $judge_stddev > 0;

							$sub_total += ( (  ($score_value{$score} - $judge_avg) / $judge_stddev) * $judge_sample_stddev) + $judge_sample_avg;
							$count++;

						}
					}

					if ($bye) { 
						my $average = $sub_total / $count if $count;
						$sub_total += $average * $bye;
					}

					$total += sprintf("%d", 100 * $sub_total);
				}
				
				$tier_total += $total * $tb_multiplier{$tb} if $tb_multiplier{$tb};

			}

			$entry_tbs{$entry."-".$key} = $tier_total;
			$student_tbs{$student."-".$key} = $tier_total;

		}

	}

	if ($opp_points || $opp_ranks) { 
		my $err;

		$err .= "Danger Will Robinson!<br />You have defined Opp Points as a tiebreaker without first defining Points as one.  That cannot work both technically and philosophically.  Fix please! <br /><br />" if $opp_points;

		$err .= "Danger Will Robinson!<br />You have defined Opp Ranks as a tiebreaker without first defining Ranks as one.  That cannot work both technically and philosophically.  Fix please!" if $opp_ranks;

		$m->redirect("/setup/rules/tiebreaks.mhtml?tb_set_id=".$tb_set->id."&err=$err");
	}

	foreach my $key (reverse sort keys %tb_tiers) { 
		@students = sort {$student_tbs{$a."-".$key} <=> $student_tbs{$b."-".$key} } @students if $tier_dir{$key} eq "up";
		@students = sort {$student_tbs{$b."-".$key} <=> $student_tbs{$a."-".$key} } @students if $tier_dir{$key} eq "down";
	}

	@students = sort { $student_noshow{$a} <=> $student_noshow{$b} } @students if $noshows_never_break;

	my $count;

	my %student_by_place = ();
	
	my $last_string;
	my $delayed_count;

	foreach my $student (@students) { 
	
		foreach my $key (reverse sort keys %tb_tiers) { 
			$student_tbs{$student."-".$key} = $student_tbs{$student."-".$key} / 100;
		}

		next if $student_dq{$student};

		my $tier_string;

		foreach my $key (sort keys %tb_tiers) { 
			$tier_string .= "-" if $tier_string;
			$tier_string .= $student_tbs{$student."-".$key};
		}

		if ($tier_string eq $last_string) { 
			$delayed_count++;
		} else {
			$count++;
			$count += $delayed_count;
			undef $delayed_count;
		}

		$last_string = $tier_string;
		push (@{$student_by_place{$count}}, $student);
	}

	undef %student_noshow if $speaker_max_scores;

	return (\%student_by_place, \%student_tbs, \%tier_descs, \%student_noshow, \%tier_dir, \%tier_long_descs, \%student_novice, \%student_name, \%student_code, \%student_school, \%student_entry);

</%init>
