<%args>
	$tourn
	$event_id => undef
	$round_id => undef
</%args>
<%init>

	use POSIX;

	my $event = Tab::Event->retrieve($event_id) if $event_id;
	my $round = Tab::Round->retrieve($round_id) if $round_id;

	unless ($event) { 
		$event = $tourn->events->first;
	}

	$m->abort unless $event;
	$m->abort unless $round;

	my @rounds = $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes")  if $event;

	unless ($round) { 
		$round = $rounds[0];
	} 

	my $novice = $event->setting("top_novice");
	undef $novice if $novice eq "none";
	my $team_points = $event->setting('team_points');

	my %is_novice = (); 

	if ($novice && $event) { 
		foreach my $novice ($m->comp("/funclib/event_novii.mas", event => $event)) { 
			$is_novice{$novice->id}++;
		}   
	}   

	my %entry_ballots = ();

	my %entry_names = $m->comp("/funclib/event_names.mas", event => $event);

	my @roundnames;

	if ($round) { 

		my $points;
		my $ranks;
		my $wins;

		next unless $round->tb_set;

		foreach my $tb ($round->tb_set->tiebreaks) { 
			$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
			$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
			$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
		}

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select distinct value.id, value.tag, value.value, ballot.entry, ballot.judge, panel.bye, ballot.bye, ballot.noshow, ballot.chair, round.name
			from round
			left join panel on panel.round  =round.id
			left join ballot on ballot.panel = panel.id
			left join ballot_value value on value.ballot = ballot.id
			where round.name <= ".$round->name."
			and round.event = ".$event->id."
			order by round.name, ballot.entry, ballot.chair, ballot.judge, CASE value.tag 
				WHEN ".' "ballot" then 1 when "rank" then 2 when "points" then 3 end'."
		");

		$sth->execute(); 

		my %entry_round;
		my %points_done;

		while (my ($id, $tag, $value, $entryid, $judge, $pbye, $bye, $noshow, $chair, $roundname) = $sth->fetchrow_array() ) { 

			push @roundnames, $roundname;

			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "points" && not defined $points;
			next if $tag eq "ballot" && not defined $wins;

			$entry_round{$entryid} = $roundname;

			if ($pbye) { 
				$entry_ballots{$entryid}{$roundname} .= "BYE,, "; 
			} elsif ($bye && not defined $tag) { 
				$entry_ballots{$entryid}{$roundname} .= "BYE,, "; 
			} elsif ($tag eq "ballot") { 

				if ($bye) { 
					$entry_ballots{$entryid}{$roundname} .= "BYE,, ";
				} elsif ($noshow) { 
					$entry_ballots{$entryid}{$roundname} .= "FFT,, " 
				} else { 
					$entry_ballots{$entryid}{$roundname} .= "W, " if $value > 0;
					$entry_ballots{$entryid}{$roundname} .= "L, " if $value < 1;
				}

			} else { 

				if ($tag eq "points") { 
					unless ($team_points && $points_done{$entryid."-".$roundname}++) { 
						$entry_ballots{$entryid}{$roundname} .= $value.", " if defined $value;
					}
				} else { 
					$entry_ballots{$entryid}{$roundname} .= $value.", " if defined $value;
				}
			}


		}

		my %seen = (); 
		@roundnames = grep { ! $seen{$_} ++ } @roundnames;
		@roundnames = sort @roundnames;

	}

	$round_id = $round->id if $round;

	my $codes = $event->setting("code_style") if $event;
	my $no_school++ if ($codes eq "school_number" || $codes eq "school_names" || $codes eq "initials" || $codes eq "school_name_only" || $codes eq "schoolname_code" || $codes eq "full_initials");

	my $filename = $tourn->name."-".$event->name."-Results";
	$filename =~ s/[\W_]//g;
	$filename = $filename.".csv";	

	$m->clear_buffer;
	$r->content_type('application/csv');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	my $equal_elims++ if $round && $round->tb_set->setting("equal_elims") && $round->type eq "elim";
	my $round_robin++ if $event->setting("round_robin") && $round->type ne "elim" && $round->type ne "final";

	my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("order_entries.mas", long_names => 1, round => $round);

	my %id_entry = map {$_->id => $_ } $event->entries;

	$m->print("Ranking,");
	$m->print("Code,");
	$m->print("Novice,") if $novice;
	$m->print("Name,") unless ($codes eq "names" || $codes eq "last_names" || $codes eq "names_lastfirst");
	$m->print("School,") unless ($no_school);
	$m->print("Section Rank,") if $equal_elims;
	$m->print("Section ID,") if $equal_elims;
	$m->print("Pod Rank,") if $round_robin;
	$m->print("Pod,") if $round_robin;

	foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) { 
		$m->print(${$long_desc_ref}{$key}.",");
	}

	$m->print("Raw Ballots\n");

	my $count = 1;

	if ($entries_ref) { 

		foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 

			my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
			undef $tie if $round->type eq "elim" && $event->type ne "speech" && $event->type ne "congress";

			foreach my $entry_id (@{${$entries_ref}{$key}}) { 

				my $entry = $id_entry{$entry_id};
				next unless $entry;

				$m->print("T-") if $tie;
				$m->print($key,",");
					
				$m->print($entry->code.",");
				$m->print("Novice,") if $novice && $is_novice{$entry_id};
				
				$m->print($entry_names{$entry->id}.",") unless ($codes eq "names" || $codes eq "last_names" || $codes eq "names_lastfirst");

				$m->print($entry->school->short_name.",") unless $no_school;

				if ($equal_elims || $round_robin) { 
					$m->print(${$panrank_ref}{$entry_id}.",");
					$m->print(${$panletter_ref}{$entry_id}.",");
				}

				foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) { 
					my $value = ${$tbs_ref}{$entry_id."-".$key};
					$value =~ s/\.(?:|.*[^0]\K)0*\z//;
					$value = sprintf("%.2f", $value) unless ${$desc_ref}{$key} eq "W" || ${$desc_ref}{$key} eq "H2H" || ${$desc_ref}{$key} eq "Bal";
					$m->print($value.",");
				}

				foreach my $roundname (@roundnames) { 
					$m->print("$entry_ballots{$entry_id}{$roundname} ");
				}

				$m->print("\n");

			}

		} 

	}

	$m->flush_buffer;
	$m->abort;

</%init>
