<%args>
	$tourn
	$sweep_set
</%args>
<%init>

	my $novice_only;

	my %skip_round;

	foreach my $rule ($sweep_set->rules) { 
		$novice_only++ if $rule->tag eq "novice_only" && $rule->value == 1;
		$skip_round{$rule->value}++;
	}

	my @events = $sweep_set->events;

	my %event_include = map {$_ => 1} @events;

	my @entries;
	my %entry_code;
	my %entry_event;
	my %entry_school;
	my %entry_manual;

	my $dbh = Tab::DBI->db_Main();

	my $entry_sth = $dbh->prepare("
		select entry.id, entry.code, entry.event, entry.school
		from entry, event
		where entry.event = event.id
		and event.tourn  = ".$tourn->id."
		order by entry.code
	");

    $entry_sth->execute();

    while (my ($id, $code, $event, $school)  = $entry_sth->fetchrow_array() ) { 
	
		next unless $event_include{$event};

		push @entries, $id;

		$entry_event{$id} = $event;
		$entry_school{$id} = $school;
		$entry_code{$id} = $code;

	}

	my @manual_sweeps = $m->comp("/funclib/event_entry_settings.mas", event => $event, tag => "sweeps");
	my %entry_manual = map {$_->entry->id => $_->value} @manual_sweeps;

	my $sth = $dbh->prepare("
		select value.id, entry.id, event.id, round.type, round.id, value.tag, value.value, panel.id, student.novice
		from ballot_value value, ballot, panel, round, event, entry, entry_student, student
		where value.ballot = ballot.id
		and ballot.panel = panel.id
		and panel.round = round.id
		and round.event = event.id
		and event.tourn = ".$tourn->id."
		and ballot.entry = entry.id
		and entry.dq != 1
		and entry.dropped != 1
		and entry.waitlist != 1
		and entry.unconfirmed != 1
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		group by value.id
		order by event.id, round.name
	");

    $sth->execute();

	my %event_scores;
	my %entry_scores;
	my %entry_panels;
	my %entry_round_panel;

	my %score_entry;
	my %score_type;
	my %score_tag;
	my %score_value;
	my %score_panel;
	my %score_event;
	my %score_novice;
	my %entry_novice;

	my @scores;

    while (my ($id, $entry, $event, $type, $round, $tag, $value, $panel, $novice)  = $sth->fetchrow_array() ) { 

		next unless $event_include{$event};
		next if $skip_round{$round};

		push @scores, $id;
		push @{$event_scores{$event}}, $id;
		push @{$entry_scores{$entry}}, $id;
		push @{$entry_panels{$entry}},$panel;

		$entry_round_panel{$entry."-".$round} = $panel;

		$score_tag{$id} = $tag;
		$score_type{$id} = $type;

		$score_entry{$id} = $entry;
		$score_value{$id} = $value;
		$score_panel{$id} = $panel;
		$score_event{$id} = $event;
		$score_novice{$id} = $novice;
		$entry_novice{$entry} = $novice;
    }   


	my $bye_sth = $dbh->prepare("
		select entry.id, event.id, round.type, round.id, panel.id, panel.bye, ballot.bye
		from panel, round, event, entry, ballot
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.event = event.id
		and event.tourn = ".$tourn->id."
		and ballot.entry = entry.id
		and entry.dq != 1
		and entry.dropped != 1
		and entry.waitlist != 1
		and entry.unconfirmed != 1
		group by ballot.id
		order by event.id, round.name
	");

    $bye_sth->execute();

	my %entry_byes;

    while (my ($entry, $event, $type, $round, $panel, $panel_bye, $ballot_bye)  = $bye_sth->fetchrow_array() ) { 

		next if $skip_round{$round};
		next unless $event_include{$event};
		next unless $panel_bye || $ballot_bye;

		$entry_byes{$entry}++;

		push @{$entry_panels{$entry}}, $panel;
		$entry_round_panel{$entry."-".$round} = $panel;

	}

	my %seen = (); 
	@entries = grep { ! $seen{$_} ++ } @entries;

	my %entry_points;
	my %entry_placement;

	my %places = (); 
	my $places_done;
	my $placement_done;

	foreach my $rule ($sweep_set->rules) { 
		$places{$rule->place} = $rule->value if $rule->place && $rule->tag ne "cume";
	}

	foreach my $rule ($sweep_set->rules) { 
			
		if ($rule->tag eq "points_per_prelim") {

			my $points = $rule->value;

			foreach my $entry (@entries) { 

				my @panels;

				foreach my $score (@{$entry_scores{$entry}}) { 
					next if $score_type{$score} eq "elim";
					next if $score_type{$score} eq "final";
					next if $novice_only && not defined $score_novice{$score};
					push @panels, $score_panel{$score};
				}

				my %pseen = ();
				@panels = grep { ! $pseen{$_} ++ } @panels;
				$entry_points{$entry} += ($points * (scalar @panels));
			}
		}

		if ($rule->tag eq "points_per_prelim_rank") {

			my $points = $rule->value;
			my $place = $rule->place;

			foreach my $entry (@entries) { 

				my %used;

				foreach my $score (@{$entry_scores{$entry}}) { 

					next if $used{$score}++;
					next unless $score_tag{$score} eq "rank";
					next if $score_type{$score} eq "elim";
					next if $score_type{$score} eq "final";
					next if $novice_only && not defined $score_novice{$score};
					$entry_points{$entry} += $points if $score_value{$score} == $place;
				}
			}
		}

		if ($rule->tag eq "points_per_elim") {

			my $points = $rule->value;

			foreach my $entry (@entries) { 

				my @panels;

				foreach my $score (@{$entry_scores{$entry}}) { 
					next if $score_type{$score} ne "elim";
					next if $novice_only && not defined $score_novice{$score};
					push @panels, $score_panel{$score};
				}

				my %pseen = ();
				@panels = grep { ! $pseen{$_} ++ } @panels;
				$entry_points{$entry} += ($points * (scalar @panels));
			}
		}

		if ($rule->tag eq "points_per_final" ) {

			my $points = $rule->value;

			foreach my $entry (@entries) { 

				my @panels;

				foreach my $score (@{$entry_scores{$entry}}) { 
					next if $score_type{$score} ne "final";
					next if $novice_only && not defined $score_novice{$score};
					push @panels, $score_panel{$score};
				}

				my %pseen = ();
				@panels = grep { ! $pseen{$_} ++ } @panels;
				$entry_points{$entry} += ($points * (scalar @panels));
			}
		}


		if ($rule->tag eq "rev_per_prelim_rank" || $rule->tag eq "rev_per_prelim_rank_sansworst" ) {

			my $dropworst;
			$dropworst++ if $rule->tag eq "rev_per_prelim_rank_sansworst";

			my $points = $rule->value;
			my %entry_worst;

			foreach my $score (@scores) { 

				my $entry = $score_entry{$score};

				next if $score_type{$score} eq "elim";
				next if $score_type{$score} eq "final";
				next if $novice_only && not defined $score_novice{$score};
				next unless $score_tag{$score} eq "rank";
		
				my $pts;

				if ($dropworst && $entry_worst{$entry} < $score_value{$score}) {

					if ($entry_worst{$entry}) { 
						$pts = 6 - $entry_worst{$entry};
						$pts = 1 if $pts < 1;
						$entry_worst{$entry} = $score_value{$score};
					} else { 
						$pts = 6 - $score_value{$score};
						$pts = 1 if $pts < 1;
					}

				} else { 
					$pts = 6 - $score_value{$score};
					$pts = 1 if $pts < 1;
				}

				$entry_points{$entry} += $pts;
			}

		}
		
		if ($rule->tag eq "cume") {

			my $points = $rule->value;
			my $place = $rule->place;

			my %entry_cume;

			foreach my $score (@scores) { 
				next if $novice_only && not defined $score_novice{$score};
				next unless $score_tag{$score} eq "rank";
				next if $score_type{$score} eq "elim";
				next if $score_type{$score} eq "final";
				$entry_cume{$score_entry{$score}} += $score_value{$score};
			}

			foreach my $entry (@entries) { 
				$entry_points{$entry} += $points if $entry_cume{$entry} == $place;
			}

		}

		if ($rule->tag eq "rev_per_elim_rank" ) {

			my $points = $rule->value;

			foreach my $score (@scores) { 

				next if $novice_only && not defined $score_novice{$score};
				next unless $score_tag{$score} eq "rank";
				next if $score_type{$score} ne "elim";

				my $pts = 6 - $score_value{$score};
				$pts = 1 if $pts < 1;

				$entry_points{$score_entry{$score}} += $pts;

			}

		}

		if ($rule->tag eq "rev_per_final_rank" ) {

			my $points = $rule->value;

			foreach my $score (@scores) { 

				next if $novice_only && not defined $score_novice{$score};
				next unless $score_tag{$score} eq "rank";
				next if $score_type{$score} ne "final";

				my $pts = 6 - $score_value{$score};
				$pts = 1 if $pts < 1;
				
				$entry_points{$score_entry{$score}} += $pts;

			}

		}

		if ($rule->tag eq "rev_per_elim_place" || $rule->tag eq "rev_per_final_place" ) {

			my $type = "elim" if $rule->tag eq "rev_per_elim_place";
			$type = "final" if $rule->tag eq "rev_per_final_place";

			foreach my $event (@events) { 

				next unless $event && $event->id;
			
				foreach my $round ($event->rounds) { 

					next unless $round->type eq $type;

					my %panel_yes = map {$_->id => 1} $round->panels;

					my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $round); 

					my %panel_place;

					foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

						foreach my $entry (@{${$entries_ref}{$key}}) {

							next if $novice_only && not defined $entry_novice{$entry};

							my $panel = $entry_round_panel{$entry."-".$round->id};
							$panel_place{$panel}++;
							
							my $pts = 6 - $panel_place{$panel};
							$pts = 1 if $pts < 1;

							$entry_points{$entry} += $pts;
						}

					}
				}
			}
		}

		if ($rule->tag eq "rev_per_overall_place" || $rule->tag eq "place") {

			unless ($placement_done) { 

				foreach my $event (@events) { 

					next unless $event;

					my @rounds = sort {$b->name <=> $a->name} $event->rounds;

					my $final = shift @rounds;

					my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $final); 

					foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
						foreach my $entry (@{${$entries_ref}{$key}}) {
							next if $novice_only && not defined $entry_novice{$entry};
							$entry_placement{$entry} = $key;
						}
					}
				}

				$placement_done++;
			}

			if ($rule->tag eq "rev_per_overall_place") { 
				foreach my $entry (@entries) { 
					next unless $entry_placement{$entry};
					my $pts = 6 - $entry_placement{$entry};
					$pts = 0 unless $pts;
					$entry_points{$entry} += $pts;
				}
			}

			if ($rule->tag eq "place" && not defined $places_done) { 
				$places_done++;
				foreach my $entry (@entries) { 
					next unless $entry_placement{$entry};
					$entry_points{$entry} += $places{$entry_placement{$entry}};
				}
			}

		}

		if ($rule->tag eq "debate_win" || $rule->tag eq "debate_loss" ) {

			my $winner++ if $rule->tag eq "debate_win";
			my $points = $rule->value;

			foreach my $score (@scores) { 

				next if $novice_only && not defined $score_novice{$score};
				next unless $score_tag{$score} eq "ballot";

				if ($winner) { 
					$entry_points{$score_entry{$score}} += $points if $score_value{$score} == 1;
				} else { 
					$entry_points{$score_entry{$score}} += $points if $score_value{$score} == 0;
				}
			}

		}

		if ($rule->tag eq "debate_round_win" || $rule->tag eq "debate_round_loss" ) {

			my $winner++ if $rule->tag eq "debate_round_win";
			my $points = $rule->value;

			my %panel_record;

			foreach my $score (@scores) { 
				$panel_record{$score_entry{$score}."-".$score_panel{$score}}++ if $score_value{$score} == 1;
				$panel_record{$score_entry{$score}."-".$score_panel{$score}}-- if $score_value{$score} == 0;
			}

			foreach my $entry (@entries) { 

				my %panel_done;

				foreach my $panel (@{$entry_panels{$entry}}) { 
					next if $panel_done{$panel};
					$panel_done{$panel}++;

					if ($winner) { 
					 	$entry_points{$entry} += $points if ($panel_record{$entry."-".$panel} > 0);
						Tab::debuglog("Entry $entry wins panel $panel for $points points") if $entry == 665746;
					} else { 
						$entry_points{$entry} += $points if ($panel_record{$entry."-".$panel} < 0);
					}

				}
			}
		}
		
		if ($rule->tag eq "debate_round_bye") {

			my $points = $rule->value;

			foreach my $entry (@entries) { 
				$entry_points{$entry} += $entry_byes{$entry} * $points;
			}
		}

		if ($rule->tag eq "manual" ) {

			foreach my $entry (@entries) { 
				$entry_points{$entry} += $entry_manual{$entry};
			}
		}
	}

	return \%entry_points, \@entries, \%entry_school, \%entry_event, \%entry_code;

</%init>
