<%args>
	$tourn
	$event_id
	$result_type
	$limit        => undef
	$circuit_id   => undef
	$set_tourn_id => undef
	$publish      => 0
</%args>
<%init>

	$tourn = Tab::Tourn->retrieve($set_tourn_id) if $set_tourn_id;
	
	my @events;
	my $msg;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now( time_zone => $tz);

	if ($event_id eq "all") { 

		@events = $tourn->events;

	} elsif ($event_id =~ /type/) { 

		my $type = $event_id;
		$type =~ s/type_//g;

		@events = Tab::Event->search( tourn => $tourn->id, type => $type );

	} else { 

		push @events, Tab::Event->retrieve($event_id);

	}

	if ($result_type eq "bracket") { 

		foreach my $event (@events) { 
			my $bracket = $m->comp("generate_bracket.mas", event => $event);
			$bracket->published($publish);
			$bracket->update;
			$msg .= "Bracket for ".$event->abbr." regenerated";
		}


	} else {

		my $label = "Prelim Seeds" if ($result_type eq "prelim_seed");
		$label = "Final Places" if ($result_type eq "final");
		$label = "Speaker Awards" if ($result_type eq "speakers");
		$label = "Cume Sheet" if ($result_type eq "cumesheet");

		Tab::ResultValue->set_sql( rm_label => "
			delete result_value.*
			from result, result_value, result_set
			where result_value.result = result.id
			and result.result_set = result_set.id
			and result_set.event = ? 
			and result_set.label = ? 
		");

		Tab::Result->set_sql( rm_label => "
			delete result.* 
			from result, result_set 
			where result.result_set = result_set.id
			and result_set.event = ? 
			and result_set.label = ? 
		");

		Tab::ResultSet->set_sql( rm_label => "
			delete from result_set
			where event = ? 
			and label = ? 
		");


		foreach my $event (@events) { 
		
			my $novice++ if $event->setting("top_novice");
			my $honmen++ if $event->setting("honorable_mentions");

			my $event_type = $event->type;

			my @rounds = sort {$b->name <=> $a->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
			my $top_novice = $m->comp("/tabbing/results/top_novice.mas", event => $event) if $novice;

			my %used;
			my $final;
			my @elims;
			my $last_prelim;

			foreach my $round (@rounds) { 
				$final = $round if $round->type eq "final";
				push (@elims, $round) if $round->type eq "elim";
				$last_prelim = $round if $round->type ne "elim" && $round->type ne "final" && not defined $last_prelim;
			}

			my $rank = 1;

			Tab::ResultValue->sql_rm_label->execute( $event->id, $label );
			Tab::Result->sql_rm_label->execute( $event->id, $label );
			Tab::ResultSet->sql_rm_label->execute( $event->id, $label );

			my $set = Tab::ResultSet->create({ 
				tourn     => $tourn->id,
				event     => $event->id,
				label     => $label,
				generated => $now,
				published => $publish
			});

			my %prelim_seed;

			if ($result_type eq "speakers") { 

				my %student_ballots = (); 

				my $tb_set_id = $event->setting("speaker_tbset");
				my $tb_set = Tab::TiebreakSet->retrieve($tb_set_id) if $tb_set_id;

				unless ($tb_set) {   
					my $err = "Event ".$event->name." does not have a speaker awards tiebreaker set applied to it.  Please pick one and try again";
					$m->redirect("/setup/event/tabbing.mhtml?event_id=".$event->id."&err=$err");
				}   

				my $points;
				my $ranks;
				my $wins;

				foreach my $tb ($tb_set->tiebreaks) { 
					$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
					$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
					$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
				}   

				my $type = $event->type;

				if ($last_prelim) { 

					my $dbh = Tab::DBI->db_Main();

					my $sth = $dbh->prepare("
						select value.id, value.tag, value.value, value.student, student.id, ballot.entry, ballot.judge, ballot.bye, ballot.chair, round.name
						from ballot_value value, ballot, panel, round, entry_student, student
						where value.ballot = ballot.id
						and ballot.panel = panel.id
						and panel.round = round.id
						and round.name <= ".$last_prelim->name."
						and round.event = ".$event->id."
						and ballot.entry = entry_student.entry
						and entry_student.student = student.id
						order by round.name, ballot.entry, ballot.chair, ballot.judge, CASE value.tag WHEN ".' "ballot" then 1 when "rank" then 2 when "points" then 3 end'."
					");

					$sth->execute(); 

					my %student_round;

					while (my ($id, $tag, $value, $value_student, $student, $entryid, $judge, $bye, $chair, $roundname) = $sth->fetchrow_array() ) { 

						next if $tag eq "rank" && not defined $ranks;
						next if $tag eq "points" && not defined $points;
						next if $tag eq "ballot" && not defined $wins;
						next if $tag eq "points" && $value_student != $student;

						$student_ballots{$student} .= ' ' if $student_ballots{$student} && $tag eq "rank" && ($type eq "speech" || $type eq "wudc" || $type eq "congress");
						$student_ballots{$student} .= ' ' if $student_ballots{$student} && $tag eq "ballot" && $type ne "speech" && $type ne "wudc" && $type ne "congress";

						if ($student_ballots{$student}) {
							$student_ballots{$student} .= " ";
							$student_ballots{$student} .= "\n\n" if $roundname != $student_round{$student};
						}

						$student_round{$student} = $roundname;

						if ($tag eq "ballot") {

							if ($bye) {
								$student_ballots{$student} .= "BYE"
							} else {
								$student_ballots{$student} .= " W" if $value > 0;
								$student_ballots{$student} .= " L" if $value < 1;
							}

						} else {
							$student_ballots{$student} .= $value;
						}
					}
				}

				my ($students_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $long_desc_ref, $novice_ref, $name_ref, $code_ref, $school_ref, $entry_ref) = $m->comp("/tabbing/results/order_speakers.mas", round => $last_prelim);

				foreach my $key (sort {$a <=> $b} keys %{$students_ref}) {

					next if $limit && $key > $limit;

					my $tie++ if scalar @{${$students_ref}{$key}} > 1;

					my $park;

					foreach my $student (@{${$students_ref}{$key}}) {
					
						$prelim_seed{$student} = $rank;

						$park++;

						my $key_value = $key;
						$key_value .= "-T" if $tie;

						my $result = Tab::Result->create({
							student    => $student,
							entry      => ${$entry_ref}{$student},
							rank       => $rank,
							result_set => $set->id
						});

						my $priority;

						Tab::ResultValue->create({
							tag       => "Order",
							long_tag  => "Speaking Order",
							result    => $result->id,
							value     => $key_value,
							priority  => 0,
							sort_desc => 0
						});

						foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

							my $tag = ${$desc_ref}{$key};
							my $long_tag = ${$long_desc_ref}{$key};
							my $sort_desc = 0;
							$sort_desc = 1 if ${$tier_dir}{$key} eq "down";
							my $value = ${$tbs_ref}{$student."-".$key};
							$value = sprintf("%.2f", $value);

							Tab::ResultValue->create({
								tag       => $tag,
								long_tag  => $long_tag,
								result    => $result->id,
								value     => $value,
								priority  => $key,
								sort_desc => $sort_desc
							});

						}

						Tab::ResultValue->create({
							tag      => "Ballots",
							long_tag => "Unadjusted Raw Scores",
							result   => $result->id,
							value    => $student_ballots{$student},
							no_sort  => 1
						});

					}

					$rank += $park;

				}

			} else { 

				my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $last_prelim);

				my %entry_ballots = $m->comp("/funclib/round_ballot_string.mas", round => $last_prelim);

				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

					next if $limit && $key > $limit;

					my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

					my $park;

					foreach my $entry (@{${$entries_ref}{$key}}) {

						$prelim_seed{$entry} = $rank;
						next unless $result_type eq "prelim_seed"; 
						next if $used{$entry}++;

						$park++;

						my $key_value = $key;
						$key_value .= "-T" if $tie;

						my $result = Tab::Result->create({
							entry      => $entry,
							rank       => $rank,
							result_set => $set->id
						});

						my $priority;

						Tab::ResultValue->create({
							tag       => "Seed",
							long_tag  => "Ranking Order Overall",
							result    => $result->id,
							value     => $key_value,
							priority  => 0,
							sort_desc => 0
						});

						foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

							my $tag = ${$desc_ref}{$key};
							my $long_tag = ${$long_desc_ref}{$key};
							my $sort_desc = 0;
							$sort_desc = 1 if ${$tier_dir}{$key} eq "down";
							my $value = ${$tbs_ref}{$entry."-".$key};
							$value = sprintf("%.2f", $value);

							Tab::ResultValue->create({
								tag       => $tag,
								long_tag  => $long_tag,
								result    => $result->id,
								value     => $value,
								priority  => $key,
								sort_desc => $sort_desc
							});

						}

						Tab::ResultValue->create({
							tag      => "Ballots",
							long_tag => "Unadjusted Raw Scores",
							result   => $result->id,
							value    => $entry_ballots{$entry},
							no_sort  => 1
						});

					}

					$rank += $park;

				}

				if ($result_type eq "final") { 
				
					undef $rank;

					foreach my $round ($final, @elims, $last_prelim) {

						next unless $round;
						my $type = $round->type;
						my $label = substr($round->label, 0, 8); 

						my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $round);
						my %entry_ballots = $m->comp("/funclib/round_ballot_string.mas", round => $round);

						foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 
					
							next if $limit && $key > $limit;

							my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

							@{${$entries_ref}{$key}} = sort {$prelim_seed{$a} <=> $prelim_seed{$b}} @{${$entries_ref}{$key}};

							foreach my $entry (@{${$entries_ref}{$key}}) {

								next if $used{$entry}++;
								$rank++;

								my $priority;

								my $key_value = Lingua::EN::Numbers::Ordinate::ordinate($key) if $type eq "final";
								$key_value .= "-T" if $tie && $type eq "final";

								$key_value = $label if $type eq "elim";
								$key_value = "Prelim" if $type ne "elim" && $type ne "final";

								my $result = Tab::Result->create({
									entry      => $entry,
									rank       => $rank,
									result_set => $set->id
								});

								Tab::ResultValue->create({
									tag       => "Place",
									long_tag  => "Overall Final Placement",
									result    => $result->id,
									value     => $key_value,
									priority  => 0,
									sort_desc => 0
								});

								foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
								
									next if ($type eq "elim" || $type eq "final") && $event_type ne "speech" && $event_type ne "congress";

									my $tag = ${$desc_ref}{$key};
									my $long_tag = ${$long_desc_ref}{$key};
									my $sort_desc = 0;
									$sort_desc = 1 if ${$tier_dir}{$key} eq "down";

									Tab::ResultValue->create({
										tag       => $tag,
										long_tag  => $long_tag,
										result    => $result->id,
										value     => ${$tbs_ref}{$entry."-".$key},
										priority  => $key,
										sort_desc => $sort_desc
									});

								}

								Tab::ResultValue->create({
									tag      => "Ballots",
									long_tag => "Unadjusted Raw Scores",
									result   => $result->id,
									value    => $entry_ballots{$entry},
									no_sort  => 1
								});

								if ($key == 1 && $type eq "final") { 

									my $bracket = Tab::ResultSet->search( event => $event->id, bracket => 1)->first;

									if ($bracket) { 

										Tab::Result->set_sql( who_da_champ => "
											select distinct result.* 
											from result, result_value
											where result.result_set = ? 
											and result.id = result_value.result
											and result_value.tag = \"Champion\"
										");

										my $already_champ = Tab::Result->search_who_da_champ( $bracket->id )->first;

										if ($already_champ) { 

											$already_champ->entry($entry);
											$already_champ->round($final);
											$already_champ->update;

										} else { 

											my $result = Tab::Result->create({
												entry      => $entry,
												result_set => $bracket->id,
												round      => $final
											});

											Tab::ResultValue->create({
												tag      => "Champion",
												long_tag => "Tournament Winner",
												priority => 2,
												value    => 1,
												result   => $result->id
											});
										}
									}
								}
							}
						}
					}
				}
			}

			Tab::Result->set_sql( update_percentile => "update result set percentile = ( ( (? - rank + 1) / ? ) * 1000) where result_set = ? ");
			Tab::Result->sql_update_percentile->execute( $rank, $rank, $set->id);

			$msg .= $event->name." results published " if $publish;
			$msg .= $event->name." results calculated " unless $publish;

		}

	}

	$m->redirect("/user/circuit/tourn_results.mhtml?circuit_id=$circuit_id&msg=$msg") if $circuit_id;
	$m->redirect("index.mhtml?msg=$msg");

</%init>
