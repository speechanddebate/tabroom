<%args>
	$tourn
	$account
	$from_id     => undef
	$into_id     => undef
	$site_id     => undef
	$timeslot_id => undef
	$tb_set_id   => undef
	$label       => undef
	$start       => undef
	$end         => undef
	$type        => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $from = Tab::Round->retrieve($from_id) if $from_id;
	my $into = Tab::Round->retrieve($into_id) if $into_id;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my $ignore_schools = $from->event->setting("school_debates_self");

	my $err;

	if ($into) { 

		$err .= "You must specify the starting seed of whom to break  " unless $start;
		$err .= "You must specify the ending seed of whom to break  " unless $end;

		$m->redirect("index.mhtml?from_id=".$from->id."&preset_id=".$into->id."&err=".$err) if $err;

		$into->tb_set($tb_set_id) if $tb_set_id;
		$into->site($site_id) if $site_id;
		$into->timeslot($timeslot_id) if $timeslot_id;
		$into->label($label) unless $label;
		$into->type($type) unless $type;
		$into->created($now);
		$into->update;

	} else { 

		my $err = " Missing timeslot " unless $timeslot_id;
		$err .= " Missing site " unless $site_id;
		$err .= " Missing starting entry " unless $start;
		$err .= " Missing ending entry " unless $end;
		$err .= " Missing tiebreaker set " unless $tb_set_id;
		$err .= " Missing round type " unless $type;
		$err .= " Missing site " unless $site_id;

		$m->redirect("index.mhtml?from_id=".$from."&preset_id=".$into."&err=".$err) if $err;

		my $judges = 1;
		$judges = 3 if $type eq "elim";
		$judges = 3 if $type eq "final";

		$m->redirect("index.mhtml?from_id=".$from."&err=".$err) if $err;

		$into = Tab::Round->create({
			event    => $from->event->id,
			timeslot => $timeslot_id,
			tb_set   => $tb_set_id,
			label    => $label,
			type     => $type,
			created  => $now,
			judges   => $judges
		});

		$m->comp("/funclib/renumber_rounds.mas", event_id => $from->event->id);

	}

	my $bracket_label = "Bracket";

	my $bracket = Tab::ResultSet->search( event => $from->event->id, label => $bracket_label )->first;

	unless ($bracket) { 

		$bracket = Tab::ResultSet->create({
			tourn     => $tourn->id,
			event     => $from->event->id,
			label     => $bracket_label,
			generated => $now,
			bracket   => 1
		});

	}

    Tab::ResultValue->set_sql( rm_bracket => "delete result_value.* from result, result_value where result.id = result_value.result and result.round = ? and result.result_set = ? ");
	Tab::ResultValue->sql_rm_bracket->execute( $into->id, $bracket->id );

    Tab::Result->set_sql( rm_bracket => "delete from result where round = ? and result_set = ? ");
	Tab::Result->sql_rm_bracket->execute( $into->id, $bracket->id );

	my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $bah, $mah, $entry_letter_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $from);

	if ($from->type ne "elim") { 

		my @breaks;
		my $count;

		my %entry_tb = ();
		my %entry_seed = ();
		my %entry_school = ();

		my %id_entry = map {$_->id => $_} $from->event->entries;

		foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) { 

			foreach my $entryid (@{${$entries_ref}{$seed}}) { 

				$count++;
				next if $count > $end;
				next if $count < $start;

				my $entry = $id_entry{$entryid};

				push @breaks, $entryid;
				$entry_seed{$entryid} = $seed;
				$entry_school{$entryid} = $entry->school->id;

				my $result = Tab::Result->create({
					result_set => $bracket->id,
					entry      => $entryid,
					round      => $into->id
				});

				Tab::ResultValue->create({
					result    => $result->id,
					value     => $entry_seed{$entryid},
					priority  => 1,
					sort_desc => 0,
					tag       => "Seed",
					no_sort   => 0
				});

			}
		}

		foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) { 
			foreach my $entry (@{${$entries_ref}{$seed}}) {
				my $one;	
				foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
					next if $one;
					$entry_tb{$entry} = ${$tbs_ref}{$entry."-".$key};
					$one++;
				}
			}
		}

		my $step = 2;
		my $num_breaks = scalar @breaks;

		while ($step < $num_breaks) { 
			$step = $step * 2;
		}

		if ($step != $num_breaks) { 
			my $byes = $step - $num_breaks;
			foreach (1 .. $byes) { 
				push @breaks, "BYE";
			}
		}

		my @existing_panels = $into->panels;
		my @use_panels;	
		my $num_panels = $step / 2;

		my $letter = 1;
		$letter = "A" if $from->event->setting("panel_labels") eq "letters";

		foreach my $count (1 .. $num_panels) { 

			my $existing = shift @existing_panels if @existing_panels;

			if ($existing) {

				push @use_panels, $existing;

			} else { 

				my $new = Tab::Panel->create({
					round  => $into->id,
					letter => $letter,
					flight => 1
				});

				push @use_panels, $new;

			}

			$letter++;
		}

		foreach my $ep (@existing_panels) { 
			$ep->delete;   #KILL THE SPARES
		}

		@use_panels = shuffle(@use_panels);

		my @snake_panels = @use_panels;

		my %panel_entries = ();

		if (scalar @use_panels == 1) { 

			@{$panel_entries{$use_panels[0]->id}} = @breaks;

		} else { 

			foreach my $entry (@breaks) {

				unless (@snake_panels) { 
					@snake_panels = reverse (@use_panels);
				}

				my $panel = shift @snake_panels;
				push @{$panel_entries{$panel->id}}, $entry;

			}

		}	

		foreach my $panel (@use_panels) { 

			my @entries = @{$panel_entries{$panel->id}};
			my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

			my $school_id;
			my $closeout;

			unless ($ignore_schools) { 
				foreach my $entry (@entries) { 
					next unless $entry;
					$closeout++ if $entry_school{$entry} == $school_id;
					$school_id = $entry_school{$entry};
				}
			}

			foreach my $ballot ($panel->ballots) {
				$ballot->delete;
			}

			if (@judges) { 

				foreach my $judge (@judges) {

					my $side = 1;
					my $due_aff = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel);

					foreach my $entry (@entries) {

						if ($due_aff) { 
							$side = 2;
							$side = 1 if $due_aff == $entry;
						}

						next unless $entry;

						if ($entry eq "BYE") { 

							$panel->bye(1);
							foreach my $ballot ($panel->ballots) { 
								$ballot->audit(1);
								$ballot->update;
								
							}
							$panel->update;

						} else { 

							my $ballot = Tab::Ballot->create({
								panel        => $panel->id,
								judge        => $judge->id,
								entry        => $entry,
								seed         => $entry_seed{$entry},
								side         => $side
							});

							$panel->bracket($entry_seed{$entry}) if $panel->bracket > $entry_seed{$entry};
							$panel->bracket($entry_seed{$entry}) unless $panel->bracket;

						}

						$side++;

					}

				}

			} else { 

				my $side = 1;

				foreach my $entry (@entries) {

					next unless $entry;
				
					if ($entry eq "BYE") { 

						$panel->bye(1);
						foreach my $ballot ($panel->ballots) { 
							$ballot->audit(1);
							$ballot->update;
						}
						$panel->update;

					} else { 

						my $ballot = Tab::Ballot->create({
							panel => $panel->id,
							judge => 0,
							entry => $entry,
							seed  => $entry_seed{$entry},
							side  => $side
						});

						$panel->bracket($entry_seed{$entry}) if $panel->bracket > $entry_seed{$entry};
						$panel->bracket($entry_seed{$entry}) unless $panel->bracket;

					}

					$side++;

				}

				my $due_aff = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel);

				if ($due_aff) { 

					foreach my $entry (@entries) {
						
						$side = 2;
						$side = 1 if $due_aff == $entry;

						my @ballots = Tab::Ballot->search( entry => $entry, panel => $panel->id);

						foreach my $ballot (@ballots) { 
							$ballot->side($side);
							$ballot->update;
						}

					}
				}
			}

			$panel->bye(1) if $closeout;
			$panel->update;

		}

		$into->created($now);
		$into->update;

		if ($from->event->setting("autopublish_results")) { 
			$from->post_results($from->event->setting("autopublish_results"));
			$from->update;
		}

		$into->post_results(0);  # People always do this
		$into->update;

		my $msg = ucfirst($type)." round paneled";
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$into->id."&msg=$msg");

	} else { 

		my %panel_entries;
		my %entry_seed;
		my %entry_school;

		Tab::Panel->set_sql( unscored_byes =>  "
			select distinct panel.* 
			from panel,ballot b1, ballot b2
			where panel.bye = 1 
			and panel.round = ? 
			and panel.id = b1.panel
			and panel.id = b2.panel
			and b2.entry != b1.entry
			and b1.bye = 0
			and b1.noshow = 0
			and b2.bye = 0
			and b2.noshow = 0
			and not exists 
			(select ballot_value.* from ballot_value, ballot 
				where ballot_value.ballot = ballot.id 
				and ballot.panel = panel.id 
				and ballot_value.tag=\"ballot\") ");

		my @undone_byes = Tab::Panel->search_unscored_byes($from->id);

		if (@undone_byes) { 
			$err = " You have coachovers or byes without a winner marked.  Enter them on the Tabbing -> Enter Ballots screen and try again.";
			$m->redirect("index.mhtml?from_id=".$from."&preset_id=".$into."&err=".$err);
		}

		my %id_entry = map {$_->id => $_} $m->comp("/funclib/round_entries.mas", round => $from);

		foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) { 
			foreach my $entryid (@{${$entries_ref}{$seed}}) { 
				
				push @{$panel_entries{${$entry_letter_ref}{$entryid}}}, $entryid;
				$entry_seed{$entryid} = $seed;
				$entry_school{$entryid} = $id_entry{$entryid}->school->id;
			}
		}

		my @panels = $from->panels;

		my $num_panels;
		my $horked_bracket;
		my %already;

		foreach my $panel (@panels) { 
			$num_panels = $panel->bracket if $panel->bracket > $num_panels;
			$horked_bracket++ if $panel->bracket < 1;
			$horked_bracket++ if $already{$panel->bracket}++;
		}

		if ($horked_bracket) { 
			$err = " You have Issues with your brackets. <br /> The bracket of each debate must be set in seeding order so the next round can pair opponents correctly.  The winner of the top seed debate will hit the winner of the worst seed, etc.  Each seed must only appear once.";
			$m->redirect("/panel/manipulate/bracket_edit.mhtml?round_id=".$from."&err=".$err);
		}

		my $letter = 1;
		$letter = "A" if $from->event->setting("panel_labels") eq "letters";

		my %destiny_count;

		my @done_panels;

		foreach my $panel (@panels) { 

			my $destination_bracket;

			if ($panel->bracket <= ( $num_panels / 2 ) ) { 
				$destination_bracket = $panel->bracket;
			} else { 
				$destination_bracket = ($num_panels + 1 - $panel->bracket);
			}
		
			my $destination = Tab::Panel->search( round => $into->id, bracket => $destination_bracket)->first;

			my $side = 2;
			my $opponent;

			if ($destination) { 

				$opponent = @{$panel_entries{$destination->id}}[0];

			} else { 

				$side = 1;

				$destination = Tab::Panel->create({
					round   => $into->id,
					bracket => $destination_bracket,
					letter  => $letter,
					flight  => 1
				});
			
				if ($letter eq "Z") { 
					$letter = "AA";
				} elsif ($letter eq "AZ") { 
					$letter = "BA";
				} elsif ($letter eq "BZ") { 
					$letter = "CA";
				} else { 
					$letter++;
				}

				push @done_panels, $destination;
			} 

			my @entries = sort {$entry_seed{$a} <=> $entry_seed{$b}} @{$panel_entries{$panel->letter}} if $panel_entries{$panel->letter};
			my $winner = shift @entries if @entries;

			push @{$panel_entries{$destination->id}}, $winner;

			my $closeout++ if $opponent && $entry_school{$opponent} == $entry_school{$winner} && not defined $ignore_schools;
			$destination->bye(1) if $closeout;
			$destination->update;

			my $result = Tab::Result->create({
				result_set => $bracket->id,
				entry      => $winner,
				round      => $into->id
			});

			Tab::ResultValue->create({
				result    => $result->id,
				value     => $panel->bracket,
				priority  => 1,
				sort_desc => 0,
				tag       => "Seed",
				no_sort   => 0
			});

			my @judges = $m->comp("/funclib/panel_judges.mas", panel => $destination);

			if (@judges &! $closeout) { 

				foreach my $judge (@judges) { 

					my @dummies = Tab::Ballot->search( judge => $judge->id, panel => $destination->id, entry => 0);

					foreach my $dummy (@dummies) { 
						$dummy->delete;
					}

					Tab::Ballot->create({
						panel => $destination->id,
						judge => $judge->id,
						entry => $winner,
						chair => $judge->chair,
						audit => 0,
						side  => $side
					});

				}

			} else { 

				unless (Tab::Ballot->search( panel => $destination->id, entry => $winner)) { 
					Tab::Ballot->create({
						panel => $destination->id,
						judge => 0,
						entry => $winner,
						chair => 0,
						audit => 0,
						side  => $side
					});
				}

			}
		}

		foreach my $panel (@done_panels) { 

			my $due_aff = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel);
			next unless $due_aff;

			foreach my $ballot ($panel->ballots) { 
				$ballot->side(1) if $ballot->entry->id == $due_aff;
				$ballot->side(2) unless $ballot->entry->id == $due_aff;
				$ballot->update;
			}
		}

		$into->created($now);
		$into->update;

		if ($from->event->setting("autopublish_results")) { 

			$from->post_results($from->event->setting("autopublish_results"));
			$from->update;
		}

		$into->post_results(0);  # People always do this
		$into->update;

		my $msg = ucfirst($type)." round paneled";
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$into->id."&msg=$msg");

	} 

</%init>
