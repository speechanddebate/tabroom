<%args>
	$username => undef
	$password => undef
	$round_id => undef
	$tourn_id => undef
</%args>
<%init>

	use Crypt::PasswdMD5;
	use XML::Simple;

	my $login = Tab::Login->search( username => lc($username) )->first;

	unless ($login) { 
		$m->print("<error>No account with the username ".$username." was found.</error>");
		$m->abort;
	} 

	$password =~ s/\s+$//g;
	my $db_password = $login->password;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
  	unless ($verify_password eq $db_password) { 
		$m->print("<error>Password incorrect for ".$username.".</error>");
		$m->abort;
	}

	my $account = $login->person;

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	unless ($tourn) { 
		$m->print("NO_SUCH_TOURNAMENT");
		$m->abort;
	}

	if ($account->site_admin) { 
		$perms{"owner"}++;
	} else {
		my @tourn_access = Tab::Permission->search( account => $account->id, tourn => $tourn->id );
		%perms = map {$_->tag => $_} @tourn_access;
	}

	unless ($perms{"owner"} || $perms{"full_admin"} || $perms{"tabbing"} || $perms{"group_tabbing"}) { 
		$m->print("TOURN_ACCESS_DENIED");
		$m->abort;
	}
		
	my $round = Tab::Round->retrieve($round_id);

	unless ($round) { 
		$m->print("NO_SUCH_ROUND");
		$m->abort;
	}

	if ($perms{"group_tabbing"} && $perms{"group_tabbing"}->judge_group->id != $round->event->judge_group->id) { 
		$m->print("JUDGE_GROUP_ACCESS_DENIED");
		$m->abort;
	}
	
	unless ($round->event->tourn->id == $tourn->id) { 
		$m->print("ROUND_NOT_IN_TOURNAMENT");
		$m->abort;
	}

	Tab::JudgeSetting->set_sql(upload_id => "
		select distinct judge_setting.*
		from judge_setting, judge
		where judge.judge_group = ? 
		and judge.id = judge_setting.judge
		and judge_setting.tag = \"upload_id\""
	);

	my %judge_id_translator = ();

	foreach my $setting (Tab::JudgeSetting->search_upload_id( $round->event->judge_group->id )) { 
		$judge_id_translator{$setting->judge->id} = $setting->value;
	}

	my $xml_panels = [];
	my $xml_ballots = [];
	my $xml_values = [];

	foreach my $panel ($round->panels) { 

		my $room = $panel->room->id if $panel->room;

		my $flight = 1; 
		$flight = $panel->flight if $panel->flight > 1;
	
		my $xml_panel = {	
			ID => $panel->id,
			ROUND => $round->id,
			ROOM => $room,
			FLIGHT => $flight	
		};

		push (@{$xml_panels}, $xml_panel);

		foreach my $ballot ($panel->ballots) {

			my $xml_ballot;
				
			my $entry = $ballot->entry->id if $ballot->entry;

			if ($ballot->bye) { 

				$xml_ballot = {
					ID => $ballot->id,
					JUDGE => -1,
					PANEL => $panel->id,
					ENTRY => $entry,
					SIDE => -1
				}

			} else { 

				my $judge_id = $ballot->judge->id if $ballot->judge->id;

				$judge_id = $judge_id_translator{$judge_id} if $judge_id_translator{$judge_id};

				$xml_ballot = {
					ID => $ballot->id,
					JUDGE => $judge_id,
					PANEL => $panel->id,
					ENTRY => $entry,
					SIDE => $ballot->side
				};

			}

			push (@{$xml_ballots}, $xml_ballot);

			foreach my $score ($ballot->values) { 

				next if $score->tag eq "rfd";
				next if $score->tag eq "comment";

				if ($score->tag eq "ballot") { 

					my $xml_score = {
						ID => $score->id,
						BALLOT => $ballot->id,
						RECIPIENT => $entry,
						SCORE_ID => 1,
						SCORE => $score->value
					};

					push (@{$xml_values}, $xml_score);
			
				} elsif ($score->tag eq "rank") { 
					
					my $student = $score->student->id if $score->student;

					my $xml_score = {
						ID => $score->id,
						BALLOT => $ballot->id,
						RECIPIENT => $student,
						SCORE_ID => 3,
						SCORE => $score->value
					};
			
					push (@{$xml_values}, $xml_score);

				} elsif ($score->tag eq "points") { 
						
					my $student = $score->student->id if $score->student;
	
					my $xml_score = {
						ID => $score->id,
						BALLOT => $ballot->id,
						RECIPIENT => $student,
						SCORE_ID => 2,
						SCORE => $score->value
					};
					
					push (@{$xml_values}, $xml_score);
			
				}
	
			}

		}

	}

	my $xml_scores = [];
	my $xml_score_settings = [];

	my $wins;
	my $points;
	my $ranks;

	my $tb_set = $round->tb_set;

	if ($tb_set) { 

		foreach my $tiebreak ($tb_set->tiebreaks) { 

			if ($tiebreak->name eq "winloss") { 
				$wins++;
			}

			if ($tiebreak->name eq "points") {
				$points++;
			}

			if ($tiebreak->name eq "opp_wins") {
				$wins++;
			}

			if ($tiebreak->name eq "opp_points") {
				$points++;
			}

			if ($tiebreak->name eq "ranks") { 
				$ranks++;
			}

			if ($tiebreak->name eq "judgevar" || $tiebreak->name eq "coinflip") { 
				$points++;
			}

			if ($tiebreak->name eq "MBA") {
				$wins++;
				$points++;
			}

		}
	}
	

	if ($wins) { 

		my $xml_wins = {
			ID => 1,
			SCORE_NAME => "Ballot",
			SCOREFOR => "Team",
			SORTORDER => "DESC"
		};

		push (@{$xml_scores}, $xml_wins);

	}

	if ($points) { 

		my $xml_points = {
			ID => 2,
			SCORE_NAME => "Speaker Points",
			SCOREFOR => "Speaker",
			SORTORDER => "DESC"
		};

		my $xml_team_points = {
			ID => 4,
			SCORE_NAME => "Team Points",
			SCOREFOR => "Team",
			SORTORDER => "DESC"
		};

		push (@{$xml_scores}, $xml_points);
		push (@{$xml_scores}, $xml_team_points);

	}

	if ($ranks) { 

		my $xml_ranks = {
			ID => 3,
			SCORE_NAME => "Speaker Rank",
			SCOREFOR => "Speaker",
			SORTORDER => "ASC"
		};

		my $xml_team_ranks = {
			ID => 5,
			SCORE_NAME => "Team Ranks",
			SCOREFOR => "Team",
			SORTORDER => "ASC"
		};

		push (@{$xml_scores}, $xml_ranks);
		push (@{$xml_scores}, $xml_team_ranks);

	}

	my $xml_hash = {
		PANEL => $xml_panels,
		BALLOT => $xml_ballots,
		BALLOT_SCORE => $xml_values,
	};

	my $now = DateTime->now;

	my $filename = "RoundData-$round_id-".$now->epoch;
	my $filepath = $Tab::file_root."tmp/".$filename;
	`rm -f $filepath.*`; 

	my $xs = new XML::Simple();
	my $xml = $xs->XMLout($xml_hash, RootName => 'ROUNDALONE', NoAttr => 1, XMLDecl => 1, OutputFile => "$filepath.xml");

	undef $xml;
	undef $xs;

	$m->redirect("$Tab::url_prefix/tmp/$filename.xml");
	
</%init>
