<%args>
	$username => undef
	$password => undef
	$tourn_id => undef
	$debug => 0
</%args>
<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $now = DateTime->now;

	$m->print("<h2>Authentication</h2>") if $debug;
	$m->flush_buffer;

	#ACCOUNT
	my ($login) = Tab::Login->search( username => lc($username) );
	unless ($login) { 
		$m->print("NO_SUCH_ACCOUNT");
		$m->abort;
	} else { 
		$m->print("YOU CLAIM TO BE ".$login->person->first." ".$login->person->last.".  I HAVE DOUBTS.  CHECKING PASSWORD...<br />") if $debug;
	}

	$password =~ s/\s+$//g;
	my $db_password = $login->password;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
   	unless ($verify_password eq $db_password) { 
	   	$m->print("PASSWORD_WRONG");
		$m->abort;
	} else { 
		$m->print("HEY, LOOK AT THAT, YOU REALLY ARE! PASSWORD IS OK!  OKAY?</br>") if $debug;
	}

	my $account = $login->person;

	my $tz = $account->tz;
	$tz = "UTC" unless $tz;

	$m->print("Setting the time zone to your account default: ".$tz) if $debug;
	$now->set_time_zone($tz);

	#PROCESS THE XML
	my $req = Apache2::Request->new($r);
	my $xml_file = $req->upload(xml);
	my $xml_filename = $xml_file->tempname;

	my $xml = new XML::Simple ( SuppressEmpty => 1,  ForceArray => [ qw(EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]); 
	my $data = $xml->XMLin($xml_filename);

	#TOURNAMENT
	my $tourn;
	my $tourn_id;

	my @tourn_sets = @{$data->{TOURN_SETTING}};
	my %tourn_settings = (); 

	foreach my $ts (@tourn_sets) { 
		$tourn_settings{$ts->{TAG}} = lc($ts->{VALUE});
	}  

	$m->print("<h2>Tournament</h2>") if $debug;
	$m->print("Name of the tournament is $data->{TOURN}->{TOURNNAME}<br />") if $debug;

	unless ($data->{TOURN}->{ID} == -99) { #-99 means "I have no idea where the hell this tournament came from"

		unless ($tourn) { 
			$tourn_id = $data->{TOURN}->{ID};
			$tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_settings{"DownloadSite"} eq "idebate.org";
		}

		unless ($tourn) { 
			$tourn = Tab::Tourn->search(foreign_site => $tourn_settings{"DownloadSite"}, foreign_id => $tourn_id)->first;
		}

	}

	my %perms = ();

	if ($tourn) { 
			
		$m->print("THIS IS MAH TOURNAMENT!  ID is ".$tourn->id,"<br/>") if $debug;

		if ($account->site_admin) { 
			$perms{"owner"}++;
		} else {
			my @tourn_access = Tab::Permission->search( account => $account->id, tourn => $tourn->id );
			%perms = map {$_->tag => $_} @tourn_access;
		}

		unless ($perms{"owner"} || $perms{"full_admin"}) { 
			$m->print("TOURN_ACCESS_DENIED");
			$m->abort;
		}

	} else { 

		$m->print("I don't know diddly squat about this tournament.  Creating another<br/>") if $debug;

		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});

		if ($through eq "through") {
			$start = Tab::dateme($start);
			$end = Tab::dateme($end);
		} else {
			$start = Tab::dateme($data->{TOURN}->{STARTDATE});
			$end = Tab::dateme($data->{TOURN}->{ENDDATE});
		}

		$start->set( hour => 9, minute => 0);
		$end->set( hour => 22, minute => 0);

		my $round_end = $start->clone;
		$round_end->set( hour => 11, minute => 0);

		$start->set_time_zone($tz);
		$end->set_time_zone($tz);
		$round_end->set_time_zone($tz);
		
		my $reg_start = $start->clone;
		$reg_start->subtract( months => 2);

		my $reg_end = $end->clone;
		$reg_end->subtract( weeks => 1);

		$tourn = Tab::Tourn->create({
			name         => $data->{TOURN}->{TOURNNAME},
			start        => $start,
			end          => $end,
			reg_start    => $reg_start,
			reg_end      => $reg_end,
			foreign_site => $tourn_settings{"DownloadSite"},
			foreign_id   => $tourn_id,
			tz           => $tz,
			created      => $now
		});

		my $tourn_owner = Tab::Permission->create({ account => $account->id, tourn => $tourn->id, tag => "owner" });
		my $tourn_contact = Tab::Permission->create({ account => $account->id, tourn => $tourn->id, tag => "contact" });

		foreach my $ts (@tourn_sets) { 
			$tourn->setting($ts->{TAG}, lc($ts->{VALUE}));
		}   

		$m->print("Created a new tournament, ".$tourn->id," for the nonce<br />") if $debug;

		my $judge_group = Tab::JudgeGroup->create({
			name => ucfirst(lc($tourn_settings{"TourneyType"})),
			tourn => $tourn->id,
			abbr => ucfirst(substr(lc $tourn_settings{"TourneyType"}, 0, 3))
		});

		$judge_group->setting("no_codes", 1); #for debate this is almost always sensible
		$judge_group->setting("prefs", "ordinals"); #this is about the only way I can cope with foreign ratings

		$m->print("<h2>Events</h2>") if $debug;

		my $min_points = 0;
		my $max_points = 30;

		SETTING:
		foreach my $xml_ss (@{$data->{SCORE_SETTING}}) { 
			$max_points = $xml_ss->{MAX} if $xml_ss->{MAX};
			$min_points = $xml_ss->{MIN} if $xml_ss->{MIN};
		}

	    #EVENTS
   		my @events = @{$data->{EVENT}};
    	my %event_by_id = ();

		foreach my $xml_event (@events) { 

			my $event = Tab::Event->create({
				tourn       => $tourn->id,
				name        => $xml_event->{EVENTNAME},
				type        => lc($xml_event->{TYPE}),
				abbr        => $xml_event->{ABBR},
				judge_group => $judge_group->id
			});

			$event_by_id{$xml_event->{ID}} = $event;
			$m->print("Event ".$xml_event->{EVENTNAME}." has been created<br />") if $debug;

			$event->setting("code_style", "initials"); #for debate this is almost always sensible
			$event->setting("min_points", $min_points);
			$event->setting("max_points", $max_points);

		} 

		my @event_settings = @{$data->{EVENT_SETTING}}; 
		
		foreach my $xml_setting (@event_settings) {

			foreach my $event (@{$xml_setting->{EVENT}}) { 

				my $event = $event_by_id{$event};

				$event->setting("live_updates", 1);
				$event->setting("online_ballots", 1);

				if ($xml_setting->{TAG} eq "DebatersPerTeam") {
					$event->setting("min_entry", $xml_setting->{VALUE});
					$event->setting("max_entry", $xml_setting->{VALUE});
				} else {
					$event->setting( $xml_setting->{TAG}, $xml_setting->{VALUE} );
				}
			}
		}

		$m->print("<h2>Timeslots</h2>") if $debug;

	    #TIMESLOTS
		my @timeslots = sort {$a->{ID} <=> $b->{ID}} @{$data->{TIMESLOT}};
		my %timeslot_by_id = ();

		foreach my $xml_timeslot (@timeslots) {
		
			$start->set_time_zone($tz);
			$round_end->set_time_zone($tz);

			my $timeslot = Tab::Timeslot->create({
				name  => $xml_timeslot->{TIMESLOTNAME},
				tourn => $tourn->id,
				start => $start,
				end   => $round_end,
			});

			$timeslot_by_id{$xml_timeslot->{ID}} = $timeslot;

			$m->print("Timeslot ".$timeslot->name." has been created from ".$start->hour.":".$start->minute." to ".$round_end->hour.":".$round_end->minute." <br />") if $debug;

			$start->add(hours => 2, minutes => 30);
			$round_end->add(hours => 2, minutes => 30);

			$start->set_time_zone($tz);
			$round_end->set_time_zone($tz);

			$m->print("Next ".$start->hour.":".$start->minute." - ".$round_end->hour.":".$round_end->minute."<br /> <br />") if $debug;

			if ($round_end->hour > 21 || $start->hour > 20) {
				$start->add( hours => 11);
				$round_end->add( hours => 11);
				$start->set(minute => 0);
				$round_end->set(minute =>0);
			}

		}

		$m->print("<h2>Rooms</h2>") if $debug;

		#ROOMS 
		my $sname = $tourn->name;
		$sname =~ s/Invitation$//g;
		$sname =~ s/Invitational$//g;
		$sname =~ s/Classic$//g;
		$sname =~ s/Tournament$//g;
		my $newsite;

		my $site = Tab::Site->search( name => $sname )->first;
		
		if ($site) { 
			$m->print("Using existing site ".$site->name." for the rooms. <br />") if $debug;
		} else { 
			$newsite++;
			$site = Tab::Site->create({
				name => $sname,
				host => $account->id
			});
		
			$m->print("Creating site ".$site->name." for the rooms. <br />") if $debug;
		}

		my $tsite = Tab::TournSite->create({
			site => $site->id,
			tourn => $tourn->id
		});

	    my @rooms = @{$data->{ROOM}};
	    my %room_by_id = ();

	    foreach my $xml_room (@rooms) {

			my $room = Tab::Room->search( site => $site->id, name => $xml_room->{ROOMNAME})->first unless $newsite;

			if ($room) { 

				$m->print("Room name ".$room->name." found already <br />") if $debug;

			} else { 

				$room = Tab::Room->create({
					name     => $xml_room->{ROOMNAME},
					quality  => $xml_room->{QUALITY},
					capacity => $xml_room->{CAPACITY},
					site     => $site->id
				});

			}

			$room_by_id{$xml_room->{ID}} = $room;
		}

		$m->print("<h2>Schools</h2>") if $debug;

		#SCHOOLS

    	my %students_by_entry = ();
   		my %students_by_school = ();

    	foreach my $student (@{$data->{ENTRY_STUDENT}}) {
			my $school = shift @{$student->{SCHOOL}};
        	push @{$students_by_school{$school}}, $student;
        	push @{$students_by_entry{$student->{ENTRY}}}, $student;
    	}

    	my %school_by_id = ();
    	my %chapter_by_id = ();
		my %chapter_new = ();

		my $hired_school;

		SCHOOL:
		foreach my $xml_school (@{$data->{SCHOOL}}) {

			if ($xml_school->{SCHOOLNAME} eq "Hired") { 
				$hired_school = $xml_school->{ID};
				$m->print("Not creating a school for Hired <br /><br />") if $debug;
				next SCHOOL;
			}

			unless ($students_by_school{$xml_school->{ID}}) { 
				$m->print("School $xml_school->{SCHOOLNAME} has no entries; not bothering <br /><br />") if $debug;
				next SCHOOL;
			}

			my @chapters = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} );
			my $chapter;

			$m->print("Searching for a chapter named $xml_school->{SCHOOLNAME} with a student name match <br />") if $debug;
		
			foreach my $candidate (@chapters) { 

				next if $chapter;
	
				#Find at least one matching student
				foreach my $xml_student (@{$students_by_school{$xml_school->{ID}}}) {
					next if $chapter;

					my ($student) = Tab::Student->search( chapter => $candidate->id, first => ucfirst($xml_student->{FIRST}), last => ucfirst($xml_student->{LAST}));

					if ($student) {
						$m->print("SUCCESS! Chapter match made with chapter ".$candidate->id." student $xml_student->{FIRST} $xml_student->{LAST} <br />") if $debug;
						$chapter = $candidate;
					}
				}
			}

			unless ($chapter) { 

				$chapter = Tab::Chapter->create({
					name => $xml_school->{SCHOOLNAME}
				});

				$chapter_new{$xml_school->{ID}}++;
				
				$m->print("No match found.  Creating new chapter ".$chapter->id." for ".$chapter->name." <br />") if $chapter && $debug;

			} 
					
			$chapter_by_id{$xml_school->{ID}} = $chapter;
			
			my $school = Tab::School->create({
				chapter => $chapter->id,
				name    => $chapter->name,
				tourn   => $tourn->id,
				code    => $xml_school->{CODE}
			});

			$school_by_id{$xml_school->{ID}} = $school;

			$m->print("School ".$school->name." created within chapter ".$chapter->name." ".$chapter->id." <br />") if $debug;
			$m->print("<br />") if $debug;

		}

		$m->print("<h2>Tiebreaks</h2>") if $debug;
		#TIEBREAKS
		my %tb_set_by_id = ();
		my %tiebreak_by_id = ();

		foreach my $xml_tbset(@{$data->{TIEBREAK_SET}}) { 

			my $tb_set = Tab::TiebreakSet->create({
				name => $xml_tbset->{TBSET_NAME},
				tourn => $tourn->id
			});

			$tb_set_by_id{$xml_tbset->{ID}}  = $tb_set;
		}

		foreach my $xml_tiebreak(@{$data->{TIEBREAK}}) { 

			my $label = $xml_tiebreak->{LABEL};

			my $name = "winloss" if $label eq "Wins";
			$name = "points" if $label eq "High-Low Speaker Points";
			$name = "points" if $label eq "Total Points";
			$name = "points" if $label eq "2x High-Low Speaker Points";
			$name = "ranks" if $label eq "Ranks";
			$name = "opp_wins" if $label eq "Opponent Wins";
			$name = "opp_points" if $label eq "Opponent Points";
			$name = "judgevar" if $label eq "Judge Variance";
			$name = "coinflip" if $label eq "Random";

			my $tiebreak_create = Tab::Tiebreak->create({
				name       => $name,
				tb_set     => $tb_set_by_id{$xml_tiebreak->{TB_SET}},
				priority   => $xml_tiebreak->{SortOrder},
				highlow    => $xml_tiebreak->{DROPS},
				multiplier => 1,
				count      => "prelim"
			});
		}

		$m->print("<h2>Entries</h2>") if $debug;

		#ENTRIES
		my %entry_by_id = ();
    	my %student_by_id = ();

		foreach my $xml_entry (@{$data->{ENTRY}}) {

			my $xml_school;
			foreach my $can_school (@{$xml_entry->{SCHOOL}}) { 
				$xml_school = $can_school;
			}

			my $xml_event;
			foreach my $can_event (@{$xml_entry->{EVENT}}) { 
				$xml_event = $can_event;
			}
			
			my $entry = Tab::Entry->create({
				tourn    => $tourn->id,
				code     => $xml_entry->{FULLNAME},
				dropped  => $xml_entry->{DROPPED},
				ada      => $xml_entry->{TUBDISABILITY},
				seed     => $xml_entry->{RATING},
				reg_time => $now,
				school   => $school_by_id{$xml_school},
				event    => $event_by_id{$xml_event}
			});

			$m->print("Entry with event $xml_event from school $xml_school chapter $chapter_by_id{$xml_school}") if $debug;
			$m->print(" and has ".scalar @{$students_by_entry{$xml_entry->{ID}}}." students <br />") if $debug;

			my $first_name;
			my $last_name;
			my $notfirst;

			foreach my $xml_student (@{$students_by_entry{$xml_entry->{ID}}}) { 

				my $student;

				if ($chapter_new{$xml_school}) { 
					$m->print("Chapter ".$chapter_by_id{$xml_school}." is new; not searching for students <br />") if $debug;
				} else { 
					$student = Tab::Student->search( first => ucfirst($xml_student->{FIRST}), last => ucfirst($xml_student->{LAST}), chapter => $chapter_by_id{$xml_school})->first;
					$m->print("Student ".$student->id." found for $xml_student->{FIRST} $xml_student->{LAST} <br />") if $debug && $student;
				}
			
				unless ($student) { 

					$m->print("Creating new student $xml_student->{FIRST} $xml_student->{LAST} as part of entry $xml_entry->{CODE} <br />") if $debug;

					$student = Tab::Student->create({
						first   => ucfirst($xml_student->{FIRST}),
						last    => ucfirst($xml_student->{LAST}),
						chapter => $chapter_by_id{$xml_school}
					});

				}
	
				Tab::EntryStudent->create({
					entry => $entry->id,
					student => $student->id
				});

        		$student_by_id{$xml_student->{ID}} = $student;

				$first_name = $xml_student->{FIRST};
				$last_name = " & " if $notfirst;
				$last_name .= $xml_student->{LAST};
				$notfirst++;
			}

			my $name = $first_name." ".$last_name if $notfirst == 1;
			$name = $last_name unless $name;

			$entry->name($name);
			$entry->update;

			$entry_by_id{$xml_entry->{ID}} = $entry;
			$m->print("<br />") if $debug;
		}

		$m->print("<h2>Judges</h2>") if $debug;

		#JUDGES
		my %judge_by_id = ();

		foreach my $xml_judge (@{$data->{JUDGE}}) {

			my $judge;

			my $xml_school;
			foreach my $can_school (@{$xml_judge->{SCHOOL}}) { 
				$xml_school = $can_school;
			}


			if ($xml_school == $hired_school || $xml_school == 0 || not defined $school_by_id{$xml_school}) {

				my $active = 1;
				$active = 0 if ($xml_judge->{STOPSCHEDULING} eq "true");

				$judge = Tab::Judge->create({
					school        => 0,
					first         => ucfirst($xml_judge->{FIRST}),
					last          => ucfirst($xml_judge->{LAST}),
					judge_group   => $judge_group->id,
					active        => $active,
					chapter_judge => 0,
					reg_time      => $now,
					obligation    => $xml_judge->{OBLIGATION},
					hired         => $xml_judge->{HIRED},
				});

				$judge->setting("notes", $xml_judge->{NOTES});

			} else { 

				my $chapter_judge = Tab::ChapterJudge->search( first => ucfirst($xml_judge->{FIRST}), last => ucfirst($xml_judge->{LAST}), chapter => $chapter_by_id{$xml_school})->first;

				if ($chapter_judge) { 
					
					$m->print("Judge ".$chapter_judge->id." found for $xml_judge->{FIRST} $xml_judge->{LAST} <br />") if $debug;

				} else { 

					$chapter_judge = Tab::ChapterJudge->create({
						first   => ucfirst($xml_judge->{FIRST}),
						last    => ucfirst($xml_judge->{LAST}),
						chapter => $chapter_by_id{$xml_school},
						created => $now
					});

					$m->print("Created chapter Judge ".$chapter_judge->id." found for $xml_judge->{FIRST} $xml_judge->{LAST} <br />") if $debug;

				}

				my $active = 1;
				$active = 0 if ($xml_judge->{STOPSCHEDULING} eq "true");

				$judge = Tab::Judge->create({
					school        => $school_by_id{$xml_school},
					first         => ucfirst($xml_judge->{FIRST}),
					last          => ucfirst($xml_judge->{LAST}),
					judge_group   => $judge_group->id,
					chapter_judge => $chapter_judge->id,
					reg_time      => $now,
					active        => $active,
					obligation    => $xml_judge->{OBLIGATION},
					hired         => $xml_judge->{HIRED},
				});

				$judge->setting("notes", $xml_judge->{NOTES});

				$m->print("Put judge into the tournament as id ".$judge->id." <br /><br />") if $debug;

			}

			$judge_by_id{$xml_judge->{ID}} = $judge;

		}

		#JUDGE PREFS
		$m->print("<h2>Judge Prefs</h2>") if $debug;

		foreach my $xml_pref (@{$data->{JUDGEPREF}}) {

			if ($xml_pref->{RATING} == 999) { 

				#This is a conflict, not a rating

				Tab::Strike->create({
					entry => $entry_by_id{$xml_pref->{TEAM}},
					judge => $judge_by_id{$xml_pref->{JUDGE}},
					type  => "conflict",
					tourn => $tourn->id,

				});


			} else {

				Tab::Rating->create({
					entry   => $entry_by_id{$xml_pref->{TEAM}},
					judge   => $judge_by_id{$xml_pref->{JUDGE}},
					ordinal => $xml_pref->{RATING},
					type    => "entry"
				});
			}
		}

		$m->print("Entered all the prefs <br /><br />") if $debug;

	    #ROUNDS
		$m->print("<h2>Rounds</h2>") if $debug;

		my @xml_rounds = sort {$a->{ID} <=> $b->{ID}} @{$data->{ROUND}};
		my @rounds;
		my %round_by_id = ();
		my %round_by_name = ();

		foreach my $xml_round (@xml_rounds) {

			my $xml_event;
			foreach my $can_event (@{$xml_round->{EVENT}}) { 
				$xml_event = $can_event;
			}

			my $round = Tab::Round->create({
				name     => $xml_round->{RD_NAME},
				label    => $xml_round->{LABEL},
				timeslot => $timeslot_by_id{$xml_round->{TIMESLOT}},
				event    => $event_by_id{$xml_event}->id,
				type     => lc($xml_round->{PAIRINGSCHEME}),
				site     => $site->id,
				judges   => $xml_round->{JUDGESPERPANEL},
				tb_set   => $tb_set_by_id{$xml_round->{TB_SET}}

			});

			push (@rounds, $round);
			$round_by_id{$xml_round->{ID}} = $round;
			$round_by_name{$xml_round->{LABEL}} = $round;

			$m->print("Round ".$round->label." has been created<br />") if $debug;
		}

		foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 

			my $round = $round_by_id{$xml_result->{RoundId}};	
			$round = $round_by_name{$xml_result->{RoundName}} unless $round; 	

			my %panel_by_id = ();

			PANEL:
			foreach my $xml_panel (@{$xml_result->{RESULT_BALLOT}}) { 

				my $id = $xml_panel->{Panel};
				$id = $xml_panel->{PanelID} unless $id;
				next unless $id;
		
				my $panel = $panel_by_id{$id};

				unless ($panel) { 

					my $room = 0;
					$room = $room_by_id{$xml_panel->{RoomID}} if $room_by_id{$xml_panel->{RoomID}};

					$panel = Tab::Panel->create({
						letter => $id,
						room   => $room,
						round  => $round,
						flight => $xml_panel->{Flight},
					});

					$m->print("Created panel ".$panel->id." in the round ".$round->label."<br />") if $debug;

					$panel_by_id{$id} = $panel;
				
				}

				my $judge_id = $judge_by_id{$xml_panel->{JudgeID}};

				my @xml_results = @{$xml_panel->{RESULT_SCORE}};

				my %ballot_by_entry = ();
				my %ballot_by_student = ();

				BALLOTS:
				foreach my $xml_ballot (@xml_results) { 

					next unless $xml_ballot->{Score_Name} eq "Ballot";

					my $entry = $entry_by_id{$xml_ballot->{Recipient}};

					my $bye;

					if ($judge_id == -1 || $xml_ballot->{Side} == -1) { 
						$bye++;
					}

					$judge_id = 0 if $judge_id < 1;

					my $ballot = Tab::Ballot->create({
						entry => $entry->id,
						panel => $panel->id,
						side  => $xml_ballot->{Side},
						judge => $judge_id,
						bye   => $bye
					});

					$ballot_by_entry{$xml_ballot->{Recipient}} = $ballot;
        	
					foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
						$ballot_by_student{$student->{ID}} = $ballot;
					}

				}

				foreach my $xml_ballot (@xml_results) { 

					my $tag = lc($xml_ballot->{Score_Name});
					$tag = "rank" if $tag eq "ranks";
					my $value = $xml_ballot->{content};

					my $ballot = $ballot_by_entry{$xml_ballot->{Recipient}}->id if $xml_ballot->{ScoreFor} eq "Team";
					my $student = $student_by_id{$xml_ballot->{Recipient}}->id if $xml_ballot->{ScoreFor} eq "Speaker";
					$ballot = $ballot_by_student{$xml_ballot->{Recipient}} if $xml_ballot->{ScoreFor} eq "Speaker";

					my $ballot_value = Tab::BallotValue->create({
						tag     => $tag,
						value   => $value,
						student => $student,
						ballot  => $ballot
					});

				}

			}

		}

	    #ROUND PAIRINGS AND RESULTS, PART DEUX; the EASIER WAY
		my $panel_count;
		my %panel_by_id = ();

		foreach my $xml_panel (@{$data->{PANEL}}) { 

			my $round = $round_by_id{$xml_panel->{ROUND}};
			my $room = 0;
			$room = $room_by_id{$xml_panel->{ROOM}} if $xml_panel->{ROOM};
			$room = 0 if $xml_panel->{ROOM} == -99;

			my $panel = Tab::Panel->create({
				round  => $round,
				room   => $room,
				letter => $panel_count++,
				flight => $xml_panel->{FLIGHT}
			});

			$panel_by_id{$xml_panel->{ID}} = $panel;

		}

		my %ballot_by_id = ();

		foreach my $xml_ballot (@{$data->{BALLOT}}) { 

			my $panel = $panel_by_id{$xml_ballot->{PANEL}};
			my $judge = 0;

			my $bye;

			if ($xml_ballot->{JUDGE} == -1 || $xml_ballot->{SIDE} == -1) { 
				$bye++;
			} else { 
				$judge = $judge_by_id{$xml_ballot->{JUDGE}} if $judge_by_id{$xml_ballot->{JUDGE}};
			}
			
			my $entry = $entry_by_id{$xml_ballot->{ENTRY}};

			my $ballot = Tab::Ballot->create({
				panel => $panel,
				judge => $judge,
				entry => $entry,
				side  => $xml_ballot->{SIDE},
				bye   => $bye
			});

			$ballot_by_id{$xml_ballot->{ID}} = $ballot;

		}

		foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 

			my $type = "ballot" if $xml_score->{SCORE_ID} == 1;
			$type = "points" if $xml_score->{SCORE_ID} == 2;
			$type = "rank" if $xml_score->{SCORE_ID} == 3;

			my $student = $student_by_id{$xml_score->{RECIPIENT}} if $type ne "Ballot";
			my $ballot = $ballot_by_id{$xml_score->{BALLOT}};

			my $score = Tab::BallotValue->create({
				tag     => $type,
				ballot  => $ballot,
				student => $student,
				value   => $xml_score->{SCORE}
			}) if $student;

			$score = Tab::BallotValue->create({
				tag    => $type,
				ballot => $ballot,
				value  => $xml_score->{SCORE}
			}) unless $student;

		}

		#Auto-audit any entered results
		foreach my $round (@rounds) {
			$m->comp("/funclib/round_audit.mas", round => $round);
		}
	} 

	$m->print("SUCCESS");

</%init>
	
