<%args>
	#Pass in an account, password, and whether to retrieve emails
	$username => undef
	$password => undef
	$email => undef
</%args>
<%init>

	use Crypt::PasswdMD5;

	my $now = DateTime->now;

	#Check Account
	my $login = Tab::Login->search( username => lc($username) )->first;
	unless ($login) {
		$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<ERROR>NO_SUCH_ACCOUNT</ERROR>");
		$m->abort;
	}	

	#Check Password
	$password =~ s/\s+$//g;
	my $db_password = $login->password;
	my $verify_password = unix_md5_crypt($password,$db_password);

	unless($verify_password eq $db_password) {
		$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<ERROR>PASSWORD_WRONG</ERROR>");
		$m->abort;
	}

	#Get account from login
	my $account = $login->person;

	#Initiate new XML
	use XML::Simple;
	my $xs = new XML::Simple();

	#Print the start of the XML
	$r->content_type("application/xml");
	$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n");
	$m->print("<ROUNDS>\r\n");

	#Set SQL for searching entries by student first/last
	Tab::Entry->set_sql ( by_student => "
		select distinct entry.*
		from entry, entry_student, student, event, tourn
		where student.last = ?
		and student.first = ?
		and student.id = entry_student.student
		and entry_student.entry = entry.id
		and entry.event = event.id
		and event.tourn = tourn.id
		order by tourn.start desc
	");

	#Get the entries for the debater with first/last from account
	my @entries = Tab::Entry->search_by_student($account->last, $account->first);

	my @panels;

	#Get panels (rounds) for each entry and store in array
	foreach my $entry (@entries) {
		my $entryid = $entry->id;
		Tab::Panel->set_sql( by_entry => "
			select distinct panel.*
			from panel, ballot, round
			where ballot.entry = $entryid
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.published = 1
			order by round.name desc
		");
		
		push( @panels, Tab::Panel->search_by_entry() );
	}

	#Initialize panel counter
	my $panelcount;
	$panelcount = 0;

	foreach my $panel (@panels) {

		$panelcount++;

		next unless $panel->round;

		my $round = $panel->round;
		my $event = $round->event;

		#Get date of round, split out the time
		my $startdate = $event->tourn->start if $event;
		next unless $startdate;
		my @datearray = split(/"T"/, $startdate);
		$startdate = $datearray[0];

		my $aff_string = $event->setting("aff_label");
		my $neg_string = $event->setting("neg_label");
		$aff_string = "Aff" unless $aff_string;
		$neg_string = "Neg" unless $neg_string;

		#Only include rounds from this season
		my $cutoff = "2015-09-01";
		if ($startdate gt $cutoff) {

			#Get tournament name (use UC webname for ease of reading) and round number
			my $tourn = ucfirst($event->tourn->webname);
			my $roundname = $round->realname;
			my $roundside;
			my $oppschool;
			my $oppname;		
			my $accountschool;
			my @studentaccts;

			#Get opposing school, opponent name, and side
			foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
				my $moi;
		
				#Find school for passed in account, save emails for first 3 panels if email flag is true
				foreach my $student ($entry->students) {
					if ($student->last eq $account->last && $student->first eq $account->first) {
						$accountschool = $entry->school->short_name;
						$moi++;
					} else {
						if ($email == 1 && $panelcount < 4) {
							push( @studentaccts,  Tab::Account->search( first => lc($student->first), last => lc($student->last) ) );
						}
					}
				}

				#Loop through students for each entry - set the side, and if opponent, save their name 
				foreach my $student ($entry->students) {
					if ($moi) {
						$roundside = $aff_string if $entry->side == 1;
						$roundside = $neg_string if $entry->side == 2;
					} else {
						$oppschool = $entry->school->short_name;
						if ($oppname eq "") {
							$oppname = $oppname . $student->last;
						} else {
							$oppname = $oppname . "-" . $student->last;
						}
						$roundside = $neg_string if $entry->side == 1;
						$roundside = $aff_string if $entry->side == 2;
					}
				}
			}

			#Get judges
			my $judgenames;
			my @judgeaccts;

			foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {
				$judgenames .= ", " if $judgenames;
				$judgenames .= $judge->last;
				
				if ($email == 1 && $panelcount < 4) {
					push( @judgeaccts, Tab::Account->search ( first => lc($judge->first), last => lc($judge->last) ) );
				}
			}

			#Set variables for the XML
			my $xml_round = {
				TOURNAMENT => $tourn,
				ROUND_NAME => $roundname,
				OPPONENT => $oppschool . " " . $oppname,
				JUDGE => $judgenames,
				SIDE => $roundside
			};

			#Print XML
			$m->print("<ROUND>\n");
			$m->print($xs->XMLout($xml_round, RootName => "", NoAttr => 1, XMLDecl => 0));

			foreach my $studentacct (@studentaccts) {
				$m->print("<STUDENT>\n");
				my $student_entry = {
					STUDENT_NAME => $studentacct->first . " " . $studentacct->last,
					STUDENT_EMAIL => $studentacct->email
				};
				$m->print($xs->XMLout($student_entry, RootName => "", NoAttr => 1, XMLDecl => 0));
				$m->print("</STUDENT>\n");
			}

			foreach my $judgeacct (@judgeaccts) {
				$m->print("<JUDGE_INFO>\n");
				my $judge_entry = {
					JUDGE_NAME => $judgeacct->first . " " . $judgeacct->last,
					JUDGE_EMAIL => $judgeacct->email
				};
				$m->print($xs->XMLout($judge_entry, RootName => "", NoAttr => 1, XMLDecl => 0));
				$m->print("</JUDGE_INFO>\n");
			}

			#Close Round
			$m->print("</ROUND>\n");		
		}
	
		#Exit early if only returning emails
		last if $email == 1 && $panelcount > 2;
	}

	#Close XML
	$m->print("</ROUNDS>");
</%init>
