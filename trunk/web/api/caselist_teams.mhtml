<%args>
	#Pass in a school by chapter ID code in the URL parameters
	$chapter_id => undef
	
</%args>
<%init>

	#Retrieve the chapter object by the chapter_id code
        my $chapter = Tab::Chapter->retrieve($chapter_id);
        
	#If chapter wasn't found, print an error and abort
	unless ($chapter) {
		$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<ERROR>School not found.</ERROR>");
		$m->abort;
 	}

	#Initiate new XML
	use XML::Simple;
	my $xs = new XML::Simple();

	#Print the start of the XML
	$r->content_type("application/xml");
	$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n");
	$m->print("<TEAMS>\r\n");

	#Set the school name for the XML
	my $schoolname = $chapter->name;
	my $shortname = $chapter->short_name;
	
	#Get all entries from the school (chapter)
        my @entries = $m->comp("/api/caselist_chapter_entries.mas", chapter => $chapter);

	my @teamlist;

	#Loop through all entries
	foreach my $entry (@entries) {
		my $entryid = $entry->id;
		my $entryname = $entry->name;
		my @studentnames;

		#Get students associated with each entry, put in an array
		Tab::EntryStudent->set_sql( all_by_entry =>
			"select entry_student.*
			from entry_student, entry
			where entry_student.entry = entry.id
			and entry.id = $entryid
			and entry.dropped != 1
			and entry.waitlist != 1
			");
		my @entrystudents = Tab::EntryStudent->search_all_by_entry;

		#If there's 2 students associated with the entry - excludes LD and IE
		if (@entrystudents.length == 2) {

			#Loop through array to get each student's name and put in array
			foreach my $student (@entrystudents) {
				my $first = $student->student->first;
				my $last = $student->student->last;
				push (@studentnames, $first . " " . $last);
			}
			#Sort the student names alphabetically
			my @sortedstudents = sort @studentnames;

			#Create an array of team and student names
			my $teamname = $shortname . " " . $sortedstudents[0] . "-" . $sortedstudents[1];
			my $debater1 = $sortedstudents[0];
			my $debater2 = $sortedstudents[1];

			#Add team to the final team list
			push (@teamlist, [$teamname, $debater1, $debater2]);
		}
	}

	#Remove duplicates from final team list
	my (%h, @unique);
	for (@teamlist) {
		push @unique, $_ if !$h{join $;, @$_}++;
	}
	my $uniquelength = scalar(@unique);

	#Loop through each team in the unique team list
	foreach my $number (0..$uniquelength - 1) {

		#Set variables for the XML
		my $xml_team = {
			TEAM_NAME => $unique[$number][0],
			DEBATER1 => $unique[$number][1],
			DEBATER2 => $unique[$number][2]
		};

		#Print XML
		$m->print("<TEAM>\n");
		$m->print($xs->XMLout($xml_team, RootName => "", NoAttr => 1, XMLDecl => 0));
		$m->print("</TEAM>\n");		
	}

	#Close XML
	$m->print("</TEAMS>");
</%init>
