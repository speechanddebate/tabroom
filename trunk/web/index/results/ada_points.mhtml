<%args>
	$account => undef
	$season  => undef
</%args>
<%init>

	my $key = $season;
	return if $m->cache_self( key => $key, expires_in => '20m' );

	my $debug=0;
	use Time::HiRes qw( time );
	use Data::Dumper;
	my $start = time();
		
	#season is the year in which a season ends, so for 2014-15 season=2015
	$season=Tab::school_year->year unless $season;
	my $startdate; my $enddate;
	$startdate="8/1/".$season if not $startdate;
	$enddate="12/31/".($season+1) if not $enddate;

	#my $start_date = DateTime->new(year=>2013, month=>1, day=>1);
	use DateTime::Format::Strptime;

	my $parser = DateTime::Format::Strptime->new(
		pattern=> '%m/%d/%Y',
		on_error=>'croak',
	);

	my $start_date = $parser->parse_datetime($startdate);
	my $end_date = $parser->parse_datetime($enddate);
		
	#Load in every ballot for the circuit

	#Pull all events with honors_weight into an array
	Tab::ResultValue->columns(TEMP => qw/entry/);
	Tab::ResultValue->columns(TEMP => qw/entry_name/);
	Tab::ResultValue->columns(TEMP => qw/entry_chapter/);
	Tab::ResultValue->columns(TEMP => qw/chapter_name/);
	Tab::ResultValue->columns(TEMP => qw/tourn/);
	Tab::ResultValue->columns(TEMP => qw/tourn_id/);
	Tab::ResultValue->columns(TEMP => qw/level/);
	Tab::ResultValue->columns(TEMP => qw/state/);
	Tab::ResultValue->set_sql(pull_results => "
		SELECT result_value.*, result.entry as entry, entry.code as entry_name, school.chapter as entry_chapter, tourn.name as tourn,
		chapter.name as chapter_name, event_setting.value as level, chapter.state as state, tourn.id as tourn_id
		FROM result, result_set, result_value, entry, school, event, tourn, chapter, event_setting
		WHERE result_value.result=result.id
				and result.result_set = result_set.id
				and result_set.label = 'ada_pts' 
				and entry.id = result.entry
				and school.id=entry.school
				and event.id=entry.event
				and event_setting.event=event.id
				and event_setting.tag='Level'
				and tourn.id=event.tourn
				and chapter.id = school.chapter
				and tourn.start>='$start_date'
		and tourn.end<='$end_date'
	");
	my @results = Tab::ResultValue->search_pull_results;
	
	my $end = time();
	if ($debug) { print "time to sql pull:  "; printf("%.2f\n", $end - $start); print "<br>"; }

#Create a hash that stores all info per entries;
		
	my %entry;
	foreach my $result ( @results ) {
		if ( $result->tag eq "ada_total" ) { $entry{$result->entry}{'ada_total'} = $result->value; }
		if ( $result->tag eq "ada_prelims" ) { $entry{$result->entry}{'ada_prelims'} = $result->value; }
		if ( $result->tag eq "ada_elims" ) { $entry{$result->entry}{'ada_elims'} = $result->value; }
		if ( $result->tag eq "ada_speaker" ) { $entry{$result->entry}{'ada_speaker'} = $result->value; }
		$entry{$result->entry}{'name'} = $result->entry_name;
		$entry{$result->entry}{'entry_chapter'} = $result->entry_chapter;
		$entry{$result->entry}{'chapter_name'} = $result->chapter_name;
		$entry{$result->entry}{'tourn'} = $result->tourn;
		$entry{$result->entry}{'tourn_id'} = $result->tourn_id;
		$entry{$result->entry}{'level'} = $result->level;
	}
	
	#now adjust hybrids; cut the points and create a new record with half the points
	@results = sort {$a->{'entry'} <=> $b->{'entry'}} @results;

	my $last_result = pop @results if @results;
	my $hi_entry_id = $last_result->entry if $last_result; #this is for hybrids

	foreach my $result ( @results ) {
		if ( $result->tag eq "hybrid" && $result->value == 1 ) {
			#print $entry{$result->entry}{'name'}." identified as a hybrid at ". $entry{$result->entry}{'tourn'}."<br>";
			$entry{$result->entry}{'ada_total'} = $entry{$result->entry}{'ada_total'} / 2;
			$entry{$result->entry}{'ada_prelims'} = $entry{$result->entry}{'ada_prelims'} / 2;
			$entry{$result->entry}{'ada_elims'} = $entry{$result->entry}{'ada_elims'} / 2;
			$entry{$result->entry}{'ada_speaker'} = $entry{$result->entry}{'ada_speaker'} / 2;
			$hi_entry_id++;
			$entry{$hi_entry_id}{'name'} = $result->entry_name;
			my @entry_student = Tab::EntryStudent->search( entry => $result->entry );
			foreach my $entry_student (@entry_student) {
				if ( $entry_student->student->chapter != $entry{$result->entry}{'chapter_name'} ) {
					$entry{$hi_entry_id}{'entry_chapter'} = $entry_student->student->chapter;
					$entry{$hi_entry_id}{'chapter_name'} = $entry_student->student->chapter->name;
				}
			}
			$entry{$hi_entry_id}{'name'} = $result->entry_name;
			$entry{$hi_entry_id}{'tourn'} = $result->tourn;
			$entry{$hi_entry_id}{'tourn_id'} = $result->tourn_id;
			$entry{$hi_entry_id}{'level'} = $result->level;
		}
	}
	
	$end = time();
	if ($debug) { print "time to make entry hash:  "; printf("%.2f\n", $end - $start); print "<br>"; }

#sort the school hash to come up with a set of standings
		my %standings; my %lvl; my %tourn; my $curr_chpt;
		foreach my $key (sort {$entry{$b}->{'entry_chapter'} <=> $entry{$a}->{'entry_chapter'} || $entry{$b}->{'ada_total'} <=> $entry{$a}->{'ada_total'} } keys(%entry) ) {
			#print "level is ".$entry{$key}{'level'}."<br>";
			#count top 8 per level but not more than 2 per tournament
			if ( $entry{$key}{'entry_chapter'} != $curr_chpt ) { %lvl = (); %tourn = (); }
			if ( $lvl{$entry{$key}{'level'}} < 8 && $tourn{$entry{$key}{'level'}}{$entry{$key}{'tourn_id'}} < 2 ) {
				$standings{$entry{$key}{'entry_chapter'}}{'name'} = $entry{$key}{'chapter_name'};
				$standings{$entry{$key}{'entry_chapter'}}{'ada_total'} += $entry{$hi_entry_id}{'ada_total'};
				if ($entry{$key}{'level'} eq 'open' ) { $standings{$entry{$key}{'entry_chapter'}}{'ada_open'} += $entry{$hi_entry_id}{'ada_total'}; }
				if ($entry{$key}{'level'} eq 'jv' ) { $standings{$entry{$key}{'entry_chapter'}}{'ada_jv'} += $entry{$hi_entry_id}{'ada_total'}; }
				if ($entry{$key}{'level'} eq 'novice' ) { $standings{$entry{$key}{'entry_chapter'}}{'ada_novice'} += $entry{$hi_entry_id}{'ada_total'}; }
				$lvl{$entry{$key}{'level'}} += 1; #count total entries per chapter per level
				$tourn{$entry{$key}{'level'}}{$entry{$key}{'tourn_id'}} += 1; #count total entries per chapter per level per tournament
				$entry{$key}{'counted'} = "*";
			}
			$curr_chpt = $entry{$key}{'entry_chapter'};
		}

#load all entries to find hybrids
	   
</%init>

		<input id="sort_break" type="hidden" value="0" >
		
<script>

	display_toggle = function(table_id) {
		var MasterTable = document.getElementById(table_id);
		if ( MasterTable.style.display == "none" ) {
			MasterTable.style.display = "table" ;
		} else {
			MasterTable.style.display = "none" ;
		}
		
		
	}
		
	make_standings = function() {
		var break_on = document.getElementById("sort_break").value;
		var MasterTable = document.getElementById("standings");
		var TableRows = MasterTable.getElementsByTagName("tr");
		var ctr=0; var ctr_str;
		for (var i = 1; i < TableRows.length; i++) {
			ctr = ctr+1;
			if ( break_on > 0 ) {
				if ( TableRows[i].cells[break_on].textContent != TableRows[i-1].cells[break_on].textContent ) { ctr=1; }
			}
			ctr_str=ctr;
			if ( ctr == 1 ) { ctr_str = ctr_str+"st"; }
			if ( ctr == 2 ) { ctr_str = ctr_str+"nd"; }
			if ( ctr == 3 ) { ctr_str = ctr_str+"rd"; }
			if ( ctr > 3 ) { ctr_str = ctr_str+"th"; }
			if ( break_on == 0 && ctr > 25) { ctr_str="--"; }
			if ( break_on > 0 && ctr > 10) { ctr_str="--"; }
			TableRows[i].cells[5].textContent=ctr_str;
		}		
	}
	
	mark_table_click = function () {
		var break_on = document.getElementById("sort_break");
		break_on.value=0;
	}
	
	$(document).ready(function() { 
		$("standings").tablesorter();
		var break_on = document.getElementById("sort_break");
		
		$("table").bind("sortStart",function() { 
			//$("#overlay").show(); 
		}).bind("sortEnd",function() {
			make_standings();
			//$("#overlay").hide(); 
		});
	
		$("#open-sort").click(function() {
			sort_break.value = 0;
			// set sorting column and direction, this will sort on the first and third column the column index starts at zero 
			var sorting = [[2,1]]; 
			$("table").trigger("sorton",[sorting]);
			// return false to stop default link action 
			return false; 
		});
		$("#jv-sort").click(function() {
			sort_break.value = 0;
			// set sorting column and direction, this will sort on the first and third column the column index starts at zero 
			var sorting = [[3,1]]; 
			$("table").trigger("sorton",[sorting]); 
			// return false to stop default link action 
			return false; 
		});
		$("#novice-sort").click(function() {
			sort_break.value = 0;
			// set sorting column and direction, this will sort on the first and third column the column index starts at zero 
			var sorting = [[4,1]]; 
			$("table").trigger("sorton",[sorting]); 
			// return false to stop default link action 
			return false; 
		});
		$("#total-sort").click(function() {
			sort_break.value = 0;
			// set sorting column and direction, this will sort on the first and third column the column index starts at zero 
			var sorting = [[1,1]]; 
			$("table").trigger("sorton",[sorting]); 
			// return false to stop default link action 
			return false; 
		}); 

		
	});
		
</script>

	<div class="main">

		<div class="full">

			<span class="threequarters">
				<h2>ADA points for <% $season %>-<% $season+1 %></h2>
			</span>

			<span class="quarter rightalign">
				<a class="button dkblue" href="#checker">Checker Table</a> 
			</span>
		</div>
		
		<& /funclib/tablesorter.mas, table => "standings" &>
		
		<h4>
			Standings
		</h4>

		<table id="standings">

			<thead>
				<tr class="yellowrow">
					<th class="smaller">Institution</th>
					<th onclick="mark_table_click()" class="smaller">Total</th>
					<th onclick="mark_standings_click()" class="smaller">Open</th>
					<th onclick="mark_table_click()" class="smaller">JV</th>
					<th onclick="mark_table_click()" class="smaller">Novice</th>
					<th class="smaller">Place</th>
				</tr>
			</thead>

			<tbody>

%				my $ctr;

%				foreach my $key (sort { $standings{$b}->{'ada_total'} <=> $standings{$a}->{'ada_total'}  } keys %standings ) {
					<tr>
						<td> <% $standings{$key}{'name'} %>  </td>
						<td> <% $standings{$key}{'ada_total'} %>  </td>
						<td> <% $standings{$key}{'ada_open'} %>  </td>
						<td> <% $standings{$key}{'ada_jv'} %>  </td>
						<td> <% $standings{$key}{'ada_novice'} %>  </td>
						<td> <% $ctr++ <= 24 ? $ctr : "" %>  </td>
					</tr>
%				}

			</tbody>

		</table>

		<h4 class="martopmore" id="checker">
			Checker Sheets
		</h4>

		<& /funclib/tablesorter.mas, table => "checkertable" &>

		<p class="explain">
		* = counts toward sweepstakes total (count top 8 scores in each division; no more than 2 per division per tournament)<br>
		</p>

		<table id="checkertable">
			<thead>
				<tr class="yellowrow">
					<th class="smaller">Institution</th>
					<th class="smaller">Entry</th>
					<th class="smaller">Tourn</th>
					<th class="smaller">Level</th>
					<th class="smaller">Total</th>
					<th class="smaller">Prelim</th>
					<th class="smaller">Elim</th>
					<th class="smaller">Speaker</th>
				</tr>
			</thead>

			<tbody>
%			foreach my $key (sort {$entry{$a}->{'chapter_name'} cmp $entry{$b}->{'chapter_name'} || $entry{$b}->{'level'} cmp $entry{$a}->{'level'} || $entry{$b}->{'ada_total'} <=> $entry{$a}->{'ada_total'}  } keys(%entry) ) {
%			   $entry{$key}{'ndt_elims'} = 0 unless $entry{$key}{'ndt_elims'};
				<tr>
					<td> <% $entry{$key}{'chapter_name'} %>  </td>
					<td> <a class="plain full marno" href="/index/tourn/postings/entry_record.mhtml?tourn_id=<% $entry{$key}{'tourn_id'} %>&entry_id=<% $key %>"> <% $entry{$key}{'name'} %>  </a> </td>
					<td> <% $entry{$key}{'tourn'} %>  </td>
					<td> <% $entry{$key}{'level'} %>  </td>
					<td> <% $entry{$key}{'ada_total'}.$entry{$key}{'counted'} %> </td>
					<td> <% $entry{$key}{'ada_prelims'} %> </td>
					<td> <% $entry{$key}{'ada_elims'} %> </td>
					<td> <% $entry{$key}{'ada_speaker'} %> </td>
				</tr>
%			}

			</tbody>

		</table>
			
		
% $end = time();
% print "total processing time:  "; printf("%.2f\n", $end - $start); 

	</div>

		<div class="menu">
			<div class="sidenote">
			
				<h4>Navigate</h4>
				
				<a class="blue full" href="#" id="total-sort">Total standings</a>
				<a class="blue full" href="#" id="open-sort">Open division standings</a>
				<a class="blue full" href="#" id="jv-sort">JV standings</a>
				<a class="blue full" href="#" id="novice-sort">Novice standings</a>
				<a class="blue full" href="ndt_ceda_points.=.mhtml">CEDA/NDT points</a>

				<a class="martop blue full" href="index.mhtml">Back to results main</a>
			</div>
			
			<div class="sidenote">

				<h4>Season selector:</h4>

				<form action="ada_points.mhtml" method="post">

				<div class="row">
	
					<span class="third">
							School Year
					</span>

%				   	my $this_year = Tab::school_year; my $year = $this_year->year;

					<span class="twothird">
						<select name="season" class="fixedsmaller chosen">
%							foreach my $tick (2012 .. $year+1) { 
								<option value="<% $tick %>" <% $tick == $year ? "selected" : "" %>> <% $tick." - ".($tick + 1) %> </option>
%							}
						</select>
					</span>

				</div>

				<div class="liblrow rightalign">
					<input type="submit" value="Search" class="thin">
					</form>
				</div>

			</div>
		
		</div>
