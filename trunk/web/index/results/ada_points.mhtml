<%args>
	$account => undef
	$season  => undef
</%args>
<%init>
    my $debug=0;
	use Time::HiRes qw( time );
	use Data::Dumper;
	my $start = time();
        
	#season is the year in which a season ends, so for 2014-15 season=2015
	$season=Tab::school_year->year unless $season;
	my $startdate; my $enddate;
	$startdate="8/1/".$season if not $startdate;
	$enddate="12/31/".($season+1) if not $enddate;

	#my $start_date = DateTime->new(year=>2013, month=>1, day=>1);
	use DateTime::Format::Strptime;

	my $parser = DateTime::Format::Strptime->new(
		pattern=> '%m/%d/%Y',
		on_error=>'croak',
	);

	my $start_date = $parser->parse_datetime($startdate);
	my $end_date = $parser->parse_datetime($enddate);
        
	#Load in every ballot for the circuit

	#Pull all events with honors_weight into an array
	Tab::ResultValue->columns(TEMP => qw/entry/);
	Tab::ResultValue->columns(TEMP => qw/entry_name/);
	Tab::ResultValue->columns(TEMP => qw/entry_chpt/);
	Tab::ResultValue->columns(TEMP => qw/chpt_name/);
	Tab::ResultValue->columns(TEMP => qw/tourn/);
	Tab::ResultValue->columns(TEMP => qw/tourn_id/);
	Tab::ResultValue->columns(TEMP => qw/level/);
	Tab::ResultValue->columns(TEMP => qw/state/);
	Tab::ResultValue->set_sql(pull_results => "
		SELECT result_value.*, result.entry as entry, entry.code as entry_name, school.chapter as entry_chpt, tourn.name as tourn,
		chapter.name as chpt_name, event_setting.value as level, chapter.state as state, tourn.id as tourn_id
		FROM result, result_set, result_value, entry, school, event, tourn, chapter, event_setting
		WHERE result_value.result=result.id
                and result.result_set = result_set.id
                and result_set.label = 'ada_pts' 
                and entry.id = result.entry
                and school.id=entry.school
                and event.id=entry.event
                and event_setting.event=event.id
                and event_setting.tag='Level'
                and tourn.id=event.tourn
                and chapter.id = school.chapter
                and tourn.start>='$start_date'
		and tourn.end<='$end_date'
	");
	my @results = Tab::ResultValue->search_pull_results;
	
    my $end = time();
    if ($debug) { print "time to sql pull:  "; printf("%.2f\n", $end - $start); print "<br>"; }

#Create a hash that stores all info per entries;
        
    my %entry;
    foreach my $result ( @results ) {
        if ( $result->tag eq "ada_tot" ) { $entry{$result->entry}{'ada_tot'} = $result->value; }
        if ( $result->tag eq "ada_prelims" ) { $entry{$result->entry}{'ada_prelims'} = $result->value; }
        if ( $result->tag eq "ada_elims" ) { $entry{$result->entry}{'ada_elims'} = $result->value; }
        if ( $result->tag eq "ada_spkr" ) { $entry{$result->entry}{'ada_spkr'} = $result->value; }
        $entry{$result->entry}{'name'} = $result->entry_name;
        $entry{$result->entry}{'entry_chpt'} = $result->entry_chpt;
        $entry{$result->entry}{'chpt_name'} = $result->chpt_name;
        $entry{$result->entry}{'tourn'} = $result->tourn;
        $entry{$result->entry}{'tourn_id'} = $result->tourn_id;
        $entry{$result->entry}{'level'} = $result->level;
    }
    
    #now adjust hybrids; cut the points and create a new record with half the points
    @results = sort {$a->{'entry'} <=> $b->{'entry'}} @results;

	my $last_result = pop @results if @results;
    my $hi_entry_id = $last_result->entry if $last_result; #this is for hybrids

    foreach my $result ( @results ) {
        if ( $result->tag eq "hybrid" && $result->value == 1 ) {
            #print $entry{$result->entry}{'name'}." identified as a hybrid at ". $entry{$result->entry}{'tourn'}."<br>";
            $entry{$result->entry}{'ada_tot'} = $entry{$result->entry}{'ada_tot'} / 2;
            $entry{$result->entry}{'ada_prelims'} = $entry{$result->entry}{'ada_prelims'} / 2;
            $entry{$result->entry}{'ada_elims'} = $entry{$result->entry}{'ada_elims'} / 2;
            $entry{$result->entry}{'ada_spkr'} = $entry{$result->entry}{'ada_spkr'} / 2;
            $hi_entry_id++;
            $entry{$hi_entry_id}{'name'} = $result->entry_name;
            my @entry_student = Tab::EntryStudent->search( entry => $result->entry );
            foreach my $entry_student (@entry_student) {
                if ( $entry_student->student->chapter != $entry{$result->entry}{'chpt_name'} ) {
                    $entry{$hi_entry_id}{'entry_chpt'} = $entry_student->student->chapter;
                    $entry{$hi_entry_id}{'chpt_name'} = $entry_student->student->chapter->name;
                }
            }
            $entry{$hi_entry_id}{'name'} = $result->entry_name;
            $entry{$hi_entry_id}{'tourn'} = $result->tourn;
            $entry{$hi_entry_id}{'tourn_id'} = $result->tourn_id;
            $entry{$hi_entry_id}{'level'} = $result->level;
        }
    }
    
    $end = time();
    if ($debug) { print "time to make entry hash:  "; printf("%.2f\n", $end - $start); print "<br>"; }

#sort the school hash to come up with a set of standings
        my %standings; my %lvl; my %tourn; my $curr_chpt;
		foreach my $key (sort {$entry{$b}->{'entry_chpt'} <=> $entry{$a}->{'entry_chpt'} || $entry{$b}->{'ada_tot'} <=> $entry{$a}->{'ada_tot'} } keys(%entry) ) {
			#print "level is ".$entry{$key}{'level'}."<br>";
			#count top 8 per level but not more than 2 per tournament
			if ( $entry{$key}{'entry_chpt'} != $curr_chpt ) { %lvl = (); %tourn = (); }
			if ( $lvl{$entry{$key}{'level'}} < 8 && $tourn{$entry{$key}{'level'}}{$entry{$key}{'tourn_id'}} < 2 ) {
				$standings{$entry{$key}{'entry_chpt'}}{'name'} = $entry{$key}{'chpt_name'};
				$standings{$entry{$key}{'entry_chpt'}}{'ada_tot'} += $entry{$hi_entry_id}{'ada_tot'};
				if ($entry{$key}{'level'} eq 'open' ) { $standings{$entry{$key}{'entry_chpt'}}{'ada_open'} += $entry{$hi_entry_id}{'ada_tot'}; }
				if ($entry{$key}{'level'} eq 'jv' ) { $standings{$entry{$key}{'entry_chpt'}}{'ada_jv'} += $entry{$hi_entry_id}{'ada_tot'}; }
				if ($entry{$key}{'level'} eq 'novice' ) { $standings{$entry{$key}{'entry_chpt'}}{'ada_novice'} += $entry{$hi_entry_id}{'ada_tot'}; }
				$lvl{$entry{$key}{'level'}} += 1; #count total entries per chapter per level
				$tourn{$entry{$key}{'level'}}{$entry{$key}{'tourn_id'}} += 1; #count total entries per chapter per level per tournament
				$entry{$key}{'counted'} = "*";
			}
			$curr_chpt = $entry{$key}{'entry_chpt'};
		}

#load all entries to find hybrids
       
</%init>

        <input id="sort_break" type="hidden" value="0" >
        
<script>

    display_toggle = function(table_id) {
        var MasterTable = document.getElementById(table_id);
        if ( MasterTable.style.display == "none" ) {
            MasterTable.style.display = "table" ;
        } else {
            MasterTable.style.display = "none" ;
        }
        
        
    }
        
    make_standings = function() {
        var break_on = document.getElementById("sort_break").value;
        var MasterTable = document.getElementById("standings");
        var TableRows = MasterTable.getElementsByTagName("tr");
        var ctr=0; var ctr_str;
        for (var i = 1; i < TableRows.length; i++) {
            ctr = ctr+1;
            if ( break_on > 0 ) {
                if ( TableRows[i].cells[break_on].textContent != TableRows[i-1].cells[break_on].textContent ) { ctr=1; }
            }
            ctr_str=ctr;
            if ( ctr == 1 ) { ctr_str = ctr_str+"st"; }
            if ( ctr == 2 ) { ctr_str = ctr_str+"nd"; }
            if ( ctr == 3 ) { ctr_str = ctr_str+"rd"; }
            if ( ctr > 3 ) { ctr_str = ctr_str+"th"; }
            if ( break_on == 0 && ctr > 25) { ctr_str="--"; }
            if ( break_on > 0 && ctr > 10) { ctr_str="--"; }
            TableRows[i].cells[5].textContent=ctr_str;
        }		
    }
    
    mark_table_click = function () {
        var break_on = document.getElementById("sort_break");
        break_on.value=0;
    }
    
    $(document).ready(function() { 
        $("standings").tablesorter();
        var break_on = document.getElementById("sort_break");
        
        $("table").bind("sortStart",function() { 
            //$("#overlay").show(); 
        }).bind("sortEnd",function() {
            make_standings();
            //$("#overlay").hide(); 
        });
    
        $("#open-sort").click(function() {
            sort_break.value = 0;
            // set sorting column and direction, this will sort on the first and third column the column index starts at zero 
            var sorting = [[2,1]]; 
            $("table").trigger("sorton",[sorting]);
            // return false to stop default link action 
            return false; 
        });
        $("#jv-sort").click(function() {
            sort_break.value = 0;
            // set sorting column and direction, this will sort on the first and third column the column index starts at zero 
            var sorting = [[3,1]]; 
            $("table").trigger("sorton",[sorting]); 
            // return false to stop default link action 
            return false; 
        });
        $("#novice-sort").click(function() {
            sort_break.value = 0;
            // set sorting column and direction, this will sort on the first and third column the column index starts at zero 
            var sorting = [[4,1]]; 
            $("table").trigger("sorton",[sorting]); 
            // return false to stop default link action 
            return false; 
        });
        $("#total-sort").click(function() {
            sort_break.value = 0;
            // set sorting column and direction, this will sort on the first and third column the column index starts at zero 
            var sorting = [[1,1]]; 
            $("table").trigger("sorton",[sorting]); 
            // return false to stop default link action 
            return false; 
        }); 

        
    });
        
</script>

	<div class="main">
        
        <h2>ADA points for <% $season %>-<% $season+1 %></h2>
        
        For overall novice, varsity, or JV point standings, simply click on the column header or the link to the right.
		You can also jump to the <a href="#checker">checker table</a> to view points by entry and tournament.
        
        <& /funclib/tablesorter.mas, table => "standings" &>
        
        <table cellpadding="3" width="100%" id="standings" name="standings" class="tablesorter"  >
        <caption><h3>Standings</h3></caption>
            <thead>
                    <tr class="dkblue">
                            <th class="smaller">Chapter</th>
                            <th onclick="mark_table_click()" class="smaller">Total</th>
                            <th onclick="mark_standings_click()" class="smaller">Open</th>
                            <th onclick="mark_table_click()" class="smaller">JV</th>
							<th onclick="mark_table_click()" class="smaller">Novice</th>
							<th class="smaller">Place</th>
                    </tr>
            </thead>
            <tbody>
%               my $ctr=0; my $ctr_str;           
%		foreach my $key (sort { $standings{$b}->{'ada_tot'} <=> $standings{$a}->{'ada_tot'}  } keys %standings ) {
%               $ctr++; if ( $ctr<=25 ) { $ctr_str=$ctr; } else { $ctr_str="--"; }
                    <tr>
                        <td> <% $standings{$key}{'name'} %>  </td>
                        <td> <% $standings{$key}{'ada_tot'} %>  </td>
                        <td> <% $standings{$key}{'ada_open'} %>  </td>
                        <td> <% $standings{$key}{'ada_jv'} %>  </td>
                        <td> <% $standings{$key}{'ada_novice'} %>  </td>
                        <td> <% $ctr_str %>  </td>
                    </tr>
%		}
        </table>
        
        <br>
        
        <br>
        <h3>Checker Sheets</h3>
		* = counts toward sweepstakes total (count top 8 scores in each division; no more than 2 per division per tournament)<br>
        <table cellpadding="3" width="100%" id="checker" name="checker" >
            <thead>
                    <tr class="dkblue">
							<th class="smaller">Chapter</th>
                            <th class="smaller">Entry</th>
                            <th class="smaller">Tourn</th>
                            <th class="smaller">Level</th>
							<th class="smaller">Total</th>
                            <th class="smaller">Prelim</th>
                            <th class="smaller">Elim</th>
                            <th class="smaller">Speaker</th>
                    </tr>
            </thead>
%                       $ctr=0;            
%			foreach my $key (sort {$entry{$a}->{'chpt_name'} cmp $entry{$b}->{'chpt_name'} || $entry{$b}->{'level'} cmp $entry{$a}->{'level'} || $entry{$b}->{'ada_tot'} <=> $entry{$a}->{'ada_tot'}  } keys(%entry) ) {
%                           $entry{$key}{'ndt_elims'} = 0 unless $entry{$key}{'ndt_elims'};
%                           $ctr++; my $disp_str=""; if ( $ctr%2 ) { $disp_str="class='even'"; }      
                            <tr <% $disp_str %> >
                                    <td> <% $entry{$key}{'chpt_name'} %>  </td>
                                    <td> <a href="/index/tourn/postings/entry_record.mhtml?tourn_id=<% $entry{$key}{'tourn_id'} %>&entry_id=<% $key %>"> <% $entry{$key}{'name'} %>  </a> </td>
                                    <td> <% $entry{$key}{'tourn'} %>  </td>
                                    <td> <% $entry{$key}{'level'} %>  </td>
                                    <td> <% $entry{$key}{'ada_tot'}.$entry{$key}{'counted'} %> </td>
                                    <td> <% $entry{$key}{'ada_prelims'} %> </td>
                                    <td> <% $entry{$key}{'ada_elims'} %> </td>
                                    <td> <% $entry{$key}{'ada_spkr'} %> </td>
                            </tr>
%			}
        </table>
            
		
% $end = time();
% print "total processing time:  "; printf("%.2f\n", $end - $start); 

	</div>

        <div class="menu">
            <div class="sidenote">
            
                <h4>Navigate</h4>
				
				<a href="#" id="total-sort">Total standings</a><br>
                <a href="#" id="open-sort">Open division standings</a><br>
                <a href="#" id="jv-sort">JV standings</a><br>
                <a href="#" id="novice-sort">Novice standings</a>
				<br><br>
				
                <a class="blue block" href="ndt_ceda_points.=.mhtml">CEDA/NDT points</a>
                <a class="blue block" href="index.mhtml">Back to results main</a>
            </div>
            
            <div class="sidenote">

            	<h4>Season selector:</h4>

		<form action="ada_points.mhtml" method="post">

                <div class="odd">
    
                    <span class="third">
                            School Year
                    </span>

%                   my $this_year = Tab::school_year; my $year = $this_year->year;

                    <span class="twothird">
                            <select name="season" class="fixedsmaller chosen">
%				foreach my $tick (2012 .. $year+1) { 
                                    <option value="<% $tick %>" <% $tick == $year ? "selected" : "" %>>
                                            <% $tick." - ".($tick + 1) %>
                                    </option>
%				}
                            </select>
                    </span>

		    <div class="liblrow rightalign">
			<input type="submit" value="Search" class="thin">
			</form>
		    </div>

                </div>
            </div>
        
        </div>
