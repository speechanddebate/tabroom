<%args>
	$account => undef
    $came_from => undef
    $delete_only => undef
	$ada => undef
	$event_id
	$circuit_id
</%args>

<%init>

    my $debug=0;        
    use Time::HiRes qw( time );
    my $start = time();

    my $event = Tab::Event->retrieve( $event_id );
    #my $tourn = Tab::Tourn->retrieve( $event->tourn ); 
    print "event=$event, tourn=".$event->tourn."<br>";
	print "ADA=".$ada."<br>" if $debug;
	
#Pull all ballots for event into an array

	Tab::Ballot->columns(TEMP => qw/round_name/);
    Tab::Ballot->columns(TEMP => qw/round_label/);
    Tab::Ballot->columns(TEMP => qw/round_type/);
	Tab::Ballot->columns(TEMP => qw/round_id/);
    Tab::Ballot->columns(TEMP => qw/ballot_vote/);
    Tab::Ballot->columns(TEMP => qw/panel_bye/);        
    Tab::Ballot->columns(TEMP => qw/entry_chapter/);
    Tab::Ballot->columns(TEMP => qw/entry_name/);
	Tab::Ballot->set_sql(pull_ballots => "
        SELECT ballot.*, round.name as round_name, round.type as round_type, panel.bye as panel_bye, panel.round as round_id, 
                ballot_value.value as ballot_vote, school.chapter as entry_chapter, entry.code as entry_name, round.label as round_label
		FROM ballot 
		INNER JOIN panel ON ballot.panel=panel.id
                INNER JOIN round ON panel.round=round.id
                INNER JOIN entry ON entry.id=ballot.entry
                INNER JOIN school ON school.id=entry.school
                LEFT JOIN ballot_value ON ballot_value.ballot=ballot.id
                WHERE round.published > 0 and round.event=? and (ballot_value.tag = 'ballot' or panel.bye=1 or ballot.bye=1 or ballot.noshow=1)
                order by ballot.entry asc, round_name desc, ballot.panel asc
	");
	my @ballots = Tab::Ballot->search_pull_ballots($event->id);
	print "pulled ".scalar(@ballots)." ballots<br>";
    my $end = time();
    print "time to sql pull:  "; printf("%.2f\n", $end - $start); print "<br>";

#Create a hash that stores all ceda, ndt, & ada points per entry

        my %entry;
        my $curr_round; my $tot_bal; my $bal_for; my $is_elim; my $curr_entry; my $rd_label; my $last_six=6; my $ada_elim=0;
		my $clearing_record; #necessary for ada; marks the record necessary to clear in an event
				
        foreach my $ballot (@ballots) {
            
            #print "Ballot for 594141; round name is ".$ballot->round_name." and ballot is $ballot and panel is ".$ballot->panel." (curr_rd=$curr_round)<br>" if $ballot->entry == 594141;
            #process what you've got if the current panel is different from the last one or you're counting ballots
			$clearing_record = 99 unless $clearing_record;
			
	    my $round = Tab::Round->retrieve( $ballot->round_id );
            if ( $ballot->round_name != $curr_round || $ballot->id == $ballots[$#ballots]->id || $round->setting("num_judges") == 2 ) {
                
                #ugly code, but necessary for the last ballot.  Bummer.  Note to self: Fix in node.js
                #Last ballot, and it's not a new round (multi-judge prelim panels)
                if ( $ballot->id == $ballots[$#ballots]->id && $ballot->round_name == $curr_round ) {
                    print "In last ballot processing mode; mutli-judge panel<br>";
                    $bal_for += $ballot->ballot_vote ;
                    $tot_bal ++ ;
                    if ( $ballot->panel_bye && defined($ballot->ballot_vote) !=1 ) {
                        $bal_for = 3; $tot_bal = 3;
                    }
                    if ( $ballot->panel_bye && $ballot->ballot_vote == 1 ) {
                        $bal_for = 3; $tot_bal = 3;
                    }
                    if ( $ballot->bye == 1 ) { $bal_for = 3; $tot_bal = 3;}
                    if ( $ballot->noshow == 1 ) { $bal_for = 0; $tot_bal = 3;}
                    $curr_entry = $ballot->entry;
                    $is_elim = 0 ;
                    if ( $ballot->round_type eq "final" || $ballot->round_type eq "elim" ) {
                        $is_elim = 1 ;
                        if (index(lc($rd_label), "sem") != -1) { $is_elim = 2; }
                        if ( $ballot->round_type eq "final") { $is_elim = 3 ;}
                        if (index(lc($rd_label), "final") != -1) { $is_elim = 3; }
                    }
                }
                
                if ( $is_elim == 0 ) {
                    
                    print "Inside prelim counter<br>" if $ballot->entry == 594141;
                    
                    $entry{$curr_entry}{'prelim_tot'}++;
                    
                    if ($bal_for > $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_win'}++; $entry{$curr_entry}{'prelim_str'}= "W".$entry{$curr_entry}{'prelim_str'}; }
                    if ($bal_for <= $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_str'}= "L".$entry{$curr_entry}{'prelim_str'}; }
                    
                    if ( $last_six > 0 ) {
                        $entry{$curr_entry}{'prelim_tot_L6'}++;
                        if ($bal_for > $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_win_L6'}++; }
                    }
                    
                    print "As of round $curr_round wins are $entry{$curr_entry}{'prelim_win'} and L6 are $entry{$curr_entry}{'prelim_win_L6'} $entry{$curr_entry}{'prelim_str'}<br>" if $debug == 2 or $curr_entry == 594141;                     
                    
                    $last_six --;
                }

                #Last ballot, and it's a new round (single-judge prelim panel)
                if ( $ballot->id == $ballots[$#ballots]->id && $ballot->round_name != $curr_round ) {

                    print "Inside prelim counter; last ballot in the array<br>" if $ballot->entry == 594141;
                    
                    $bal_for = $ballot->ballot_vote ;
                    $tot_bal = 1 ;
                    if ( $ballot->panel_bye && defined($ballot->ballot_vote) !=1 ) {
                        $bal_for = 3; $tot_bal = 3;
                    }
                    if ( $ballot->panel_bye && $ballot->ballot_vote == 1 ) {
                        $bal_for = 3; $tot_bal = 3;
                    }
                    if ( $ballot->bye == 1 ) { $bal_for = 3; $tot_bal = 3;}
                    $curr_entry = $ballot->entry;
                    
                    $entry{$curr_entry}{'prelim_tot'}++;
                    
                    if ($bal_for > $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_win'}++; $entry{$curr_entry}{'prelim_str'}= "W".$entry{$curr_entry}{'prelim_str'}; }
                    if ($bal_for <= $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_str'}= "L".$entry{$curr_entry}{'prelim_str'}; }
                    
                    if ( $last_six > 0 ) {
                        $entry{$curr_entry}{'prelim_tot_L6'}++;
                        if ($bal_for > $tot_bal-$bal_for) { $entry{$curr_entry}{'prelim_win_L6'}++; }
                    }
                    
                    print "As of round ".$ballot->round_name." wins are $entry{$curr_entry}{'prelim_win'} and L6 are $entry{$curr_entry}{'prelim_win_L6'} $entry{$curr_entry}{'prelim_str'}<br>" if $debug == 2 or $curr_entry == 594141;                     
                    
                }
                
                if ( $is_elim > 0 ) {
                
                    print "Inside elim counter<br>" if $ballot->entry == 594141;
					$ada_elim=3; #if you clear, you get your 3 points
					
                    #create elim string
                    $entry{$curr_entry}{'elim_str'} .= $rd_label;
                    $entry{$curr_entry}{'elim_str'} .= " ".$bal_for."-";
                    $entry{$curr_entry}{'elim_str'} .= $tot_bal-$bal_for;
                    $entry{$curr_entry}{'elim_str'} .= "<br>";
                    
                    #assign CEDA points 
                    my $dummy = $bal_for;
                    if ( $dummy > 3 ) { $dummy = 3 };
                    if ( $dummy == 3 && $bal_for < $tot_bal ) { $dummy = 2 };
                    if ( $dummy > 1 && ($tot_bal-$bal_for) > $bal_for ) { $dummy = 1 };
                    $entry{$curr_entry}{'ceda_elims'} += $dummy;
                    if ( $is_elim == 2 &&  $entry{$curr_entry}{'ceda_tb'} < 1 ) { $entry{$curr_entry}{'ceda_tb'} = 1; }
                    if ( $is_elim == 3 && $bal_for > ($tot_bal-$bal_for) ) { $entry{$curr_entry}{'ceda_tb'} = 5; }
                    if ( $is_elim == 3 && $bal_for < ($tot_bal-$bal_for) ) { $entry{$curr_entry}{'ceda_tb'} = 3; }
                    
                    #assign NDT points & ADA points for a win
                    my $bal_lost=$tot_bal - $bal_for;
                    if ( $bal_for >= $tot_bal ) { $dummy = 6; }
                    if ( $bal_for > $bal_lost && $bal_for != $tot_bal && $tot_bal > 1 ) { $dummy = 5; }
                    if ( $bal_for < $bal_lost && $bal_for > 0 ) { $dummy = 4; }
                    if ( $bal_for == 0  ) { $dummy = 3; }
                    $entry{$curr_entry}{'ndt_elims'} += $dummy;
					if ( $bal_for > $bal_lost ) { $entry{$curr_entry}{'ndt_elims'} += 3; }
                    
		    if ($debug == 2 or $curr_entry == 594141) {
                        print $entry{$curr_entry}{'code'}." ";
                        print $entry{$curr_entry}{'elim_str'}." ";
						print "bal_for is $bal_for/total ballots are $tot_bal and ceda elim points are now:".$entry{$curr_entry}{'ceda_elims'}."<br>";
                        print "bal_for is $bal_for/total ballots are $tot_bal and NDT elim points are now:".$entry{$curr_entry}{'ndt_elims'}."<br>";
                    }
                }
                
                $bal_for=0; $tot_bal=0; $curr_round = $ballot->round_name;
                
                if ( $curr_entry != $ballot->entry || $ballot->id == $ballots[$#ballots]->id ) {
                
                    print "Now SUMMING TOTALS; ballot is $ballot and last ballot is ".$ballots[$#ballots]->id."<BR>" if $ballot->entry == 624773;
                    
                    #CEDA points
                    $entry{$curr_entry}{'ceda_prelims'} = $entry{$curr_entry}{'prelim_win_L6'};
                    $entry{$curr_entry}{'ceda_prelims'} = 1 unless $entry{$curr_entry}{'ceda_prelims'};
                    $entry{$curr_entry}{'ceda_elims'} = 0 unless $entry{$curr_entry}{'ceda_elims'};
                    $entry{$curr_entry}{'ceda_tot'} = $entry{$curr_entry}{'ceda_prelims'}+$entry{$curr_entry}{'ceda_elims'};
                    
                    #NDT Points
                    my $dummy = 0; $entry{$curr_entry}{'ndt_prelims'} = 0;
                    $dummy = ($entry{$curr_entry}{'prelim_win'} / $entry{$curr_entry}{'prelim_tot'}) if $entry{$curr_entry}{'prelim_tot'};
                    if ($dummy == 1 ) { $entry{$curr_entry}{'ndt_prelims'} = 16 };
                    if ($dummy >= .8 && $dummy < 1 ) { $entry{$curr_entry}{'ndt_prelims'} = 15 };
                    if ($dummy >= .7 && $dummy < .8 ) { $entry{$curr_entry}{'ndt_prelims'} = 14 };
                    if ($dummy >= .55 && $dummy < .7 ) { $entry{$curr_entry}{'ndt_prelims'} = 13 };
                    if ($dummy == .5 ) { $entry{$curr_entry}{'ndt_prelims'} = 12 };
                    if ($dummy >= .28 && $dummy < .5 ) { $entry{$curr_entry}{'ndt_prelims'} = 11 };
                    if ($dummy >= .25 && $dummy < .28 ) { $entry{$curr_entry}{'ndt_prelims'} = 10 };
                    if ($dummy > 0 && $dummy < .25 ) { $entry{$curr_entry}{'ndt_prelims'} = 9 };
                    if ($dummy == 0 ) { $entry{$curr_entry}{'ndt_prelims'} = 8 };
                    $entry{$curr_entry}{'ndt_tot'} = $entry{$curr_entry}{'ndt_prelims'}+$entry{$curr_entry}{'ndt_elims'};
    
					#ADA Points
					$entry{$curr_entry}{'ada_prelims'} = 0;
					my $wins=$entry{$curr_entry}{'prelim_win'};
					my $losses=$entry{$curr_entry}{'prelim_tot'}-$entry{$curr_entry}{'prelim_win'};
                    if ($wins >= 6 && $losses == 0 ) { $entry{$curr_entry}{'ada_prelims'} = 10 };
					if ($wins == 7 && $losses == 1 ) { $entry{$curr_entry}{'ada_prelims'} = 8 };
                    if ($wins == 6 && $losses == 2) { $entry{$curr_entry}{'ada_prelims'} = 7 };
					if ($wins == 5 && $losses == 1 ) { $entry{$curr_entry}{'ada_prelims'} = 7 };
					if ($wins == 5 && $losses == 3 ) { $entry{$curr_entry}{'ada_prelims'} = 6 };
					if ($wins == 4 && $losses == 2 ) { $entry{$curr_entry}{'ada_prelims'} = 6 };
					if ($wins > 0 && $losses == $wins ) { $entry{$curr_entry}{'ada_prelims'} = 5 };
					if ($wins == 3 && $losses == 5 ) { $entry{$curr_entry}{'ada_prelims'} = 4 };
					if ($wins == 2 && $losses == 4 ) { $entry{$curr_entry}{'ada_prelims'} = 4 };
					if ($wins == 2 && $losses == 6 ) { $entry{$curr_entry}{'ada_prelims'} = 3 };
					if ($wins == 1 && $losses == 5 ) { $entry{$curr_entry}{'ada_prelims'} = 3 };
					if ($wins == 1 && $losses == 7 ) { $entry{$curr_entry}{'ada_prelims'} = 2 };
					if ($wins == 0 && $losses > 0 ) { $entry{$curr_entry}{'ada_prelims'} = 1 };
					#now elims and sum
					if ( $ada_elim > 0 && $wins < $clearing_record ) { $clearing_record = $wins } ;
					$entry{$curr_entry}{'ada_elims'} += $ada_elim; #add any points for clearing
                    $entry{$curr_entry}{'ada_total'} = $entry{$curr_entry}{'ada_prelims'}+$entry{$curr_entry}{'ada_elims'};
					
                    if ($debug == 2 or $curr_entry == 624773 ) {
                        print $entry{$curr_entry}{'code'}." ";
                        print $entry{$curr_entry}{'prelim_win'}."-";
                        print $entry{$curr_entry}{'prelim_tot'}-$entry{$curr_entry}{'prelim_win'}." ";
                        print "ballot string is :".$entry{$curr_entry}{'prelim_str'}." ";
                        print "L6=".$entry{$curr_entry}{'prelim_win_L6'}."-";
                        print $entry{$curr_entry}{'prelim_tot_L6'}-$entry{$curr_entry}{'prelim_win_L6'}." ";
                        print $entry{$curr_entry}{'elim_str'};
                        print "Ceda total is ".$entry{$curr_entry}{'ceda_tot'}." and elims are ".$entry{$curr_entry}{'ceda_elims'};
                        print " NDT prelims ".$entry{$curr_entry}{'ndt_prelims'}." NDT elims ".$entry{$curr_entry}{'ndt_elims'}."<br>";
                    }
                    
                    #Variable reset for next team
                    $curr_entry = $ballot->entry;
                    $last_six=6;
                    
                }
            }
            
            $entry{$ballot->entry}{'code'} = $ballot->entry_name ;
            $entry{$ballot->entry}{'entry_chapter'} = $ballot->entry_chapter ;
            $rd_label = $ballot->round_label;
            $bal_for += $ballot->ballot_vote ;
            if ( $ballot->panel_bye && defined($ballot->ballot_vote) !=1 ) {
                print "panel bye and no ballot score, so you're the winner b/c no opponent<br>" if $debug>0;
                $bal_for = 3;
            }
            if ( $ballot->panel_bye && $ballot->ballot_vote == 1 ) {
                print "panel bye and you're marked as the winner, so you get 3 ballots<br>" if $debug>0;
                $bal_for = 3;
            }
            if ( $ballot->bye == 1 ) { $bal_for = 3; }
            $tot_bal ++ ;
            $curr_entry = $ballot->entry;
            $is_elim = 0 ;
            if ( $ballot->round_type eq "final" || $ballot->round_type eq "elim" ) {
                $is_elim = 1 ;
                if (index(lc($rd_label), "sem") != -1) { $is_elim = 2; }
                if ( $ballot->round_type eq "final") { $is_elim = 3 ;}
                if (index(lc($rd_label), "final") != -1) { $is_elim = 3; }
            }
            
        }
       
    $end = time();
    print "time to process initial hash:  "; printf("%.2f\n", $end - $start); print "<br>";
	
#ADA -- add for missed on points and speakers
    
	#missed on points
	foreach my $key (keys %entry) {
		if ( $entry{$key}{'prelim_win'} >= $clearing_record && $entry{$key}{'ada_elims'} == 0 ) {
			$entry{$key}{'ada_elims'} = 1;
			$entry{$key}{'ada_total'} += 1;
		}
	}
	print "Just looped entrys for ADA missed on points<br>";
	
	#speakers
	Tab::Result->columns(TEMP => qw/spkr_order/);
	Tab::Result->columns(TEMP => qw/student_first/);
	Tab::Result->columns(TEMP => qw/student_last/);
	Tab::Result->set_sql(pull_speakers => "
        SELECT result.id, entry, student, result_value.value as spkr_order, student.first as student_first, student.last as student_last
		FROM result, result_set, result_value, student
		WHERE result_set.event=? and result.result_set=result_set.id and result_set.label='Speaker Awards' and result_value.result=result.id
		and result_value.tag='order' and student.id=result.student
	");
	my @speakers = Tab::Result->search_pull_speakers($event_id);

	print scalar(@speakers)." total speakers<br>";
	foreach my $speaker (@speakers) {
		#print "entry:".$speaker->entry." student".$speaker->student." value=".$speaker->spkr_order." ".$speaker->student_last."<Br>";
		my $ada_speaker_pts;
		if ( $speaker->spkr_order == 1) { $entry{$speaker->entry}{'ada_speaker'} += 3; $ada_speaker_pts=3; }
		if ( $speaker->spkr_order == 2) { $entry{$speaker->entry}{'ada_speaker'} += 2; $ada_speaker_pts=2; }
		if ( $speaker->spkr_order == 3) { $entry{$speaker->entry}{'ada_speaker'} += 1; $ada_speaker_pts=1; }
		if ( $speaker->spkr_order >=4 && $speaker->spkr_order <= 5 && scalar(@speakers) >= 21 ) { $entry{$speaker->entry}{'ada_speaker'} += 1; $ada_speaker_pts=1;}
		if ( $speaker->spkr_order >=6 && $speaker->spkr_order <= 10 && scalar(@speakers) >= 31 ) { $entry{$speaker->entry}{'ada_speaker'} += 1; $ada_speaker_pts=1; }
		$entry{$speaker->entry}{'ada_total'} +=  $ada_speaker_pts;
		$entry{$speaker->entry}{'ada_speaker_str'} = $speaker->student_first." ".$speaker->student_last." was speaker #".$speaker->spkr_order." and received $ada_speaker_pts points for ".$entry{$speaker->entry}{'code'}." total is now ".$entry{$speaker->entry}{'ada_speaker'} if $ada_speaker_pts;
		print $entry{$speaker->entry}{'ada_speaker_str'}."<br>" if $ada_speaker_pts;		
	}
	print "Just looped ADA speakers<br>";
	
    $end = time();
    print "time to process ADA pull:  "; printf("%.2f\n", $end - $start); print "<br>";

#CEDA save: Create a result set or delete existing records if one already exists

    my @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ceda_pts" );
    print "result sets retrieved:".scalar(@result_set)."<br>";
    my $result_set_id;
    
    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {
        
        $result_set_id = $result_set[0]->id;
        
        Tab::ResultValue->set_sql( delete_value => "
                 delete result_value from result_value, result
                 where result.result_set = ?
                 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);
         print "deleted existing result_value and result records<br>";
    
    } else {
        
        Tab::ResultSet->create({
            tourn  => $event->tourn,
            event  => $event_id,
            published  => 1,
            label  => "ceda_pts"
        });
        
        @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ceda_pts" );
        $result_set_id = $result_set[0]->id;
        print "created new result_set<br>";
    }

#CEDA save: store the values

    foreach my $key (keys %entry) {
    
        #mark a team as hybrid if they are
        my $hybrid=0; my $school=0;
        my @entry_student = Tab::EntryStudent->search( entry => $key );
        foreach my $entry_student (@entry_student) {
            if ( $school == 0 ) {
                $school = $entry_student->student->chapter
            } else {
                if ( $entry_student->student->chapter != $school ) { $hybrid=1; }
            }
        }
        
        
        if ( $key > 0 && $delete_only != 1 ) {
            
            Tab::Result->create({
                entry  => $key,
                result_set  => $result_set_id
            });
            
            my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
            my $result_id = $result_ids[0]->id;
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_tot",
                value   =>  $entry{$key}{'ceda_tot'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_prelims",
                value   =>  $entry{$key}{'ceda_prelims'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_elims",
                value   =>  $entry{$key}{'ceda_elims'}
            });
            
            $entry{$key}{'ceda_tb'} = 0 unless $entry{$key}{'ceda_tb'};
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_tb",
                value   =>  $entry{$key}{'ceda_tb'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "hybrid",
                value   =>  $hybrid
            });

        }

    }

print "saved all the ceda points with result set $result_set_id<br>";
$end = time();
print "time to CEDA save: "; printf("%.2f\n", $end - $start); print "<br>";

#NDT save: Create a result set or delete existing records if one already exists

    @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ndt_pts" );
    print "result sets retrieved:".scalar(@result_set)."<br>";
    $result_set_id = 0;
    
    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {
        
        $result_set_id = $result_set[0]->id;
        
        Tab::ResultValue->set_sql( delete_value => "
                 delete result_value from result_value, result
                 where result.result_set = ?
                 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);
         print "deleted existing result_value and result records for NDT<br>";
    
    } else {
        
        Tab::ResultSet->create({
            tourn  => $event->tourn,
            event  => $event_id,
            published  => 1,
            label  => "ndt_pts"
        });
        
        @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ndt_pts" );
        $result_set_id = $result_set[0]->id;
        print "created new NDT result_set<br>";
    }

#NDT save: store the values

    foreach my $key (keys %entry) {
        
        if ( $key > 0 && $delete_only != 1 ) {
            
            print "now saving NDT points for $key<br>" if $debug>0;
            
            Tab::Result->create({
                entry  => $key,
                result_set  => $result_set_id
            });
            
            my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
            my $result_id = $result_ids[0]->id;
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_tot",
                value   =>  $entry{$key}{'ndt_tot'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_prelims",
                value   =>  $entry{$key}{'ndt_prelims'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_elims",
                value   =>  $entry{$key}{'ndt_elims'}
            });

        }

    }

print "saved all the NDT points with result set $result_set_id<br>";
$end = time();
print "time to NDT save: "; printf("%.2f\n", $end - $start); print "<br>";

#ADA save: Create a result set or delete existing records if one already exists

    @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ada_pts" );
    print "ADA result sets retrieved:".scalar(@result_set)."<br>";
    $result_set_id = 0;
    
    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {
        
        $result_set_id = $result_set[0]->id;
        
        Tab::ResultValue->set_sql( delete_value => "
                 delete result_value from result_value, result
                 where result.result_set = ?
                 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);
         print "deleted ADA existing result_value and result records<br>";
    
    } else {
		
		#create a new result_set unless it's in delete only mode
		#and only if you're running ADA points
		
		if ( $delete_only != 1 && $ada eq "true") {        
        
			Tab::ResultSet->create({
				tourn  => $event->tourn,
				event  => $event_id,
				published  => 1,
				label  => "ada_pts"
			});
			
			@result_set = Tab::ResultSet->search( event=> $event_id, label=>"ada_pts" );
			$result_set_id = $result_set[0]->id;
	        print "created new ADA result_set<br>";
			
		}
		
    }

#ADA save: store the values

if ($ada eq "true") {

    foreach my $key (keys %entry) {
        
        if ( $key > 0 && $delete_only != 1 ) {
            
            print "now saving ADA points for $key<br>" if $debug>0;
            
            Tab::Result->create({
                entry  => $key,
                result_set  => $result_set_id
            });
            
            my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
            my $result_id = $result_ids[0]->id;
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ada_total",
                value   =>  $entry{$key}{'ada_total'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ada_prelims",
                value   =>  $entry{$key}{'ada_prelims'}
            });
            
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ada_elims",
                value   =>  $entry{$key}{'ada_elims'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ada_speaker",
                value   =>  $entry{$key}{'ada_speaker'}
            });
			
        }

    }


	print "saved all the ADA points with result set $result_set_id<br>";
	$end = time();
	print "time to ADA save: "; printf("%.2f\n", $end - $start); print "<br>";

} #end of ADA save

print "came from $came_from and debug is $debug";

    if ( $came_from eq "manager" && $debug == 0 ) {
        my $msg="points saved";
        if ($delete_only) { $msg="points deleted" }
        $m->redirect("/user/circuit/ndtceda_pt_manager.mhtml?circuit_id=".$circuit_id."&msg=$msg");
    }

</%init>
