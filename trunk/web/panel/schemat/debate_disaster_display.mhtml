<%args>
	$round_id
</%args>
<%doc>

	Check the bottom for simplified display code.  There's no need to create a
	separate module file for code that will never be called by something other
	than this screen and it slows down the app considerably.

</%doc>
<%init>

	my $round = Tab::Round->retrieve($round_id);
    my $timeslot = $round->timeslot;
	my $tourn = $timeslot->tourn;
	my $event = $round->event;

	my %tags; 
	my %problems;
	
    my $dbh = Tab::DBI->db_Main();
    
    #DOUBLE-BOOKED JUDGES

	$tags{"double_booked_judges"} = "Judges double booked this round";

    my $double_judges_sth = $dbh->prepare("
        select distinct judge.* from judge, panel, panel clonepanel, ballot, ballot cloneballot
        where panel.round = ".$round->id."
        and clonepanel.round = panel.round
        and panel.flight = clonepanel.flight
        and panel.id != clonepanel.id
        and panel.id = ballot.panel
        and ballot.judge = judge.id
        and clonepanel.id = cloneballot.panel
        and cloneballot.judge = judge.id
    ");

    $double_judges_sth->execute();

    while (my ($judge, $panel, $clonepanel, $ballot, $cloneballot)  = $double_judges_sth->fetchrow_array() ) {
        my $judge_info = Tab::Judge->retrieve($judge);
        $problems{"double_booked_judges"} .= '<p class="warning padless marno">'. $judge_info->first." ".$judge_info->last." is double-booked!</p>";
    }
    
    #RIGHT NUMBER OF AFF/NEGS


    my $side_locked;

	my $side_lock_against = $round->setting("sidelock_against");

    if ($side_lock_against) { 
        if ($side_lock_against ne "NONE") { 
            $side_locked++;
        }
    } else { 
        $side_locked++ unless ($round->name % 2);  
        undef $side_locked if $event->setting("no_side_constraints");
    }    

	undef $side_locked if $round->type eq "elim" || $round->type eq "final";

	if ($side_locked) { 

		$tags{"sides_uneven"} = "Entries on the wrong side";

		my $round_number = $round->name;

		while (not defined $side_lock_against && $round_number > 0) { 
			#Find previous round
			$round_number--;
			my $sla = Tab::Round->search( event => $event->name, name => $round_number)->first;
			$side_lock_against = $sla->id;
		}

		Tab::debuglog("Checking side locks against $side_lock_against");

		if ($side_lock_against) { 
        
			my $sides_sth = $dbh->prepare("
				select entry.code, b1.side, b2.side 
				from entry,
					ballot b1, panel p1,
					ballot b2, panel p2

					where b1.entry = entry.id
					and b1.panel = p1.id
					and p1.bye != 1

					and b2.entry = entry.id
					and b2.panel = p2.id
					and p2.bye != 1

					and p1.round = ".$round->id."
					and p2.round = ".$side_lock_against."

			");

     		$sides_sth->execute();
        
			while (my ($entry, $side1, $side2)  = $sides_sth->fetchrow_array() ) {
                $problems{"sides_uneven"} .= '<p class="warning padless marno">'. $entry." should be on the opposite side this round!</p>" if $side1 == $side2;
			}

		}
    }

    #UNSCHEDULED ENTRIES
	$tags{"unscheduled_entries"} = "Entries not on the pairing";

    unless ($round->type eq "elim" || $round->type eq "final") {

		Tab::Entry->set_sql( not_debating => "
			select entry.*
			from entry
			where entry.event = ? 
			and not exists (
				select ballot.id
				from ballot, panel
				where panel.round = ? 
				and ballot.panel = panel.id
				and ballot.entry = entry.id)" );

        foreach my $entry (Tab::Entry->search_not_debating( $event->id, $round->id )) { 
			$problems{"unscheduled_entries"}.= '<p class="warning padless marno">'. $entry->code. " is not scheduled</p>";
        }
    }
    
    #ENTRIES SCHEDULED TOO MANY TIMES
	$tags{"double_scheduled_entries"} = "Entries on the pairing twice";

	Tab::Entry->set_sql( debating_twice => "
		select entry.*
		from entry, ballot b1, panel p1, ballot b2, panel p2

		where entry.id = b1.entry
		and b1.panel = p1.id
		and entry.id = b2.entry
		and b2.panel = p2.id

		and p1.id > p2.id
		and p1.round = ? 
		and p1.round = p2.round 
	");

	foreach my $entry (Tab::Entry->search_debating_twice($round->id )) { 
		$problems{"double_scheduled_entries"}.= '<p class="warning padless marno">'. $entry->code. " is scheduled twice in the same round</p>";
	}
    
    #MEETING OWN SCHOOL 
	$tags{"same_school_sections"} = "Entries debating their own program";

	Tab::Entry->set_sql( same_school_sections => "
		select entry.*, opp.code as othername
		from entry, ballot, panel, 
		entry opp, ballot oballot

			where entry.id = ballot.entry
			and ballot.panel = oballot.panel
			and oballot.entry = opp.id
			and ballot.panel = panel.id
			and panel.round = ? 
			and opp.school = entry.school
			and opp.id < entry.id
	");

	foreach my $entry (Tab::Entry->search_same_school_sections($round->id )) { 
		$problems{"same_school_sections"}.= '<p class="warning padless marno">'. $entry->code." and ".$entry->othername." are from the same school!</p>";
	}

	#DEBATES WITH NO JUDGES

	$tags{"judgeless_sections"} = "Sections without judges";

	Tab::Panel->set_sql( judgeless_sections => "

		select distinct panel.*, e1.code as opp, e2.code as pos
		from panel, ballot b1, ballot b2, entry e1, entry e2
		where panel.id = b1.panel
		and panel.id = b2.panel

		and b1.entry = e1.id
		and b2.entry = e2.id
		and panel.round = ? 
		and panel.bye != 1
		and b1.bye != 1
		and b2.bye != 1
		and b1.noshow != 1
		and b2.noshow != 1

		and not exists ( 
			select judge.id 
			from judge, ballot bj
			where bj.panel = panel.id
			and bj.judge = judge.id
		)
		group by panel.id

	");

	foreach my $panel (Tab::Panel->search_judgeless_sections($round->id )) { 
		$problems{"judgeless_sections"}.= '<p class="warning padless marno">'. "Section ".$panel->letter." between ".$panel->opp." and ".$panel->pos." has no judge! </p>";
		undef $panel;
	}

    #ROOMS: DEBATES WITH NO ROOMS    
	$tags{"roomless_sections"} = "Sections without rooms";

	Tab::Panel->set_sql( roomless_sections => "
		select distinct panel.*, e1.code as opp, e2.code as pos
		from panel, ballot b1, ballot b2, entry e1, entry e2
		where panel.round = ? 
		and panel.room < 1
		and panel.bye != 1

		and panel.id = b1.panel
		and b1.bye !=1
		and b1.noshow !=1
		and b1.entry = e1.id

		and panel.id = b2.panel
		and b2.bye !=2
		and b2.noshow !=2
		and b2.entry = e2.id

		group by panel.id
	");

	foreach my $panel (Tab::Panel->search_roomless_sections($round->id )) { 
		$problems{"roomless_sections"}.= '<p class="warning padless marno">'. "Section ".$panel->letter." between ".$panel->opp." and ".$panel->pos." has no room! </p>";
		undef $panel;
	}

    #ENTRIES PREVIOUS MET
	$tags{"hit_before"} = "Entries who have debated before";

    my $second_hit_sth = $dbh->prepare("
		select distinct me.code, opp.code othername, otherround.name roundname, me_b1.side side1, me_b2.side side2

		from entry me, entry opp, round otherround,

			ballot me_b1, ballot opp_b1, panel p1, 
			ballot me_b2, ballot opp_b2, panel p2

			where me_b1.entry = me.id
			and opp_b1.entry = opp.id
			and me_b1.panel = opp_b1.panel
			and me_b1.panel = p1.id

			and p1.round = ? 

			and me_b2.entry = me.id
			and opp_b2.entry = opp.id
			and me_b2.panel = opp_b2.panel
			and me_b2.panel = p2.id
			and p2.round != p1.round
			and p2.round = otherround.id

			and me.id > opp.id
	");

	$second_hit_sth->execute($round->id);
		
	while (my ($entry, $opp, $round, $side1, $side2)  = $second_hit_sth->fetchrow_array() ) {

		$problems{"hit_before"}.= '<p class="warning padless marno">'. "Entry $entry debated $opp already in round $round ";
		$problems{"hit_before"}.= "on the SAME SIDE </p>" if $side1 == $side2;
		$problems{"hit_before"}.= "on the OPPOSITE SIDE </p>" if $side1 != $side2;
	}

    #JUDGES: HEARING A BLOCKED TEAM/SCHOOL
	$tags{"judge_preclusion"} = "Judge constraints/preclusions violated";

    #check to make sure this honors school preclusions
    my $strikes_sth = $dbh->prepare("
		select judge.first, judge.last, entry.code, panel.id, panel.letter, strike.type
		from strike, ballot, entry, judge, panel
		where panel.round = ".$round->id."
		and panel.id =  ballot.panel
		and ballot.entry = entry.id
		and ballot.judge = judge.id
		and strike.entry = entry.id
		and strike.judge = judge.id
	");

    $strikes_sth->execute();
        
    while (my ($judge_first, $judge_last, $entry, $panel, $panel_letter, $type)  = $strikes_sth->fetchrow_array() ) {
		$type = ucfirst($type);
		$problems{"judge_preclusion"}.= '<p class="warning padless marno">'. "$judge_first $judge_last is judging $entry in section $panel_letter, but has a preclusion of type $type </p>";
    }

    $strikes_sth = $dbh->prepare("
		select judge.first, judge.last, entry.code, panel.id, panel.letter, strike.type, school.name
		from strike, ballot, entry, judge, panel, school
		where panel.round = ".$round->id."
		and panel.id =  ballot.panel
		and ballot.entry = entry.id
		and ballot.judge = judge.id
		and school.id = entry.school
		and strike.school = school.id
		and strike.judge = judge.id
	");

    $strikes_sth->execute();
        
    while (my ($judge_first, $judge_last, $entry, $panel, $panel_letter, $type, $school)  = $strikes_sth->fetchrow_array() ) {
		$type = ucfirst($type);
		$problems{"judge_preclusion"}.= '<p class="warning padless marno">'. "$judge_first $judge_last is judging $entry from $school in section $panel_letter, but has a preclusion of type $type </p>";
    }

    #JUDGES NOT AVAILABLE THIS ROUND

	$tags{"judge_timestrike"} = "Judges used but not currently available";

    my $time_strikes_sth = $dbh->prepare("
		select distinct judge.id, judge.first, judge.last
		from judge, ballot, panel, round, strike, timeslot
		where round.id = ? 
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
		and strike.judge = judge.id
        and timeslot.id = round.timeslot
		and strike.start <= timeslot.end 		
		and strike.end >= timeslot.start
    ");

    $time_strikes_sth->execute($round->id);

    while (my ($id, $first, $last)  = $time_strikes_sth->fetchrow_array() ) {
		$problems{"judge_timestrike"}.= '<p class="warning padless marno"> Judge '. $first." ".$last." is unavailable for this round!</p>";
    }

	# MY OWN HIRES

	if ($event->judge_group->setting("auto_conflict_hires")) { 
	
		$tags{"hired_judging_me"} = "Hires judging the program paying them";

		Tab::JudgeHire->set_sql( "hires_judging_me" => "
			select distinct judge_hire.*
			from judge, ballot, judge_hire, entry, panel
			where panel.round = ? 
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and ballot.entry = entry.id
			and entry.school = judge_hire.school
			and judge.id = judge_hire.judge
			group by entry.id
		");

		foreach my $conflict (Tab::JudgeHire->search_hires_judging_me($round_id)) { 
			$problems{"hired_judging_me"} = $conflict->judge->first." ".$conflict->judge->last." is judging ".$conflict->school->name." who has hired them.";
		}

	}

	# ENTRY: HIT SAME SCHOOL TWICE IN PRESETS

	if ($round->type eq "prelim") { 

		$tags{"same_school_twice"} = "Entries debating a program twice in presets";

		Tab::Entry->set_sql( "same_school_twice" => "

			select distinct me.*, otherschool.name othername

			from entry me, school otherschool,
				entry opp1, ballot b1, panel p1, ballot ob1,
				entry opp2, ballot b2, panel p2, ballot ob2, round r2

				where me.id = b1.entry
				and b1.panel = p1.id
				and ob1.panel = p1.id
				and opp1.id = ob1.entry
				and ob1.entry != me.id

				and me.id = b2.entry
				and b2.panel = p2.id
				and ob2.panel = p2.id
				and opp2.id = ob2.entry
				and ob2.entry != me.id
			
				and p1.round != p2.round
				and p1.round = ?
				and p2.round = r2.id
				and r2.type = \"prelim\"

				and opp1.id != opp2.id
				and opp1.school = opp2.school
				and opp1.school = otherschool.id

		");

		foreach my $entry (Tab::Entry->search_same_school_twice($round->id)) { 
			$problems{"same_school_twice"} .= '<p class="warning padless marno">'. $entry->code." debates against entries from  ".$entry->othername." twice in presets. </p>";
		}

	}

	# ENTRY: HIT SAME REGION TWICE IN PRESETS

	if ($round->type eq "prelim" && ($event->setting("region_avoid") || $event->setting("region_constrain")) ) { 

		$tags{"same_region_twice"} = "Entries debating a region twice in presets";

		Tab::Entry->set_sql( same_region_twice => "

			select distinct me.*, otherregion.name othername
			from entry me, region otherregion, school,
				entry opp1, ballot b1, panel p1, ballot ob1, school s1,
				entry opp2, ballot b2, panel p2, ballot ob2, school s2, round r2

				where me.id = b1.entry
				and b1.panel = p1.id
				and ob1.panel = p1.id
				and opp1.id = ob1.entry
				and ob1.entry != me.id

				and me.id = b2.entry
				and b2.panel = p2.id
				and ob2.panel = p2.id
				and opp2.id = ob2.entry
				and ob2.entry != me.id
			
				and p1.round != p2.round
				and p1.round = ?
				and p2.round = r2.id
				and r2.type = \"prelim\"

				and opp1.school = s1.id
				and opp2.school = s2.id

				and s1.region = s2.region
				and s1.region = otherregion.id

				and opp1.school != opp2.school
		");

		foreach my $entry (Tab::Entry->search_same_region_twice($round->id)) { 
			$problems{"same_region_twice"} .= '<p class="warning padless marno">'. $entry->code." debates against entries from  ".$entry->othername." twice in presets. </p>";
		}

	}
    
    # JUDGES: HEARD TEAM BEFORE

	$tags{"judged_before"} = "Judges judging an entry twice";

    my $second_judged_sth = $dbh->prepare("

		select distinct entry.code, judge.first, judge.last, round.name, b1.side, b2.side

		from entry, judge, ballot b1, ballot b2, panel p1, panel p2, round

			where p1.round = ? 
			and p1.id = b1.panel
			and b1.entry = entry.id
			and b1.judge = judge.id

			and p2.round != p1.round
			and p2.id = b2.panel
			and b2.entry = entry.id
			and b2.judge = judge.id
			and round.id = p2.round

	");

	$second_judged_sth->execute($round->id);
		
	while (my ($entry, $first, $last, $round, $side1, $side2)  = $second_judged_sth->fetchrow_array() ) {
		$problems{"judged_before"}.= '<p class="warning padless marno">'. "Judge $first $last already judged $entry in round $round ";
		$problems{"judged_before"}.= "on the SAME SIDE </p>" if $side1 == $side2;
		$problems{"judged_before"}.= "on the OPPOSITE SIDE </p>" if $side1 != $side2;
	}

    # JUDGES: SAME SCHOOL AND/OR REGION

	$tags{"judged_own"} = "Judges judging their own entries";

	my $own_judged_sth;

	if ($event->setting("region_avoid") || $event->setting("region_constrain")) { 

		$own_judged_sth = $dbh->prepare("
			select distinct entry.code, judge.first, judge.last, region.name
				from entry, judge, panel, ballot, school judgeschool, school entryschool, region
				where panel.round = ? 
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and ballot.judge = judge.id
				and judge.school = judgeschool.id
				and entry.school = entryschool.id
				and judgeschool.region = entryschool.region
				and entryschool.region = region.id
		");

	} else { 

		$own_judged_sth = $dbh->prepare("
			select distinct entry.code, judge.first, judge.last, school.name
				from entry, judge, panel, ballot, school
				where panel.round = ? 
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and ballot.judge = judge.id
				and judge.school = entry.school
				and judge.school = school.id
		");

	}

	$own_judged_sth->execute($round->id);
		
	while (my ($entry, $first, $last, $name)  = $own_judged_sth->fetchrow_array() ) {
		$problems{"judged_own"}.= '<p class="warning padless marno">'. "Judge $first $last is judging $entry when both are from $name ";
	}

    # JUDGES: HEARING BLOCKED DIVISION
    # ROOMS: ROOMS USED TOO MANY TIMES
    # ROOMS: NOT AVAILABLE
    
</%init>

<div class="main">

	<h2><% $round->realname %> disaster checks</h2>

%	my $switch;

%	foreach my $tag (sort {$tags{$a} cmp $tags{$b}} keys %tags) { 

		<div class="<% ($switch++ % 2) ? "odd" : "even" %> full">

			<span class="twofifth">
				<% $tags{$tag} %> 
			</span>

			<span class="threefifths nospace padleft">
				<% $problems{$tag} ? $problems{$tag} : '<span class="rightalign nospace greentext"> OK! </span>' %>
			</span>
		</div>

% 	}

</div>

<div class="menu">

	<div class="sidenote">
		<a class="full blue" href="/panel/schemat/show.mhtml?round_id=<% $round_id %>">
			Return to Pairings
		</a>
	</div>

</div>
