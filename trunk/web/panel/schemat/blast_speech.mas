<%args>
	$round   => undef
	$panel   => undef
	$debug   => undef
	$message => undef
	$only    => undef
</%args>
<%init>

	$message = substr($message, 0, 50);

	$round = $panel->round unless $round;
	my $event = $round->event;
	my $tourn = $event->tourn;

	my $ncfl = $tourn->setting("ncfl");

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my %flight_start;
	my $flight_offset = $event->setting("flight_offset");

	my $flighted = $round->flighted;
	$flighted = 1 unless $flighted;

	foreach my $flight (1 .. $flighted) { 

		my $temp_start = $start->clone;

		$flight_start{$flight} = $temp_start if $flight == 1;
		next if $flight == 1;

		$temp_start->add( minutes => $flight_offset * ($flight - 1) );
		$flight_start{$flight} = $temp_start;
	}

	my @panels;
	my @entries;
	my @judges;
	my @ballots;

	unless ($panel) { 
	

		Tab::Panel->columns(TEMP => "roomname");

		Tab::Panel->set_sql( schemat => "
			select panel.*, room.name as roomname
			from panel, room
			where panel.round = ? 
			and panel.room = room.id
			order by panel.letter");

		Tab::Panel->set_sql( schemat_roomless => "
			select panel.*, \"None\" as roomname
			from panel
			where panel.round = ? 
			and panel.room = 0
			order by panel.letter");

		@panels = Tab::Panel->search_schemat($round->id);
		push (@panels, Tab::Panel->search_schemat_roomless($round->id));

		@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		@judges = $m->comp("/funclib/round_judges.mas", round => $round);
		@ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	} else { 
		@panels = ($panel);
		@entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		@judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@ballots = $panel->ballots;
	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		next if $entry->dropped;
		next if $entry->dq;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
		push @{$entries_by_panel{$panel->id}}, $entry if $panel;
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $judge (@judges) { 
		push (@{$judges_by_panel{$judge->panelid}}, $judge);
		push @{$judges_by_panel{$panel->id}}, $judge if $panel;
	}

	unless ($panel) { 
		@panels = sort {$a->roomname cmp $b->roomname} @panels;
		@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;
	}

	foreach my $panel (@panels) { 

		my $panel_start = $start;
		$panel_start = $flight_start{$panel->flight}->clone if $panel->flight && $flight_start{$panel->flight};

		unless ($only eq "judges") { 

			foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

				my $own_txt .= $pc->code." competing in ".$panel->round->event->abbr." ".$round->label."\n";
				$own_txt .= " Judges: ";
				
				foreach my $judge (@{$judges_by_panel{$panel->id}}) {
					$own_txt .= $judge->last.",".substr($judge->first,0,1)." - " unless $ncfl;
					$own_txt .= $judge->code." - " if $ncfl;
				}

				$own_txt .= "\n";

				$own_txt .= " Flight ".$panel->flight." \n" if $flighted > 1;
				$own_txt .= " Room ".$panel->room->name."\n" if $panel->room;
				$own_txt .= " Start: ".Tab::shorttime($panel_start)." ".$panel_start->time_zone->short_name_for_datetime($panel_start);
				$own_txt .= "\n\n$message" if $message;

				foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $pc)) { 

					$m->comp( "/funclib/send_notify.mas", 
						from    => 'Tabroom.com <live@tabroom.com>',
						to      => $follower,
						subject => $round->label." ".$pc->code,
						body    => $own_txt
					);

				}

			}
		}

		unless ($only eq "entries") { 

			foreach my $judge (@{$judges_by_panel{$panel->id}}) {

				my $own_txt = $judge->last." judging ".$panel->round->event->abbr." ".$round->label."\n" unless $ncfl;
				$own_txt = $judge->code." judging ".$panel->round->event->abbr." ".$round->label."\n" if $ncfl;

				$own_txt .= " in ".$panel->room->name."\n" if $panel->room;
				foreach my $pc (@{$entries_by_panel{$panel->id}}) { 
					$own_txt .= $pc->code." ";
				}

				$own_txt .= " Flight ".$panel->flight." \n" if $flighted > 1;
				$own_txt .= " Start: ".Tab::shorttime($panel_start)." ".$panel_start->time_zone->short_name_for_datetime($panel_start);
				$own_txt .= "\n$message" if $message;

				my $subject = $round->label." ".$judge->last;
				$subject = $round->label." ".$judge->code if $ncfl;

				foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge)) { 

					$m->comp( "/funclib/send_notify.mas", 
						from    => 'Tabroom.com <live@tabroom.com>',
						to      => $follower,
						subject => $subject,
						body    => $own_txt
					);
			
				}

			}
		}

	}

</%init>
