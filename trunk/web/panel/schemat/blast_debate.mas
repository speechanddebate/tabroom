<%args>
	$round   => undef
	$panel   => undef
	$debug   => undef
	$message => undef
	$only    => undef
</%args>
<%init>

	$message = substr($message, 0, 50);

	$round = $panel->round if $panel;
	my $event = $round->event;
	my $tourn = $event->tourn;

	my $nosides++ if $event->setting("no_side_constraints");
	my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $nosides;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my %flight_start;
	my $flight_offset = $event->setting("flight_offset");

	my $flighted = $round->flighted;
	$flighted = 1 unless $flighted;

	foreach my $flight (1 .. $flighted) { 

		my $temp_start = $start->clone;

		$flight_start{$flight} = $temp_start if $flight == 1;
		next if $flight == 1;

		$temp_start->add( minutes => $flight_offset * ($flight - 1) );
		$flight_start{$flight} = $temp_start;
	}

	my @panels;
	my @judges;
	my @entries;
	my @ballots;

	unless ($panel) { 
	
		Tab::Panel->columns(TEMP => "roomname");

		Tab::Panel->set_sql( schemat => "
			select panel.*, room.name as roomname
			from panel, room
			where panel.round = ? 
			and panel.room = room.id
			order by panel.letter");

		Tab::Panel->set_sql( schemat_roomless => "
			select panel.*, \"None\" as roomname
			from panel
			where panel.round = ? 
			and panel.room = 0
			order by panel.letter");

		@panels = Tab::Panel->search_schemat($round->id);
		push (@panels, Tab::Panel->search_schemat_roomless($round->id));

		@judges = $m->comp("/funclib/round_judges.mas", round => $round);
		@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		@ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	} else { 

		push @panels, $panel;
		@judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		@ballots = $panel->ballots;

	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		next if $entry->dropped;
		next if $entry->dq;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
		push (@{$entries_by_panel{$panel->id}}, $entry) if $panel;
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $panel (@panels) { 
		foreach my $judge ($m->comp('/funclib/panel_judges.mas', panel => $panel)) {
			push @{$judges_by_panel{$panel->id}}, $judge;
		}
	}

	unless ($panel) { 
		@panels = sort {$a->roomname cmp $b->roomname} @panels;
		@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;
	}

	my %school_text = ();

	my %done = ();

	foreach my $panel (@panels) { 

		my $locked_aff =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
		my $locked = "locked" if $locked_aff;

		my $aff;
		my $neg;
		my $bye;
		$bye++ if $panel->bye;

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 
			if ($ballots_by_entry{$pc->id}) { 
				$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
				$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
			}
		}

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 
			if ($ballots_by_entry{$pc->id}) { 
				$neg = $pc if not defined $neg && defined $aff;
				$aff = $pc if not defined $aff;
			}   
		}   

		unless ($only eq "judges") { 

			foreach my $pc ($aff, $neg) { 

				next unless $pc && $pc->id;

				my @followers = $m->comp("/funclib/entry_follower.mas", entry => $pc);
				next unless @followers;

				next if $done{"entry_".$pc->id}++;

				my $own_txt = " \n".$pc->code." ";

				if ($nosides || ($sidelocks && not defined $locked_aff)) { 
					
					if ($aff && $neg) { 
						$own_txt .= " vs ".$aff->code." (Flip)" if $pc->id == $neg->id;
						$own_txt .= " vs ".$neg->code." (Flip)" if $pc->id == $aff->id;
					} 

				} else { 

					if ($aff && $neg) { 
						$own_txt .= "Sides locked: " if $sidelocks;
						$own_txt .= "Aff vs ".$neg->code if $pc->id == $aff->id;
						$own_txt .= "Neg vs ".$aff->code if $pc->id == $neg->id;
					}
				}

				my $num_judges = scalar @{$judges_by_panel{$panel->id}} if $judges_by_panel{$panel->id};

				unless ($bye) { 
					$own_txt .= " \nJudge";
					$own_txt .= "s" if $num_judges > 1;
					$own_txt .= ": ";
				} else { 

					$own_txt .= " \nBYE ROUND";

				}

				my $notfirst;
				foreach my $judge (@{$judges_by_panel{$panel->id}}) {
					$own_txt .= " - " if $notfirst;
					$own_txt .= $judge->last.", ".substr($judge->first,0,5)." ";
					$notfirst++;
				}

				$own_txt .= " \n";

				$own_txt .= "In ".$panel->room->name." \n" if $panel->room && not defined $bye;

				$own_txt .= "Flight ".$panel->flight." \n" if $panel->round->flighted > 1 && not defined $bye;

				my $panel_start = $start->clone;
				$panel_start = $flight_start{$panel->flight}->clone if $panel->flight && $flight_start{$panel->flight};

				$own_txt .= " Start: ".Tab::shorttime($panel_start)." ".$panel_start->time_zone->short_name_for_datetime($panel_start) unless $bye;

				$school_text{$pc->school->id} .= $own_txt." \n\n";

				$own_txt .= " \n$message" if $message;


				$m->comp( "/funclib/send_notify.mas", 
					from    => 'Tabroom.com <live@tabroom.com>',
					array   => \@followers,
					subject => $round->label." ".$pc->code,
					body    => $own_txt
				);

			}
		}

		unless ($only eq "entries") { 

			foreach my $judge (@{$judges_by_panel{$panel->id}}) {

				next if $done{"judge_".$judge->id."_".$panel->id}++;

				my @followers = $m->comp("/funclib/judge_follower.mas", judge => $judge);
				next unless @followers;

				my $own_txt = " \n".$judge->last." judging ".$round->realname;
				$own_txt .= " \nRoom: ".$panel->room->name." \n" if $panel->room;

				if ($nosides || ($sidelocks && not defined $locked_aff)) { 
					$own_txt .= $aff->code if $aff;
					$own_txt .= " vs ";
					$own_txt .= $neg->code if $neg;
					$own_txt .= " (Flip) ";
				} else { 
					$own_txt .= "Sides locked: " if $sidelocks;
					$own_txt .= "Aff: ".$aff->code if $aff;
					$own_txt .= "  Neg: ".$neg->code if $neg;
				}
				$own_txt .= " \nFlight ".$panel->flight if $panel->round->flighted > 1 && not defined $bye;

				my $panel_start = $start->clone;
				$panel_start = $flight_start{$panel->flight}->clone if $panel->flight && $flight_start{$panel->flight};

				$own_txt .= " Start: ".Tab::shorttime($panel_start)." ".$panel_start->time_zone->short_name_for_datetime($panel_start) unless $bye;


				$school_text{$judge->school->id} .= $own_txt." \n\n" if $judge->school;
				$own_txt .= " \n$message" if $message;

					
				$m->comp( "/funclib/send_notify.mas", 
					from    => 'Tabroom.com <live@tabroom.com>',
					array   => \@followers,
					subject => $round->label." ".$judge->last,
					body    => $own_txt
				);
			
			}
		}

	}

	foreach my $school_id (keys %school_text) { 

		my $school = Tab::School->retrieve($school_id);
		next unless $school;

		my @followers  = $m->comp("/funclib/school_follower.mas", school_id => $school_id);
		next unless @followers;

		my $own_txt = " \nFull round pairing for ".$school->short_name.": \n";

		$own_txt .= $school_text{$school_id};
		$own_txt .= " \n$message" if $message;

		$m->comp( "/funclib/send_notify.mas", 
			from    => 'Tabroom.com <live@tabroom.com>',
			array   => \@followers,
			subject => $round->event->abbr." ".$round->label,
			body    => $own_txt,
			email   => "yes"
		);
	}

</%init>
