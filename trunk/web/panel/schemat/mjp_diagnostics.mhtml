<%args>
	$tourn
	$account
	$event_id
	$round_id => undef
	$max_mut  => undef
	$max_pref => undef
</%args>
<%init>

	#deprecated because the judge stuff is so fucking slow
	#the top part lives on at judge_use_status.mhtml
	
	my $debug=1;
	use Data::Dumper;
	use Math::Round;
	use Time::HiRes qw( time );
	my $start_processing = time(); my $end;
	my $switch;

	$max_mut = 30 unless $max_mut;
	$max_pref = 30 unless $max_pref;
	
	my $event;
	$event = Tab::Event->retrieve($event_id) if $event_id;
	
	unless ($round_id) {
		#find last un-completed round
	}
	
	my $round = Tab::Round->retrieve($round_id);
		
	my $timeslot = $round->timeslot;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $group = $event->judge_group;
	
	#make calculations by event that are necessary
	#mark the event strings, and create a hash of judging rounds left for all judges in all events
	my @all_events = Tab::Event->search( judge_group=>$group->id );
	my $open_label; my $jv_label; my $novice_label;
	my %judge_use_hash;
	foreach my $temp_event (@all_events) {

		$open_label=$temp_event->name;

		if ( $temp_event->setting('level') eq "jv") { $jv_label=$temp_event->name; }
		if ( $temp_event->setting('level') eq "novice") { $novice_label=$temp_event->name; }				

		my $temp_round = Tab::Round->search( event => $temp_event->id, timeslot => $timeslot )->first;
		my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $temp_round->id) if $temp_round;

		foreach my $key (keys %{$judge_hash}) {
			$judge_use_hash{$key} = ${$judge_hash}{$key}{'left'};
		}
	}
	
	my $total_rds_needed=0;
	my %rounds_to_finish;
	my %rounds_avail;
	my %teams_by_event;
		
</%init>

	<div class="main">

	<h2>JUDGING SITUATION BY EVENT</h2>
	
<%perl>

	foreach my $current_event (@all_events) {

		my $current_rd = Tab::Round->search( event => $current_event->id, timeslot => $timeslot )->first;
		next unless $current_rd;

		my ($paired_panels_past, $assigned_judges_past, $needed_panels_past, 
			$needed_judges_past, $paired_panels_current, $assigned_judges_current, 
			$needed_panels_current, $needed_judges_current, $paired_panels_future, 
			$assigned_judges_future, $needed_panels_future, $needed_judges_future, 
			$burned_current, $burned_total, $lost_rounds_current, $lost_rounds_total, 
			$event_rds_left, $live_bodies_left, $burned_top50) = $m->comp("/funclib/judge_oblig_count.mas", event_id => $current_event->id, current_rd_id => $current_rd->id );

		$total_rds_needed = $total_rds_needed + $needed_judges_future + $needed_judges_current;
		
		$rounds_to_finish{$current_event->setting('level')}=($needed_judges_future + $needed_judges_current);
		$rounds_avail{$current_event->setting('level')}=$event_rds_left;

</%perl>

		<h4><% $current_event->name %> judging status</h4>		

		<table>
		
			<tr class="yellowrow">

				<th>
					Time point
				</th>

				<th>
					Panels still needed
				</th>

				<th>
					Panels already paired
				</th>

				<th>
					Judges already placed
				</th>

				<th>
					Judges still needed
				</th>

				<th>
					Judging rounds lost
				</th>

				<th>
					Judges burned
				</th>

				<th>
					Judging rounds left
				</th>

			</tr>
			
			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">

				<td>Past</td>
				<td><% $needed_panels_past %></td>
				<td><% $paired_panels_past %></td>
				<td><% $assigned_judges_past %></td>	
				<td><% $needed_judges_past %></td>				
				<td>-</td>							
				<td>-</td>							
				<td>-</td>															
			</tr>

			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				<td>Current</td>
				<td><% $needed_panels_current %></td>
				<td><% $paired_panels_current %></td>
				<td><% $assigned_judges_current %></td>								
				<td><% $needed_judges_current %></td>
				<td><% $burned_current %></td>								
				<td><% $lost_rounds_current %></td>								
				<td>-</td>											
			</tr>

			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				<td>Future</td>
				<td><% $needed_panels_future %></td>
				<td><% $paired_panels_future %></td>
				<td><% $assigned_judges_future %></td>								
				<td><% $needed_judges_future %></td>
				<td>-</td>								
				<td>-</td>							
				<td><% $event_rds_left %></td>												
			</tr>

		</table>
		<br>
		
%		}

	<h2>analysis</h2>
	
		<table>
			<tr class="yellowrow">
				<th>Division</th>
				<th>Need to Finish</th>
				<th>Plus Higher</th>
				<th>Available</th>
				<th>Net</th>
			</tr>
			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				<td><% $open_label %></open>
				<td><% $rounds_to_finish{'open'} %></td>
				<td>0</td>
				<td><% $rounds_avail{'open'} %></td>
%				my $bgcolor="";
%				if ( $rounds_avail{'open'}-$rounds_to_finish{'open'} < 1 ) { $bgcolor="red"; }
				<td bgcolor=<% $bgcolor %>><% $rounds_avail{'open'}-$rounds_to_finish{'open'} %></td>
			</tr>	
			
%			if ($jv_label) {			
			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				<td><% $jv_label %></open>
				<td><% $rounds_to_finish{'jv'} %></td>
				<td><% $rounds_to_finish{'open'} %></td>
				<td><% $rounds_avail{'jv'} %></td>
%				my $bgcolor="";
%				if ( $rounds_avail{'jv'}-$rounds_to_finish{'jv'}-$rounds_to_finish{'open'} < 1 ) { $bgcolor="red"; }
				<td bgcolor=<% $bgcolor %>><% $rounds_avail{'jv'}-$rounds_to_finish{'jv'}-$rounds_to_finish{'open'} %></td>
			</tr>	
%			}

%			if ($novice_label) {			
			<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				<td><% $novice_label %></open>
				<td><% $rounds_to_finish{'novice'} %></td>
				<td><% $rounds_to_finish{'jv'}+$rounds_to_finish{'open'} %></td>
				<td><% $rounds_avail{'novice'} %></td>
%				my $bgcolor="";
%				if ( $rounds_avail{'novice'}-$rounds_to_finish{'jv'}-$rounds_to_finish{'open'}-$rounds_to_finish{'novice'} < 1 ) { $bgcolor="red"; }
				<td bgcolor=<% $bgcolor %>><% $rounds_avail{'novice'}-$rounds_to_finish{'jv'}-$rounds_to_finish{'open'}-$rounds_to_finish{'novice'} %></td>
			</tr>	
%			}			

		</table>
	
	<br>Total rounds of judging needed to finish tournament across all events:<% $total_rds_needed %>

%	my $rounds_judging_left;
%	foreach my $key ( keys %judge_use_hash ) {
%		$rounds_judging_left += $judge_use_hash{$key};
%	}

	<br>Total rounds of judging left across all events:<% $rounds_judging_left %><br><br>
	<strong>Interpretation Guide:</strong>
	These figures do not account for judge preference or circumstances where an event has a large number of entries from
	a single school, making judges from that school hard to place.  Thus, they may <strong>OVER-estimate</strong> how well you are doing on judges.  These figures are not meaningful for the last preliminary round.<Br>
	If you have any event with more rounds required than rounds of judging available
	you are in deep trouble, and it's time to ask judges for extra rounds.  If you have 1-6 net rounds, it is very 
	tight and you want to try very hard not to lose any rounds.  If you have 7-12 net rounds you are safe but should be constantly
	vigilant.  If you have more than that, you are in such good shpae that there may be a setup error.<br>
	
<%perl>
	if ($debug) {
		$end = time();
		print "<br>Time to finish commitment counts: ";
		printf("%.2f\n", $end - $start_processing);
	}

	#figure out how many teams each judge can hear
	
	#pull judges
	my @judges = Tab::Judge->search( judge_group=>$group->id );
	
	#load preclusions
	my @strikes =  Tab::Strike->search ( tourn=> $event->tourn );
	my %preclusions_entry;
	my %preclusions_event;
	my %preclusions_school;		

	#this will work as long as strikes aren't entered for preclusions that don't exist (i.e., region)

	#block vs. preclusions
	foreach my $strike (@strikes) {
		if ($strike->type eq "entry") {
			$preclusions_entry{$strike->judge}{$strike->entry} = 1;
		}
		if ($strike->type eq "event") {
			$preclusions_event{$strike->judge}{$strike->event} = 1;
		}
		if ($strike->type eq "school") {
			$preclusions_school{$strike->judge}{$strike->school} = 1;
		}
	}
	
	#block vs. judged before
	my $tourn_id = $tourn->id;
	Tab::Ballot->set_sql(pull_ballots => "
		select judge, entry
		from ballot, panel, round, event, tourn
		where tourn.id = $tourn_id
		and event.tourn=tourn.id
		and round.event=event.id
		and panel.round=round.id
		and ballot.panel=panel.id
	");	

	my @ballots = Tab::Ballot->search_pull_ballots;
	
	foreach my $ballot (@ballots) {
		$preclusions_entry{$ballot->judge}{$ballot->entry} = 1;
	}

	my %canhear; #{judge}{event}
	my %canhear_team; #{judge}{entry}
	#now load each event and count how many teams in it the judge can hear		
	foreach my $current_event (@all_events) {

		my @entries = Tab::Entry->search( event=>$current_event->id, dropped=>0, waitlist=>0 );
		$teams_by_event{$current_event->id} = scalar(@entries);
		
		foreach my $judge (@judges) {

			foreach my $entry (@entries) {
				my $can_judge_team=1;
				if ($preclusions_school{$judge->id}{$entry->school} == 1 ) { $can_judge_team=0; }
				if ($judge->school == $entry->school ) { $can_judge_team=0; }
				if ($preclusions_event{$judge->id}{$current_event->id} == 1 ) { $can_judge_team=0; }
				if ($preclusions_entry{$judge->id}{$entry->id} == 1 ) { $can_judge_team=0; }	
				$canhear{$judge->id}{$current_event->id} += $can_judge_team;
				$canhear_team{$judge->id}{$entry->id} = $can_judge_team;			
			}
		}

	}

	#now sum and add judge names
	foreach my $key (keys %canhear) {
		foreach my $current_event (@all_events) {
			$canhear{$key}{'total'} += $canhear{$key}{$current_event->id}
		}
	}
	foreach my $judge (@judges) {
		$canhear{$judge->id}{'name'} = $judge->last.", ".$judge->first; 
		$canhear{$judge->id}{'avgpref'} = $m->comp("/funclib/judge_avg_rating.mas", judge => $judge);
	}	

	my %canhear_debate; #{judge}{event}
	my $i; my $x; my %debates_per_event;

	#now count by debate, not team	
	foreach my $current_event (@all_events) {

		#load preclusions event-wise
		my @current_round = Tab::Round->search( event=>$current_event->id, timeslot=>$timeslot );
		my ($entry_by_id_hash_ref, $precluded_hash_ref) = $m->comp("/funclib/make_pairing_hash.mas", round_id => $current_round[0]->id);			
		#aren't using the first hash, only the secon
		my %precluded = %{$precluded_hash_ref};
	
		my @entries = Tab::Entry->search( event=>$current_event->id );

		for ($i = 0; $i <= $#entries; $i += 1) {
			for ($x = $i+1; $x <= $#entries; $x += 1) {
	
				my $team1=$entries[$i];
				my $team2=$entries[$x];
				
				if ($precluded{$team1->id}{$team2->id} == 0 and $precluded{$team2->id}{$team1->id} == 0) {

					$debates_per_event{$current_event->id}++;
					
					foreach my $judge (@judges) {
						my $can_judge_debate=1;
						if ($canhear_team{$judge->id}{$team1->id} == 0 ) { $can_judge_debate=0; }
						if ($canhear_team{$judge->id}{$team2->id} == 0 ) { $can_judge_debate=0; }
#						These will account for prefs but are disabled b/c they're SLOW
#						my $pref1 = Tab::Rating->search( entry=> $entries[$i], judge=> $judge->id );
#						if ( $pref1 > $max_pref ) { $can_judge_debate=0; }
#						my $pref2 = Tab::Rating->search( entry=> $entries[$i], judge=> $judge->id );
#						if ( $pref2 > $max_pref ) { $can_judge_debate=0; }
#						if ( abs($pref1-$pref2) > $max_mut ) { $can_judge_debate=0; }
						$canhear_debate{$judge->id}{$current_event->id} += $can_judge_debate;			
					}

				}
			}
		}
	}
	
	if ($debug) {
		$end = time();
		print "<br>time to figure hard-to-place judges: ";
		printf("%.2f\n", $end - $start_processing);
	}
	
</%perl>

	<br>
	<h2>15 most difficult-to-place judges</h2>
	
	For total teams lower #=harder to place judge.  Doesn't assume prefs.  Hover mouse over column header for more info.
	
	<& /funclib/tablesorter.mas, table => "sortme" &>
		
	<table cellpadding="4" cellspacing="1" id="sortme">
	<thead>
 	<tr class="yellowrow">
		<th class="smaller">Judge</th>
		<th class="smaller">Avg Pref</th>
%	foreach my $current_event (@all_events) {	
		<th class="smaller">
			<span title="teams can hear/teams in event; 17/34 means judge can still hear 17 of the 34 teams in the division.">
				<% $current_event->name %> teams
			</span>
		</th>	
		<th class="smaller">
			<span title="debates can hear/debates in event; 4.3/16 means the judge is likely to fit in 4.3 of the 16 debates for any given round">
				<% $current_event->name %> matches
			</span>
		</th>	

%	}		
		<th class="smaller">
			<span title="total teams a judge is still eligible to hear summed across all events">
				Total teams
			</span>
		</th>	

	</tr>
	</thead>
	
	<tbody>

%	my $ctr;	
%	foreach my $key (sort {$canhear{$a}->{'total'} <=> $canhear{$b}->{'total'}} keys(%canhear)) {	
	<tr class="<% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
		<td><% $canhear{$key}{'name'} %> </td>
		<td><% $canhear{$key}{'avgpref'} %> </td>
%		foreach my $current_event (@all_events) {		
		<td><% $canhear{$key}{$current_event->id} %>/<% $teams_by_event{$current_event->id} %></td>
%				my $ndebates=int( $teams_by_event{$current_event->id} / 2 );
%				my $pctfit = ( $canhear_debate{$key}{$current_event->id} / $debates_per_event{$current_event->id} );	
		<td><% 	sprintf("%.1f", $ndebates * $pctfit) %>/<% $ndebates %></td>
%		}		
		<td><% $canhear{$key}{'total'} %></td>
	</tr>
%	$ctr++; if ( $ctr>15 ) { last; }	
%	}
	
	</tbody>
	
	</table>
	

	</div>
	
	<div class="menu">

		<h4>Adjustments</h4>
		<a href="show.mhtml?round_id=<% $round->id %>" class="yellow block">
			Back to Pairings
		</a>
<!--		
		<form action="manual_mpj_switch.mhtml" method="post">
		<span class="evenrownohover block">
			Max Mut:
			<input type="text" size="5" class="thin" name="max_mut" value=<% $max_mut %>><br>
			Max Pref:
			<input type="text" size="5" class="thin" name="max_pref" value=<% $max_pref %> ><br>
			<input type="submit" value="Go" class="thin padno">
		</span>
		</form>
-->

	</div>
