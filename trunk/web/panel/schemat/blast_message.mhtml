<%args>
	$round_id
	$message
	$sendto => "all"
	$panels => "all"
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

	my @judges;
	my @entries;

	if ($panels eq "all") { 

		if ($sendto eq "all") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round);
			@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		} elsif ($sendto eq "entries") { 
			@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		} elsif ($sendto eq "judges") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round);
		}


	} elsif ($panels eq "unstarted") { 

		if ($sendto eq "all") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unstarted => "yep");
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unstarted => "yep");
		} elsif ($sendto eq "entries") { 
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unstarted => "yep");
		} elsif ($sendto eq "judges") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unstarted => "yep");
		}

	} elsif ($panels eq "unentered") { 

		if ($sendto eq "all") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unentered => "yep");
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unentered => "yep");
		} elsif ($sendto eq "entries") { 
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unentered => "yep");
		} elsif ($sendto eq "judges") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unentered => "yep");
		}

	} elsif ($panels eq "unconfirmed") { 

		if ($sendto eq "all") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unconfirmed => "yep");
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unconfirmed => "yep");
		} elsif ($sendto eq "entries") { 
			@entries = $m->comp("/funclib/round_entries.mas", round => $round, unconfirmed => "yep");
		} elsif ($sendto eq "judges") { 
			@judges = $m->comp("/funclib/round_judges.mas", round => $round, unconfirmed => "yep");
		}

	} 

	my %used; 
	my $counter = 0;

	foreach my $entry (@entries) { 
	
		foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $entry)) { 

			$m->comp( "/funclib/send_notify.mas", from => 'Tabroom.com <live@tabroom.com>', 
				to      => $follower,
				subject => "Message from Tab",
				body    => $message
			);

			$counter++;
			$used{$follower}++;
		}

	}

	foreach my $judge (@judges) { 

		foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge)) { 
						
			next if $used{$follower}++;

			$m->comp( "/funclib/send_notify.mas", from => 'Tabroom.com <live@tabroom.com>', 
				to => $follower, 
				subject => "Message from Tab",
				body => $message 
			);
				
			$counter++;
		}

	}

	my $msg = "Blast Message sent to $counter recipients";
	$m->redirect("blast.mhtml?round_id=$round_id&msg=$msg");


</%init>

