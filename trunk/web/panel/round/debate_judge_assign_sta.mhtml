<%args>
	$account
	$round_id
	$pref_wt => undef
	$mut_wt => undef
	$mut_wt_panel => undef
	$pref_wt_panel => undef
	$pref_left => undef
	$max_pref_above => undef
	$max_mut_above => undef
	$max_pref_at => undef
	$max_mut_at => undef
	$max_pref_below => undef
	$max_mut_below => undef
	$break_line => undef
	
</%args>
<%init>


	use Time::HiRes qw( time );
	my $start = time(); 
	
	my $round = Tab::Round->retrieve($round_id);
	my $event_id = int($round->event); 
	my $event = Tab::Event->retrieve($event_id);

	#defaults
	$max_pref_above=50 unless $max_pref_above;
	$max_mut_above=30 unless $max_mut_above;
	$max_pref_at=50 unless $max_pref_at;
	$max_mut_at=30 unless $max_mut_at;
	$max_pref_below=50 unless $max_pref_below;
	$max_mut_below=30 unless $max_mut_below;
	$pref_wt=1.2 unless $pref_wt;
	$mut_wt=.8 unless $mut_wt;
	$pref_wt_panel=1.2 unless $pref_wt_panel;
	$mut_wt_panel=1.2 unless $mut_wt_panel;
	$break_line=3 unless $break_line;
	$pref_left=2 unless $pref_left;
	
	#assign weights to hash 
	my %max_pref; my %max_mut;
	$max_pref{'above'} = $max_pref_above;
	$max_mut{'above'} = $max_mut_above;
	$max_pref{'at'} = $max_pref_at;
	$max_mut{'at'} = $max_mut_at;
	$max_pref{'below'} = $max_pref_below;
	$max_mut{'below'} = $max_mut_below;

	#load pairings, judge, and entry ingo
	my @panels = Tab::Panel->search( round => $round_id );
	my $last_round_name = $round->name - 1;
	my $last_round = Tab::Round->search( event => $round->event->id, name => $last_round_name)->first;
	my %entry_wins = $m->comp("/funclib/entry_wins.mas", event => $round->event, round => $last_round);
	my %entry_losses = $m->comp("/funclib/entry_losses.mas", event => $round->event, round => $last_round);
	#my @judge_ref = $m->comp("/funclib/round_judges.mas", round => $round);
	my @judge_ref = Tab::Judge->search( judge_group => $event->judge_group);
	my %judge;
	foreach my $judges (@judge_ref) {
		$judge{$judges->id}{'name'} = $judges->last.", ".$judges->first;
		$judge{$judges->id}{'avg_pref'} = $m->comp("/funclib/judge_avg_rating.mas", judge => $judges, avg_field => "percentile" );
	}
	my %entry_code = map {$_->id => $_->code} $round->event->entries;
	my %pref_record = $m->comp("/funclib/round_ordinals.mas", round => $round);

	#diagnostics
	my ($paired_panels_past, $assigned_judges_past, $needed_panels_past, $needed_judges_past, $paired_panels_current, $assigned_judges_current, $needed_panels_current, $needed_judges_current, $paired_panels_future, $assigned_judges_future, $needed_panels_future, $needed_judges_future, $burned_current, $burned_total, $lost_rounds_current, $lost_rounds_total, $event_rds_left) = $m->comp("/funclib/judge_oblig_count.mas", event_id => $event_id, current_rd_id => $round->id );
	my ($avg_pref, $avg_mut, $worst_pref, $worst_mut, $deciles) = $m->comp("/funclib/mjp_diagnostics.mas", round => $round );
	my %deciles = %{$deciles};
	my @avg_pref = @{$avg_pref}; my @worst_pref = @{$worst_pref}; my @avg_mut = @{$avg_mut}; my @worst_mut = @{$worst_mut};

		#remaining pref calculation
	my $tot_pref; my $tot_rds; 
	my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $round->id);
	foreach my $judge (@judge_ref) {
		my $key = $judge->id;
		my $dummy = ${$judge_hash}{$key}{'oblig'} - ${$judge_hash}{$key}{'judged_already'};
		$dummy = ${$judge_hash}{$key}{'future_possible'} if $dummy > ${$judge_hash}{$key}{'future_possible'};
		$dummy = 0 if $dummy < 0 ;
		$tot_rds += $dummy;
		$tot_pref += ( $dummy * $judge{$key}{'avg_pref'} ) ;
	}
	$tot_rds = 1 if $tot_rds == 0;

	my @cohort; $cohort[1]="Above"; $cohort[2]="At"; $cohort[3]="Below";
	
	sub prefdata {

		my ($pref_str) = @_;
		my $pref;
		
		my $slash_spot = index($pref_str, "/");
		my $pref_one= substr($pref_str, 0, $slash_spot);
		my $pref_two = substr($pref_str, $slash_spot+1, length($pref_str)-$slash_spot);
		return ($pref_one, $pref_two);
		
	}

</%init>

<style>
table,th,td
{
border:1px solid black;
}
</style>

	<div class="left huge" >

%				my $end = time(); 
				Total load time: <% printf("%.2f\n", $end - $start) %>
	
	<script>

		sortTest2 = function() {
			
			//window.alert("IN sort sub");
			
			var eval = [];

			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				eval[i] = [];
				eval[i][0] = TableRows[i].cells[0].textContent; //judge id
				eval[i][1] = TableRows[i].cells[2].textContent; //panel id
				eval[i][2] = TableRows[i].cells[5].textContent; //mutpref score
			}
			
			eval.sort(function(a, b) { return (a[2] < b[2] ? -1 : (a[2] > b[2] ? 1 : 0)); });
			
			//for (var i = 0; i < 10; i++) {
			//	window.alert(i +" " + eval[i][0] + " " + eval[i][1] + " " + eval[i][2]);
			//}
			
			//window.alert("END of sort sub");
			
		}

		recalc_mutpref = function() {

			var pref_weight = parseFloat(document.getElementById("pref_weight").value);
			var mut_weight = parseFloat(document.getElementById("mut_weight").value);

			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var pref1 = parseFloat(TableRows[i].cells[3].textContent);
				var pref2 = parseFloat(TableRows[i].cells[4].textContent);
				var MutPref = pref1 * (pref_weight + .5);
				MutPref = MutPref + (pref2 * (pref_weight + .5));
				var mut = Math.abs(pref1 - pref2);
				MutPref = MutPref + (mut * (mut_weight + .5));
				TableRows[i].cells[5].textContent = MutPref.toFixed(1);
			}

		}	
		
		sortTable = function(sort_col) {

    		var tbl = document.getElementById("STAData").tBodies[0];
    		var store = [];
    		for(var i=0, len=tbl.rows.length; i<len; i++){
        		var row = tbl.rows[i];
        		var sortnr = parseFloat(row.cells[sort_col].textContent || row.cells[sort_col].innerText);
        		if(!isNaN(sortnr)) store.push([sortnr, row]);
    		}
    		store.sort(function(x,y){
        		return x[0] - y[0];
    		});
    		for(var i=0, len=store.length; i<len; i++){
        		tbl.appendChild(store[i][1]);
    		}
    		store = null;

		}

		//clears the pairings table of all judge assignments
		clear_current_placements = function() {
		
			var n_cols = document.getElementById('current_pairing').rows[0].cells.length;
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				for (var c = 5; c <= n_cols-2; c++) {
					if ( TableRows[i].cells[c] == undefined ) {} else {
					TableRows[i].cells[c].textContent = ""; }
				}
			}

			//clear also from the judge_use table; will need to update later
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
					TableRows[i].cells[10].textContent = "0";
			}
			
		}

		//updates STAData table based on current mut and pref weights
		recalc_mutpref = function() {

			var pref_weight = parseFloat(document.getElementById("pref_weight").value);
			var mut_weight = parseFloat(document.getElementById("mut_weight").value);

			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var pref1 = parseFloat(TableRows[i].cells[3].textContent);
				var pref2 = parseFloat(TableRows[i].cells[4].textContent);
				var MutPref = pref1 * (pref_weight + .5);
				MutPref = MutPref + (pref2 * (pref_weight + .5));
				var mut = Math.abs(pref1 - pref2);
				MutPref = MutPref + (mut * mut_weight);
				TableRows[i].cells[5].textContent = MutPref.toFixed(1);
				if ( isNaN(MutPref) ) { TableRows[i].cells[5].textContent = "9999"; }
			}
		
		}
		
		recalc_pandiff = function () {
		}
		
		pairing_panel_update = function(panel_id, n_judges) {

			var panel_row = document.getElementById("panel_pairing"+panel_id);
			var tot_pref = 0; var tot_judges = 0; var panel_balance = 0; var pref1; var pref2;
			for (var i = 1; i <= n_judges; i++) {
				var dummy = document.getElementById(panel_id+"Judge"+i+"Pref1"); 
				pref1 = parseFloat(dummy.textContent);
				tot_pref = tot_pref + pref1;
				tot_judges = tot_judges + 1;
				panel_balance = panel_balance + pref1;
				var dummy = document.getElementById(panel_id+"Judge"+i+"Pref2"); 
				pref2= parseFloat(dummy.textContent);
				tot_pref = tot_pref + pref2;
				tot_judges = tot_judges + 1;
				panel_balance = panel_balance - pref2;
			}
			dummy = document.getElementById(panel_id+"Avg");
			dummy.textContent = (tot_pref/tot_judges).toFixed(1)
			dummy = document.getElementById(panel_id+"Bal");
			dummy.textContent = (panel_balance).toFixed(1)

		}
		
		PlaceJudges = function(n_judges) {
			
			var start = new Date();
			
			clear_current_placements();
			var time_display = document.getElementById("status_box");
			var end = new Date(); var duration_toclear = end - start; 

			recalc_mutpref();		
			var end = new Date(); var duration_torecalc = end - start; 

			//sortTest2(); sortTable(5); original sort test functions; sorting a javascript array is faster than
			//using DOM to sort HTML tables			

			//First Pass
			var panel_mut_weight = parseFloat(document.getElementById("panel_mut_weight").value);			
			var pref_left = parseFloat(document.getElementById("pref_left").value);
			var eval = [];
			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var STAData_length = TableRows.length;
			for (var i = 1; i < STAData_length; i++) {
				eval[i] = [];
				eval[i][0] = TableRows[i].cells[0].textContent; //judge id
				eval[i][1] = TableRows[i].cells[2].textContent; //panel id
				eval[i][2] = TableRows[i].cells[5].textContent; //mutpref score
				var rating = document.getElementById(TableRows[i].cells[0].textContent+"Rating").textContent;
				eval[i][3] = eval[i][2]-(rating * pref_left); //mutpref w/commit left adjustment				
				eval[i][4] = 0; //for panel mutuality adustment; will use below for multi-judge panels				
				eval[i][5] = TableRows[i].cells[3].textContent; //pref1
				eval[i][6] = TableRows[i].cells[1].textContent; //judge name
				eval[i][7] = TableRows[i].cells[4].textContent; //pref2
				var current_bal = document.getElementById(TableRows[i].cells[2].textContent+"Bal").textContent;
				eval[i][3] = eval[i][3] + ( Math.abs(current_bal+eval[i][5]-eval[i][7]) * panel_mut_weight ); ///panel balance adjstmt
			}
			eval.sort(function(a, b) { return (a[3] < b[3] ? -1 : (a[3] > b[3] ? 1 : 0)); });

			var end = new Date(); var duration_sorttest = end - start; 
							
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");

			var cohort_str = ["At", "Above", "Below"];
			for (var cohort = 0; cohort <=2; cohort ++ ) {
				for (var panel = 1; panel < TableRows.length; panel++) {
					var dummy = document.getElementById(TableRows[panel].cells[0].textContent+"Cohort");
					if ( dummy.textContent == cohort_str[cohort] ) {
						for (var judge = 1; judge <= n_judges; judge++) {
							//need to recalc eval here for multi-judge panels
							for (var j = 1; j <= STAData_length; j++) {
								judrow = document.getElementById("Judge"+eval[j][0]);
								if (parseFloat(eval[j][1]) == parseFloat(TableRows[panel].cells[0].textContent) && judrow.cells[10].textContent == 0) {
									var dummy2 = document.getElementById(TableRows[panel].cells[0].textContent+"Judge"+judge+"ID");
									dummy2.textContent = eval[j][0];
									var dummy2 = document.getElementById(TableRows[panel].cells[0].textContent+"Judge"+judge+"Name");
									dummy2.textContent = eval[j][6];
									var dummy2 = document.getElementById(TableRows[panel].cells[0].textContent+"Judge"+judge+"Pref1");
									dummy2.textContent = eval[j][5];
									var dummy2 = document.getElementById(TableRows[panel].cells[0].textContent+"Judge"+judge+"Pref2");
									dummy2.textContent = eval[j][7];
									var dummy2 = document.getElementById(TableRows[panel].cells[0].textContent+"Judge"+judge+"Mut");
									dummy2.textContent = Math.abs(eval[j][7]-eval[j][5]).toFixed(1);
									//update judge_use to show the assignment
									judrow.cells[10].textContent = 1;
									//update the panel to show balance and avg
									pairing_panel_update(TableRows[panel].cells[0].textContent, n_judges);
									break;
								}
							}
						}
					}
				}
			}
			
			var end = new Date(); var duration_toiterate = end - start; 
			
			time_display.textContent = "Time to clear screen is:" + duration_toclear/1000; 
			time_display.textContent=time_display.textContent + " Time to recalc screen is:" + duration_torecalc/1000; 
			time_display.textContent=time_display.textContent + " Time for sort test:" + duration_sorttest/1000; 
			time_display.textContent=time_display.textContent + " Time to iterate is:" + duration_toiterate/1000; 
			
		}
		
		judge_test = function() {
		
			//window.alert("in test");
			var dummy = document.getElementById("321912Judge1Pref1");
			dummy.textContent = "1.3";
			var dummy = document.getElementById("321912Judge1Pref2");
			dummy.textContent = "2.1";
			var dummy = document.getElementById("321912Judge1Name");
			dummy.textContent = "Bruschke, Cricket 1.3-2.1";
			var dummy = document.getElementById("321912Judge1Mut");
			dummy.textContent = ".8";
			var dummy = document.getElementById("321912Avg");
			dummy.textContent = "1.7";
			var dummy = document.getElementById("321912Bal");
			dummy.textContent = "-.8";

		}
		
		//only called from within the current_pairings diagnostics
		judge_diagnostics = function(n_judges) {

			//update columns in table to reflect the displayed pairings; shows whether they are judging in the current pairings
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				for (var j = 1; j <= n_judges; j++) {
					var judge_id = document.getElementById(TableRows[i].cells[0].textContent+"Judge"+j+"ID");
					if ( judge_id != null ) {
						var judge_use = document.getElementById(judge_id.textContent+"DisplayAssigned");
						if ( judge_use != null ) { judge_use.textContent = 1; }
					}
				}
			}
			
			//Count up rounds lost and average pref left
			var NewRdsLost = 0;
			var TotPref = 0; var PrefNum = 0;
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var oblig = parseFloat(TableRows[i].cells[6].textContent);
				var SaveAssigned = parseFloat(TableRows[i].cells[8].textContent);
				var DisplayAssigned = document.getElementById(TableRows[i].cells[0].textContent+"DisplayAssigned");
				var DisplayAssigned_local = parseFloat(DisplayAssigned.textContent);
				var DisplayObligLeft = document.getElementById(TableRows[i].cells[0].textContent+"DisplayObligLeft");
				DisplayObligLeft.textContent = oblig + SaveAssigned - parseFloat(DisplayAssigned.textContent);
				var AvailCurrent = parseFloat(TableRows[i].cells[4].textContent);
				var FutPoss = parseFloat(TableRows[i].cells[7].textContent); 
				var DisplayObligLeft_local = parseFloat(DisplayObligLeft.textContent);
				//rounds lost; note that you have to reflect whether they are judging in other events
				if ( AvailCurrent == 1 && DisplayAssigned_local == 0 && DisplayObligLeft_local > FutPoss ) {
					var DisplayLost = document.getElementById(TableRows[i].cells[0].textContent+"DisplayLost");
					DisplayLost.textContent = "1";
					NewRdsLost++ ;
				}
				var Rating = parseFloat(TableRows[i].cells[2].textContent);
				TotPref = TotPref + (FutPoss * Rating);
				PrefNum++ ;
			}
			
			var dummy = document.getElementById("NewRdsLost");
			dummy.textContent = NewRdsLost;
			var dummy = document.getElementById("NewPrefLeft");
			var dummy2 = TotPref / PrefNum;
			dummy.textContent = dummy2.toFixed(1);;
			
		}
		
		//updates the diagnostics based on the current set of judge assignments; gotta run judge_diagnostics first
		current_diagnostics = function(n_judges) {

			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var TotPref = [0,0,0]; var PrefCt = [0,0,0]; var Cohort_num;
			var WorstPref = [0,0,0]; 
			var TotMut = [0,0,0]; 
			var MutCt = [0,0,0];
			var WorstMut = [0,0,0];
			for (var i = 1; i < TableRows.length; i++) {
				var Cohort = document.getElementById(TableRows[i].cells[0].textContent+"Cohort");
				if ( Cohort != null ) {
					if ( Cohort.textContent == "Above" ) { Cohort_num = 0; }
					if ( Cohort.textContent == "At" ) { Cohort_num = 1; }
					if ( Cohort.textContent == "Below" ) { Cohort_num = 2; }				
				}
				for (var j = 1; j <= n_judges; j++) {
					var id_to_get = TableRows[i].cells[0].textContent+"Judge"+j+"Mut";
					var mut = document.getElementById(id_to_get);
					if ( mut != null ) {
						TotMut[Cohort_num] = TotMut[Cohort_num] + parseFloat(mut.textContent);
						MutCt[Cohort_num] = MutCt[Cohort_num] + 1;
						if ( parseFloat(mut.textContent) > WorstMut[Cohort_num] ) { WorstMut[Cohort_num] = parseFloat(mut.textContent); }
					}	
					
					for (var tm = 1; tm <= 2; tm++) {
						var id_to_get = TableRows[i].cells[0].textContent+"Judge"+j+"Pref"+tm;
						var pref = document.getElementById(id_to_get);
						if ( pref != null ) {
							TotPref[Cohort_num] = TotPref[Cohort_num] + parseFloat(pref.textContent) ; 
							PrefCt[Cohort_num] = PrefCt[Cohort_num] + 1;
							if ( parseFloat(pref.textContent) > WorstPref[Cohort_num] ) { WorstPref[Cohort_num] = parseFloat(pref.textContent) };
//							window.alert("Panel/Judge=" + id_to_get + " Pref=" + parseFloat(pref.textContent) + " TotPref=" + TotPref[Cohort_num] + " PrefCt=" + PrefCt[Cohort_num]);
						}
					}	
				}
			}
			
			var dum_str;
			for (var i = 0; i <= 2; i++) {
				if ( i == 0 ) { dum_str = "Above"; }
				if ( i == 1 ) { dum_str = "At"; }
				if ( i == 2 ) { dum_str = "Below"; }
				dummy = document.getElementById("Avg"+dum_str);
				dummy.textContent=parseFloat(TotPref[i]/PrefCt[i]).toFixed(1);
				dummy = document.getElementById("Worst"+dum_str);
				dummy.textContent=WorstPref[i].toFixed(1);
				dummy = document.getElementById("AvgMut"+dum_str);
				dummy.textContent=parseFloat(TotMut[i]/MutCt[i]).toFixed(1);
				dummy = document.getElementById("WorstMut"+dum_str);
				dummy.textContent=WorstMut[i].toFixed(1);
			}
			
			//update judge situation
			judge_diagnostics(n_judges);

		}
		
	</script>

		<h2>STA Judge Placement (Gary Larson) MPJ Settings for <% $event->name %> <% $round->label %> (<% $round->name %>) </h2>
		<form action="debate_judge_assign_sta.mhtml" method="post">
		<input type="hidden" value="<% $round_id %>" name="round_id">
		<table cellpadding="0" cellspacing="1" >
			<caption><h4>Weights</h4></caption>
			<tr>
				<td>
					Preference per judge
					<input type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_wt" value="<% $pref_wt %>">
				</td>
				<td>
					Preference per panel
					<input type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_wt_panel" value="<% $pref_wt_panel %>">
				</td>

			</tr>
			<tr>
				<td>
					Mutuality per judge
					<input type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="mut_wt" value="<% $mut_wt %>">
				</td>
				<td>
					Mutuality per panel
					<input id="panel_mut_weight" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="mut_wt_panel" value="<% $mut_wt_panel %>">
				</td>

			</tr>
			<tr>
				<td colspan="2">
					Remaining Pref
					<input id="pref_left" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_left" value="<% $pref_left %>">
				</td>
			</tr>
		</table>
		<table>	
			<caption>
				<h4>Constraints</h4>
			</caption>
			<tr>
				<td colspan="3">
					Max losses a team can have and still clear (break line):
					<input type="number" class="smaller" min=0 max=99 size=4  name="break_line" value="<% $break_line %>">
				</td>
			</tr>
			<tr>
				<td>
					ABOVE the break line
				</td>
				<td>
					Max Preference
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_pref_above" value="<% $max_pref{'above'} %>">
				</td>
				<td>
					Max Mutuality
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_mut_above" value="<% $max_mut{'above'} %>">
				</td>

			</tr>
			<tr>
				<td>
					AT the break line
				</td>
				<td>
					Max Preference
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_pref_at" value="<% $max_pref{'at'} %>">
				</td>
				<td>
					Max Mutuality
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_mut_at" value="<% $max_mut{'at'} %>">
				</td>

			</tr>
			<tr>
				<td>
					BELOW the break line
				</td>
				<td>
					Max Preference
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_pref_below" value="<% $max_pref{'below'} %>">
				</td>
				<td>
					Max Mutuality
					<input type="number" class="smaller" min=0 max=99 size=4  name="max_mut_below" value="<% $max_mut{'below'} %>">
				</td>

			</tr>


			</tr>

		</table>

		<a onclick="PlaceJudges(1)" >Run STA pairing with these settings</a>		
		<textarea id="status_box" cols="50" rows="3"></textarea>
			
		<div class="liblrow rightalign">
			<input type="submit" value="Place judges with these settings">
			</form>
		</div>
		
		<table>	
			<caption>
				<h4>Diagnostics</h4>
			</caption>
			<tr>
				<td>Scheme</td>
				<td colspan="4" align="center">ABOVE break</td>
				<td colspan="4" align="center">AT break</td>
				<td colspan="4" align="center">BELOW break</td>								
				<td>Rounds Lost</td>
				<td>Avg Pref Remaining</td>
			</tr>
			<tr>
				<td></td>
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td></td><td></td>
			</tr>
			<tr>
				<td>Saved Pairings</td>
				<td><% sprintf("%.1f", $avg_pref[1]) %></td>
				<td><% sprintf("%.1f", $worst_pref[1]) %></td>
				<td><% sprintf("%.1f", $avg_mut[1]) %></td>
				<td><% sprintf("%.1f", $worst_mut[1]) %></td>
				<td><% sprintf("%.1f", $avg_pref[2]) %></td>
				<td><% sprintf("%.1f", $worst_pref[2]) %></td>
				<td><% sprintf("%.1f", $avg_mut[2]) %></td>
				<td><% sprintf("%.1f", $worst_mut[2]) %></td>
				<td><% sprintf("%.1f", $avg_pref[3]) %></td>
				<td><% sprintf("%.1f", $worst_pref[3]) %></td>
				<td><% sprintf("%.1f", $avg_mut[3]) %></td>
				<td><% sprintf("%.1f", $worst_mut[3]) %></td>
				<td><% $lost_rounds_current %></td>
				<td><% sprintf("%.1f", $tot_pref/$tot_rds) %></td>

			</tr>
			<tr>
				<td>Pairings Below</td>
				<td id="AvgAbove"></td>
				<td id="WorstAbove"></td>
				<td id="AvgMutAbove"></td>
				<td id="WorstMutAbove"></td>				
				<td id="AvgAt"></td>
				<td id="WorstAt"></td>
				<td id="AvgMutAt"></td>
				<td id="WorstMutAt"></td>				
				<td id="AvgBelow"></td>
				<td id="WorstBelow"></td>
				<td id="AvgMutBelow"></td>
				<td id="WorstMutBelow"></td>				
				<td id="NewRdsLost"></td>				
				<td id="NewPrefLeft"></td>								
			</tr>
		</table>


		<table id="current_pairing" >
			<caption>
				<span><h4>Current Pairings</h4> <a onclick='current_diagnostics(1)' >Run Diagnostics on Pairings Below</a></span>
			</caption>
		<tr>
		<td>panel</td>
		<td>aff ID</td>
		<td>aff name</td>
		<td>neg ID</td>
		<td>neg name</td>
%		my $n_judges = 1;
%		for (my $i=1; $i <= $n_judges; $i++) {
 		  <td>Judge<% $i %> ID</td>
   		  <td>Judge<% $i %> Name</td>
   		  <td>Judge<% $i %>Pref1</td>
     		  <td>Judge<% $i %>Pref2</td>
   		  <td>Judge<% $i %> Mut</td>		  
%		}
		<td>Panel Avg</td>
		<td>Panel Balance</td>
		<td>Cohort</td>
		</tr>
%		foreach my $panel (@panels) {
%			if ( $panel->bye == 0 ) {
				<tr id="pairing_panel<% $panel->id %>">
				<td><% $panel->id %></td>	
%				my $co;	my $pan_tot; my $pan_ct; my $pan_bal; my $ctr;		
%				my @ballots = Tab::Ballot->search( panel => $panel->id);
%					@ballots = sort {$a->side cmp $b->side} @ballots; 
%					foreach my $ballot (@ballots) {
%					if ( $break_line ==  $entry_losses{$ballot->entry} ) { $co = 2; }
%					if ( $break_line >  $entry_losses{$ballot->entry} and ($co == 0 or $co == 1) ) { $co = 1; }
%					if ( $break_line <  $entry_losses{$ballot->entry} and ($co == 0 or $co == 3) ) { $co = 3; }

					<td><% $ballot->entry %></td>
					<td><% $entry_code{$ballot->entry} %> <% $entry_wins{$ballot->entry} %>-<% $entry_losses{$ballot->entry} %></td>
%					}			
%					foreach my $ballot (@ballots) {
%						if ($ballot->side == 1) {
%						$ctr++;	
						<td id="<% $panel %>Judge<% $ ctr %>ID"><% $ballot->judge %></td> <td id=<% $panel %>Judge<% $ctr %>Name><% $judge{$ballot->judge}{'name'} %> <% $pref_record{$ballot->judge."-".$panel->id} %></td>
%						my ($pref1, $pref2) = prefdata( $pref_record{$ballot->judge."-".$panel->id} ) ;
						<td id="<% $panel %>Judge<% $ ctr %>Pref1"><% $pref1 %></td><td id="<% $panel %>Judge<% $ ctr %>Pref2"><% $pref2 %></td>
%						$pan_tot += $pref1; $pan_tot += $pref2; $pan_ct += 2;
%						my $mut = abs($pref1 - $pref2); $pan_bal = $pan_bal + ($pref1 - $pref2);
%						$mut = sprintf("%.1f", $mut);
						<td id="<% $panel %>Judge<% $ ctr %>Mut"><% $mut %></td>
%						}											
%					}
					<td id="<% $panel %>Avg">
%					if ($pan_ct) { printf("%.1f", $pan_tot/$pan_ct) ; }
					</td>
					<td id="<% $panel %>Bal">
%					printf("%.1f", $pan_bal);
					</td>
					<td id="<% $panel %>Cohort"><% $cohort[$co] %></td>			

%			}
%		}
		</table>

		<table id="judge_use">
			<caption>
			Judge Use Situation <a onclick='judge_diagnostics(1)' >Run Diagnostics on Judge Data Below</a>
			</caption>
			<tr>
				<td>ID</td>			
				<td>Judge</td>
				<td>Avg Ratingt</td>
				<td>Obligation</td>
				<td>Available for Current RD</td>
				<td>Saved: Judged so far</td>				
				<td>Saved: Oblig Left</td>								
				<td>Saved: Future Possible</td>
				<td>Saved: Assigned</td>				
				<td>Display: Assigned</td>
				<td>Display: Oblig Left</td>
				<td>Display: Lost</td>				
			</tr>
%		foreach my $judges (@judge_ref) {
%				my $key = $judges->id;
			<tr id="Judge<% $judges->id %>" >
				<td><% $key %></td>
				<td><% $judge{$judges->id}{'name'} %></td>
				<td id="<% $judges->id%>Rating" ><% $judge{$judges->id}{'avg_pref'} %></td>				
				<td><% ${$judge_hash}{$key}{'oblig'} %></td>
				<td><% ${$judge_hash}{$key}{'avail_current'} %></td>				
				<td><% ${$judge_hash}{$key}{'judged_already'} %></td>
				<td><% ${$judge_hash}{$key}{'oblig'} - ${$judge_hash}{$key}{'judged_already'} %></td>
				<td><% ${$judge_hash}{$key}{'future_possible'} %></td>				
				<td>
%				if ( ${$judge_hash}{$key}{'in_round'} ) { print("1") } else { print("0"); }
				</td>								
				<td id="<% $key %>DisplayAssigned">0</td>
				<td id="<% $key %>DisplayObligLeft">0</td>
				<td id="<% $key %>DisplayLost">0</td>												
			</tr>
%			}

		</table>

%		$end = time(); 
		Total time after tables rendered: <% printf("%.2f\n", $end - $start) %>

	</div>

