<%args>
	$account
	$round_id
	$pref_wt => undef
	$mut_wt => undef
	$mut_wt_panel => undef
	$pref_wt_panel => undef
	$pref_left => undef
	$max_pref_above => undef
	$max_mut_above => undef
	$max_pref_at => undef
	$max_mut_at => undef
	$max_pref_below => undef
	$max_mut_below => undef
	$break_line => undef
	
</%args>
<%init>

	use Data::Dumper;
	use Time::HiRes qw( time );
	my $start = time(); 
	
	my $round = Tab::Round->retrieve($round_id);
	my $event_id = int($round->event); 
	my $event = Tab::Event->retrieve($event_id);

	#defaults
	$max_pref_above=50 unless $max_pref_above;
	$max_mut_above=30 unless $max_mut_above;
	$max_pref_at=50 unless $max_pref_at;
	$max_mut_at=30 unless $max_mut_at;
	$max_pref_below=50 unless $max_pref_below;
	$max_mut_below=30 unless $max_mut_below;
	$pref_wt=1.2 unless $pref_wt;
	$mut_wt=.8 unless $mut_wt;
	$pref_wt_panel=1 unless $pref_wt_panel;
	$mut_wt_panel=1 unless $mut_wt_panel;
	$break_line=3 unless $break_line;
	$pref_left=2 unless $pref_left;
	
	#assign weights to hash 
	my %max_pref; my %max_mut;
	$max_pref{'above'} = $max_pref_above;
	$max_mut{'above'} = $max_mut_above;
	$max_pref{'at'} = $max_pref_at;
	$max_mut{'at'} = $max_mut_at;
	$max_pref{'below'} = $max_pref_below;
	$max_mut{'below'} = $max_mut_below;

	#load pairings, judge, and entry ingo
	my @panels = Tab::Panel->search( round => $round_id );
	my %pan_entry;	
	foreach my $panel (@panels) {
		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		my $ctr=0;
		foreach my $entry (@entries) {
			$ctr++;
			$pan_entry{$panel->id}{$ctr} = $entry->id;
		}
	}
	
	my $last_round_name = $round->name - 1;
	my $last_round = Tab::Round->search( event => $round->event->id, name => $last_round_name)->first;
	my %entry_wins = $m->comp("/funclib/entry_wins.mas", event => $round->event, round => $last_round);
	my %entry_losses = $m->comp("/funclib/entry_losses.mas", event => $round->event, round => $last_round);
	#my @judge_ref = $m->comp("/funclib/round_judges.mas", round => $round);
	my @judge_ref = Tab::Judge->search( judge_group => $event->judge_group);
	my %judge;
	foreach my $judges (@judge_ref) {
		$judge{$judges->id}{'name'} = $judges->last.", ".$judges->first;
		$judge{$judges->id}{'avg_pref'} = $m->comp("/funclib/judge_avg_rating.mas", judge => $judges, avg_field => "percentile" );
	}
	my %entry_code = map {$_->id => $_->code} $round->event->entries;
	my %pref_record = $m->comp("/funclib/round_ordinals.mas", round => $round);
	my %all_pref = $m->comp("/funclib/event_judgeprefs.mas", event => $round->event, style => "victorian" );
	
	#diagnostics
	my ($paired_panels_past, $assigned_judges_past, $needed_panels_past, $needed_judges_past, $paired_panels_current, $assigned_judges_current, $needed_panels_current, $needed_judges_current, $paired_panels_future, $assigned_judges_future, $needed_panels_future, $needed_judges_future, $burned_current, $burned_total, $lost_rounds_current, $lost_rounds_total, $event_rds_left) = $m->comp("/funclib/judge_oblig_count.mas", event_id => $event_id, current_rd_id => $round->id );
	my ($avg_pref, $avg_mut, $worst_pref, $worst_mut, $deciles) = $m->comp("/funclib/mjp_diagnostics.mas", round => $round );
	my %deciles = %{$deciles};
	my @avg_pref = @{$avg_pref}; my @worst_pref = @{$worst_pref}; my @avg_mut = @{$avg_mut}; my @worst_mut = @{$worst_mut};

		#remaining pref calculation
	my $tot_pref; my $tot_rds; 
	my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $round->id);
	foreach my $judge (@judge_ref) {
		my $key = $judge->id;
		my $dummy = ${$judge_hash}{$key}{'oblig'} - ${$judge_hash}{$key}{'judged_already'};
		$dummy = ${$judge_hash}{$key}{'future_possible'} if $dummy > ${$judge_hash}{$key}{'future_possible'};
		$dummy = 0 if $dummy < 0 ;
		$tot_rds += $dummy;
		$tot_pref += ( $dummy * $judge{$key}{'avg_pref'} ) ;
	}
	$tot_rds = 1 if $tot_rds == 0;

	my @cohort; $cohort[1]="Above"; $cohort[2]="At"; $cohort[3]="Below";
	
	sub prefdata {

		my ($pref_str) = @_;
		my $pref;
		
		my $slash_spot = index($pref_str, "/");
		my $pref_one= substr($pref_str, 0, $slash_spot);
		my $pref_two = substr($pref_str, $slash_spot+1, length($pref_str)-$slash_spot);
		return ($pref_one, $pref_two);
		
	}

</%init>

<style>
table,th,td
{
border:1px solid black;
}
</style>

	<div class="left huge" >

%				my $end = time(); 
				Total load time: <% printf("%.2f\n", $end - $start) %>
	
	<script>

		sortTest2 = function() {
			
			//window.alert("IN sort sub");
			
			var eval = [];

			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				eval[i] = [];
				eval[i][0] = TableRows[i].cells[0].textContent; //judge id
				eval[i][1] = TableRows[i].cells[2].textContent; //panel id
				eval[i][2] = TableRows[i].cells[5].textContent; //mutpref score
			}
			
			eval.sort(function(a, b) { return (a[2] < b[2] ? -1 : (a[2] > b[2] ? 1 : 0)); });
			
			//for (var i = 0; i < 10; i++) {
			//	window.alert(i +" " + eval[i][0] + " " + eval[i][1] + " " + eval[i][2]);
			//}
			
			//window.alert("END of sort sub");
			
		}

		sortTable = function(sort_col) {

    		var tbl = document.getElementById("STAData").tBodies[0];
    		var store = [];
    		for(var i=0, len=tbl.rows.length; i<len; i++){
        		var row = tbl.rows[i];
        		var sortnr = parseFloat(row.cells[sort_col].textContent || row.cells[sort_col].innerText);
        		if(!isNaN(sortnr)) store.push([sortnr, row]);
    		}
    		store.sort(function(x,y){
        		return x[0] - y[0];
    		});
    		for(var i=0, len=store.length; i<len; i++){
        		tbl.appendChild(store[i][1]);
    		}
    		store = null;

		}

		//clears the pairings table of all judge assignments
		clear_current_placements = function() {
		
			var n_cols = document.getElementById('current_pairing').rows[0].cells.length;
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				for (var c = 5; c <= n_cols-2; c++) {
					if ( TableRows[i].cells[c] == undefined ) {} else {
					TableRows[i].cells[c].textContent = ""; }
				}
			}

			//clear also from the judge_use table; will need to update later
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
					TableRows[i].cells[10].textContent = "0";
			}
			
		}

		//updates STAData table based on current mut and pref weights
		recalc_mutpref = function() {

			var pref_weight = parseFloat(document.getElementById("pref_weight").value);
			var mut_weight = parseFloat(document.getElementById("mut_weight").value);

			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var pref1 = parseFloat(TableRows[i].cells[3].textContent);
				var pref2 = parseFloat(TableRows[i].cells[4].textContent);
				var MutPref = pref1 * (pref_weight + .5);
				MutPref = MutPref + (pref2 * (pref_weight + .5));
				var mut = Math.abs(pref1 - pref2);
				MutPref = MutPref + (mut * mut_weight);
				TableRows[i].cells[5].textContent = MutPref.toFixed(1);
				//exclude if one team didn't rate
				if ( isNaN(MutPref) ) { TableRows[i].cells[5].textContent = "9999"; }
				//exclude if no oblig left
				var dummy = document.getElementById("Judge"+TableRows[i].cells[0].textContent); 
				if ( parseFloat(dummy.cells[6].textContent) <= 0 ) { TableRows[i].cells[5].textContent = "9999"; }
			}
		
		}
		
		pairing_panel_update = function(panel_id) {

			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var panel_row = document.getElementById("panel_pairing"+panel_id);
			var tot_pref = 0; var tot_judges = 0; var panel_balance = 0; var pref1; var pref2;
			for (var i = 1; i <= n_judges; i++) {
				var dummy = document.getElementById(panel_id+"Judge"+i+"Pref1"); 
				pref1 = parseFloat(dummy.textContent);
				tot_pref = tot_pref + pref1;
				tot_judges = tot_judges + 1;
				panel_balance = panel_balance + pref1;
				var dummy = document.getElementById(panel_id+"Judge"+i+"Pref2"); 
				pref2= parseFloat(dummy.textContent);
				tot_pref = tot_pref + pref2;
				tot_judges = tot_judges + 1;
				panel_balance = panel_balance - pref2;
			}
			dummy = document.getElementById(panel_id+"Avg");
			dummy.textContent = (tot_pref/tot_judges).toFixed(1)
			dummy = document.getElementById(panel_id+"Bal");
			dummy.textContent = (panel_balance).toFixed(1)

		}
		
		IsObligated = function(judge_id) {
			var judge_row = document.getElementById("Judge"+judge_id);
			var fut_poss = parseFloat(judge_row.cells[7].textContent) + parseFloat(judge_row.cells[4].textContent);
			var ob_left = parseFloat(judge_row.cells[6].textContent) + parseFloat(judge_row.cells[8].textContent);
			if ( ob_left >= fut_poss ) { return true; }
			return false;
		}

		add_judge_to_panel = function (judge_id, panel_id, judge_number) {

			//note that this just over-writes the existing placement
			var judge_row = document.getElementById("STA"+judge_id+"-"+panel_id);

			var dummy = document.getElementById(panel_id+"Judge"+judge_number+"ID");
			dummy.textContent = judge_row.cells[0].textContent;
			var dummy = document.getElementById(panel_id+"Judge"+judge_number+"Name");
			dummy.textContent = judge_row.cells[1].textContent;
			var dummy = document.getElementById(panel_id+"Judge"+judge_number+"Pref1");
			dummy.textContent = judge_row.cells[3].textContent;
			var dummy = document.getElementById(panel_id+"Judge"+judge_number+"Pref2");
			dummy.textContent = judge_row.cells[4].textContent;
			var dummy = document.getElementById(panel_id+"Judge"+judge_number+"Mut");
			dummy.textContent = Math.abs(parseFloat(judge_row.cells[3].textContent) - parseFloat(judge_row.cells[4].textContent) ).toFixed(1);
			//update panel to show balance and avg
			pairing_panel_update(panel_id);
			//mark as being used in current pairing, not the saved one
			var dummy = document.getElementById("Judge"+judge_id);
			dummy.cells[10].textContent = 1;
			
		}

		recalc_panel_balance = function(panel_id, judge_to_remove, judge_to_add) {

			var n_judges = parseFloat(document.getElementById("n_judges").value); 

			var bal=0;
			var panel_row = document.getElementById("pairing_panel"+panel_id);
			for (var j = 1; j <= n_judges; j++) {
				var row_judge = document.getElementById(panel_row.cells[0].textContent+"Judge"+j+"ID").textContent;
				if ( row_judge != judge_to_add && row_judge != judge_to_remove ) {
					var dummy = document.getElementById(panel_row.cells[0].textContent+"Judge"+j+"Pref1").textContent;
					bal = bal + parseFloat(dummy);
					var dummy = document.getElementById(panel_row.cells[0].textContent+"Judge"+j+"Pref2").textContent;
					bal = bal + parseFloat(dummy);
				}
			}
			
			if ( judge_to_add > 0 ) {
				var judge_STA = document.getElementById("STA"+judge_to_add+"-"+panel_id);
				bal = bal + parseFloat(judge_STA.cells[3].textContent) - parseFloat(judge_STA.cells[4].textContent);
			}
			
			return bal;

		}
		
		get_eval_score = function (judge1, panel1, judge2, panel2) {

			//returns the eval score for this combo of judges on panels; judge and panel input values are ids
			//uses MutPref scores and weights for overall panel mutuality
			
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var panel_mut_weight = parseFloat(document.getElementById("panel_mut_weight").value);			

			var judge_1_STA = document.getElementById("STA"+judge1+"-"+panel1);
			var judge_1_mutpref = parseFloat(judge_1_STA.cells[5].textContent);
			var bal1 = recalc_panel_balance(panel1, judge2, judge1);			

			//bail if you only want the first score
			if ( judge2 == -999 ) {
				var score = judge_1_mutpref + ( bal1 * panel_mut_weight );
				return score;
			}
			
			var judge_2_STA = document.getElementById("STA"+judge2+"-"+panel2);
			var judge_2_mutpref= parseFloat(judge_2_STA.cells[5].textContent);
			var bal2 = recalc_panel_balance(panel2, judge1, judge2) ;			

			var score = judge_1_mutpref + judge_2_mutpref + (Math.abs(bal1) * panel_mut_weight) + (Math.abs(bal2) * panel_mut_weight);
			
			return score;

		}
		
		over_max = function(judge_id, panel_id) {

			var dummy=false;
			var cohort_str = document.getElementById(panel_id+"Cohort").textContent;
			if ( cohort_str != null ) {
				var dummy2 = "max_mut_"+cohort_str.toLowerCase();
				var max_mut = document.getElementById( "max_mut_"+cohort_str.toLowerCase() );
				var max_pref = document.getElementById( "max_pref_"+cohort_str.toLowerCase() );
				var judge_STA = document.getElementById("STA"+judge_id+"-"+panel_id);
				var pref1 = parseFloat(judge_STA.cells[3].textContent);
				var pref2 = parseFloat(judge_STA.cells[4].textContent);
				if ( pref1 > max_pref.value ) { dummy = true; }
				if ( pref2 > max_pref.value ) { dummy = true; }
				if ( Math.abs(pref1 - pref2) > max_mut.value ) { dummy = true; }
				if ( isNaN(pref1) || isNaN(pref2) ) { dummy = true; }
			}

			return dummy;
		}
		
		double_swap = function() {
			
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var panel_mut_weight = parseFloat(document.getElementById("panel_mut_weight").value);			
			var made_change = false;
			
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length - 1; x++) {
				for (var y = (x + 1); y < TableRows.length; y++) {
					for (var j = 1; j <= n_judges; j++) {
						for (var j2 = 1; j2 <= n_judges; j2++) {
						
							var judge_x_id = document.getElementById(TableRows[x].cells[0].textContent+"Judge"+j+"ID").textContent;
							var judge_y_id = document.getElementById(TableRows[y].cells[0].textContent+"Judge"+j2+"ID").textContent;
							judge_x_id = parseFloat(judge_x_id);
							judge_y_id = parseFloat(judge_y_id);

							var score_before = get_eval_score(judge_x_id, TableRows[x].cells[0].textContent, judge_y_id, TableRows[y].cells[0].textContent);						
							var score_after = get_eval_score(judge_x_id, TableRows[y].cells[0].textContent, judge_y_id, TableRows[x].cells[0].textContent);						

							var dummy = over_max(judge_x_id, TableRows[y].cells[0].textContent);
							var dummy2 = over_max(judge_y_id, TableRows[x].cells[0].textContent);

							if ( score_after < score_before && dummy == false && dummy2 == false ) {
								add_judge_to_panel(judge_y_id, TableRows[x].cells[0].textContent, j);		
								add_judge_to_panel(judge_x_id, TableRows[y].cells[0].textContent, j2);
								made_change = true;
							}
						}
					}
				}
			}
			
			return made_change;
		}

		triple_swap =function () {
			var made_change = false;
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var panel_mut_weight = parseFloat(document.getElementById("panel_mut_weight").value);			
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length - 2; x++) {
				var panel_x = TableRows[x].cells[0].textContent;
				for (var y = (x + 1); y < TableRows.length - 1 ; y++) {
					var panel_y = TableRows[y].cells[0].textContent;
					for (var z = (x + 2); y < TableRows.length; y++) {
						var panel_z = TableRows[z].cells[0].textContent;
						for (var j = 1; j <= n_judges; j++) {
							for (var j2 = 1; j2 <= n_judges; j2++) {
								for (var j3 = 1; j3 <= n_judges; j3++) {

									var judge_x_id = document.getElementById(panel_x+"Judge"+j+"ID").textContent;
									var judge_y_id = document.getElementById(panel_y+"Judge"+j2+"ID").textContent;
									var judge_z_id = document.getElementById(panel_z+"Judge"+j3+"ID").textContent;
									
									var curr_x_score = get_eval_score(judge_x_id, panel_x, -999, -999);
									var curr_y_score = get_eval_score(judge_y_id, panel_y, -999, -999);
									var curr_z_score = get_eval_score(judge_z_id, panel_z, -999, -999);
									
									var y_to_x_panel = get_eval_score(judge_y_id, panel_x, -999, -999);
									if ( y_to_x_panel > curr_x_score ) { break; }
									var z_to_y_panel = get_eval_score(judge_z_id, panel_y, -999, -999);
									if ( z_to_y_panel > curr_y_score) { break; }
									var x_to_z_panel = get_eval_score(judge_x_id, panel_z, -999, -999);
									if ( x_to_z_panel > curr_z_score) { break; }
									
									//didn't exit, so the switch works.  Execute it.
									add_judge_to_panel(judge_y_id, panel_x, j);		
									add_judge_to_panel(judge_z_id, panel_y, j2);		
									add_judge_to_panel(judge_x_id, panel_z, j3);		
									made_change = true;

								}
							}
						}
					}	
				}
			}
			return made_change;
		}

		fix_with_extra = function() {
		
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var pref_left = parseFloat(document.getElementById("pref_left").value);
			var n = 0; // n eligible
			
			//loop through all panels and see if the judge exceeds the targets
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length; x++) {
				var panel_id = TableRows[x].cells[0].textContent;
				for (var j = 1; j <= n_judges; j++) {
					var judge_id = document.getElementById(panel_id+"Judge"+j+"ID").textContent; 
					if ( over_max(judge_id, panel_id) == true ) {
						//if so, create a new array of judges and sort
						var eval = [];
						var JudgeTable = document.getElementById("judge_use");
						var JudgeRows = JudgeTable.getElementsByTagName("tr");
						for (var i = 1; i < JudgeRows.length; i++) {
							if ( parseFloat(JudgeRows[i].cells[10].textContent) != 1 && parseFloat(JudgeRows[i].cells[6].textContent) > 0) {
								//give a score
								eval[n] = [];
								eval[n][0] = parseFloat(JudgeRows[i].cells[0].textContent); //judge id
								eval[n][1] = get_eval_score(eval[n][0], panel_id, -999, -999);
								eval[n][1] = eval[n][1] - (2 * parseFloat(JudgeRows[i].cells[2].textContent) * pref_left);
								if ( isNaN(eval[n][1]) ) { eval[n][1] = 9999; }
								n = n + 1;
							}
						
						}
						eval.sort(function(a, b) { return (a[1] < b[1] ? -1 : (a[1] > b[1] ? 1 : 0)); });
						var judge_dummy = eval[0][0]; var judge_score = eval[0][1];
						if ( eval[0][0] != undefined ) { 
							var dummy_1 = get_eval_score(judge_id, panel_id, -999, -999);
							var dummy_2 = get_eval_score(eval[0][0], panel_id, -999, -999);
							if ( dummy_2 < dummy_1 && over_max(eval[0][0], panel_id) == false ) {
								var judge_out = document.getElementById("Judge"+judge_id);
								judge_out.cells[10].textContent = 0 ;
								add_judge_to_panel(eval[0][0], panel_id, j);
							}
						}			
					}
				}
			}
		}

		panels_over_target = function () {
			var n = 0;
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length; x++) {
				var panel_id = TableRows[x].cells[0].textContent;
				for (var j = 1; j <= n_judges; j++) {
					var judge_id = document.getElementById(panel_id+"Judge"+j+"ID").textContent; 
					if ( over_max(judge_id, panel_id) == true ) { n = n + 1; }
				}
			}	
			return n;
		}
		
		fix_with_extra_and_doub = function () {
			
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var pref_left = parseFloat(document.getElementById("pref_left").value);
			var n=0; var n_fixed=0;
			
			//loop through all panels and see if the judge exceeds the targets
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length; x++) {
				var best_judge_steal_score = 9999; var best_replacement_score = 9999;
				var best_judge_steal_ID = 0; var best_replacement_judge_id = 0;
				var panel_id = TableRows[x].cells[0].textContent;
				var judge_to_steal = 0; var replacement_judge_id = 0; var replacement_judge_n = 0;
				for (var j = 1; j <= n_judges; j++) {
					var judge_id = document.getElementById(panel_id+"Judge"+j+"ID").textContent; 
					if ( over_max(judge_id, panel_id) == true ) {
						n = n + 1;
						var MasterTable_2 = document.getElementById("current_pairing");
						var TableRows_2 = MasterTable_2.getElementsByTagName("tr");
						for (var x_2 = 1; x_2 < TableRows_2.length; x_2++) {
							var panel_id_2 = TableRows_2[x_2].cells[0].textContent;
							for (var j_2 = 1; j_2 <= n_judges; j_2++) {
								var judge_id_2 = document.getElementById(panel_id_2+"Judge"+j_2+"ID").textContent;
								if ( over_max(judge_id_2, panel_id) == false ) {
									var dummy = get_eval_score(judge_id_2, panel_id, -999, -999);
									var JudgeTable = document.getElementById("judge_use");
									var JudgeRows = JudgeTable.getElementsByTagName("tr");
									for (var i = 1; i < JudgeRows.length; i++) {
										if ( JudgeRows[i].cells[10].textContent == 0 && JudgeRows[i].cells[6].textContent > 0 ) {
											var dummy_2 = get_eval_score(JudgeRows[i].cells[0].textContent, panel_id_2, -999, -999);
											if ( dummy + dummy_2 < best_replacement_score + best_judge_steal_score && over_max(JudgeRows[i].cells[0].textContent, panel_id_2, -999, -999) == false ) {
												best_replacement_score = dummy_2;
												best_judge_steal_score = dummy;
												judge_to_steal = judge_id_2;
												replacement_judge_id = JudgeRows[i].cells[0].textContent;
												replacement_judge_n = j_2;
											}
										}
									}
								}
							}	
						}
					}
					//put chang here
					if ( replacement_judge_id > 0 ) {
						add_judge_to_panel(judge_to_steal, panel_id, j);
						add_judge_to_panel(replacement_judge_id, panel_id_2, replacement_judge_n);
						var dummy = document.getElementById("Judge"+judge_id); 
						dummy.cells[10].textContent=0;
						n_fixed = n_fixed + 1;
					}

				}	
			}
		}				

		push_obligated_back_in = function() {

			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var x = 1; x < TableRows.length; x++) {
				var judge_to_add = TableRows[x].cells[0].textContent;
				var judging_now = parseFloat(TableRows[x].cells[10].textContent);
				if ( IsObligated(judge_to_add) == true && judging_now == 0 ) {
					var panel_to_add=0;
					var judge_to_remove=0;
					var judge_n_spot = 0;
					var test_score = 9999;
					var PairingTable = document.getElementById("current_pairing");
					var PairingRows = PairingTable.getElementsByTagName("tr");
					for (var i = 1; i < PairingRows.length; i++) {
						var panel_id = PairingRows[i].cells[0].textContent;
						for (var j = 1; j <= n_judges; j++) {
							var curr_judge_id = document.getElementById(panel_id+"Judge"+j+"ID").textContent;
							if ( IsObligated(curr_judge_id) == false && over_max(judge_to_add, panel_id) == false ) {
								var score = get_eval_score(judge_to_add, panel_id, -999, -999);
								if (score < test_score ) {
									test_score = score;
									panel_to_add=panel_id;
									judge_n_spot=j;
									judge_to_remove = curr_judge_id;
								}
							}
						}
					}
					if ( panel_to_add > 0 ) {
						add_judge_to_panel(judge_to_add, panel_to_add, judge_n_spot);
						var dummy = document.getElementById("Judge"+judge_to_remove); 
						dummy.cells[10].textContent=0;
					}
				}
			}
		
		}
								
		PlaceJudges = function() {
			
			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var start = new Date();
			
			clear_current_placements();
			var time_display = document.getElementById("status_box");
			var end = new Date(); var duration_toclear = end - start; 

			recalc_mutpref();		
			var end = new Date(); var duration_torecalc = end - start; 
						
			//sortTest2(); 
			//sortTable(5); //original sort test functions; sorting a javascript array is faster than
			

			//  FIRST PASS -------
			
			//figure out how many non_obligated judges you gotta use
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var n_obligated=0;
			for (var i = 1; i < TableRows.length; i++) {
				if ( IsObligated( parseFloat(TableRows[i].cells[0].textContent) ) == true ) { n_obligated = n_obligated + 1; }
			}
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var n_debates = TableRows.length - 1;
			var non_ob_needed =  n_debates - n_obligated;

			//adjust the mutpref scores for ratings, panel balance, cohort mut and pref targets						
			var panel_mut_weight = parseFloat(document.getElementById("panel_mut_weight").value);			
			var pref_left = parseFloat(document.getElementById("pref_left").value);
			var eval = [];
			var MasterTable = document.getElementById("STAData");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var STAData_length = TableRows.length;
			for (var i = 1; i < STAData_length; i++) {
				eval[i] = [];
				eval[i][0] = TableRows[i].cells[0].textContent; //judge id
				eval[i][1] = TableRows[i].cells[2].textContent; //panel id
				eval[i][2] = TableRows[i].cells[5].textContent; //mutpref score
				var rating = document.getElementById(TableRows[i].cells[0].textContent+"Rating").textContent;
				eval[i][3] = eval[i][2]-(rating * pref_left); //mutpref w/commit left adjustment				
				eval[i][4] = 0; //for panel mutuality adustment; will use below for multi-judge panels				
				eval[i][5] = TableRows[i].cells[3].textContent; //pref1
				eval[i][6] = TableRows[i].cells[1].textContent; //judge name
				eval[i][7] = TableRows[i].cells[4].textContent; //pref2
				eval[i][8] = IsObligated( TableRows[i].cells[0].textContent ); //obligated to hear round
				//window.alert("eval8=" + eval[i][8]);
				//panel balance adjstmt
				var current_bal = document.getElementById(TableRows[i].cells[2].textContent+"Bal");
				if ( current_bal != null && eval[i][5]>0 && eval[i][7]>0) {
					var dummy = parseFloat(current_bal.textContent);
					if ( isNaN(dummy) ) { dummy = 0; }
					eval[i][3] = eval[i][3] + ( Math.abs(dummy+eval[i][5]-eval[i][7]) * panel_mut_weight );
				}
				//penalize if exceed cohort max
				var cohort_str = document.getElementById(TableRows[i].cells[2].textContent+"Cohort");
				if ( cohort_str != null ) {
					var max_mut = document.getElementById( "max_mut_"+cohort_str.textContent.toLowerCase() );
					if ( Math.abs( eval[i][5] - eval[i][7] ) > max_mut.value ) { eval[i][3] = 9999; }
				}
			}
			eval.sort(function(a, b) { return (a[3] < b[3] ? -1 : (a[3] > b[3] ? 1 : 0)); });
						
			var end = new Date(); var duration_sorttest = end - start; 

			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");

			var cohort_str = ["At", "Above", "Below"];
			for (var cohort = 0; cohort <=2; cohort ++ ) {
				for (var panel = 1; panel < TableRows.length; panel++) {
					var dummy = document.getElementById(TableRows[panel].cells[0].textContent+"Cohort");
					if ( dummy.textContent == cohort_str[cohort] ) {
						for (var judge = 1; judge <= n_judges; judge++) {
							//need to recalc eval here for multi-judge panels
							for (var j = 1; j <= STAData_length; j++) {
								judrow = document.getElementById("Judge"+eval[j][0]);
								if (parseFloat(eval[j][1]) == parseFloat(TableRows[panel].cells[0].textContent) && judrow.cells[10].textContent == 0 && ( non_ob_needed > 0 || eval[j][8] == true ) ) {
								
									add_judge_to_panel(eval[j][0], TableRows[panel].cells[0].textContent, judge);		

									//count non obligateds 
									if ( eval[j][8] == false ) { non_ob_needed = non_ob_needed - 1; }
									break;
									
								}
							}
						}
					}
				}
			}
			var end = new Date(); var duration_first_pass = end - start; 

			var n_tries=0;
			while (n_tries < 1000) {
			    var made_change = true;
				var any_triple = false;
				do {
					made_change = double_swap();
				    n_tries++;
				} while ( n_tries < 500 && made_change == true );	
				
				do {
					made_change = triple_swap();
					if (made_change == true) { any_triple = true; }
				    n_tries++;

				} while ( n_tries < 1000 && made_change == true );
				
				if ( any_triple == false ) { break; }
			}
			
			var end = new Date(); var duration_doub_swap = end - start; 
			triple_swap();
			var end = new Date(); var duration_trip_swap = end - start; 
			fix_with_extra();
			var end = new Date(); var duration_fix_w_extra = end - start; 
			fix_with_extra_and_doub();
			var end = new Date(); var duration_fix_w_extra_and_doub = end - start; 
			push_obligated_back_in();
			var end = new Date(); var duration_push_back_in = end - start; 
						
//			time_display.textContent = "Time to clear screen is:" + duration_toclear/1000; 
//			time_display.textContent=time_display.textContent + " Time to recalc screen is:" + duration_torecalc/1000; 
//			time_display.textContent=time_display.textContent + " Time for sort is:" + duration_sorttest/1000; 
//			time_display.textContent=time_display.textContent + " Time to first pass is:" + duration_first_pass/1000; 
//			time_display.textContent=time_display.textContent + " Time to double swap is:" + duration_doub_swap/1000; 
//			time_display.textContent=time_display.textContent + " Time to triple swap is:" + duration_trip_swap/1000; 
//			time_display.textContent=time_display.textContent + " Time to fix with extra:" + duration_fix_w_extra/1000; 
//			time_display.textContent=time_display.textContent + " Time to fix with extra & 2x:" + duration_fix_w_extra_and_doub/1000; 
//			time_display.textContent=time_display.textContent + "Time to push back oblig judges:" + duration_push_back_in/1000;
			time_display.textContent= " Time to finish placements:" + duration_push_back_in/1000;
			time_display.textContent=time_display.textContent + " - " + panels_over_target() + " panels over target"; 
			current_diagnostics();
			
		}
		
		judge_test = function() {
		
			//window.alert("in test");
			var dummy = document.getElementById("321912Judge1Pref1");
			dummy.textContent = "1.3";
			var dummy = document.getElementById("321912Judge1Pref2");
			dummy.textContent = "2.1";
			var dummy = document.getElementById("321912Judge1Name");
			dummy.textContent = "Bruschke, Cricket 1.3-2.1";
			var dummy = document.getElementById("321912Judge1Mut");
			dummy.textContent = ".8";
			var dummy = document.getElementById("321912Avg");
			dummy.textContent = "1.7";
			var dummy = document.getElementById("321912Bal");
			dummy.textContent = "-.8";

		}
		
		//only called from within the current_pairings diagnostics
		judge_diagnostics = function() {

			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			
			//update columns in table to reflect the displayed pairings; shows whether they are judging in the current pairings
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				for (var j = 1; j <= n_judges; j++) {
					var judge_id = document.getElementById(TableRows[i].cells[0].textContent+"Judge"+j+"ID");
					if ( judge_id != null ) {
						var judge_use = document.getElementById(judge_id.textContent+"DisplayAssigned");
						if ( judge_use != null ) { judge_use.textContent = 1; }
					}
				}
			}
			
			//Count up rounds lost and average pref left
			var NewRdsLost = 0;
			var TotPref = 0; var PrefNum = 0;
			var MasterTable = document.getElementById("judge_use");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var oblig = parseFloat(TableRows[i].cells[6].textContent);
				var SaveAssigned = parseFloat(TableRows[i].cells[8].textContent);
				var SaveAssignedTimeslot = parseFloat(TableRows[i].cells[9].textContent);
				var DisplayAssigned = document.getElementById(TableRows[i].cells[0].textContent+"DisplayAssigned");
				var DisplayAssigned_local = parseFloat(DisplayAssigned.textContent);
				var DisplayObligLeft = document.getElementById(TableRows[i].cells[0].textContent+"DisplayObligLeft");
				DisplayObligLeft.textContent = oblig + SaveAssigned - parseFloat(DisplayAssigned.textContent);
				var AvailCurrent = parseFloat(TableRows[i].cells[4].textContent);
				var FutPoss = parseFloat(TableRows[i].cells[7].textContent); 
				var DisplayObligLeft_local = parseFloat(DisplayObligLeft.textContent);
				//rounds lost; note that you have to reflect whether they are judging in other events
				if ( AvailCurrent == 1 && SaveAssignedTimeslot == 0 && DisplayAssigned_local == 0 && DisplayObligLeft_local > FutPoss ) {
					var DisplayLost = document.getElementById(TableRows[i].cells[0].textContent+"DisplayLost");
					DisplayLost.textContent = "1";
					NewRdsLost++ ;
				}
				var Rating = parseFloat(TableRows[i].cells[2].textContent);
				var dummy = DisplayObligLeft_local;
				if ( FutPoss < dummy) { dummy = FutPoss; }
				if ( dummy < 0 ) { dummy = 0; }
				TotPref = TotPref + (dummy * Rating);
				PrefNum = PrefNum + dummy ;
			}
			
			var dummy = document.getElementById("NewRdsLost");
			dummy.textContent = NewRdsLost;
			var dummy = document.getElementById("NewPrefLeft");
			var dummy2 = TotPref / PrefNum;
			dummy.textContent = dummy2.toFixed(1);
			
		}
		
		//updates the diagnostics based on the current set of judge assignments; 
		//earlier I had typed the comment "gotta run judge_diagnostics first" but I think I'm insane
		current_diagnostics = function() {

			var n_judges = parseFloat(document.getElementById("n_judges").value); 
			var MasterTable = document.getElementById("current_pairing");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var TotPref = [0,0,0]; var PrefCt = [0,0,0]; var Cohort_num;
			var WorstPref = [0,0,0]; 
			var TotMut = [0,0,0]; 
			var MutCt = [0,0,0];
			var WorstMut = [0,0,0];
			for (var i = 1; i < TableRows.length; i++) {
				var Cohort = document.getElementById(TableRows[i].cells[0].textContent+"Cohort");
				if ( Cohort != null ) {
					if ( Cohort.textContent == "Above" ) { Cohort_num = 0; }
					if ( Cohort.textContent == "At" ) { Cohort_num = 1; }
					if ( Cohort.textContent == "Below" ) { Cohort_num = 2; }				
				}
				for (var j = 1; j <= n_judges; j++) {
					var id_to_get = TableRows[i].cells[0].textContent+"Judge"+j+"Mut";
					var mut = document.getElementById(id_to_get);
					if ( mut != null ) {
						TotMut[Cohort_num] = TotMut[Cohort_num] + parseFloat(mut.textContent);
						MutCt[Cohort_num] = MutCt[Cohort_num] + 1;
						if ( parseFloat(mut.textContent) > WorstMut[Cohort_num] ) { WorstMut[Cohort_num] = parseFloat(mut.textContent); }
					}	
					
					for (var tm = 1; tm <= 2; tm++) {
						var id_to_get = TableRows[i].cells[0].textContent+"Judge"+j+"Pref"+tm;
						var pref = document.getElementById(id_to_get);
						if ( pref != null ) {
							TotPref[Cohort_num] = TotPref[Cohort_num] + parseFloat(pref.textContent) ; 
							PrefCt[Cohort_num] = PrefCt[Cohort_num] + 1;
							if ( parseFloat(pref.textContent) > WorstPref[Cohort_num] ) { WorstPref[Cohort_num] = parseFloat(pref.textContent) };
//							window.alert("Panel/Judge=" + id_to_get + " Pref=" + parseFloat(pref.textContent) + " TotPref=" + TotPref[Cohort_num] + " PrefCt=" + PrefCt[Cohort_num]);
						}
					}	
				}
			}
			
			var dum_str;
			for (var i = 0; i <= 2; i++) {
				if ( i == 0 ) { dum_str = "Above"; }
				if ( i == 1 ) { dum_str = "At"; }
				if ( i == 2 ) { dum_str = "Below"; }
				dummy = document.getElementById("Avg"+dum_str);
				dummy.textContent=parseFloat(TotPref[i]/PrefCt[i]).toFixed(1);
				dummy = document.getElementById("Worst"+dum_str);
				dummy.textContent=WorstPref[i].toFixed(1);
				dummy = document.getElementById("AvgMut"+dum_str);
				dummy.textContent=parseFloat(TotMut[i]/MutCt[i]).toFixed(1);
				dummy = document.getElementById("WorstMut"+dum_str);
				dummy.textContent=WorstMut[i].toFixed(1);
			}
			
			//update judge situation
			judge_diagnostics();

		}
		
	</script>
	

		<h2>STA Judge Placement (Gary Larson) MPJ Settings for <% $event->name %> <% $round->label %> (<% $round->name %>) </h2>
		<form action="debate_judge_assign_sta.mhtml" method="post">
		<input type="hidden" value="<% $round_id %>" name="round_id">
		<input id="n_judges" type="hidden" value="<% $round->judges %>" >
		<table cellpadding="0" cellspacing="1" >
			<caption><h4>Weights</h4></caption>
			<tr>
				<td>
					Preference per judge
					<input id="pref_weight" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_wt" value="<% $pref_wt %>">
				</td>
				<td>
					Preference per panel
					<input type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_wt_panel" value="<% $pref_wt_panel %>">
				</td>

			</tr>
			<tr>
				<td>
					Mutuality per judge
					<input id="mut_weight" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="mut_wt" value="<% $mut_wt %>">
				</td>
				<td>
					Mutuality per panel
					<input id="panel_mut_weight" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="mut_wt_panel" value="<% $mut_wt_panel %>">
				</td>

			</tr>
			<tr>
				<td colspan="2">
					Remaining Pref
					<input id="pref_left" type="number" step="0.1" class="smaller" min=0 max=99 size=4  name="pref_left" value="<% $pref_left %>">
				</td>
			</tr>
		</table>
		<table>	
			<caption>
				<h4>Constraints</h4>
			</caption>
			<tr>
				<td colspan="3">
					Max losses a team can have and still clear (break line):
					<input type="number" class="smaller" min=0 max=99 size=4  name="break_line" value="<% $break_line %>">
				</td>
			</tr>
			<tr>
				<td>
					ABOVE the break line
				</td>
				<td>
					Max Preference
					<input id="max_pref_above" type="number" class="smaller" min=0 max=99 size=4  name="max_pref_above" value="<% $max_pref{'above'} %>">
				</td>
				<td>
					Max Mutuality
					<input id="max_mut_above" type="number" class="smaller" min=0 max=99 size=4  name="max_mut_above" value="<% $max_mut{'above'} %>">
				</td>

			</tr>
			<tr>
				<td>
					AT the break line
				</td>
				<td>
					Max Preference
					<input id="max_pref_at" type="number" class="smaller" min=0 max=99 size=4  name="max_pref_at" value="<% $max_pref{'at'} %>">
				</td>
				<td>
					Max Mutuality
					<input id="max_mut_at" type="number" class="smaller" min=0 max=99 size=4  name="max_mut_at" value="<% $max_mut{'at'} %>">
				</td>

			</tr>
			<tr>
				<td>
					BELOW the break line
				</td>
				<td>
					Max Preference
					<input id="max_pref_below" type="number" class="smaller" min=0 max=99 size=4  name="max_pref_below" value="<% $max_pref{'below'} %>">
				</td>
				<td>
					Max Mutuality
					<input id="max_mut_below" type="number" class="smaller" min=0 max=99 size=4  name="max_mut_below" value="<% $max_mut{'below'} %>">
				</td>

			</tr>


			</tr>

		</table>

		<a onclick="PlaceJudges()" >Run STA pairing with these settings</a>		
		<textarea id="status_box" cols="50" rows="3"></textarea>
			
		<div class="liblrow rightalign">
					<input type="submit" value="Place judges with these settings">
			</form>
		</div>
		
		<table>	
			<caption>
				<h4>Diagnostics</h4>
			</caption>
			<tr>
				<td>Scheme</td>
				<td colspan="4" align="center">ABOVE break</td>
				<td colspan="4" align="center">AT break</td>
				<td colspan="4" align="center">BELOW break</td>								
				<td>Rounds Lost</td>
				<td>Avg Pref Remaining</td>
			</tr>
			<tr>
				<td></td>
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td>Avg Pref</td>
				<td>Worst Pref</td>
				<td>Avg Mut</td>
				<td>Worst Mut</td>												
				<td></td><td></td>
			</tr>
			<tr>
				<td>Saved Pairings</td>
				<td><% sprintf("%.1f", $avg_pref[1]) %></td>
				<td><% sprintf("%.1f", $worst_pref[1]) %></td>
				<td><% sprintf("%.1f", $avg_mut[1]) %></td>
				<td><% sprintf("%.1f", $worst_mut[1]) %></td>
				<td><% sprintf("%.1f", $avg_pref[2]) %></td>
				<td><% sprintf("%.1f", $worst_pref[2]) %></td>
				<td><% sprintf("%.1f", $avg_mut[2]) %></td>
				<td><% sprintf("%.1f", $worst_mut[2]) %></td>
				<td><% sprintf("%.1f", $avg_pref[3]) %></td>
				<td><% sprintf("%.1f", $worst_pref[3]) %></td>
				<td><% sprintf("%.1f", $avg_mut[3]) %></td>
				<td><% sprintf("%.1f", $worst_mut[3]) %></td>
				<td><% $lost_rounds_current %></td>
				<td><% sprintf("%.1f", $tot_pref/$tot_rds) %></td>

			</tr>
			<tr>
				<td>Pairings Below</td>
				<td id="AvgAbove"></td>
				<td id="WorstAbove"></td>
				<td id="AvgMutAbove"></td>
				<td id="WorstMutAbove"></td>				
				<td id="AvgAt"></td>
				<td id="WorstAt"></td>
				<td id="AvgMutAt"></td>
				<td id="WorstMutAt"></td>				
				<td id="AvgBelow"></td>
				<td id="WorstBelow"></td>
				<td id="AvgMutBelow"></td>
				<td id="WorstMutBelow"></td>				
				<td id="NewRdsLost"></td>				
				<td id="NewPrefLeft"></td>								
			</tr>
		</table>


		<table id="current_pairing" >
			<caption>
				<h4>Current Pairings</h4> <a onclick='current_diagnostics()' >Run Diagnostics on Pairings Below</a>
				<a onclick='judge_test()' >Test Judge Placement</a>
			</caption>
		<tr>
		<td>panel</td>
		<td>aff ID</td>
		<td>aff name</td>
		<td>neg ID</td>
		<td>neg name</td>
%		my $n_judges = 1;
%		for (my $i=1; $i <= $n_judges; $i++) {
 		  <td>Judge<% $i %> ID</td>
   		  <td>Judge<% $i %> Name</td>
   		  <td>Judge<% $i %>Pref1</td>
  		  <td>Judge<% $i %>Pref2</td>
  		  <td>Judge<% $i %> Mut</td>		  
%		}
		<td>Panel Avg</td>
		<td>Panel Balance</td>
		<td>Cohort</td>
		</tr>
%		foreach my $panel (@panels) {

%			my $co;	my $pan_tot; my $pan_ct; my $pan_bal; my $ctr;		
%			my @ballots = Tab::Ballot->search( panel => $panel->id);
%			@ballots = sort {$a->side cmp $b->side} @ballots; 
%			if ( $panel->bye == 0 and scalar(@ballots)>1 ) {
				<tr id="pairing_panel<% $panel->id %>">
				<td><% $panel->id %></td>	
%					foreach my $ballot (@ballots) {
%					if ( $break_line ==  $entry_losses{$ballot->entry} ) { $co = 2; }
%					if ( $break_line >  $entry_losses{$ballot->entry} and ($co == 0 or $co == 1) ) { $co = 1; }
%					if ( $break_line <  $entry_losses{$ballot->entry} and ($co == 0 or $co == 3) ) { $co = 3; }

					<td><% $ballot->entry %></td>
					<td><% $entry_code{$ballot->entry} %> <% $entry_wins{$ballot->entry} %>-<% $entry_losses{$ballot->entry} %></td>
%					}			
%					foreach my $ballot (@ballots) {
%						if ($ballot->side == 1) {
%						$ctr++;	
						<td id="<% $panel %>Judge<% $ ctr %>ID"><% $ballot->judge %></td> <td id=<% $panel %>Judge<% $ctr %>Name><% $judge{$ballot->judge}{'name'} %> <% $pref_record{$ballot->judge."-".$panel->id} %></td>
%						my ($pref1, $pref2) = prefdata( $pref_record{$ballot->judge."-".$panel->id} ) ;
						<td id="<% $panel %>Judge<% $ ctr %>Pref1"><% $pref1 %></td><td id="<% $panel %>Judge<% $ ctr %>Pref2"><% $pref2 %></td>
%						$pan_tot += $pref1; $pan_tot += $pref2; $pan_ct += 2;
%						my $mut = abs($pref1 - $pref2); $pan_bal = $pan_bal + ($pref1 - $pref2);
%						$mut = sprintf("%.1f", $mut);
						<td id="<% $panel %>Judge<% $ ctr %>Mut"><% $mut %></td>
%						}											
%					}
					<td id="<% $panel %>Avg">
%					if ($pan_ct) { printf("%.1f", $pan_tot/$pan_ct) ; }
					</td>
					<td id="<% $panel %>Bal">
%					printf("%.1f", $pan_bal);
					</td>
					<td id="<% $panel %>Cohort"><% $cohort[$co] %></td>			

%			}
%		}
		</table>

		<table id="judge_use">
			<caption>
			Judge Use Situation <a onclick='judge_diagnostics()' >Run Diagnostics on Judge Data Below</a>
			</caption>
			<tr>
				<td>ID</td>			
				<td>Judge</td>
				<td>Avg Rating</td>
				<td>Obligation</td>
				<td>Available for Current RD</td>
				<td>Saved: Judged so far</td>				
				<td>Saved: Oblig Left</td>								
				<td>Saved: Future Possible</td>
				<td>Saved: Assigned</td>				
				<td>Saved: Timeslot Assigned</td>				
				<td>Display: Assigned</td>
				<td>Display: Oblig Left</td>
				<td>Display: Lost</td>				
			</tr>
%		foreach my $judges (@judge_ref) {
%				my $key = $judges->id;
			<tr id="Judge<% $judges->id %>" >
				<td><% $key %></td>
				<td><% $judge{$judges->id}{'name'} %></td>
				<td id="<% $judges->id%>Rating" ><% $judge{$judges->id}{'avg_pref'} %></td>				
				<td id="<% $judges->id%>Oblig" ><% ${$judge_hash}{$key}{'oblig'} %></td>
				<td><% ${$judge_hash}{$key}{'avail_current'} %></td>				
				<td><% ${$judge_hash}{$key}{'judged_already'} %></td>
				<td id="<% $judges->id%>ObligLeft"><% ${$judge_hash}{$key}{'oblig'} - ${$judge_hash}{$key}{'judged_already'} %></td>
				<td id="<% $judges->id%>FutPoss"><% ${$judge_hash}{$key}{'future_possible'} %></td>				
				<td>
%				if ( ${$judge_hash}{$key}{'in_round'} ) { print(${$judge_hash}{$key}{'in_round'}) } else { print("0"); }
				</td>								
				<td>
%				if ( ${$judge_hash}{$key}{'in_timeslot'} ) { print(${$judge_hash}{$key}{'in_timeslot'}) } else { print("0"); }
				</td>								
				<td id="<% $key %>DisplayAssigned">0</td>
				<td id="<% $key %>DisplayObligLeft">0</td>
				<td id="<% $key %>DisplayLost">0</td>		
				<td><% ${$judge_hash}{$key}{'lost_current'} %></td>				
			</tr>
%			}

		</table>

%		$end = time(); 
		Total time before STA Data Table: <% printf("%.2f\n", $end - $start) %>

		<table id="STAData">
			<caption>
				STA Data
			</caption>
			<tr>
				<td>Judge ID</td>			
				<td>Judge Name</td>
				<td>Panel ID</td>
				<td>Pref 1</td>
				<td>Pref 2</td>
				<td>MutualPref</td>				
				<td>Below Max</td>								
				<td>Panel Impact</td>
			</tr>
%		foreach my $judges (@judge_ref) {
%			my $key = $judges->id;
%			foreach my $panel (@panels) {
			<tr id="STA<% $key %>-<% $panel->id %>">
				<td><% $key %></td>
				<td><% $judge{$judges->id}{'name'} %> </td>
				<td><% $panel->id %></td>
%				my $pref1 = $all_pref{$pan_entry{$panel->id}{1}."-".$key}; 
%				my $pref2 = $all_pref{$pan_entry{$panel->id}{2}."-".$key}; 
				<td><% $pref1 %></td>				
				<td><% $pref2 %></td>								
				<td>Magic Number</td>
%				my $dummy = $pref1;
%				if ( $pref2 > $pref1 ) { $dummy = $pref2; }
				<td><% $dummy %></td>				
%				my $mut = $pref1 - $pref2;
%				$mut = sprintf("%.1f", $mut);
				<td><% $mut %></td>
			</tr>
%			}
%		}
		</table>
		
%		$end = time(); 
		Total time after tables rendered: <% printf("%.2f\n", $end - $start) %>

	</div>


