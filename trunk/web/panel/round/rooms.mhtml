<%args>
	$account
	$round_id
	$return => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $round_type = $round->type;

	my $num_judges = $round->judges;

	$m->comp("/funclib/clean_empty_rounds.mas", round => $round);

	my $text = $account->first." ".$account->last." (".$account->email.") has repaneled the rooms in ".$round->realname." of ".$round->event->abbr;

	Tab::TournChange->create({ 
		type    => 'tabbing',
		event   => $round->event->id,
		tourn   => $round->event->tourn->id,
		account => $account->id,
		text    => $text
	});

	my @panels = $m->comp('/funclib/round_panels_ada.mas', round => $round);

	my @rooms = $m->comp("/funclib/clean_rooms.mas", round => $round);

	my %previous_rooms = ();

	unless ($round->wipe_rooms) { 
		my $last_round = Tab::Round->search( event => $round->event, name => ($round->name - 1))->first;
		%previous_rooms = $m->comp("/funclib/round_entry_rooms.mas", round => $last_round) if $last_round;
	}

	my %judge_already = ();
	my %judge_reserved = ();

	my %room_count = ();
	my %room_avail = map {$_->id => $_} @rooms;

	my @undone;

	my $flights = $round->flighted;
	$flights = 1 unless $flights;

	my @first_set = @rooms;

	my %judge_count;
	my %panel_judges;
	my %panel_entries;
	my %panel_judge_count;
	my %panel_ada;
	my %panel_preferred;
	my %panel_reserved;

	foreach my $panel (@panels) { 

		next if $panel->room > 0;
		next if $panel->bye > 0;

		@{$panel_judges{$panel->id}} = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@{$panel_entries{$panel->id}} = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		unless ($round_type eq "elim" || $round_type eq "final") { 
			foreach my $judge (@{$panel_judges{$panel->id}}){ 
				$panel_reserved{$panel->id}++ if $judge->setting("room_reserved");
			}
		}
	}

	@panels = sort {$panel_reserved{$b->id} <=> $panel_reserved{$a->id}} @panels;

	foreach my $panel (@panels) { 

		next if $panel->room > 0;
		next if $panel->bye > 0;

		foreach my $judge (@{$panel_judges{$panel->id}}){ 
			$judge_count{$judge->id}++;
			$panel_ada{$panel->id}++ if $judge->ada;
			$judge_reserved{$judge->id} = $judge->setting("room_reserved") unless $round_type eq "elim" || $round_type eq "final";
		}


		foreach my $entry (@{$panel_entries{$panel->id}}){ 

			if ($entry->ada) { 
				$panel_ada{$panel->id}++;
				undef $panel_preferred{$panel->id} if $panel_preferred{$panel->id};
				push (@{$panel_preferred{$panel->id}}, $previous_rooms{$entry->id}) 
					if $previous_rooms{$entry->id} && $room_avail{$previous_rooms{$entry->id}};
			}

			next if $panel_ada{$panel->id};
			push @{$panel_preferred{$panel->id}}, $previous_rooms{$entry->id} 
				if $previous_rooms{$entry->id} && $room_avail{$previous_rooms{$entry->id}};

		}

	}

	foreach my $panel (@panels) { 
		foreach my $judge (@{$panel_judges{$panel->id}}){ 
			$panel_judge_count{$panel->id} += $judge_count{$judge->id};
		}
	}

	if ($round->event->setting("bracket_rooms") > 0) { 
		@panels = sort {$b->bracket <=> $a->bracket} @panels;
		@panels = sort {$a->bracket <=> $b->bracket} @panels if $round->type eq "elim";
		@rooms = sort {$a->quality <=> $b->quality} @rooms;
	} else { 
		@panels = sort {$a->letter <=> $b->letter} @panels;
	}

	@panels = sort {$panel_judge_count{$b->id} <=> $panel_judge_count{$a->id}} @panels;
	@panels = sort {$panel_ada{$b->id} <=> $panel_ada{$a->id}} @panels;
	@panels = sort {$a->flight <=> $b->flight} @panels;
	@panels = sort {$panel_reserved{$b->id} <=> $panel_reserved{$a->id}} @panels;

	my %used;

	foreach my $panel (@panels) { 

		next if $panel->bye > 0;
		next if $panel->room > 0;

		my $room;
		my @judges = @{$panel_judges{$panel->id}} if $panel_judges{$panel->id};

		foreach my $judge (@judges) { 


			if ($judge_reserved{$judge->id}) { 

				$room = $room_avail{$judge_reserved{$judge->id}}; 

			} else { 

				my $already = $judge_already{$judge->id};

				if ($already) { 

					if ($used{$already}) { 

						my $count = $used{$already};

						if ($count < $flights) { 
							$count++;
							unless ($num_judges > 1) {
								$panel->flight($count);
								$panel->update;
							}
							$room = $already;
						}

					} else {

						unless ($num_judges > 1) {
							$panel->flight(1);
							$panel->update;
						}
						$room = $already;
					}
				}
			}
		}

		my @ada_rooms;

		foreach my $room (@rooms) { 
			next if $used{$room->id};
			push @ada_rooms, $room if $room->ada;
		}

		if ($panel_ada{$panel}) { 

			my $pref = $panel_preferred{$panel}[0];

			if ($panel_preferred{$panel}) { 

				foreach my $pref (@{$panel_preferred{$panel->id}}) { 
					next if $room;
					next unless $room_avail{$pref};
					next unless $room_avail{$pref}->ada;
					next if $used{$pref} > 0;
					$room = $room_avail{$pref};
				}

			}

			$room = shift @ada_rooms if @ada_rooms && not defined $room;

		} elsif ($panel_preferred{$panel}) { 

			foreach my $pref (@{$panel_preferred{$panel->id}}) { 
				next if $room;
				next if $used{$pref};
				next unless $room_avail{$pref};
				$room = $room_avail{$pref};
			}
		}

		unless ($room) { 
			while (@first_set) { 
				$room = shift @first_set;
				next if $used{$room->id};
				last if $room;
			}
			undef $room if $room && $used{$room->id};
		}

		$used{$room}++ if $room;
		next if $room && $room_count{$room->id} >= $flights;

		if ($room && $room->id) { 

			$room_count{$room->id}++;
			$panel->room($room->id) if $room;
			$panel->flight($room_count{$room->id}) unless ($num_judges > 1);
			$panel->update;
			foreach my $judge (@judges) { 
				$judge_already{$judge->id} = $room;
			}

		} else { 
			push @undone, $panel;
		}

	}

	my $oh_crap_ran_out;

	PANEL:
	foreach my $panel (@undone) { 

		$oh_crap_ran_out++;

		my @ada_rooms;

		foreach my $room (@rooms) { 
			push @ada_rooms, $room if $room->ada;
		}

		if ($panel_ada{$panel}) { 
			foreach my $room (@ada_rooms) { 
				next if $room_count{$room->id} >= $flights;
				$panel->room($room->id);
				$room_count{$room->id}++;
				$panel->flight($room_count{$room->id}) unless $num_judges > 1;
				$panel->update;
				$oh_crap_ran_out--;
				next PANEL;
			}
		}

		foreach my $room (@rooms) { 
			next if $room_count{$room->id} >= $flights;
			$panel->room($room->id);
			$room_count{$room->id}++;
			$panel->flight($room_count{$room->id}) unless $num_judges > 1;
			$panel->update;
			$oh_crap_ran_out--;
			next PANEL;
		}

	}

	my $msg = "Rooms have been assigned";
	my $full_err = "Insufficent rooms were available.  Some rounds do not have rooms!" if $oh_crap_ran_out > 0;
	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg&fullmsg=$full_err");

</%init>
