<%args>
	$round_id
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $flights = $round->flighted; 

	my $wudc++ if $event->type eq "wudc";

	my $rounds_per = $event->judge_group->setting("rounds_per");

	my $pool_limit = "and pool_judge.judge = judge.id and pool_judge.pool = round.pool" if $round->pool > 0;
	my $pool_table = "pool_judge," if $pool_limit;

	Tab::Judge->set_sql( available_judges => "
		select distinct judge.id, judge.first, judge.last, judge.tab_rating, judge.obligation, judge.hired
		from judge, event, round, $pool_table timeslot
		where judge.judge_group = event.judge_group
		and judge.active = 1
		and event.id = round.event
		and round.timeslot = timeslot.id
		".$pool_limit."
		and round.id = ? 

		and not exists (
			select strike.id from strike
			where strike.type = \"event\"
			and strike.event = event.id
			and strike.judge = judge.id
		)

		and not exists ( 
			select strike.id from strike
			where strike.type = \"time\"
			and strike.judge = judge.id
			and strike.start < timeslot.end
			and strike.end > timeslot.start
		)

		and not exists (
			select panel.id
			from panel, ballot, round otherround, timeslot othertimeslot
			where ballot.judge = judge.id
			and ballot.panel = panel.id
			and panel.round = otherround.id
			and otherround.id != round.id
			and otherround.timeslot = othertimeslot.id
			and othertimeslot.start < timeslot.end
			and othertimeslot.end > timeslot.start
		)

		order by judge.tab_rating, judge.last
	");

	my @all_judges = Tab::Judge->search_available_judges($round->id);
	my %judge_by_id = map {$_->id => $_} @all_judges;

	my @round_judges = $m->comp("/funclib/round_judges.mas", round => $round);

	my $use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);

	foreach my $judge (@round_judges) { 
		next if $judge_by_id{$judge->id};
		$judge_by_id{$judge->id} = $judge;
	}


	my @panels = Tab::Panel->search_like( round => $round->id, {order_by => 'bracket'});

	my %entry_by_id = map {$_->id => $_} $round->event->entries;

	my $dbh = Tab::DBI->db_Main();

	my $this_round_sth = $dbh->prepare("
		select distinct panel.id, ballot.chair, ballot.judge, ballot.entry, ballot.side, ballot.speakerorder, panel.flight
		from panel, ballot
		where panel.round = ".$round->id."
		and panel.id = ballot.panel
		group by ballot.id
	");

	my %panel_chair;
	my %panel_judge;
	my %panel_entry;
	my %entry_side;
	my %entry_order;
	my %used_judge;

	$this_round_sth->execute;

	while (my ($panel, $chair, $judge, $entry, $side, $order, $flight)  = $this_round_sth->fetchrow_array() ) {
		push @{$panel_chair{$panel}}, $judge if $chair;
		push @{$panel_judge{$panel}}, $judge unless $chair;
		$used_judge{$judge."-".$flight}++;
		push @{$panel_entry{$panel}}, $entry;
		$entry_side{$entry} = $side;
		$entry_order{$entry} = $order;
		$flights = $flight if $flight > $flights;
	}

	my %judge_constraints = $m->comp("/funclib/judge_cannotsee.mas", group => $round->event->judge_group, round => $round);

	my %judge_ratings = $m->comp("/funclib/event_judgeprefs.mas", event => $round->event);

</%init>

	<script>

	 	$(function() {

			$( ".droppable" ).droppable({
				hoverClass  	 : "ltyellow",
				accept			 : ":not(.ui-sortable-helper)",
				disableSelection : "true",
				drop			 : function( event, ui) {
					$.ui.ddmanager.current.cancelHelperRemoval = true;
					$( this ).find( ".placeholder" ).remove();
					var draggableId = ui.draggable.attr("id");
					var droppableId = this.id;
					$.post("manual_judge_save.mhtml",{ round_id: <% $round_id %>, judge_id: draggableId, panel_id: droppableId });
				}
			}).sortable({
				items: ":not(.placeholder)",
				sort: function() {
					// gets added unintentionally by droppable interacting with sortable
					// using connectWithSortable fixes this, but doesn't allow you to customize active/hoverClass options
					$( this ).removeClass( "ui-state-default" );
				}
			});

%			foreach my $judge (@all_judges) { 
%				my $judge_id = $judge->id;
%				foreach my $flight (1 .. $flights) { 
					$( "#<% $judge."_".$flight %>" ).draggable({
						drag: function( event, ui ) { 
							$(".<% $judge %>").show();
%							foreach my $key (keys %judge_constraints) { 
%								my ($judgeid, $entry) = split(/\-/, $key);
%								next unless $judgeid == $judge_id;
%								next unless $entry;
								$('.table').find('.<% $entry %>').addClass('redrow');
%							}
						},
						stop: function( event, ui ) { 
							$('.<% $judge %>').hide();
%							foreach my $key (keys %judge_constraints) { 
%								my ($judgeid, $entry) = split(/\-/, $key);
%								next unless $entry;
%								next unless $judgeid == $judge_id;
								$('.table').find('.<% $entry %>').removeClass('redrow');
%							}
						},
                        start: function(event, ui) {
                            this.style.display="none";
                        },
						containment      : '#wrapper',
						disableSelection : "true",
						snap             : "true",
						snapMode         : "inner",
						revert           : "invalid",
						helper           : "clone"
					});
%				}
%			}

		});	

	</script>

	<div class="main">

		<h2><% $round->realname %> Manual Judges</h2>

		<& "/funclib/tablesorter.mas", table => "judgeme" &>

		<table id="judgeme">

			<thead>

			<tr class="yellowrow">
				<th class="smaller">
					B
				</th>
%				if ($flights > 1) { 
					<th class="smaller">
						F
					</th>
%				}
				<th class="smallish">
					Entries
				</th>
				<th class="smallish" style="width: 130px;">
					Chair Judge
				</th>
				<th class="smallish">
					Other Judges
				</th>
				<th class="smallish">
					Prefs
				</th>
			</tr>
			</thead>
			<tbody>

%			my $switch;

%			foreach my $panel (@panels) { 

%				my $id = $panel->id;
%				my $flight = $panel->flight;

%				my %used;

%				my @entries = sort {$entry_side{$a} <=> $entry_side{$b}} @{$panel_entry{$id}} if $panel_entry{$panel->id};
%				@entries = sort {$entry_order{$a} <=> $entry_order{$b}} @entries;
%				my %seen = ();
%				@entries = grep { ! $seen{$_} ++ } @entries;	

%				my @judges = @{$panel_judge{$id}} if $panel_judge{$id};
%				my @chairs = @{$panel_chair{$id}} if $panel_chair{$id};
		
				<tr class="
%					foreach my $entry (@entries) { $m->print($entry." "); } 
				">

					<td class="centeralign smallish">
						<span class="hidden"><% $panel->bye ? "99999999" : "" %></span>
						<% $panel->bye ? "BYE" : $panel->bracket %>
					</td>

%					if ($flights > 1) { 
						<td class="centeralign smallish">
							<% $flight %> 
						</td>
%					}

					<td class="limit3">
%						foreach my $entry (@entries) { 
%							next if $used{$entry}++;
							<div class="limit smaller nowrap padno" class="<% $entry %> <% $entry."_".$entry_side{$entry} %>" >
								<% $entry_side{$entry} == 1 ? "A" : "" %>
								<% $entry_side{$entry} == 2 ? "N" : "" %>
								<% $entry_order{$entry} == 1 ? "1G" : "" %>
								<% $entry_order{$entry} == 2 ? "1O" : "" %>
								<% $entry_order{$entry} == 3 ? "2G" : "" %>
								<% $entry_order{$entry} == 4 ? "2O" : "" %>
								<% $entry_by_id{$entry} ? $entry_by_id{$entry}->code : "None" %>
							</div>
%						}
					</td>

					<td class="nospace">
						<div class="ui-droppable droppable optionblock" id="chair_<% $id %>">
%							foreach my $chair (@chairs) { 
%								my $judge = $judge_by_id{$chair};
%								next unless $chair;
%								next if $used{$chair}++;
								<span class="draggable nowrap" id="<% $chair %>_<% $flight %>">
									<% $judge && $judge->tab_rating ? $judge->tab_rating  : "" %>
									<% $judge ? $judge->last.", ".$judge->first : "" %>
								</span>
%							}
						</div>
					</td>

					<td class="nospace">
						<div class="ui-droppable droppable optionblock" id="judge_<% $id %>">
%							foreach my $judge_id (@judges) { 
%								my $judge = $judge_by_id{$judge_id};
%								next unless $judge;
%								next if $used{$judge}++;
								<span class="draggable nowrap" id="<% $judge %>_<% $flight %>">
%									if ($rounds_per) {
										<span class="fifth">
											<% ${$use_ref}{$judge}{"judged_already"} %>/<% $judge->obligation + $judge->hired %>
										</span>
%									}
									<% $flights > 1 ? $flight : "" %>
									<% $judge && $judge->tab_rating ? $judge->tab_rating  : "" %>
									<% $judge ? $judge->last.", ".$judge->first : "" %>
								</span>
%							}
						</div>
					</td>

					<td>
%						foreach my $entry (@entries) { 
%							foreach my $rating (@{$judge_ratings{$entry}}) { 
%								my ($judge, $rate)  = split (/\-/, $rating);
								<span class="<% $judge %> smallish inline padless marno" style="display: none;"> <% $rate %> </span>
%							}
%						}
					</td>

				</tr>
%			}
			</tbody>

		</table>

	</div>


	<div class="menu">

		<div class="sidenote">

			<h4>Round</h4>

			<a class="blue block" href="/panel/schemat/show.mhtml?round_id=<% $round_id %>">
				Return to <% $round->realname %>
			</a>

%			my $warn = "Danger! This will ERASE existing judge assignments and re do the entire round.  Proceed?";

			<h4>Unused Judges</h4>

			<div class="bordergrey full droppable" id="out">

%				foreach my $judge (@all_judges) { 
%					foreach my $flight (1 .. $flights) { 
%						next if $used_judge{$judge->id."-".$flight};
						<span class="draggable nowrap" id="<% $judge->id."_".$flight %>">
%							if ($rounds_per) {
								<span class="fifth">
									<% ${$use_ref}{$judge}{"judged_already"} %>/<% $judge->obligation + $judge->hired %>
								</span>
%							}
							<% $flights > 1 ? $flight : "" %>
							<% $judge->tab_rating ? $judge->tab_rating  : "" %>
							<% $judge->last.", ".$judge->first %>
						</span>
%					}
%				}
		
			</div>

			<br />

% 			if ($event->type eq "speech" || $round->type eq "congress") { 
				<a class="yellow martop block"  <& "/funclib/confirm.mas", warn => $warn &>  href="/panel/round/judges.mhtml?round_id=<% $round->id %>">
%			} else { 
				<a class="yellow martop block"  <& "/funclib/confirm.mas", warn => $warn &>  href="/panel/round/debate_judge_assign.mhtml?round_id=<% $round->id %>">
%           }   
				Redo Auto-paired judges
        	</a>

		</div>


	</div>

