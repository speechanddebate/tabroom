<%args>
	$account
	$round_id
</%args>
<%init>

	use List::Util 'shuffle';
	my $round = Tab::Round->retrieve($round_id);

    my $text = $account->first." ".$account->last." (".$account->email.") 
		has re-assigned the judges out of round ".$round->realname." of ".$round->event->abbr;

    Tab::TournChange->create({ 
        type    => 'tabbing',
        event   => $round->event->id,
        tourn   => $round->event->tourn->id,
        account => $account->id,
        text    => $text
    }); 

    $m->comp("/funclib/round_clear_judges.mas", round => $round, nobye => 1);

    my $round_event = $round->event;
	my $event_type = $round_event->type;
    my $tourn = $round_event->tourn;
	my $group = $round_event->judge_group;

	my $this_round = $round->id;
	my $round_type = $round->type;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $round_start = $round->timeslot->start->set_time_zone($tz);
	my $round_end = $round->timeslot->end->set_time_zone($tz);

	my $jpool = $round->pool;
	my $flights = $round->flighted;
	$flights = 1 unless $flights;

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	# Lots of settings
	my $rounds_per = $group->setting("rounds_per");
	my $no_back_to_back = $group->setting("no_back_to_back");
	my $judge_randomize = $group->setting("judge_randomize");
	my $judge_event_twice = $group->setting("judge_event_twice");
	my $allow_school_panels = $group->setting("allow_school_panels");

	my $no_first_years = $round_event->setting("no_first_years");
	my $allow_judge_own = $round_event->setting("allow_judge_own");
	my $region_constraints = $round_event->setting("region_constraints");
	my $region_avoid++ if $round_event->setting("region_avoid");
	my $allow_repeat_elims = $round_event->setting("allow_repeat_elims");
	my $allow_repeat_judging = $round_event->setting("allow_repeat_judging");
	my $allow_repeat_prelim_side = $round_event->setting("allow_repeat_prelim_side");

	my $prefs = $group->setting("prefs");
	$prefs = "none" if $round_event->setting("no_prefs");

	if ($prefs eq "ndt") { 
		if ($round->type eq "elim") { 
			$prefs = "caps";
		} elsif ($round->type eq "final") { 
			$prefs = "caps";
		} else { 
			$prefs = "ordinals";
		}
	}

	my $max_pref = $round_event->setting("max_pref");
	my $tab_ratings = $group->setting("tab_ratings");

	my $dbh = Tab::DBI->db_Main();

	my $event_ballots_sth = $dbh->prepare("
		select distinct ballot.id, ballot.entry, ballot.judge, round.id, round.type, entry.school, ballot.side, panel.bracket, panel.id, entry.code, panel.bye
		from ballot, panel, round, entry
		where round.event = ".$round_event->id."
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.bye = 0
		and ballot.noshow = 0
		and panel.bye = 0 
		and ballot.entry = entry.id
	");

	$event_ballots_sth->execute();

	my @entries;

	my %entry_side;
	my %entry_code;
	my %entry_school;
	my %school_entries;

	my %judge_ballots;
	my %entry_ballots;

	my @panels;
	my %panel_entries;
	my %panel_bracket;
	my %panel_bye;

	my %ballot_type;
	my %ballot_side;
	my %ballot_entry;
	my %ballot_judge;

	my %judge_rounds;

	while (my ($ballot, $entry, $judge, $round, $type, $entry_school, $side, $bracket, $panel, $code, $bye) = $event_ballots_sth->fetchrow_array() ) {

		if ($round == $this_round) { 

			push @entries, $entry;

			push @{$school_entries{$entry_school}}, $entry;
			$entry_school{$entry} = $entry_school;

			$entry_side{$entry} = $side;
			$entry_code{$entry} = $code;

			push @panels, $panel;
			$panel_bracket{$panel} = $bracket;
			$panel_bye{$panel} = $bye;
			push @{$panel_entries{$panel}}, $entry;

		} else { 

			push @{$judge_rounds{$judge}}, $round if $round;
			push @{$judge_ballots{$judge}}, $ballot;
			push @{$entry_ballots{$entry}}, $ballot;

			$ballot_type{$ballot} = $type;
			$ballot_side{$ballot} = $side;
			$ballot_entry{$ballot} = $entry;
			$ballot_judge{$ballot} = $judge;

		}
	}

	my $judge_sth;

	if ($jpool > 0) { 
		
		$judge_sth = $dbh->prepare('
			select distinct judge.id, judge.last, judge.school, judge.tab_rating, concat(judge.obligation+judge.hired) as rounds, judge.diverse
			from judge, jpool_judge
			where judge.active = 1
			and judge.id = jpool_judge.judge
			and jpool_judge.pool = '.$jpool->id."
			group by judge.id
		");

	} else { 

		$judge_sth = $dbh->prepare('
			select distinct judge.id, judge.last, judge.school, judge.tab_rating, concat(judge.obligation+judge.hired) as rounds, judge.diverse
			from judge, judge_group, event, round
			where judge.active = 1
			and judge.judge_group = event.judge_group 
			and event.id = round.event
			and round.id = '.$round->id." 
			group by judge.id
		");

	}

	$judge_sth->execute();

	my @judges;
	our %judge_name;
	my %judge_score;
	my %judge_school;
	my %judge_rating;
	my %judge_diverse;

	my %school_judges;
	my %judge_clashes;
	my %judge_obligation;

	while (my ($id, $last, $school, $rating, $rounds, $diverse) = $judge_sth->fetchrow_array() ) {

		next unless $id;

		push @judges, $id;
		$judge_name{$id} = $last;
		$judge_school{$id} = $school;
		$judge_rating{$id} = $rating;
		$judge_diverse{$id} = $diverse;
		$judge_obligation{$id} = $rounds;

		push @{$school_judges{$school}}, $id;

		if ($school_entries{$school} && not defined $allow_judge_own) { 

			foreach my $entry (@{$school_entries{$school}}) { 
				push @{$judge_clashes{$id}}, $entry;
			}
		}
	}

	unless (@judges) { 
		my $err = "No judges were found.  Did you put judges into the pool ".$jpool->name."?" if $jpool;
		$err = "No judges were available." unless $jpool;
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&err=$err");
	}

    my @schools = $m->comp("/funclib/event_schools.mas", event => $round->event);
	my %school_region = map {$_->id => $_->region} @schools if $region_constraints || $region_avoid;

	my $strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge, strike.type, strike.event, strike.entry, strike.school, strike.region, strike.start, strike.end
		from strike
		where strike.tourn = ".$tourn->id."
	");

	$strikes_sth->execute();

	my %judge_out;

	while (my ($id, $judge, $type, $event, $entry, $school, $region, $start, $end) = $strikes_sth->fetchrow_array() ) {

		if ($type eq "conflict" || $type eq "entry") { 
			if ($school) {	 
				push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};
			} else {  
				push @{$judge_clashes{$judge}}, $entry;
			}
		} 

		if ($type eq "elim" || $type eq "event") { 
			next if ($round_type eq "elim" || $round_type eq "final") && $type eq "elim";
			next unless $event == $round_event->id;
			$judge_out{$judge}++;
		}

		if ($type eq "hybrid") { 
			foreach my $school_judge (@{$school_judges{$school}}) { 
				push @{$judge_clashes{$school_judge}}, $entry;
			}
		}

		if ($type eq "region") { 
			foreach my $region_school (@schools) { 
				next unless $school_region{$region_school} == $region;
				push @{$judge_clashes{$judge}}, @{$school_entries{$region_school}};
			}
		}

		if ($type eq "school") { 
			push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};
		}

		if ($type eq "time") { 
			my $start_dt = DateTime::Format::MySQL->parse_datetime($start);
			my $end_dt = DateTime::Format::MySQL->parse_datetime($end);

			$start_dt->set_time_zone("UTC");
			$end_dt->set_time_zone("UTC");

			$start_dt->set_time_zone($tz);
			$end_dt->set_time_zone($tz);

			$judge_out{$judge}++  if ($round_start <= $end_dt && $round_end >= $start_dt);
		}

	}

	my $busy_sth = $dbh->prepare("
		select distinct judge.id
		from ballot, panel, round, timeslot, timeslot mytime, round myround, judge
		where myround.id = ".$round->id."
		and myround.timeslot = mytime.id
		and mytime.start < timeslot.end
		and mytime.end > timeslot.start
		and timeslot.id = round.timeslot
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
		and judge.judge_group = ".$round_event->judge_group->id."
	");

	$busy_sth->execute();

	while (my ($judge) = $busy_sth->fetchrow_array() ) {
		$judge_out{$judge}++;
	}

	my %tier_value;
	my %tier_strike;

	my $tiers;

	if ($prefs && $prefs ne "ordinals") { 
		$tiers++;
		foreach my $tier (sort {$a->name cmp $b->name} $group->rating_tiers(type => "mpj")) {
			$tier_value{$tier->id} = $tier->name;
			$tier_strike{$tier->id}++ if $tier->strike || $tier->conflict;
		}
	}

	my $ratings_sth = $dbh->prepare("
		select distinct rating.id, rating.judge, rating.entry, rating.rating_tier, rating.percentile
		from rating, ballot, panel
		where panel.round = ".$round->id."
		and ballot.panel = panel.id
		and panel.bye = 0
		and ballot.bye = 0
		and ballot.entry = rating.entry
		group by rating.id
	");

	$ratings_sth->execute();

	my %mjp;

	while (my ($id, $judge, $entry, $tier, $percentile) = $ratings_sth->fetchrow_array() ) {
		next unless ($tier || $percentile);
		$mjp{$judge."-".$entry} = $tier_value{$tier} if $tier > 0;
		push @{$judge_clashes{$judge}}, $entry if $tier && $tier_strike{$tier};

		next if $prefs eq "caps";
		$mjp{$judge."-".$entry} = $percentile if $percentile > 0;
	}

	my %panel_seen = (); 

	@panels = grep { ! $panel_seen{$_} ++ } @panels;
	@panels = sort {$panel_bracket{$b} <=> $panel_bracket{$a}} @panels;

	my %judge_avoid;
	my %judge_entry_clash;

    my $round_burn_avoid = $group->setting("round_burn_avoid");
    my $mutuality = $group->setting("mutuality");
    my $preference = $group->setting("preference");
    my $default_mjp = $group->setting("default_mjp");
    my $diversity = $group->setting("diverse_judge_weight");
    my $suckage = $group->setting("sucktastic_judge_weight");
    my $prefer_hireds = $group->setting("mjp_prefer_hireds");

    $diversity = 1 if not defined $diversity;
    $suckage = 3 if not defined $suckage;
    $mutuality = 40 if not defined $mutuality;
    $preference = 15 if not defined $preference;
    $default_mjp = 1 if not defined $default_mjp;
    $round_burn_avoid =  5 if not defined $round_burn_avoid;
    $prefer_hireds = 10 if not defined $prefer_hireds;

    $mutuality = 0 if $mutuality == -1; 
    $diversity = 0 if $diversity == -1; 
    $suckage = 0 if $suckage == -1; 
    $preference = 0 if $preference == -1; 
    $default_mjp = 0 if $default_mjp == -1; 
    $round_burn_avoid = 0 if $round_burn_avoid == -1; 
    $prefer_hireds = 0 if $prefer_hireds == -1; 

	my %use_priority = ();

	foreach my $judge (@judges) {

		my %seen = (); 
		@{$judge_rounds{$judge}} = grep { ! $seen{$_}++ } @{$judge_rounds{$judge}};

		my $num_rounds = scalar @{$judge_rounds{$judge}};

		unless ($round->type eq "elim" || $round->type eq "final") { 
			$judge_out{$judge}++ if $num_rounds >= $judge_obligation{$judge} && $rounds_per;
		}

		next if $judge_out{$judge};

		$judge_score{$judge} += scalar @{$judge_clashes{$judge}} if $judge_clashes{$judge};
		$judge_score{$judge} += $diversity if $judge_diverse{$judge};

		if ($judge_ballots{$judge}) { 

			foreach my $ballot ( sort { $entry_code{$ballot_entry{$a}} cmp $entry_code{$ballot_entry{$b}}} @{$judge_ballots{$judge}}) { 
				my $entry = $ballot_entry{$ballot};
				next if $allow_repeat_elims && ($round_type eq "elim" || $round_type eq "final" 
					|| $ballot_type{$ballot} eq "elim" || $ballot_type{$ballot} eq "final") ;
				push @{$judge_avoid{$judge}}, $entry;
				next if $allow_repeat_judging;
				next if $allow_repeat_prelim_side && $ballot_side{$ballot} != $entry_side{$entry};
				push @{$judge_clashes{$judge}}, $entry;
			}
		}

		foreach my $clash (@{$judge_clashes{$judge}}) { 
			$judge_entry_clash{$judge."-".$clash}++;
		} 

		$use_priority{$judge} -= $prefer_hireds if $judge_school{$judge} < 1;
		$use_priority{$judge} -= $judge_diverse{$judge} * $diversity if $diversity;
	}

	my $switch;

	my %judge_panel_score;

	@panels = shuffle @panels;
	
	PANEL:
	foreach my $panel (@panels) { 

		next if $panel_bye{$panel};

		JUDGE:
		foreach my $judge (@judges) { 

			my $score = 0;
			next JUDGE if $judge_out{$judge};

			my $diff;
			my $mjp_first;

			foreach my $entry (@{$panel_entries{$panel}}) { 

				my $mjp_rating = $mjp{$judge."-".$entry};
				$mjp_rating = $default_mjp unless $mjp_rating;

                $score += 100000000000 if $judge_entry_clash{$judge."-".$entry};
                $score += 50000 if $judge_avoid{$entry};
                $score += 500000 if $judge_avoid{$entry} && $prefs eq "ordinals";
				$score += 5000000000 if $max_pref && $mjp_rating > $max_pref;

				if ($mjp_first) { 
					$diff = abs($mjp_first - $mjp_rating) if $mjp_first && $mjp_rating;
				} else { 
					$mjp_first = $mjp_rating unless $mjp_first;
				}

                if ($region_avoid) {
                    $score += 100 if $school_region{$entry_school{$entry}} == $school_region{$judge_school{$judge}};
                }

                if ($region_constraints) {
                    $score += 10000000 if $school_region{$entry_school{$entry}} == $school_region{$judge_school{$judge}};
                }

				if ($prefs && $prefs ne "none") {
					$score += $mjp_rating * $preference;
				}

				$judge_rating{$judge."-".$panel} .= " - " if $judge_rating{$judge."-".$panel};
				$judge_rating{$judge."-".$panel} .= $mjp_rating if $prefs && $prefs ne "none";
				
			}
			
            $score += $use_priority{$judge};
			$score += $diff * $mutuality;

			if ($tab_ratings) { 
				$score += $judge_rating{$judge} * $preference;
			} 

			$judge_panel_score{$judge."-".$panel} = $score;

		}
	}

	my $panel_done;
	my %panel_flight;
	my %panel_judges;
	my %judge_panels;

	my $current_total;

	foreach my $tick (1 .. 10) { 

		my %test_judges;
		my %test_panels;
		my %test_flight;

		my %judge_used;
		my $attempt_total;
		my $order_count;

		my $current_flight = 1;

		@panels = shuffle @panels;

		foreach my $panel (@panels) {
			$test_flight{$panel} = $current_flight;
			$current_flight++;
			$current_flight = 1 if $current_flight > $flights;
		}
		
		foreach my $order (1 .. $num_judges) { 

			$order_count++;
			@panels = reverse @panels unless $order % 2;

			PANEL:
			foreach my $panel (@panels) { 

				next if $panel_bye{$panel};

				next if $round_type ne "final" && $round_type ne "elim";

				@judges = sort {$judge_score{$b} <=> $judge_score{$a}} @judges;
				@judges = sort {$judge_panel_score{$a."-".$panel} <=> $judge_panel_score{$b."-".$panel}} @judges;

				JUDGE:
				foreach my $judge (@judges) { 

					next JUDGE if $judge_out{$judge};
					next JUDGE if $judge_used{$judge."-".$test_flight{$panel}};

					foreach my $entry (@{$panel_entries{$panel}}) { 
						next JUDGE if $judge_entry_clash{$judge."-".$entry};
					}

					push @{$test_judges{$panel}}, $judge;
					push @{$test_panels{$judge}}, $panel;

					$judge_used{$judge."-".$test_flight{$panel}}++;
					$attempt_total += $judge_panel_score{$judge."-".$panel};
					next PANEL;

				}
			}
		}

		foreach my $tock (1 .. 7) { 

			next unless $prefs;
			next if $prefs eq "none";

			PANEL:
			foreach my $first (@panels) { 

				next if $panel_bye{$first};

				my $baseline_score = score_panel( \@{$panel_entries{$first}}, \@{$test_judges{$first}}, \%mjp );

				my %entry_id;
				my %entry_score;

				my $panel_diff;

				foreach my $first_judge (@{$test_judges{$first}}) { 

					my $current_diff;
					my $swap_with;
					my $swap_panel;
					my %done;
				
					JUDGE:
					foreach my $second_judge (@judges) { 

						next if $done{$second_judge}++;
						next if $second_judge == $first_judge;
						next if $judge_out{$second_judge};

						unless ($allow_school_panels) { 
							next JUDGE if $judge_school{$second_judge} == $judge_school{$first_judge};
							next JUDGE if $judge_region{$second_judge} == $judge_region{$first_judge} && ($region_avoid || $region_constrain);
						}
					
						foreach my $tp (@{$test_panels{$second_judge}}) { 
							next JUDGE if $test_flight{$tp} == $test_flight{$first};
						}

						foreach my $entry (@{$panel_entries{$first}}) {   
							foreach my $clash (@{$judge_clashes{$second_judge}}) { 
								next JUDGE if $clash == $entry;
							}
						}

						if ($test_panels{$second_judge} && scalar @{$test_panels{$second_judge}} >= $flights) { 

							foreach my $second (@{$test_panels{$second_judge}}) { 
								next JUDGE if $second == $first;
							}

							foreach my $second (@{$test_panels{$second_judge}}) { 

								next if $test_flight{$second} && $test_flight{$second} != $test_flight{$first};

								foreach my $entry (@{$panel_entries{$second}}) {   
									foreach my $clash (@{$judge_clashes{$first_judge}}) { 
										next JUDGE if $clash == $entry;
									}
								}

								my $baseline_second_score = score_panel(\@{$panel_entries{$second}}, \@{$test_judges{$second}}, \%mjp );
								my @new_judges_first;		# create test panels post-swap to see if they're any better
								my @new_judges_second;

								foreach my $nj (@{$test_judges{$first}}) { 
									next if $nj == $first_judge;
									push @new_judges_first, $nj;
								}

								push @new_judges_first, $second_judge;

								foreach my $nj (@{$test_judges{$second}}) { 
									next if $nj == $second_judge;
									push @new_judges_second, $nj;
								}

								push @new_judges_second, $first_judge;

								my $new_first_score = score_panel(\@{$panel_entries{$first}}, \@new_judges_first, \%mjp );
								my $new_second_score = score_panel(\@{$panel_entries{$second}}, \@new_judges_second, \%mjp );

								if (($baseline_score + $baseline_second_score - $new_first_score - $new_second_score) > $current_diff) { 

									$current_diff = $baseline_score + $baseline_second_score - $new_first_score - $new_second_score;
									$swap_with = $second_judge;
									$swap_panel = $second;
								}

							}

						} else { 

							if ($test_panels{$second_judge}) {
								foreach my $second (@{$test_panels{$second_judge}}) { 
									next JUDGE if $second == $first;
								}
							}

							my @new_judges_first;			#create test panels post-swap to see if they're any better

							foreach my $nj (@{$test_judges{$first}}) { 
								next if $nj == $first_judge;
								push @new_judges_first, $nj;
							}

							push @new_judges_first, $second_judge;

							my $new_first_score = score_panel(\@{$panel_entries{$first}}, \@new_judges_first, \%mjp );

							if ( ($baseline_score - $new_first_score) > $current_diff ) { 
								$current_diff = $baseline_score - $new_first_score;
								$swap_with = $second_judge;
								undef $swap_panel;
							}
						}
					}

					if ($swap_with) { 

						$attempt_total -= $current_diff;

						my @new_first;
						foreach my $judge (@{$test_judges{$first}}) { 
							push @new_first, $judge unless $judge == $first_judge;
						}
						push @new_first, $swap_with;
						@{$test_judges{$first}} = @new_first;

						my @new_first_panels;

						foreach my $panel (@{$test_panels{$first_judge}}) { 
							next if $panel == $first;
							push @new_first_panels, $panel;
						}

						if ($swap_panel) { 
						
							push @new_first_panels, $swap_panel;

							my @new_second;

							foreach my $judge (@{$test_judges{$swap_panel}}) { 
								push @new_second, $judge unless $judge == $swap_with;
							}
							push @new_second, $first_judge;
							@{$test_judges{$swap_panel}} = @new_second;

						}

						@{$test_panels{$first_judge}} = @new_first_panels;

						my @new_second_panels;

						foreach my $panel (@{$test_panels{$swap_with}}) { 
							next if $panel == $swap_panel;
							push @new_second_panels, $panel;
						}
						push @new_second_panels, $first;
						@{$test_panels{$swap_with}} = @new_second_panels;

					}
				}
			}
		}

		if ($current_total > $attempt_total || not defined $current_total ) { 
			$current_total = $attempt_total;
			%panel_judges = %test_judges;
			%panel_flight = %test_flight;
			%judge_panels = %test_panels;
		}

	}

		
	foreach my $panel ($round->panels) { 

		$panel->flight($panel_flight{$panel->id});
		$panel->flight(1) unless $panel_flight{$panel->id};
		$panel->update;

		next if $panel->bye;

		foreach my $judge (@{$panel_judges{$panel->id}}) { 
			$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge_id => $judge);
		}
		
	}

	my $msg = "Judges added";

	undef %judge_name;

#	$m->redirect("/panel/round/rooms.mhtml?round_id=".$round->id) if $round->type eq "elim" || $round->type eq "final" || $flights == 1;
	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&msg=$msg");

	sub score_panel {

		my ($entries_ref, $judges_ref, $mjp) = @_;

		my $score;

		my $first_score;
		my %judge_score;

		foreach my $entry (@{$entries_ref}) { 

			my $panel_score;
			my $panel_diff;
			my $judge_diff;

			foreach my $judge (@{$judges_ref}) { 

				$panel_score += ${$mjp}{$judge."-".$entry};

				if ($judge_score{$judge}) { 
					$score += abs($judge_score{$judge} - ${$mjp}{$judge."-".$entry});
				} else { 
					$judge_score{$judge} = ${$mjp}{$judge."-".$entry};
				}
			}

			if ($first_score) { 
				$panel_diff = abs($first_score - $panel_score);
				if ($panel_diff) { 
					$score += $panel_diff * 100;
				}
			} else { 
				$first_score = $panel_score;
			}

			$score += $panel_score;
		}

		return $score;
	}


</%init>

	<h2> Wheee!!  <% $round->realname %></h2>

	<h4>Paneling total score is <% $current_total %></h4>

%		foreach my $panel (@panels) { 
	
			<div class="block <% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				
				<span class="smallspan">
					<% $panel_bracket{$panel} %>
				</span>

				<span class="smallspan">
					<% $panel_flight{$panel} %>
				</span>

%				my $notfirst;

%				foreach my $entry (@{$panel_entries{$panel}}) { 
					<span class="medspan">
						<% $notfirst++ ? "vs " : "" %>
						<% $entry_code{$entry} %>
					</span>
%				}

%				foreach my $judge (@{$panel_judges{$panel}}) { 
					<span class="twofifty">
						<% $judge_rating{$judge} > 0 ? $judge_rating{$judge} : "" %> :
						<% $prefs && $prefs ne "none" ? $judge_rating{$judge."-".$panel} : "" %> - 
						<% $judge_panel_score{$judge."-".$panel} %> -
					</span>
%				}

			</div>

%		}
