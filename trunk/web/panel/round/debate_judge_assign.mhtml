<%args>
	$account
	$round_id
</%args>
<%init>

	my $debug;

	use List::Util 'shuffle';

	my $round = Tab::Round->retrieve($round_id);

    my $text = $account->first." ".$account->last." (".$account->email.") has re-assigned the judges out of round ".$round->realname." of ".$round->event->abbr;

    Tab::TournChange->create({ 
        type    => 'tabbing',
        event   => $round->event->id,
        tourn   => $round->event->tourn->id,
        account => $account->id,
        text    => $text
    }); 

    $m->comp("/funclib/round_clear_judges.mas", round => $round, nobye => 1);

	my @schools = $m->comp("/funclib/event_schools.mas", event => $round->event);
	my %school_region = map {$_->id => $_->region} @schools;

	my $prelim_count;
	foreach my $round ($round->event->rounds) { 
		next if $round->type eq "elim";
		next if $round->type eq "final";
		$prelim_count++;
	}

    my $round_event = $round->event;
	my $event_type = $round_event->type;
    my $tourn = $round_event->tourn;
	my $group = $round_event->judge_group;

	my $this_round = $round->id;
	my $round_type = $round->type;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $round_start = $round->timeslot->start->set_time_zone($tz);
	my $round_end = $round->timeslot->end->set_time_zone($tz);

	my @jpool = $round->jpools;
	my $flights = $round->flighted;

	$flights = 1 unless $flights;
	$flights = 1 if $round->event->setting("flight_rooms_only");

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	# Lots of settings
	my $rounds_per = $group->setting("rounds_per");
	my $no_back_to_back = $group->setting("no_back_to_back");
	my $judge_randomize = $group->setting("judge_randomize");
	my $judge_event_twice = $group->setting("judge_event_twice");
	my $allow_school_panels = $group->setting("allow_school_panels");

	my $no_first_years = $round_event->setting("no_first_years");
	my $allow_judge_own = $round_event->setting("allow_judge_own");
	my $region_constrain = $round_event->setting("region_constraints");
    my $region_avoid++ if $round_event->setting("region_avoid");

	my $allow_repeat_elims = $round_event->setting("allow_repeat_elims");
	my $allow_repeat_judging = $round_event->setting("allow_repeat_judging");
	my $allow_repeat_prelim_side = $round_event->setting("allow_repeat_prelim_side");

    $region_constrain++ if $round_event->tourn->setting("ncfl");

	my $prefs = $group->setting("prefs");

	if ($prefs eq "ndt") { 
		if ($round->type eq "elim") { 
			$prefs = "caps";
		} elsif ($round->type eq "final") { 
			$prefs = "caps";
		} else { 
			$prefs = "ordinals";
		}
	}

	undef $prefs if $round_event->setting("no_prefs");
	undef $prefs if $prefs eq "none";

	my $tab_ratings = $group->setting("tab_ratings");

	my $dbh = Tab::DBI->db_Main();

	my $event_ballots_sth = $dbh->prepare("
		select distinct ballot.id, ballot.entry, ballot.judge, round.id, round.type, entry.school, ballot.side, panel.bracket, panel.id, entry.code, panel.bye
		from ballot, panel, round, entry, event, school
		where event.judge_group = ".$round_event->judge_group->id."
		and round.event = event.id
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.bye = 0
		and ballot.noshow = 0
		and panel.bye = 0 
		and ballot.entry = entry.id
		and entry.school = school.id
	");

	$event_ballots_sth->execute();

	my @entries;

	my %entry_side;
	my %entry_code;
	my %entry_school;
	my %entry_region;
	my %school_entries;
	my %region_entries;

	my %judge_ballots;
	my %entry_ballots;

	my @panels;
	my %panel_entries;
	my %panel_bracket;
	my %panel_bye;

	my %ballot_type;
	my %ballot_side;
	my %ballot_entry;
	my %ballot_judge;

	my %judge_rounds;

	while (my ($ballot, $entry, $judge, $round, $type, $entry_school, $side, $bracket, $panel, $code, $bye) = $event_ballots_sth->fetchrow_array() ) {

		if ($round == $this_round) { 

			push @entries, $entry;

			push @{$school_entries{$entry_school}}, $entry;
			$entry_school{$entry} = $entry_school;
			$entry_region{$entry} = $school_region{$entry_school};
			push @{$region_entries{$school_region{$entry_school}}}, $entry if $school_region{$entry_school};

			$entry_side{$entry} = $side;
			$entry_code{$entry} = $code;

			push @panels, $panel;
			$panel_bracket{$panel} = $bracket;
			$panel_bye{$panel} = $bye;


			push @{$panel_entries{$panel}}, $entry;

		} else { 

			push @{$judge_rounds{$judge}}, $round if $round;
			push @{$judge_ballots{$judge}}, $ballot;
			push @{$entry_ballots{$entry}}, $ballot;

			$ballot_type{$ballot} = $type;
			$ballot_side{$ballot} = $side;
			$ballot_entry{$ballot} = $entry;
			$ballot_judge{$ballot} = $judge;

		}
	}

	my $judge_sth;

	if (@jpool) { 

		Tab::debuglog("Yes I have no bananas");
		
		$judge_sth = $dbh->prepare("
			select distinct judge.id, concat_ws(' ',judge.last, judge.first) as name, judge.school, tab_rating.value, diverse.value, concat(judge.obligation+judge.hired) as rounds
			from (judge, jpool_judge, jpool_round)
			left join judge_setting as tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left join judge_setting as diverse on diverse.judge = judge.id and diverse.tag = 'diverse'
			where judge.active = 1
			and judge.id = jpool_judge.judge
			and jpool_round.jpool = jpool_judge.jpool
			and jpool_round.round = ?
			group by judge.id
		");

	} else { 

		$judge_sth = $dbh->prepare("
			select distinct judge.id, concat_ws(' ',judge.last, judge.first) as name, judge.school, tab_rating.value, diverse.value, concat(judge.obligation+judge.hired) as rounds
			from (judge, judge_group, event, round)
			left join judge_setting as tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left join judge_setting as diverse on diverse.judge = judge.id and diverse.tag = 'diverse'
			where judge.active = 1
			and judge.judge_group = event.judge_group 
			and event.id = round.event
			and round.id = ?
			group by judge.id
		");

	}

	$judge_sth->execute($round->id);

	my @judges;
	my %judge_name;
	my %judge_score;
	my %judge_school;
	my %judge_region;
	my %judge_rating;
	my %judge_diverse;

	my %school_judges;
	my %region_judges;
	my %judge_clashes;
	my %judge_obligation;

	while (my ($id, $last, $school, $rating, $diverse, $rounds) = $judge_sth->fetchrow_array() ) {

		next unless $id;

		push @judges, $id;
		$judge_name{$id} = $last;
		$judge_school{$id} = $school;
		$judge_region{$id} = $school_region{$school};
		$judge_rating{$id} = $rating;
		$judge_diverse{$id} = $diverse;
		$judge_obligation{$id} = $rounds;

		push @{$school_judges{$school}}, $id;

		if ($school_entries{$school} && not defined $allow_judge_own) { 
			foreach my $entry (@{$school_entries{$school}}) { 
				push @{$judge_clashes{$id}}, $entry;
			}
		}

		if ($region_constrain) {
			if ($region_entries{$school_region{$school}} && not defined $allow_judge_own) { 
				foreach my $entry (@{$region_entries{$school_region{$school}}}) { 
					push @{$judge_clashes{$id}}, $entry;
				}
			}
		}
	}

	unless (@judges) { 
		#$err = "No judges were available."; #does the next line replace this?
		my $err = "No judges were found.  Did you put judges into the judge pools?" if @jpool;
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&err=$err");
	}

	my $strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge, strike.type, strike.event, strike.entry, 
			strike.school, strike.region, strike.start, strike.end
		from strike
		where strike.tourn = ".$tourn->id."
	");

	$strikes_sth->execute();

	my %judge_out;

	while (my ($id, $judge, $type, $event, $entry, $school, $region, $start, $end) = $strikes_sth->fetchrow_array() ) {

		if ($type eq "conflict" || $type eq "entry") { 

			if ($school) {	 
				push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};
				push @{$judge_clashes{$judge}}, @{$region_entries{$school_region{$school}}} if $school_region{$school} && $region_entries{$school_region{$school}};
			} else {  
				push @{$judge_clashes{$judge}}, $entry;
			}
		} 

		if ($type eq "elim" || $type eq "event") { 
			next if ($round_type eq "elim" || $round_type eq "final") && $type eq "elim";
			next unless $event == $round_event->id;
			$judge_out{$judge}++;
		}

		if ($type eq "hybrid") { 
			foreach my $school_judge (@{$school_judges{$school}}) { 
				push @{$judge_clashes{$school_judge}}, $entry;
			}
		}

		if ($type eq "region") { 
			foreach my $region_school (@schools) { 
				next unless $school_region{$region_school} == $region;
				push @{$judge_clashes{$judge}}, @{$school_entries{$region_school}};
			}
		}

		if ($type eq "school") { 
			push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};
		}

		if ($type eq "time") { 
			my $start_dt = DateTime::Format::MySQL->parse_datetime($start);
			my $end_dt = DateTime::Format::MySQL->parse_datetime($end);

			$start_dt->set_time_zone("UTC");
			$end_dt->set_time_zone("UTC");

			$start_dt->set_time_zone($tz);
			$end_dt->set_time_zone($tz);

			$judge_out{$judge}++  if ($round_start <= $end_dt && $round_end >= $start_dt);
		}

	}

	my $rounds_missed_sth = $dbh->prepare("
		select distinct judge.id, count(round.id)
		from judge, round, timeslot, strike, event
		where judge.id = strike.judge
		and judge.judge_group = event.judge_group
		and event.id = ".$round->event->id."
		and round.event = event.id
		and strike.type = \"time\"
		and strike.start < timeslot.end
		and strike.end > timeslot.start
		and timeslot.id = round.timeslot
		group by judge.id
	");

	my %judge_roundstruck = ();

	$rounds_missed_sth->execute();

	while (my ($judge, $rounds_struck) = $rounds_missed_sth->fetchrow_array() ) {
		$judge_roundstruck{$judge} = $rounds_struck;
	}

	if (@jpool) { 

		my $busy_sth = $dbh->prepare("
			select distinct judge.id
			from ballot, panel, round, timeslot, timeslot mytime, round myround, judge, jpool_judge, jpool_round
			where myround.id = ? 
			and myround.timeslot = mytime.id
			and mytime.start < timeslot.end
			and mytime.end > timeslot.start
			and timeslot.id = round.timeslot
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and judge.id = jpool_judge.judge
			and jpool_judge.jpool = jpool_round.jpool 
			and jpool_round.round = myround.id
		");

		$busy_sth->execute($round->id);

		while (my ($judge) = $busy_sth->fetchrow_array() ) {
			$judge_out{$judge}++;
		}

	} else { 

		my $busy_sth = $dbh->prepare("
			select distinct judge.id
			from ballot, panel, round, timeslot, timeslot mytime, round myround, judge
			where myround.id = ".$round->id."
			and myround.timeslot = mytime.id
			and mytime.start < timeslot.end
			and mytime.end > timeslot.start
			and timeslot.id = round.timeslot
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and judge.judge_group = ".$round_event->judge_group->id."
		");

		$busy_sth->execute();

		while (my ($judge) = $busy_sth->fetchrow_array() ) {
			$judge_out{$judge}++;
		}

	}

	my %tier_value;
	my %tier_strike;

	my $tiers;

	if ($prefs && $prefs ne "ordinals") { 
		$tiers++;
		foreach my $tier (sort {$a->name cmp $b->name} $group->rating_tiers(type => "mpj")) {
			$tier_value{$tier->id} = $tier->name;
			$tier_strike{$tier->id}++ if $tier->strike || $tier->conflict;
		}
	}

	my $ratings_sth = $dbh->prepare("
		select distinct rating.id, rating.judge, rating.entry, rating.rating_tier, rating.percentile
		from rating, ballot, panel
		where panel.round = ".$round->id."
		and ballot.panel = panel.id
		and panel.bye = 0
		and ballot.bye = 0
		and ballot.entry = rating.entry
		group by rating.id
	");

	$ratings_sth->execute();

	my %mjp;

	while (my ($id, $judge, $entry, $tier, $percentile) = $ratings_sth->fetchrow_array() ) {
		next unless ($tier || $percentile);
		$mjp{$judge."-".$entry} = $tier_value{$tier} if $tier > 0;
		$mjp{$judge."-".$entry} = $percentile if $percentile > 0;
		push @{$judge_clashes{$judge}}, $entry if $tier && $tier_strike{$tier};
	}

	my %panel_seen = (); 

	@panels = grep { ! $panel_seen{$_} ++ } @panels;
	@panels = sort {$panel_bracket{$b} <=> $panel_bracket{$a}} @panels;

	my %judge_avoid;
	my %judge_entry_clash;

    my $judge_use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);    
    my %judge_use = %{$judge_use_ref};

	my $round_burn_avoid = $group->setting("round_burn_avoid");
	my $mutuality = $group->setting("mutuality");
	my $preference = $group->setting("preference");
	my $default_mjp = $group->setting("default_mjp");
	my $diversity = $group->setting("diverse_judge_weight");
	my $suckage = $group->setting("sucktastic_judge_weight");
	my $prefer_hireds = $group->setting("mjp_prefer_hireds");

	$diversity = 1 if not defined $diversity;
	$suckage = 3 if not defined $suckage;
	$mutuality = 40 if not defined $mutuality;
	$preference = 15 if not defined $preference;
	$default_mjp = 1 if not defined $default_mjp;
	$round_burn_avoid =  5 if not defined $round_burn_avoid;
	$prefer_hireds = 10 if not defined $prefer_hireds;

	$mutuality = 0 if $mutuality == -1;
	$diversity = 0 if $diversity == -1;
	$suckage = 0 if $suckage == -1;
	$preference = 0 if $preference == -1;
	$default_mjp = 0 if $default_mjp == -1;
	$round_burn_avoid = 0 if $round_burn_avoid == -1;
	$prefer_hireds = 0 if $prefer_hireds == -1;

	my %use_priority;
	my %judge_roundcount;
	
	my %judge_prefs = $m->comp("/funclib/judges_by_pref.mas", group => $group);


	foreach my $judge (@judges) {

		my %seen = (); 
		@{$judge_rounds{$judge}} = grep { ! $seen{$_}++ } @{$judge_rounds{$judge}};

		my $num_rounds = scalar @{$judge_rounds{$judge}};

		$judge_score{$judge} += scalar @{$judge_clashes{$judge}} if $judge_clashes{$judge};

		if ($rounds_per && $round_type ne "elim" && $round_type ne "final") { 

			$judge_out{$judge}++ if $num_rounds >= $judge_obligation{$judge};
	
			my $remaining_prelims = $prelim_count + 1 - $round->name;

			my $rounds_left = $judge_use{$judge}{'left'};
			my $round_diff = $remaining_prelims - $rounds_left;

			$judge_score{$judge} += $round_diff ** $round_burn_avoid if $round_diff > 0;
			$use_priority{$judge} += $round_diff ** $round_burn_avoid if $round_diff > 0;

			$judge_roundcount{$judge} = $num_rounds;

		} else {

			my $round_factor = $num_rounds;
			$round_factor -= $judge_roundstruck{$judge};

			$round_factor = $round_factor * $round_burn_avoid;

			$judge_score{$judge} += $round_factor * .1;
			$use_priority{$judge} += $round_factor * .1;
			$judge_roundcount{$judge} = $num_rounds;

		}

		$use_priority{$judge} -= $prefer_hireds if $judge_school{$judge} < 1;
		$use_priority{$judge} -= $judge_diverse{$judge} * $diversity if $diversity;
		$use_priority{$judge} -= ($judge_prefs{$judge}{"avg"} - ($judge_prefs{$judge}{"stdv"}/3)) * $suckage if $suckage;

		next  if $judge_out{$judge};

		if ($judge_ballots{$judge}) { 
			foreach my $ballot ( sort { $entry_code{$ballot_entry{$a}} cmp $entry_code{$ballot_entry{$b}}} @{$judge_ballots{$judge}}) { 
				my $entry = $ballot_entry{$ballot};
				next if $allow_repeat_elims && ($round_type eq "elim" || $round_type eq "final" || $ballot_type{$ballot} eq "elim" || $ballot_type{$ballot} eq "final") ;
				push @{$judge_avoid{$judge}}, $entry;
				next if $allow_repeat_judging;
				next if $allow_repeat_prelim_side && $ballot_side{$ballot} != $entry_side{$entry};
				push @{$judge_clashes{$judge}}, $entry;
			}
		}

		foreach my $clash (@{$judge_clashes{$judge}}) { 
			$judge_entry_clash{$judge."-".$clash}++;
		}

	}

	my $switch;

	my %default_settings = $m->comp("/funclib/default_rating_settings.mas", type => $round_event->type);

	my $bracket_order = $round_event->setting("tab_rating_priority", $round->id);
	$bracket_order = $default_settings{$round->name} unless $bracket_order;

	$bracket_order =~ s/\s*//g;
	my @orders = split(/\,/, $bracket_order) unless $round_type eq "elim" || $round_type eq "final";

	my %bracket_score;
	my $order_multiplier;

	my $last_order = 0;
	my $shuffle_post;

	undef @orders if $round->type eq "prelim";

	unless (@orders) { 

		foreach (1 .. $num_judges) { 
			push @orders, 0;
			$shuffle_post++;
		}

	} else { 



	}

	my $loss_threshold = $round_event->setting("break_point") if $round_event->setting("break_point"); 

	my $max_pref = $round_event->setting("max_pref") if $round_event->setting("max_pref"); 
	my $max_nobreak_pref = $round_event->setting("max_nobreak_pref") if $round_event->setting("max_nobreak_pref"); 

	my $bracket_dont_give_a_shit = $round->name - $loss_threshold - 1 if $loss_threshold > 0;

	foreach my $order (reverse @orders) { 

		$order_multiplier++;

		foreach my $panel (@panels) { 
			next unless $panel_bracket{$panel} == $order;
			$bracket_score{$panel} = $order_multiplier;
		}

		$last_order = $order;
	}


	my %fix_flight;
	my @flight_settings = $m->comp("/funclib/event_entry_settings.mas", event => $round->event, tag => "preferred_flight");
	my %preferred_flight = map {$_->entry->id => $_->value} @flight_settings;

	my %judge_panel_score;

	@panels = shuffle @panels if $shuffle_post;

	PANEL:
	foreach my $panel (@panels) { 

		next if $panel_bye{$panel};

		my $dont_care++ if $bracket_dont_give_a_shit && $panel_bracket{$panel} <= $bracket_dont_give_a_shit;

		JUDGE:
		foreach my $judge (@judges) { 

			my $debug;

			my $score = 0;
			next JUDGE if $judge_out{$judge};

			my $diff;
			my $mjp_first;

			foreach my $entry (@{$panel_entries{$panel}}) { 
	
				if ($flights > 1 ) { 
					$fix_flight{$panel} = $preferred_flight{$entry};
					$fix_flight{$panel} = ($flights + 1) / 2 unless $preferred_flight{$entry};
				}

				$score += 100000000 if $judge_entry_clash{$judge."-".$entry};
				$score += 50000 if $judge_avoid{$entry};
				$score += 500000 if $judge_avoid{$entry} && $prefs eq "ordinals";

				my $mjp_rating = $mjp{$judge."-".$entry};
				$mjp_rating = $default_mjp unless $mjp_rating;
				
				if ($dont_care && $max_nobreak_pref) { 
					$score += 500000 if $mjp_rating > $max_nobreak_pref;
				} elsif ($max_pref) { 
					$score += 500000 if $mjp_rating > $max_pref;
				}

				if ($region_avoid) { 
					$score += 100 if $entry_region{$entry} == $judge_region{$judge};
				}

				if ($prefs && $prefs ne "none") { 

					if ($mjp_first) { 
						$diff = abs($mjp_first - $mjp_rating) if $mjp_first && $mjp_rating;
					} else { 
						$mjp_first = $mjp_rating unless $mjp_first;
					}

					unless ($dont_care) {
						$score += $mjp_rating * $preference;
						$score += 2 * $preference unless $mjp_rating;
					}

					$judge_rating{$judge."-".$panel} .= " - " if $judge_rating{$judge."-".$panel};
					$judge_rating{$judge."-".$panel} .= $mjp_rating;
					$judge_rating{$judge."-".$panel} .= "1" if not defined $mjp_rating &! $dont_care;

				}

			}

			$score += $use_priority{$judge};
			$score += $diff * $mutuality if $prefs && $prefs ne "none" &! $dont_care;
			$score += $diff if $prefs && $prefs ne "none" && $dont_care;

			$score += $judge_roundcount{$judge} * .1;

			if ($tab_ratings &! $dont_care) { 
				$score += $judge_rating{$judge} * $preference;
			} 

			$score = $score * $bracket_score{$panel} if $bracket_score{$panel} && $round_type ne "elim" &! $dont_care;

			$judge_panel_score{$judge."-".$panel} = $score;

		}
	}

	my $panel_done;

	my %panel_flight;
	my %panel_judges;
	my %judge_panels;

	my $current_total;
	my $linked;

	foreach my $tick (1 .. 1) { 

		my %test_judges;
		my %test_flight;
		my %test_panels;
		my %panel_link;
		my %am_other;

		if ($num_judges > 1 && $flights > 1) { 

			$linked++;
			my $current_flight = 1;

			@panels = shuffle @panels;

			my $last_panel;

			foreach my $panel (@panels) {

				next if $panel_bye{$panel};

				$test_flight{$panel} = $current_flight;
				$panel_link{$panel} = $last_panel;

				$am_other{$last_panel}++;
				$current_flight++;

				if ($current_flight > $flights) {
					$current_flight = 1;
					undef $last_panel;
				} else {
					$last_panel = $panel;
				}
			}

			@panels = sort {$test_flight{$b} <=> $test_flight{$a}} @panels;
		}

		my %judge_used;
		my $attempt_total;
		my $order_count;

		foreach my $order (@orders) { 

			$order_count++;
			@panels = reverse @panels unless $_ % 2;

			my %used;

			PANEL:
			foreach my $panel (@panels) { 

				next if $panel_bye{$panel};
				next if $am_other{$panel};
				next if $used{$panel};

				next if $round_type ne "final" && $round_type ne "elim" && defined $panel_bracket{$panel} && $order != $panel_bracket{$panel};

				my $other = $panel_link{$panel};

				@judges = sort {$judge_score{$b} <=> $judge_score{$a}} @judges;
				@judges = sort {$judge_panel_score{$a."-".$panel} <=> $judge_panel_score{$b."-".$panel}} @judges;


				JUDGE:
				foreach my $judge (@judges) { 

					next JUDGE if $judge_out{$judge};
					next JUDGE if $judge_used{$judge} >= $flights;
					next JUDGE if $judge_used{$judge} && $linked;

					foreach my $entry (@{$panel_entries{$panel}}) { 
						next JUDGE if $judge_entry_clash{$judge."-".$entry};
					}

					if ($other) { 

						foreach my $entry (@{$panel_entries{$other}}) { 
							next JUDGE if $judge_entry_clash{$judge."-".$entry};
						}

						push @{$test_judges{$other}}, $judge;
						push @{$test_panels{$judge}}, $other;

						$judge_used{$judge}++;
						$attempt_total += $judge_panel_score{$judge."-".$other};
						$used{$other}++;
					}

					push @{$test_judges{$panel}}, $judge;
					push @{$test_panels{$judge}}, $panel;

					$judge_used{$judge}++;
					$used{$panel}++; 

					$test_flight{$panel} = $judge_used{$judge} unless $test_flight{$panel};
					$attempt_total += $judge_panel_score{$judge."-".$panel};

					next PANEL;

				}
			}
		}

		foreach my $tock (1 .. 7) { 

			next if $linked;

			PANEL:
			foreach my $first (@panels) { 
		
				next if $panel_bye{$first};

				my %entry_id;
				foreach (@{$panel_entries{$first}}) {   
					$entry_id{$_}++;
				}

				foreach my $first_judge (@{$test_judges{$first}}) { 

					my $current_diff;
					my $swap_with;
					my $swap_panel;
				
					JUDGE:
					foreach my $second_judge (@judges) { 

						next if $second_judge == $first_judge;
						next if $judge_out{$second_judge};

						foreach my $entry (@{$panel_entries{$first}}) {   
							foreach my $clash (@{$judge_clashes{$second_judge}}) { 
								next JUDGE if $clash == $entry;
							}
						}

						if ($test_panels{$second_judge} && scalar @{$test_panels{$second_judge}} >= $flights) { 

							foreach my $second (@{$test_panels{$second_judge}}) { 
						
								my $baseline_score = $judge_panel_score{$first_judge."-".$first};
								my $second_score += $judge_panel_score{$second_judge."-".$first};

								foreach my $entry (@{$panel_entries{$second}}) {   
									foreach my $clash (@{$judge_clashes{$first_judge}}) { 
										next JUDGE if $clash == $entry;
									}
								}

								$second_score += $judge_panel_score{$first_judge."-".$second};
								$baseline_score += $judge_panel_score{$second_judge."-".$second};

								if ( ($baseline_score - $second_score) > $current_diff ) { 
									$current_diff = $baseline_score - $second_score;
									$swap_with = $second_judge;
									$swap_panel = $second;
								}
							}

						} else { 

							my $baseline_score = $judge_panel_score{$first_judge."-".$first};
							my $second_score += $judge_panel_score{$second_judge."-".$first};

							if ( ($baseline_score - $second_score) > $current_diff ) { 
								$current_diff = $baseline_score - $second_score;
								$swap_with = $second_judge;
								undef $swap_panel;
							}
						}
					}

					if ($swap_with) { 
					

						$attempt_total -= $current_diff;
						
						my @new_first;

						foreach my $judge (@{$test_judges{$first}}) { 
							push @new_first, $judge unless $judge == $first_judge;
						}

						push @new_first, $swap_with;
						@{$test_judges{$first}} = @new_first;

						my @new_first_panels;

						foreach my $panel (@{$test_panels{$first_judge}}) { 
							next if $panel == $first;
							push @new_first_panels, $panel;
						}

						if ($swap_panel) { 
						
							push @new_first_panels, $swap_panel;

							my @new_second;

							foreach my $judge (@{$test_judges{$swap_panel}}) { 
								push @new_second, $judge unless $judge == $swap_with;
							}
							push @new_second, $first_judge;
							@{$test_judges{$swap_panel}} = @new_second;

						}

						@{$test_panels{$first_judge}} = @new_first_panels;

						my @new_second_panels;

						foreach my $panel (@{$test_panels{$swap_with}}) { 
							next if $panel == $swap_panel;
							push @new_second_panels, $panel;
						}
						push @new_second_panels, $first;
						@{$test_panels{$swap_with}} = @new_second_panels;

					}
				}
			}
		}

		if ($current_total > $attempt_total || not defined $current_total ) { 
			$current_total = $attempt_total;
			%panel_judges = %test_judges;
			%panel_flight = %test_flight;
			%judge_panels = %test_panels;
		}

	}

	foreach my $judge (@judges) { 

		my $flight;

		next unless $judge_panels{$judge};
		@{$judge_panels{$judge}} = sort {$fix_flight{$a} <=> $fix_flight{$b}} @{$judge_panels{$judge}};

		foreach my $panel (@{$judge_panels{$judge}}) { 
			$flight++;
			$panel_flight{$panel} = $flight;
		}
	}

	foreach my $panel ($round->panels) { 

		$panel->flight($panel_flight{$panel->id});
		$panel->flight(1) unless $panel_flight{$panel->id};
		$panel->update;

		next if $panel->bye;

		foreach my $judge (@{$panel_judges{$panel->id}}) { 
			$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge_id => $judge);
		}
		
	}

	my $msg = "Judges added";

	$m->redirect("/panel/round/rooms.mhtml?round_id=".$round->id) if $flights == 1 || $linked;
	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&msg=$msg");

</%init>

	<h2> Wheee!!  <% $round->realname %></h2>

	<h4>Paneling total score is <% $current_total %></h4>

%		foreach my $panel (@panels) { 
	
			<div class="block <% ($switch++ % 2) ? "oddrow" : "evenrow" %>">
				
				<span class="smallspan">
					<% $panel_bracket{$panel} %> - <% $bracket_score{$panel_bracket{$panel}} %>
				</span>

				<span class="smallspan">
					<% $panel_flight{$panel} %>
				</span>

%				my $notfirst;

%				foreach my $entry (@{$panel_entries{$panel}}) { 
					<span class="medspan">
						<% $notfirst++ ? "vs " : "" %>
						<% $entry_code{$entry} %>
					</span>
%				}

%				foreach my $judge (@{$panel_judges{$panel}}) { 
					<span class="twofifty">
						<% $judge_rating{$judge} > 0 ? $judge_rating{$judge} : "" %> :
						<% $prefs && $prefs ne "none" ? $judge_rating{$judge."-".$panel} : "" %> - 
						<% $judge_panel_score{$judge."-".$panel} %> -
						<% $judge_name{$judge} %>
					</span>
%				}

			</div>

%		}
