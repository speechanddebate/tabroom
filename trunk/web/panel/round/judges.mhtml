<%args>
	$round_id
	$account
	$tourn
</%args>
<%init>

	use List::Util qw(shuffle);

	my $ncfl++ if $tourn->setting("ncfl");

	my $round = Tab::Round->retrieve($round_id);
	my @panels = sort {$a->letter <=> $b->letter} $round->panels;
	@panels = sort {$b->bracket <=> $a->bracket} @panels;

	my $group = $round->event->judge_group;
	$ncfl++ if $round->event->setting("region_judge_forbid");

	my $same_school++ if $round->event->judge_group->setting("allow_school_panels");

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	my $num_flights = $round->flighted;
	$num_flights = 1 unless $num_flights;
	$num_flights = 1 if $round->event->setting("flight_rooms_only");

	$m->comp("/funclib/round_clear_judges.mas", round => $round);

	my $text = "Reassigned the judges in round ".$round->realname." of ".$round->event->abbr;

	Tab::TournChange->create({ 
		type    => 'tabbing',
		event   => $round->event->id,
		tourn   => $round->event->tourn->id,
		account => $account->id,
		text    => $text
	});

	if ($round->event->type eq "wudc" || $round->event->type eq "parli") { 

		my %panel_judges;
		my %panel_already_judges;
		my %used_judges;

		foreach my $panel (@panels) { 
			next if $panel->bye;
			@{$panel_judges{$panel->id}} = $m->comp("/funclib/clean_judges.mas", panel => $panel, wudc => "true");
			@{$panel_already_judges{$panel->id}} = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		}

		my $order_string = $round->setting("tab_rating_priority");

		my @orders = split(/\,/, $order_string);

		if (@orders) { 

			my %used_schools;

			foreach my $order (@orders) { 

				foreach my $panel (@panels) {

					next if $panel->bye;

					next unless $panel->bracket == $order;
					my @cans = @{$panel_judges{$panel->id}};

					my $judge;
					my $empty;

					while (@cans && not defined $judge && not defined $empty) { 

						$empty++ if scalar @cans == 0;
						$judge = shift @cans;
						$empty++ unless $judge;
						next unless $judge;

						undef $judge if $used_judges{$judge->id};

						unless ($same_school) { 
							undef $judge if $judge && $judge->school && $used_schools{$panel->id."-".$judge->school->id};
						}
					}

					$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge => $judge) if $judge;
					$used_judges{$judge->id}++ if $judge;
					$used_schools{$panel->id."-".$judge->school->id}++ if $judge && $judge->school;

				}

				@panels = reverse(@panels);

			}

		} else { 

			$num_judges = 3 unless $num_judges;

			my %used_schools;

			foreach (1 .. $num_judges ) { 

				foreach my $panel (@panels) {
					
					next if $panel->bye;

					my @cans = @{$panel_judges{$panel->id}};

					my $judge;
					my $empty;

					while (@cans && not defined $judge && not defined $empty) { 

						$empty++ if scalar @cans == 0;

						$judge = shift @cans;
						$empty++ unless $judge;
						next unless $judge;

						undef $judge if $used_judges{$judge->id};

						unless ($same_school) { 
							undef $judge if $judge && $judge->school && $used_schools{$panel->id."-".$judge->school->id};
						}

					}

					$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge => $judge) if $judge;
					$used_judges{$judge->id}++ if $judge;
					$used_schools{$panel->id."-".$judge->school->id}++ if $judge && $judge->school;

				}

				@panels = reverse(@panels);
			
			}

		}

	} else { 
		
		my %rating_by_judge_event = ();

		if ($group->setting("coach_ratings") && $round->type ne "prelim") {
		
			my %tier_names = map {$_->id => $_->name} $group->rating_tiers;

			foreach my $event ($group->events) { 
				my $event_id = $event->id;
				my @ratings = $m->comp("/funclib/group_ratings.mas", event => $event);
				foreach my $rating (@ratings) { 
					$rating_by_judge_event{$rating->judge->id."-".$event_id} = $tier_names{$rating->rating_tier->id} 
						if $rating && $rating->rating_tier;
				}
			}
		}

		my %panel_judges = ();

		foreach my $panel (@panels) { 
			next if $panel->bye;
			my @judges = $m->comp("/funclib/clean_judges.mas", panel => $panel, mass => "yes");
			@{$panel_judges{$panel->id}} = @judges;
		}

		my %done = ();

		foreach my $panel (@panels) { 

			next if $done{$panel->id};

			my @flights;
			push @flights, $panel;
			my %flighted;
			$flighted{$panel->id}++;

			my @judges = shuffle(@{$panel_judges{$panel->id}});

			if ($panel->round->type ne "prelim") {
				@judges = sort {$rating_by_judge_event{$a->id."-".$round->event->id} 
					cmp $rating_by_judge_event{$b->id."-".$round->event->id}} @judges;

				@judges = sort {length($rating_by_judge_event{$b->id."-".$round->event->id}) 
					<=> length($rating_by_judge_event{$a->id."-".$round->event->id})} @judges;
			}

			FLIGHT:
			foreach my $flight_number (2 .. $num_flights) { 

				OTHER:
				foreach my $other (@panels) { 

					next if $done{$other->id};
					next if $flighted{$other->id};

					my %flight_judges = map {$_->id => 1} @{$panel_judges{$other->id}};
					my @clear;

					foreach my $judge (@judges) { 
						next unless $flight_judges{$judge->id};
						next if $done{"J-".$judge->id};
						push @clear, $judge;
					}

					next OTHER unless scalar @clear > $num_judges;
					push @flights, $other; 
					@judges = @clear;
					$flighted{$other->id}++;
					next FLIGHT;
				}

			}


			my %school_already;
			my %region_already if $ncfl;

			my @judge_panel;

			foreach my $judge (@judges) { 

			
				next if $done{"J-".$judge->id};


				next if (not defined $same_school) && ($judge->school && $judge->school->id && $school_already{$judge->school->id});
				next if $ncfl && $judge->school && $judge->school->region && $region_already{$judge->school->region->id};

				$school_already{$judge->school->id}++ if $judge->school;
				$region_already{$judge->school->region->id}++ if $ncfl && $judge->school && $judge->school->region;

				push @judge_panel, $judge;
				last if scalar @judge_panel >= $num_judges;
			}

			my $flight_number = 1;


			foreach my $flight (@flights) { 
				$flight->flight($flight_number);
				$flight->update;
				$flight_number++;
				$done{$flight->id}++;

				foreach my $judge (@judge_panel) { 
					$m->comp("/funclib/panel_judgeadd.mas", panel => $flight, judge => $judge) if $judge;
					$done{"J-".$judge->id}++;
				}

			}
		}
	}

	my $msg = "Judges have been assigned";

	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1&msg=$msg");

</%init>
