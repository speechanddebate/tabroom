<%args>
	$round
	$debug          => undef
	$lag_pair_round => undef
</%args>
<%init>

	my $event = $round->event;
	my $tourn = $event->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	my $pullup_method = $event->setting("pullup_method");
	my $pullup_repeat = $event->setting("pullup_repeat");
	my $school_debates_self = $event->setting("school_debates_self");
	my $powermatch_method = $event->setting("powermatch");

	# Erase any current round already in place
	$m->comp("/funclib/round_dump.mas", round => $round);

	# Find the round whose seeding to base this round powermatching on. 
	my $previous_round = Tab::Round->retrieve($lag_pair_round) if $lag_pair_round;

	my %entry_round_record = (); 
	my $round_count;
	my $highest_round;

	foreach my $other_round (sort {$b->name <=> $a->name} $event->rounds) { 
		next if $other_round->name >= $round->name;
		$round_count++;
		$highest_round = $other_round unless $highest_round;
	}

	my $before; 

	foreach my $other_round (sort {$a->name <=> $b->name} $event->rounds) { 

		next if $other_round->name >= $round->name;

		if ($before && $other_round->type ne "prelim") { 
			#Generate the hash for the next round;
			my %record = $m->comp("/funclib/entry_wins.mas", round => $before, event => $event);
			$entry_round_record{$other_round->id} = \%record;
		}

		$before = $other_round; 
	}

	$previous_round = $highest_round unless $previous_round;

	# This enables side constrained rounds in even numbered debates unless
	# otherwise disabled (IE for Public Forum or a similar event); 

	my $side_constraints++ if $round_count % 2;  #Odd number of previous rounds means we're side constrained.
	undef $side_constraints if $event->setting("no_side_constraints");

	# Entries in seed order based on the previous round
	my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $panrank_ref, $panletter_ref, $long_desc_ref)
		= $m->comp("/tabbing/results/order_entries.mas", round => $previous_round);

	my %entry_record = $m->comp("/funclib/entry_wins.mas", round => $round, event => $event);
	my %entry_byes = $m->comp("/funclib/entry_byes.mas", event => $event, round => $round);

	my @entries = $event->entries( dropped => 0, waitlist => 0, unconfirmed => 0 );

	my %entry_by_id = map {$_->id => $_} @entries;
	my %entry_code = map {$_->id => $_->code} @entries;
	my %entry_school = map {$_->id => $_->school->id} @entries;

	# Rework the entries array to just be an array of IDs.  This will increase
	# speed a lot.
	@entries = keys %entry_by_id;

	# Sort out the seed order of each entry and also the remaining tiebreakers
	# to sort out where in the bracket pullups should live. 

	my %entry_seed = ();

	foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
		foreach my $entry (@{${$entries_ref}{$key}}) {
			$entry_seed{$entry} = $key;
		}
	}

	my %entry_opponents = ();

	my $dbh = Tab::DBI->db_Main();

	my $opponents_sth = $dbh->prepare("
		select entry.id, opponent.id, ballot.side, round.id, round.type, round.name
			from entry, entry opponent, ballot, ballot oppballot, panel, round
			where round.event = ".$event->id."
			and round.name <= ".$highest_round->name."
			and round.id = panel.round
			and panel.id = ballot.panel
			and panel.id = oppballot.panel
			and oppballot.entry != ballot.entry
			and oppballot.entry = opponent.id
			and ballot.entry = entry.id
			and ballot.bye != 1
			and oppballot.bye != 1
			and panel.bye != 1
			order by round.name");

	$opponents_sth->execute;

	my %side_due = ();
	my %met_before = ();
	my %opp_wins = ();
	my %pullup_count = ();

	while (my ( $entry, $opp, $side, $round_id, $round_type, $round_name) = $opponents_sth->fetchrow_array() ) {

		push @{$entry_opponents{$entry}}, $opp;
		$met_before{$entry}{$opp}++;

		$opp_wins{$entry}{"record"} += $entry_record{$opp};
		$opp_wins{$entry}{"count"}++;

		unless ($round_type eq "prelim") { 
			if ($entry_round_record{$round_id}{$entry} < $entry_round_record{$round_id}{$opp}) { 
				$pullup_count{$entry}++;
			}
		}

		next unless $side_constraints && $round_id == $highest_round->id;

		$side_due{$entry} = 2 if $side == 1;
		$side_due{$entry} = 1 if $side == 2;
	}

	# For SOP you must also enter in the entry's opponent seeds into their
	# bracket position.  For seed order it stays the same.

	my %opp_seed = ();
	my %entry_sop = ();
	my %bracket_entries = ();

	foreach my $entry (@entries) { 

		my $counter;
		my $total;

		push @{$bracket_entries{$entry_record{$entry}}}, $entry;

		$entry_sop{$entry} = $entry_seed{$entry};

		foreach my $opp (@{$entry_opponents{$entry}}) { 
			$total += $entry_seed{$opp};
			$counter++;
		}

		$opp_seed{$entry} = ($total / $counter);
		$entry_sop{$entry} += ($opp_seed{$entry});
	}

	# Sort the debaters in the bracket without winloss as a factor to determine
	# pullup positions

	foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

		next if ${$desc_ref}{$key} eq "W";

		@entries = sort { int(100 * ${$tbs_ref}{$a."-".$key}) <=> int(100 * ${$tbs_ref}{$b."-".$key})  } @entries 
			if ${$tier_dir}{$key} eq "up"; 

		@entries = sort { int(100 * ${$tbs_ref}{$b."-".$key}) <=> int(100 * ${$tbs_ref}{$a."-".$key})  } @entries 
			if ${$tier_dir}{$key} eq "down";
	}

	my %entry_hilo = map { $_ => $entries[$_] } 0..$#entries;

	my %entry_position = %entry_hilo if $powermatch_method eq "seed";
	%entry_position = %entry_sop if $powermatch_method ne "seed";

	my %pullup_score = ();
	my %pullup_entities = ();
	my $num_entries = scalar @entries;

	# Score each debater based on how likely they can be pulled up.   Big
	# penalty for being pulled up, smaller penalty in order for being out of
	# position.

	foreach my $entry (@entries) { 

		$pullup_score{$entry} = 1;

		if ($pullup_method eq "oppwin" || $pullup_method eq "middle" ) { 

			$pullup_score{$entry} += $opp_wins{$entry};

		} elsif ($pullup_method eq "lowseed") { 

			# This is the method used by APDA infidels.  Higher scores to the
			# people who shouldn't be pulled up.
			$pullup_score{$entry} += ($num_entries * 2) - $entry_seed{$entry};  
			$pullup_entities{$entry}{"num_entries"} = $num_entries;
			$pullup_entities{$entry}{"seed"} = $entry_seed{$entry};

		} else { 

			# Default is to use SOP.  Higher scores to the people who shouldn't be pulled up as often. 
			$pullup_score{$entry} += ($num_entries * 2) - $opp_seed{$entry};
			$pullup_entities{$entry}{"num_entries"} = $num_entries;
			$pullup_entities{$entry}{"sop"} = $entry_sop{$entry};
		}

		#Prevent someone from getting pulled up twice unless there's no other choice in this bracket (doubled).
		if ($pullup_count{$entry} && not defined $pullup_repeat) {
			$pullup_score{$entry} += $pullup_score{$entry};
		}


	}

	@entries = sort {$entry_seed{$a}  <=> $entry_seed{$b}} @entries;

	my $worst_entry = pop @entries;
	my $worst_position = $entry_position{$worst_entry};
	push @entries, $worst_entry;

	# If there's an uneven number of debaters we assign a bye.  

	if ($num_entries % 2) { 


		my $aff_count;
		my $neg_count;

		foreach my $entry (@entries) { 

			$met_before{$entry}{"BYE"} += $entry_byes{$entry};

			# Have to do it twice or else it'll be a lower penalty than
			# debating the same person twice. 
			$met_before{"BYE"}{$entry} += $entry_byes{$entry};  

			$aff_count++ if $side_due{$entry} == 1;
			$neg_count++ if $side_due{$entry} == 2;
		}

		# Adds a bye into the mix to pair a debater with.
		unshift @entries, "BYE";   				  

		# Put the bye into the worst bracket
		unshift @{$bracket_entries{0}}, "BYE";    

		# Byes have no wins of course since their opponents shouldn't either. 
		$entry_record{"BYE"} = 0;
		$entry_code{"BYE"} = "BYE";

		# Bye is placed at the top of the bracket so it gets the lowest possible seed. 
		$entry_position{"BYE"} = 1;  
		$pullup_score{"BYE"} = 100;

		# Make sure the bye goes to the short side if it's side constrained
		$side_due{"BYE"} = 1 if $aff_count && $neg_count && $aff_count < $neg_count;
		$side_due{"BYE"} = 2 if $aff_count && $neg_count && $aff_count > $neg_count;

	}

	my %opponent_score = (); 
	my %score_elements = ();

	foreach my $entry (@entries) { 

		foreach my $opponent (@entries) { 

			next if $opponent == $entry; 

			my $log++ if $entry_record{$opponent} == 5; 

			# Same school debates are the worst outcome
			$opponent_score{$entry}{$opponent} += 1000000000000000 if $entry_school{$opponent} == $entry_school{$entry} && not defined $school_debates_self;
			$score_elements{$entry."-".$opponent}{"school"} = 1000000000000000 if $entry_school{$opponent} == $entry_school{$entry} && not defined $school_debates_self;

			# If the debaters have debated before penalize them but not as much as same schools.
			$opponent_score{$entry}{$opponent} += 10000000000000 * $met_before{$entry}{$opponent};
			$score_elements{$entry."-".$opponent}{"previous_hit"} = 10000000000000 * $met_before{$entry}{$opponent};

			# Wrong side debates are undesirable as long as they're clean.
			$opponent_score{$entry}{$opponent} += 25000000000 if $side_due{$entry} && $side_due{$entry} == $side_due{$opponent};
			$score_elements{$entry."-".$opponent}{"wrong_side"} = 25000000000 if $side_due{$entry} && $side_due{$entry} == $side_due{$opponent};

		}

	}

	# Now figure out how far off position every debater is against entry. 

	foreach my $tier (sort {$b <=> $a} keys %bracket_entries) {  

		my @bracket_entries = @{$bracket_entries{$tier}};

		# Top of bracket gets the worst opponents...
		@bracket_entries = sort {$entry_position{$a} <=> $entry_position{$b}} @bracket_entries;

		# Unless it's a high high round.
		@bracket_entries = sort {$entry_position{$b} <=> $entry_position{$a}} @bracket_entries if $round->type eq "highhigh";

		my $num_bracket = scalar @bracket_entries; 

		my $rank;

#		Tab::debuglog("   ");
#		Tab::debuglog(" Tier $tier ");
#		Tab::debuglog("   ");

		foreach my $be (@bracket_entries) { 

			$rank++;

			foreach my $opponent (@entries) { 

				next if $opponent == $be;
			
				my $log++ if $entry_record{$opponent} == 5; 

				# Bracket pullups get a penalty proportional to how many times they'd be pulled up and their pullup
				# score (based on whether they've been pulled up before and their oppwin or seed position.

				# You are only penalized for getting pulled up, not for debating the pullup.

				if ($entry_record{$opponent} > $entry_record{$be}) { 
					$opponent_score{$be}{$opponent} += abs($entry_record{$opponent} - $tier) * 200000000 * $pullup_score{$be}; 
					$score_elements{$be."-".$opponent}{"pullup"} = abs($entry_record{$opponent} - $tier) * 200000000 * $pullup_score{$be}; 
					$score_elements{$be."-".$opponent}{"pullup_record_diff"} = abs($entry_record{$opponent} - $tier)." in tier $tier";
					$score_elements{$be."-".$opponent}{"pullup_base_score"} = $pullup_score{$be};
				}
		
				# And they get a score based on where in the bracket they are.  This is multiplied by the rank within
				# the bracket of the entry so that the top entry will get the most desirable opponent (lowest seed)
				# possible within the bounds of the other constraints. 

				$opponent_score{$be}{$opponent} += ($worst_position - $entry_position{$opponent}) * ($num_entries - $rank);
				$score_elements{$be."-".$opponent}{"position"} = ($worst_position - $entry_position{$opponent}) * ($num_entries - $rank);
				$score_elements{$be."-".$opponent}{"worst_position"} = $worst_position;
				$score_elements{$be."-".$opponent}{"entry_position"} = $entry_position{$opponent};
				$score_elements{$be."-".$opponent}{"rank"} = $rank;

			}
		}
	}

	my %debates;
	my @opponents = @entries;

#	Tab::debuglog(" ");
#	Tab::debuglog("================");

	@entries = sort {$entry_position{$a}  <=> $entry_position{$b}} @entries;
	@entries = sort {$entry_record{$b}  <=> $entry_record{$a}} @entries;

	foreach my $entry (@entries) { 

		next if $debates{$entry};

		@opponents = sort { ($opponent_score{$a}{$entry} + $opponent_score{$entry}{$a}) <=> ($opponent_score{$b}{$entry} + $opponent_score{$entry}{$b})} @opponents;

		my $opponent;

		foreach my $candidate (@opponents) { 
			next if $candidate == $entry;
			next if $debates{$candidate};
			$opponent = $candidate;
			last if $opponent;
		}

		$debates{$entry} = $opponent;
		$debates{$opponent} = $entry;

	}

	my %log_me = (
		643751 => 1,
		673413 => 1,
		605555 => 1
	);

	undef %log_me;

	foreach my $pass (1 .. 20) { 

		my $swapped;

		foreach my $entry (sort {$entry_position{$b} <=> $entry_position{$a}} keys %debates) { 
				
			my $opponent = $debates{$entry};

			my $new_opponent;
			my $swap_entry;
			my $score_differential = 0;

			if ($log_me{$entry}) { 
				Tab::debuglog("================");
				Tab::debuglog("Pass $pass.  $entry_code{$entry} starts with $entry_code{$debates{$entry}}");
				Tab::debuglog("================");
			}

			foreach my $other_entry (sort {$entry_seed{$a} <=> $entry_seed{$b}} keys %debates) { 

				next if $other_entry == $entry;		# don't swap me with myself.
				next if $other_entry == $opponent;   # don't swap me with my opponent; 

				my $other_opponent = $debates{$other_entry};

				next if $other_opponent == $entry;   # don't swap me with my existing opponent either
				next if $other_opponent == $opponent;   # don't swap me with my existing opponent either

				# Score the original debates
				my $old_score = $opponent_score{$entry}{$opponent} + $opponent_score{$opponent}{$entry} +
					$opponent_score{$other_entry}{$other_opponent} + $opponent_score{$other_opponent}{$other_entry};

				# Score the new debates
				my $new_score = $opponent_score{$entry}{$other_opponent} + $opponent_score{$other_opponent}{$entry} + 
					$opponent_score{$other_entry}{$opponent} + $opponent_score{$opponent}{$other_entry};

				# If the new debates are better overall, propose the swap
				if ($old_score - $new_score > $score_differential) { 

					Tab::debuglog("Swapping with $entry_code{$other_entry} to debate $entry_code{$other_opponent} instead of $entry_code{$opponent} leads improves score by ".($old_score - $new_score)." from $old_score to $new_score") if $log_me{$entry};

					$new_opponent = $other_opponent; 
					$swap_entry = $other_entry;
					$score_differential = $old_score - $new_score;
				}

			}

			if ($new_opponent) { 

				my $old_score1 = $opponent_score{$entry}{$opponent} + $opponent_score{$opponent}{$entry};
				my $old_score2 = $opponent_score{$swap_entry}{$new_opponent} + $opponent_score{$new_opponent}{$swap_entry};

				my $new_score1 = $opponent_score{$entry}{$new_opponent} + $opponent_score{$new_opponent}{$entry};
				my $new_score2 = $opponent_score{$swap_entry}{$opponent} + $opponent_score{$opponent}{$swap_entry};

				my $os1_school = $score_elements{$entry."-".$opponent}{"school"} + $score_elements{$opponent."-".$entry}{"school"};
				my $os1p = $score_elements{$entry."-".$opponent}{"previous_hit"} + $score_elements{$opponent."-".$entry}{"previous_hit"};
				my $os1_ws = $score_elements{$entry."-".$opponent}{"wrong_side"} + $score_elements{$opponent."-".$entry}{"wrong_side"};
				my $os1_pullup = $score_elements{$entry."-".$opponent}{"pullup"} + $score_elements{$opponent."-".$entry}{"pullup"};
				my $os1_posi = $score_elements{$entry."-".$opponent}{"position"} + $score_elements{$opponent."-".$entry}{"position"};

				my $os2_school = $score_elements{$swap_entry."-".$new_opponent}{"school"} + $score_elements{$new_opponent."-".$swap_entry}{"school"};
				my $os2p = $score_elements{$swap_entry."-".$new_opponent}{"previous_hit"} + $score_elements{$new_opponent."-".$swap_entry}{"previous_hit"};
				my $os2_ws = $score_elements{$swap_entry."-".$new_opponent}{"wrong_side"} + $score_elements{$new_opponent."-".$swap_entry}{"wrong_side"};
				my $os2_pullup = $score_elements{$swap_entry."-".$new_opponent}{"pullup"} + $score_elements{$new_opponent."-".$swap_entry}{"pullup"};
				my $os2_posi = $score_elements{$swap_entry."-".$new_opponent}{"position"} + $score_elements{$new_opponent."-".$swap_entry}{"position"};

				my $ns1_school = $score_elements{$entry."-".$new_opponent}{"school"} + $score_elements{$new_opponent."-".$entry}{"school"};
				my $ns1p = $score_elements{$entry."-".$new_opponent}{"previous_hit"} + $score_elements{$new_opponent."-".$entry}{"previous_hit"};
				my $ns1_ws = $score_elements{$entry."-".$new_opponent}{"wrong_side"} + $score_elements{$new_opponent."-".$entry}{"wrong_side"};
				my $ns1_pullup = $score_elements{$entry."-".$new_opponent}{"pullup"} + $score_elements{$new_opponent."-".$entry}{"pullup"};
				my $ns1_posi = $score_elements{$entry."-".$new_opponent}{"position"} + $score_elements{$new_opponent."-".$entry}{"position"};

				my $ns2_school = $score_elements{$swap_entry."-".$opponent}{"school"} + $score_elements{$opponent."-".$swap_entry}{"school"};
				my $ns2p = $score_elements{$swap_entry."-".$opponent}{"previous_hit"} + $score_elements{$opponent."-".$swap_entry}{"previous_hit"};
				my $ns2_ws = $score_elements{$swap_entry."-".$opponent}{"wrong_side"} + $score_elements{$opponent."-".$swap_entry}{"wrong_side"};
				my $ns2_pullup = $score_elements{$swap_entry."-".$opponent}{"pullup"} + $score_elements{$opponent."-".$swap_entry}{"pullup"};
				my $ns2_posi = $score_elements{$swap_entry."-".$opponent}{"position"} + $score_elements{$opponent."-".$swap_entry}{"position"};

				Tab::debuglog("Pass $pass SWAP MADE.  Score improves by $score_differential");
				Tab::debuglog("  OLD $entry_code{$entry} vs $entry_code{$opponent}  School $os1_school Previous $os1p Side $os1_ws Pullup $os1_pullup Position $os1_posi Total $old_score1");
				Tab::debuglog("  OLD $entry_code{$swap_entry} vs $entry_code{$new_opponent} School $os2_school Previous $os2p Side $os2_ws Pullup $os2_pullup Position $os2_posi Total $old_score2 ");
				Tab::debuglog("  NEW $entry_code{$entry} vs $entry_code{$new_opponent}  School $ns1_school Previous $ns1p Side $ns1_ws Pullup $ns1_pullup Position $ns1_posi Total $new_score1");
				Tab::debuglog("  NEW $entry_code{$swap_entry} vs $entry_code{$opponent} School $ns2_school Previous $ns2p Side $ns2_ws Pullup $ns2_pullup Position $ns2_posi Total $new_score2");

				$debates{$entry} = $new_opponent;
				$debates{$new_opponent} = $entry;

				$debates{$swap_entry} = $opponent;
				$debates{$opponent} = $swap_entry; 

				$swapped++;

			}

		}

		Tab::debuglog("I found no swaps worth doing on pass $pass.  Finishing this now") unless $swapped;
		last unless $swapped;

	}

	# If this is not a sidelocked debate we snake the sides so the good teams
	# don't all end up aff and thus wreak havoc on the next round's bracket.

	my $sides;  

	my $letter = 1;
	$letter = "A" if $event->setting("panel_labels") eq "letters";

	my %done;

	foreach my $entry (sort {$entry_seed{$a} <=> $entry_seed{$b}} keys %debates) { 

		next if $done{$entry}++;
		my $opponent = $debates{$entry};
		next if $done{$opponent}++;

		my $bye = 0;
		$bye++ if $opponent eq "BYE";
		$bye++ if $entry eq "BYE";
		next if $bye > 1;

		unless ($side_due{$entry}) { 
			$side_due{$entry} = ($side_due{$opponent} % 2) + 1;
			$side_due{$entry} = ($sides++ % 2) + 1 unless $side_due{$entry};
		}

		unless ($side_due{$opponent}) { 
			$side_due{$opponent} = ($side_due{$entry} % 2) + 1;
		}

		my $bracket = $entry_record{$entry};
		$bracket = $entry_record{$opponent} if $entry_record{$opponent} > $bracket;

		my $score = $opponent_score{$entry}{$opponent} + $opponent_score{$opponent}{$entry};
		
		my $panel = Tab::Panel->create({
			round   => $round->id,
			bye     => $bye,
			letter  => $letter,
			flight  => 1,
			bracket => $bracket,
			score   => $score
		});

		if ($entry ne "BYE") { 

			my $pullup++ if $entry_record{$entry} < $entry_record{$opponent};

			Tab::Ballot->create({
				panel  => $panel->id,
				judge  => 0,
				bye    => $bye,
				audit  => $bye,
				entry  => $entry,
				side   => $side_due{$entry},
				seed   => $entry_position{$entry},
				pullup => $pullup
			});

		}
	
		if ($opponent ne "BYE") { 

			my $pullup++ if $entry_record{$opponent} < $entry_record{$entry};

			Tab::Ballot->create({
				panel  => $panel->id,
				judge  => 0,
				bye    => $bye,
				audit  => $bye,
				entry  => $opponent,
				side   => $side_due{$opponent},
				seed   => $entry_position{$opponent},
				pullup => $pullup
			});

		}

	}


</%init>

