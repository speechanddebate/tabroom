<%args>
	$session
	$group_id	
	$tourn
	$codes => undef
</%args>
<%init>

	my $group = Tab::JudgeGroup->retrieve($group_id);

	my $name = $group->name;
	$name =~ s/[\W_]//g;

	my $filename = "DebateJudgeCards-$name-".$session->id;
	my $filepath = $Tab::file_root."tmp/".$filename;
	`rm -f $filepath.*`;

	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1 );

	open (TEXOUT, ">>$filepath.tex");

	my @timeslots = $m->comp('/funclib/group_timeslots.mas', group => $group);
	
	print TEXOUT "\\renewcommand{\\arraystretch}{1.6}\n";
	print TEXOUT "\\setlength{\\tabcolsep}{6.2pt}";
	print TEXOUT "\\setlength{\\doublerulesep}{0pt}";

	print TEXOUT "\\noindent\n";
	
	Tab::Entry->columns(TEMP => qw/side flight roundname roundlabel ballotid flighted/);
	Tab::BallotValue->columns(TEMP => qw/winner ballotid/);

	foreach my $judge (sort {$a->code <=> $b->code} $group->judges) {

		next unless $judge->active;

		my $qualstring = $m->comp("/funclib/judge_rating.mas", judge => $judge, print => "yes");

		print TEXOUT "\\renewcommand{\\baselinestretch}{1.0}\n";
		print TEXOUT "\\begin{minipage}{7in}";
		print TEXOUT "\\Large\n";

		my $school_string = $judge->school->code." ".$judge->school->short_name if $judge->school;
		$school_string = "HIRE" unless $judge->school;

		print TEXOUT "{\\bf ".Tab::texify($group->name)."} \\hfill {\\bf ".&Tab::texify($judge->first." ".$judge->last)." (".$qualstring.") }\\hfill {\\bf ".$school_string." } \n";

		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\raggedright\n";
		print TEXOUT "\\normalsize\n";

		print TEXOUT "\\begin{tabular}{|p{2.2in}|p{2.2in}|p{2.2in}|} \n";

		print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.3pt\]\[5.3pt\]\n";

		print TEXOUT "\\hline \\hline \n";
		print TEXOUT "Affs \\hfill {\\scriptsize (Bold = Winner) } & Negs \\hfill {\\scriptsize (Bold = Winner) }  & Strikes \\\& Conflicts \\\\ \n";

		my @rounds;
		my %round_debater;

		Tab::Entry->set_sql( aff_has_judged => "
			select distinct entry.*, ballot.side as side, panel.flight as flight, round.name as roundname, round.label as roundlabel, ballot.id as ballotid, round.flighted as flighted
			from entry, ballot, panel, round
			where ballot.judge = ?
			and ballot.bye = 0
			and ballot.side = 1
			and ballot.panel = panel.id
			and panel.bye = 0
			and entry.id = ballot.entry
			and	panel.round = round.id
			order by round.name, panel.flight
		");

		my @affs = Tab::Entry->search_aff_has_judged($judge->id);

		foreach my $aff (@affs) { 
			my $roundstring = substr($aff->roundlabel,0,5) if $aff->roundlabel;
			$roundstring = "Rnd ".$aff->roundname unless $aff->roundlabel;
			$roundstring .= " F".$aff->flight if $aff->flighted > 1;
			push @rounds, $roundstring;

			$round_debater{$roundstring}{"affcode"} = $aff->code;
			$round_debater{$roundstring}{"affname"} = $aff->name;
			$round_debater{$roundstring}{"affid"} = $aff->id;
			$round_debater{$roundstring}{"affballotid"} = $aff->ballotid;
			undef $aff;
		}

		Tab::Entry->set_sql( neg_has_judged => "
			select distinct entry.id, ballot.side as side, panel.flight as flight, round.name as roundname, round.label as roundlabel, ballot.id as ballotid, round.flighted as flighted
			from entry, ballot, panel, round
			where ballot.judge = ?
			and ballot.bye = 0
			and ballot.side = 2
			and ballot.panel = panel.id
			and panel.bye = 0
			and entry.id = ballot.entry
			and	panel.round = round.id
			order by round.name, panel.flight
		");

		my @negs = Tab::Entry->search_neg_has_judged($judge->id);

		foreach my $neg (@negs) { 
			my $roundstring = substr($neg->roundlabel,0,5) if $neg->roundlabel;
			$roundstring = " Rnd ".$neg->roundname unless $neg->roundlabel;
			$roundstring .= " F".$neg->flight if $neg->flighted > 1;
			push @rounds, $roundstring;

			$round_debater{$roundstring}{"negcode"} = $neg->code;
			$round_debater{$roundstring}{"negname"} = $neg->name;
			$round_debater{$roundstring}{"negid"} = $neg->id;
			$round_debater{$roundstring}{"negballotid"} = $neg->ballotid;
			undef $neg;
		}

		Tab::BallotValue->set_sql(judge_winners => "
			select distinct ballot_value.*, entry.id as winner, ballot_value.ballot as ballotid
			from ballot, ballot_value, entry, panel
			where ballot.judge = ? 
			and ballot.bye = 0
			and ballot.panel = panel.id
			and panel.bye = 0
			and ballot.entry = entry.id
			and ballot.id = ballot_value.ballot
			and ballot_value.tag = \"ballot\"
			and ballot_value.value = 1
		");

		my @winners = Tab::BallotValue->search_judge_winners($judge->id);
		my %entry_winner = map {$_->winner."-".$_->ballotid => 1} @winners;

		print TEXOUT "\\parbox[t][2.15in][t]{2.2in}{ \n";
		print TEXOUT "\\onehalfspacing\n";

		my %seen = (); 
		@rounds = grep { ! $seen{$_} ++ } @rounds;

		foreach my $roundstring (@rounds) { 

			my $id = $round_debater{$roundstring}{"affid"};
			next unless $id;
			my $code = $round_debater{$roundstring}{"affcode"};
			my $name = $round_debater{$roundstring}{"affname"};
			my $ballotid = $round_debater{$roundstring}{"affballotid"};
			
			print TEXOUT "\\small ";
			print TEXOUT "{";
			print TEXOUT "\\bf " if $entry_winner{$id."-".$ballotid};
			print TEXOUT "\\makebox[1.6in][l]{";
			print TEXOUT Tab::texify($code);
			print TEXOUT " } }";
			print TEXOUT "{\\footnotesize ".Tab::texify($roundstring)." } ";
			print TEXOUT "\n\n";
		}

		print TEXOUT "}";
		print TEXOUT " & ";
		print TEXOUT "\\parbox[t][2.15in][t]{2.2in}{ \n";
		print TEXOUT "\\onehalfspacing\n";

		foreach my $roundstring (@rounds) { 

			my $id = $round_debater{$roundstring}{"negid"};
			next unless $id;
			my $code = $round_debater{$roundstring}{"negcode"};
			my $name = $round_debater{$roundstring}{"negname"};
			my $ballotid = $round_debater{$roundstring}{"negballotid"};
			
			print TEXOUT "\\small ";
			print TEXOUT "{";
			print TEXOUT "\\bf " if $entry_winner{$id."-".$ballotid};
			print TEXOUT "\\makebox[1.6in][l]{";
			print TEXOUT Tab::texify($code);
			print TEXOUT " } }";
			print TEXOUT "{\\footnotesize ".Tab::texify($roundstring)." } ";
			print TEXOUT "\n\n";
		}

		print TEXOUT "}";
		print TEXOUT " & ";
		print TEXOUT "\\parbox[t][2.15in][t]{2.2in}{ \n";
		print TEXOUT "\\onehalfspacing\n";

		foreach my $strike (sort {$a->type cmp $b->type} $judge->strikes) {
			print TEXOUT "\\small ".Tab::texify($strike->name);
			print TEXOUT "\n\n";
		}

		print TEXOUT "}";
		print TEXOUT "\\\\ \n";
		print TEXOUT "\\hline \\hline \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\end{minipage}";
		print TEXOUT "\\vspace{.25in}\n";
		print TEXOUT "\\newline\n";

	}

	close TEXOUT;

	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );

</%init>
