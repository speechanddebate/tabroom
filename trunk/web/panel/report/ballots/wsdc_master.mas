<%args>
	$filename
	$panel_id => undef
	$judge_id => undef
	$event_id => undef
	$chair    => undef
</%args>
<%perl>

	my $filepath = $Tab::file_root."/tmp/".$filename;

	use List::Util 'shuffle';
	use POSIX 'ceil';

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;


	my $round = $panel->round if $panel;
	my $event = $round->event if $round;
	$event = Tab::Event->retrieve($event_id) if $event_id &! $event;
	my $timeslot = $round->timeslot if $round;

	my $aff_string = $event->setting("aff_label");
	my $neg_string = $event->setting("neg_label");

	my $lpw++ unless $event->setting("no_lpw");

	my $max_points = $event->setting("max_points");
	my $min_points = $event->setting("min_points");
	$min_points = 40 unless $min_points;
	$max_points = 80 unless $max_points;

	my $min_fifth = ceil($min_points / 5);
	my $max_fifth = ceil($max_points / 5);

	my $max_entry = $event->setting("max_entry");
	my $min_entry = $event->setting("min_entry");

	my $point_scale = $event->setting("point_scale");
	my $flight_offset = $event->setting("flight_offset");

	my $no_sides++ if $event->setting("no_side_constraints");

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	$event = Tab::Event->retrieve($event_id) unless $event;
	my $tourn = $event->tourn;
	
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start;
	
	if ($round) { 
		my $roundstart = $round->start_time;
		$roundstart = $timeslot->start unless $roundstart;
		$roundstart->set_time_zone($tz);
		$start = $roundstart->clone;
	}

	if ($flight_offset && $panel && $panel->flight > 1) { 
		my $flight = $panel->flight;
		$flight--;
		$start->add( minutes => $flight_offset * $flight) if $flight;
	}

	my $points;
	my $ranks;
	my $winloss;

	if ($panel && $panel->round->tb_set) { 

		foreach my $tb ($panel->round->tb_set->tiebreaks) {
			$points++ if $tb->name eq "points";
			$ranks++ if $tb->name eq "ranks";
			$winloss++ if $tb->name eq "ballot";
			$winloss++ if $tb->name eq "winloss";
		}

	} else { 

		my @round = sort {$a->name <=> $b->name} $event->rounds;
		my $sample = shift @round;

		if ($sample->tb_set) { 
			foreach my $tb ($sample->tb_set->tiebreaks) {
				$points++ if $tb->name eq "points";
				$ranks++ if $tb->name eq "ranks";
				$winloss++ if $tb->name eq "ballot";
				$winloss++ if $tb->name eq "winloss";
			}
		} else { 
			$points++;
			$ranks++;
		}
	}

	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\renewcommand{\\arraystretch}{2.2}\n";
	print TEXOUT "\\setlength{\\parindent}{0pt}\n";

	print TEXOUT "\\noindent\n";

	if ($panel) { 
		print TEXOUT "\\parbox[l][][t]{2.5in}{\n";
		print TEXOUT "\\normalsize \n";
		print TEXOUT "{\\bf Room: ".&Tab::texify($panel->room->name)."} \n\n " if $panel->room;
		print TEXOUT "{\\bf Room: ASK TAB } \n\n " unless $panel->room;
		print TEXOUT "{\\bf Flight ".$panel->flight." Start: ".Tab::nicetime($start)." } \n\n " if $round->flighted > 1;
		print TEXOUT "{\\bf Start: ".Tab::nicetime($start)." } \n\n " if $round->flighted < 2;
		print TEXOUT "{\\bf ".&Tab::texify($event->name)." }";
		print TEXOUT "}";
		print TEXOUT "\\parbox[c][][t]{2.1in}{\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "{\\huge \\bf ".$round->name."} " unless $round->label;
		print TEXOUT "{\\LARGE \\bf ".$round->realname."}" if $round->label;
		print TEXOUT "\\end{center}\n";
		print TEXOUT "} ";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\parbox[r][.5in][t]{2.5in}{\n";
		print TEXOUT "\\vspace{.15in}\n\n \\hfill ";
		print TEXOUT "{\\LARGE \\bf *}" if $judge && $judge->chair;
		print TEXOUT "{\\LARGE \\bf ".&Tab::texify(substr($judge->last.", ".$judge->first, 0, 18))."}" if $judge;
		print TEXOUT "{\\Large \\bf Judge: \\makebox[1.75in]{\\hrulefill}}" unless $judge;
		print TEXOUT "} \\\\ \n";

		unless ($winloss || $ranks || $points) { 
			print TEXOUT "\\medskip \n ";
			print TEXOUT "\\newline\n ";
			print TEXOUT "\\begin{center}\n";
			print TEXOUT "{\\LARGE \\bf \\color{red} You have no tiebreakers set so this ballot is blank.  Set tiebreakers for each round for better results! }";
			print TEXOUT "\\end{center}\n";
		}

	} else { 

		print TEXOUT "{\\bf Room: \\makebox[1.5in]{\\hrulefill} \\hfill Round: \\makebox[.5in]{\\hrulefill} \\hfill Judge: \\makebox[1.5in]{\\hrulefill}}\n\\medskip\\newline\n";

	}

	print TEXOUT "\\begin{center}\n";

	my $logo = $tourn->setting("logo");

	if ($logo) { 

		unless (-e "$Tab::file_root/tmp/".$logo) { 
			system "cd $Tab::file_root/tmp; $Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo;
		}

		if (-e "$Tab::file_root/tmp/".$logo) { 
			print TEXOUT "\\vspace{-20pt}\n";
			print TEXOUT "\\begin{figure}[h!]\n";
			print TEXOUT "\\centerline{\\includegraphics[height=1in]{$logo}}\n";
			print TEXOUT "\\end{figure}\n";
			print TEXOUT "\\vspace{-20pt}\n";
		}

	} else { 

		my $t_start = $tourn->start->set_time_zone($tz);
		my $t_end = $tourn->end->set_time_zone($tz);
		
		my $date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->day.", ".$t_end->year  if $t_start->month == $t_end->month;
		$date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->month_abbr." ".$t_end->day.", ".$t_end->year  unless $t_start->month == $t_end->month;

		print TEXOUT "{\\huge \\bf ".&Tab::texify(uc($tourn->name))." } \\\\ \n";
		print TEXOUT "\\smallskip \n ";
		print TEXOUT "{\\large \\bf ".&Tab::texify($date_string)." } \\\\ \n";
	}

	print TEXOUT "\\end{center} \n";

	my $message = $event->setting("ballot_rules");

	if ($message) { 
		my $strip = HTML::Strip->new();
		$message =~ s/\<li\>//g;
		$message =~ s/\<\/li\>/\n/g;
		$message =~ s/\r/\n\n/g;
		$message =~ s/\n/\n\n/g;
		$message =~ s/<br \/>/\n\n/g;
		$message =~ s/\&nbsp;/ /g;
		$message = $strip->parse( $message );
		chomp $message;
		print TEXOUT "\\footnotesize\n ";
		print TEXOUT "\\noindent\n ";
		print TEXOUT &Tab::texify($message);
		print TEXOUT "\\vspace{.2in}\n";
		print TEXOUT "\\newline \n ";
	}

	my $motion = $round->setting("motion") if $round;

	if ($motion) { 
		my $strip = HTML::Strip->new();
		$motion =~ s/\<li\>//g;
		$motion =~ s/\<\/li\>/\n/g;
		$motion =~ s/\r/\n\n/g;
		$motion =~ s/\n/\n\n/g;
		$motion =~ s/<br \/>/\n\n/g;
		$motion =~ s/\&nbsp;/ /g;
		$motion = $strip->parse( $motion );
		chomp $motion;
		print TEXOUT "\\normalsize\n ";
		print TEXOUT "\\noindent\n ";
		print TEXOUT "{\\bf Motion:} ";
		print TEXOUT &Tab::texify($motion);
		print TEXOUT "\\vspace{.2in}\n";
		print TEXOUT "\\newline \n ";
	}

	my $aff;
	my $neg;

	my $tf_range = "{\\tiny (".(2 * $min_fifth)."-".(2 * $max_fifth).") }";
	my $f_range = "{\\tiny ($min_fifth-$max_fifth) }";
	my $full_range = "{\\tiny ($min_points-$max_points) }";

	my $cols = 2;
	$cols += 4 if $points;
	$cols++ if $ranks;

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel) if $panel;
	my @sides = ($aff_string, $neg_string);

	foreach (1 .. 2) {

		my $side_string = shift @sides;
		my $entry = shift @entries;
		my @students = $entry->students if $entry;

		print TEXOUT "\\begin{minipage}[c]{3.65in}";
		print TEXOUT "\\footnotesize";
		print TEXOUT "\\begin{tabular}{|p{.20in}|p{1.1in}|";
		print TEXOUT "p{.32in}|p{.32in}|p{.32in}|p{.32in}|" if $points;
		print TEXOUT "p{.25in}|" if $ranks;
		print TEXOUT "}\n";

		print TEXOUT "\\hline \n";

		print TEXOUT "\\multicolumn{".$cols."}{|l|}{ \\parbox{3in}{\\truncate{3in}{ \\bf \\small ".Tab::texify($entry->code) if $entry;
		print TEXOUT "\\multicolumn{".$cols."}{|l|}{ \\parbox{3in}{\\truncate{3in}{ \\bf \\small Team Code: \n" unless $entry;

		if ($no_sides) { 
			print TEXOUT " \\hfill ".Tab::texify(uc($aff_string))." \\hspace{.1in} ".Tab::texify(uc($neg_string))." } \\hspace{.1in} {\\footnotesize (Circle One) }";
		} else { 
			print TEXOUT " \\hfill {\\small \\bf ".Tab::texify(uc($side_string))." } }\n";
		}
		 
		print TEXOUT " }} \\\\ \n";

		if ($entry) { 
			print TEXOUT "\\multicolumn{$cols}{|l|}{\\parbox{3in}{ \\centering {\\bf \\footnotesize  TEAM MEMBERS:} \n\n";
			my $counter = 1;
			foreach my $student (sort {$a->id <=> $b->id} @students) { 
				print TEXOUT $counter++.". \\scriptsize ".Tab::texify($student->first." ".$student->last)." \n\n";
			}
			print TEXOUT "~\n\n";
			print TEXOUT "}} \\\\ \n";
		}
		print TEXOUT " \\hline \n";
		print TEXOUT " & \\bf Speaker ";
		print TEXOUT " & \\bf \\tiny Content \n\n $tf_range & \\bf \\tiny Style \n\n $tf_range & \\bf \\tiny Strategy \n\n $f_range & \\bf \\tiny Total \n\n $full_range " if $points;
		print TEXOUT " & \\bf \\scriptsize Ranks " if $ranks;
		print TEXOUT "\\\\ \\hline \n";

		foreach my $position (1, 2, 3, "{\\tiny Reply}") { 
			print TEXOUT " $position  & ";
			print TEXOUT " & & & & " if $points;
			print TEXOUT " & " if $ranks;
			print TEXOUT "\\\\ \\hline \n";
		}

		print TEXOUT "\\multicolumn{".($cols - 1)."}{|r|}{\\parbox{2in}{\\hfill \\normalsize \\bf TEAM TOTAL: }} & \n";
		print TEXOUT "\\\\ \\hline \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\hfill \n";

	}

	print TEXOUT "\n \\normalsize\n";

	if ($winloss) { 

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\vspace{.3in}\n";
		print TEXOUT "\\normalsize\n";
		print TEXOUT "Winning team: \\makebox[2.5in]{\\hrulefill} debating on the \\makebox[1in]{\\hrulefill}\n";
		print TEXOUT "\\hspace{.15in} \\footnotesize Low point win? \\makebox[.5in]{\\hrulefill} \n" if $lpw;
		print TEXOUT "\n";
		print TEXOUT "\\scriptsize\n";

		if ($no_sides) { 
			print TEXOUT "\\makebox[1.4in]{}School/Team\\makebox[2.3in]{} Side (".Tab::texify($aff_string." or ".$neg_string).")";
		} else { 
			print TEXOUT "\\makebox[1.4in]{}School/Team\\makebox[2.5in]{} Side (".Tab::texify($aff_string." or ".$neg_string).")";
			print TEXOUT "\\makebox[1.4in]{}" if $lpw;
		}
		print TEXOUT "\n\n";
		print TEXOUT "\\vspace{.25in}\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n\n";
	}

	print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
	print TEXOUT "\\begin{center}\n";
	print TEXOUT "Signature:  \\makebox[3.25in]{\\hrulefill} ";
	print TEXOUT "Affiliation: \\makebox[2in]{\\hrulefill}";
	print TEXOUT "\n\n";
	print TEXOUT "\\end{center}\n";
	print TEXOUT "\\end{minipage}\n\n";

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel) if $panel;

	if (scalar @judges > 1) { 

		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\medskip \n\n";
		print TEXOUT "\\footnotesize {\\bf *Please chair this round.}\n" if $chair;

		my $other_names;

		foreach my $other (@judges) { 
			next if $other->id == $judge_id;
			$other_names .= ", " if $other_names;
			$other_names .= $other->first." ".$other->last;
		}

		if ($other_names) { 
			print TEXOUT "\\footnotesize {\\bf Other judges on panel: ".Tab::texify($other_names).".  Please do not start until all judges are present.}\n";
		}

		print TEXOUT "\\end{center}\n";
	}

	print TEXOUT "\\vspace{.15in}\n";
	print TEXOUT "\\noindent";
	print TEXOUT "\\makebox[7.25in]{\\hrulefill}\n\n";
	print TEXOUT "\\noindent\n";
	print TEXOUT "Comments \\\& Reason for Decision:\n\n";
	print TEXOUT "\\vspace{.5in}\n";

	if ($point_scale) { 
		my $strip = HTML::Strip->new();
		$point_scale =~ s/\<li\>/*/g;
		$point_scale =~ s/\<\/p\>/\n \n/g;
		$point_scale =~ s/\<\/li\>/\n \n/g;
		$point_scale =~ s/<br \/>/\n\n/g;
		$point_scale =~ s/\&nbsp;/ /g;
		$point_scale = $strip->parse( $point_scale );
		$point_scale = Tab::texify($point_scale);
		$point_scale =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n\n";
		print TEXOUT "\\noindent \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Point Scale:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $point_scale;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\vspace{.5in} \\newline \n. ";
	}

	my $speech_times = $event->setting("speech_times");

	if ($speech_times) { 
		my $strip = HTML::Strip->new();
		$speech_times =~ s/\<li\>/*/g;
		$speech_times =~ s/\<\/p\>/\n \n/g;
		$speech_times =~ s/\<\/li\>/\n \n/g;
		$speech_times =~ s/<br \/>/\n\n/g;
		$speech_times =~ s/\&nbsp;/ /g;
		$speech_times = $strip->parse( $speech_times );
		$speech_times = Tab::texify($speech_times);
		$speech_times =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Speech Times:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $speech_times;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\medskip \\newline \n ";
	}

	close (TEXOUT);

	return;

</%perl>
