<%args>
	$tourn
	$session
</%args>
<%init>
	use POSIX;
	
	my $tourn_id = $tourn->id;

	#Set up the filename and the needed trace files

	my $tourn_name = $tourn->name;
	$tourn_name =~ s/[\W_]//g;

	my $filename = "RoomMaster-".$tourn_name."-".$session->id;
    my $filepath = $Tab::file_root."/tmp/";

	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, landscape => 1 );

    open (TEXOUT, ">>$filepath"."$filename.tex");

	foreach my $day ($m->comp("/funclib/tourn_days.mas", tourn => $tourn)) { 

		# Create a day span object that encapsulates the entire day, to figure out
		# which rounds are on which days for multi-day tournaments.  That way we don't
		# print listings for sites that aren't in use in a given day. 

		my $daystart = DateTime->new( 
			year      => $day->year,
			month     => $day->month,
			day       => $day->day,
			hour      => 00,
			minute    => 00,
			second    => 00,
			time_zone => $tourn->tz
		);

		my $dayend = DateTime->new( 
			year      => $day->year,
			month     => $day->month,
			day       => $day->day,
			hour      => 23,
			minute    => 59,
			second    => 59,
			time_zone => $tourn->tz
		);

		my $dayspan = DateTime::Span->from_datetimes( after => $daystart, before => $dayend );
		my $day_had_rounds;

		SITE:
		foreach my $site ($m->comp("/funclib/tourn_sites.mas", tourn => $tourn)) { 

			# make sure the site has rounds happening this day	
			my @rounds = $m->comp("/funclib/tourn_rounds.mas", tourn => $tourn, site => $site);

			next SITE unless @rounds;

			my $earliest_round_start;
			my $latest_round_end;

			my $today_has_one; 
			my %todays_rounds = ();
		
			ROUND:
			foreach my $round (@rounds) { 

				next ROUND unless $round->timeslot->span->intersects($dayspan);

				$today_has_one++;
				$todays_rounds{$round->id}++;
				$day_had_rounds++;

				$earliest_round_start = $round->timeslot->start->clone
						if ($round->timeslot->start < $earliest_round_start)
						|| (not defined $earliest_round_start);

				$latest_round_end = $round->timeslot->end->clone
						if ($round->timeslot->end > $latest_round_end)
						|| (not defined $latest_round_end);

			}

			next SITE unless $today_has_one;

			my $switch; 
			my $first = 1;
			my $total_blocks;

			# print a listing by room of rounds today at that site. 
			ROOM:
			foreach my $room (sort {$a->name cmp $b->name} $site->rooms) {

				if ($switch < 1 ) { 

					#print the page header
					print TEXOUT "\\hline\n" unless $first;
					print TEXOUT "\\end{tabular}\n" unless $first;
					$first = undef;

					print TEXOUT "\\newpage\n";

					print TEXOUT "\\begin{tabular}{p{9.5in}}\n";
					print TEXOUT "\\normalsize{ ".$day->day_name." ".$day->month_name." ".$day->day." at ".$site->name ."}\\\\ \n";
					print TEXOUT "\\end{tabular}\n";
					print TEXOUT "\\newline\n";


					print TEXOUT "\\begin{tabular}{|p{1in}|";

					my $start_index = $earliest_round_start->clone;
					my $end_index = $latest_round_end->clone;

					$start_index->set_time_zone($tourn->tz);
					$end_index->set_time_zone($tourn->tz);

					my $loop_index = $start_index->clone;
					undef($total_blocks);

					while ($loop_index < $end_index) { 
						$total_blocks++;
						$loop_index->add( minutes => 15 );
					}

					my $size_of_block = sprintf ("%.4f", 1.75 / $total_blocks) if $total_blocks;

					$loop_index = $start_index->clone;
					while ($loop_index < $end_index) { 
						print TEXOUT " p{".$size_of_block."in}|";
						$loop_index->add( minutes => 15 );
					}

					print TEXOUT "}  \n";

					print TEXOUT "\\hline\n";

					print TEXOUT "\\rowcolor[rgb]{1.0,.97,.87}\[6pt\]\[6pt\]\n";

					print TEXOUT " Room ";

					my $timebeat = $start_index->clone;

					while ($timebeat->minute != 0) { 
						$timebeat->add( minutes => 1);
					}

					my $timebeat_dist = $timebeat - $start_index;
					my $dist_fives = ($timebeat_dist->minutes) / 15;

					print TEXOUT " & \\multicolumn{$dist_fives}{" if $dist_fives > 0;
					print TEXOUT " >{\\columncolor[rgb]{1.0,.97,.87}} " if $dist_fives > 0;
					print TEXOUT "l|}{ ".$start_index->hour_12.":".$start_index->strftime('%M')." } \n" if $dist_fives;

					while ($timebeat < $end_index) { 

						# As long as we haven't reached the end of the day, keep ticking
						# out the hours as an index. 

						my $future = $timebeat->clone;
						$future->add( hours => 1); 

						if ($future <= $end_index) { 

							print TEXOUT "& \\multicolumn{4}{";
							print TEXOUT " >{\\columncolor[rgb]{1.0,.97,.87}} ";
							print TEXOUT "l|}{ ".$timebeat->hour_12.":".$timebeat->strftime('%M')." }\n";

						} else { 

							my $endlap = $end_index - $timebeat;
							my $end_fives = ($endlap->delta_minutes) / 15;
							print TEXOUT " & \\multicolumn{$end_fives}{";
							print TEXOUT " >{\\columncolor[rgb]{1.0,.97,.87}} ";
							print TEXOUT " l|}{ ".$timebeat->hour_12.":".$timebeat->strftime('%M')." }\n";

						}

						$timebeat = $future->clone;
					}

					print TEXOUT "\\\\ \n";
					print TEXOUT "\\hline\n";

					$switch = 32;

				}

				my $rowcolor = 1 if ($switch-- %2);

				print TEXOUT "\\rowcolor[rgb]{.85,.85,.85}\[6pt\]\[6pt\]\n"  if $rowcolor;

				# Room name is easy enough
				print TEXOUT "\\truncate{.95in}{".&Tab::texify($room->name)." }\n";

				# If the room is given a special purpose, list it and move on.
				my @roomblocks = $room->blocks;

				my $special_txt;

				foreach my $bl (@roomblocks) { 

					$special_txt .= &Tab::texify($bl->special) if $bl->type eq "special";

				}

				if ($special_txt) { 
					print TEXOUT "\t & \\multicolumn{$total_blocks}{";
					print TEXOUT " >{\\columncolor[rgb]{1.0,.94,.94}} "  if $rowcolor;
					print TEXOUT " >{\\columncolor[rgb]{.87,.92,1.0}} "  unless $rowcolor;
					print TEXOUT "l|}{\\it ".$special_txt." } \\\\ \n";
					next ROOM;
				}
			
				my $start_steps = $earliest_round_start->clone;
				my $end_step = $latest_round_end->clone;

				my @panels = sort {$a->round->timeslot->start <=> $b->round->timeslot->start} $room->panels;

				PANEL:
				foreach my $panel (@panels) { 

					next PANEL unless $todays_rounds{$panel->round->id};

					# Check if we're in a double-booked situation
					my $db = "{\\bf DB}" if $panel->round->timeslot->start < $start_steps;

					# If the start of the panel is not equal to the start of the
					# step, fill in the distance between the last step and this one
					# with a blank

					if ($panel->round->timeslot->start > $start_steps) { 
						my $spacer_duration = $panel->round->timeslot->start->subtract_datetime($start_steps);
						my $spacer_fives = ceil($spacer_duration->delta_minutes / 15);

						foreach (1 .. $spacer_fives) { 
							print TEXOUT " & ";
						}

						$start_steps = $panel->round->timeslot->start->clone;
					}
							
					# Now fill in this panel with a multicolumn of the right length
					my $round_duration;

					if ($db) { 
						$round_duration = 
							$panel->round->timeslot->end->subtract_datetime($start_steps);

					} else { 
						$round_duration = 
							$panel->round->timeslot->end->subtract_datetime($panel->round->timeslot->start)
					}

					my $round_fives = ceil($round_duration->delta_minutes / 15);

					print TEXOUT " & \\multicolumn{$round_fives}{";
					print TEXOUT " >{\\columncolor[rgb]{1.0,.94,.94}} "  if $rowcolor;
					print TEXOUT " >{\\columncolor[rgb]{.87,.92,1.0}} "  unless $rowcolor;
					print TEXOUT "" unless $rowcolor;
					print TEXOUT "l|}{ ".$panel->round->event->abbr." ".$panel->round->name.$panel->letter." }\n";

					$start_steps = $panel->round->timeslot->end->clone;

				}

				if ($latest_round_end > $start_steps) { 
		
						# Fill in the end of the day if the room isn't used for
						# the whole thing.
						my $spacer_duration 
								= $latest_round_end->subtract_datetime($start_steps);

						my $spacer_fives = ceil($spacer_duration->delta_minutes / 15);

						foreach (1 .. $spacer_fives) { 
							print TEXOUT " & ";
						}

				}

				print TEXOUT "\\\\ \n";

			} #end of foreach room 


		} # end of foreach site

		print TEXOUT "\\hline\n" if $day_had_rounds;
		print TEXOUT "\\end{tabular} \n" if $day_had_rounds;

	} #end of foreach day

	close TEXOUT;

	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1, landscape => 1 );

</%init>
