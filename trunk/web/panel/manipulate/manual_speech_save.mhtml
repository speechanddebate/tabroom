<%args>
	$tourn
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my @entries = $event->entries;

	my $congress++ if $event->type eq "congress";

	my %judges_by_panel = ();

	my @panels = $round->panels;
    @panels = map  { $_->[0] } sort { $a->[1] <=> $b->[1] } map  { [$_, $_->letter=~/(\d+)/] } @panels;
    @panels = map  { $_->[0] } sort { $a->[1] cmp $b->[1] } map  { [$_, $_->letter=~/(\D+)/] } @panels;

    my %panel_numbers;
    my $counter = 1;
    foreach my $panel (@panels) {
        $panel_numbers{$counter} = $panel;
		$counter++;
    }   

	foreach my $panel (@panels) { 
		push @{$judges_by_panel{$panel->id}}, $m->comp("/funclib/panel_judges.mas", panel => $panel);
	}

	my %other_panels;
	my %other_panels_judges;

	if ($congress) { 

		foreach my $other_round ($event->rounds) { 

			next if $round_id == $other_round->id;
			next if $other_round->type eq "elim" || $other_round->type eq "final";

			foreach my $other_panel ($round->panels) { 
				push @{$other_panels{$other_panel->letter}}, $other_panel;
				push @{$judges_by_panel{$other_panel->id}}, $m->comp("/funclib/panel_judges.mas", panel => $other_panel);
			}
		}
	}

	ENTRY:
	foreach my $entry (@entries) { 

		next unless $ARGS{$entry->id};
		next unless $panel_numbers{$ARGS{$entry->id}};

		Tab::debuglog("Arg is ".$ARGS{$entry->id}." to panel ".$panel_numbers{$ARGS{$entry->id}}->letter);

		my @panels;

		push @panels, $panel_numbers{$ARGS{$entry->id}};
		push @panels, @{$other_panels{$panel_numbers{$ARGS{$entry->id}}->letter}} if $other_panels{$panel_numbers{$ARGS{$entry->id}} };

		foreach my $panel (@panels) { 

			Tab::debuglog($entry->code." goes into panel ".$panel->letter);

			my $panel_id = $panel->id;
			my @ballots = $m->comp("/funclib/entry_ballots.mas", entry => $entry, round => $panel->round);

			my $ok;

			foreach my $ballot (@ballots) { 
				if ($panel_id && $ballot->panel->id == $panel_id) { 
					$ok++;
				} else { 
					$ballot->delete;
				}
			}

			next ENTRY if $ok;
			next ENTRY unless $panel_id;

			if ($judges_by_panel{$panel_id} && @{$judges_by_panel{$panel_id}}) { 

				foreach my $judge (@{$judges_by_panel{$panel_id}}) { 

					unless (Tab::Ballot->search( panel => $panel_id, judge => $judge->id, entry => $entry->id) ) {
						Tab::Ballot->create({
							panel => $panel_id,
							judge => $judge->id,
							entry => $entry->id
						});
					}

				}
			
			} else { 

				unless (Tab::Ballot->search( panel => $panel_id, entry => $entry->id) ) {
					Tab::Ballot->create({
						panel => $panel_id,
						entry => $entry->id
					});
				}

			}
		}

	}

	my $msg = "Manual panels saved";

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&msg=$msg");

</%init>
