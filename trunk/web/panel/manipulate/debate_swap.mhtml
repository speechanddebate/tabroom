<%args>
	$account
	$panel_id
	$entry_id
	$side
</%args>
<%init>

	my $panel = Tab::Panel->retrieve($panel_id);
	my $entry = Tab::Entry->retrieve($entry_id);

	$m->abort unless $panel;
	$m->abort unless $entry;

	my $round = $panel->round;
	my $event = $round->event;

	my @existing_ballots = $m->comp("/funclib/entry_ballots.mas", entry => $entry, round => $round);

	my %already;

	foreach my $ballot (@existing_ballots) { 

		if ($ballot->panel->id == $panel_id && $ballot->side != $side) { 

			my @other_entry_ballots = Tab::Ballot->search( panel => $panel_id, side => $side);

			my $other;

			foreach my $otherballot (@other_entry_ballots) { 
				$otherballot->side(1) if $side == 2;
				$otherballot->side(2) if $side == 1;
				$otherballot->update;
				$other = $otherballot->entry unless $other;
			}

			foreach my $exist (@existing_ballots) { 
				$exist->side($side);
				$exist->update;
			}
	
			my $msg = $entry->code." swapped sides with ".$other->code if $other;

			Tab::TournChange->create({ 
				type    => 'tabbing',
				event   => $round->event->id,
				tourn   => $round->event->tourn->id,
				account => $account->id,
				text    => $msg
			}); 

			$m->redirect("debate_round_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");

		}

		foreach my $value ($ballot->values) { 
			next unless $ballot;
			$value->delete;
		}

		$ballot->audit("0");
		$ballot->bye("0");
		$ballot->noshow("0");
		$ballot->update;

		$already{$ballot->judge->id."-".$ballot->entry->id}++;  

	}

	my @other_entry_ballots = Tab::Ballot->search( panel => $panel_id, side => $side);

	my $other_side = 1;
	$other_side = 2 if $side == 1;

	my @opponent_ballots = Tab::Ballot->search( panel => $panel_id, side => $other_side);

	if (@opponent_ballots) { 

		foreach my $ballot (@opponent_ballots) { 

			foreach my $value ($ballot->values) { 
				$value->delete;
			}
			
			if ($ballot->judge && $ballot->entry && $already{$ballot->judge->id."-".$ballot->entry->id}++) { 
				$ballot->delete;
			} else { 
				$ballot->audit("0");
				$ballot->bye("0");
				$ballot->noshow("0");
				$ballot->update;
			}
		}
	}

	my $other;

	if (@other_entry_ballots) { 
	
		foreach my $ballot (@other_entry_ballots) { 
			foreach my $value ($ballot->values) { 
				$value->delete;
			}
			$other = $ballot->entry;
			$ballot->entry($entry_id);
			$ballot->audit("0");
			$ballot->bye("0");
			$ballot->noshow("0");
			$ballot->update;
		}

	} else { 

		my $judgeful;

		foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 

			$judgeful++;

			Tab::Ballot->create({
				panel => $panel->id,
				entry => $entry_id,
				judge => $judge->id,
				audit => 0,
				side  => $side
			});
	
		}

		unless ($judgeful) { 

			Tab::Ballot->create({
				panel => $panel->id,
				entry => $entry_id,
				judge => 0,
				audit => 0,
				side  => $side
			});
	
		}

	}

	#Now put the person displaced back where I came from

	if ($other) { 

		if (@existing_ballots) { 

			my $other_side = 1;
			my $panel;
	
			foreach my $ballot (@existing_ballots) { 

				next unless $ballot;

				foreach my $value ($ballot->values) { 
					next unless $value && $value->id;
					$value->delete if $value;
				}

				$ballot->entry($other->id);
				$ballot->audit(0);
				$ballot->bye("0");
				$ballot->noshow("0");
				$ballot->update;
			
				$other_side = 2 if $ballot->side == 1;
				$panel = $ballot->panel;

			}

			my @opponent_existing = Tab::Ballot->search( panel => $panel->id, side => $other_side );
			
			foreach my $ballot (@opponent_existing) { 

				foreach my $value ($ballot->values) { 
					$value->delete;
				}

				$ballot->audit(0);
				$ballot->bye("0");
				$ballot->noshow("0");
				$ballot->update;
			}

		} else { 

			#Give this person a bye.

			my @existing = $round->panels;

			@existing = sort {$b->letter <=> $a->letter} @existing;
			@existing = sort {$b->letter cmp $a->letter} @existing if $round->event->setting("panel_labels") eq "letters";

			my $last = shift @existing;

			my $letter = $last->letter;

			if ($letter eq "Z") { 
				$letter = "AA";
			} elsif ($letter eq "AZ") { 
				$letter = "BA";
			} elsif ($letter eq "BZ") {
				$letter = "CA";
			} elsif ($letter eq "CZ") {
				$letter = "DA";
			} elsif ($letter eq "DZ") {
				$letter = "EA";
			} elsif ($letter eq "EZ") {
				$letter = "FA";
			} else { 
				$letter++;
			}   

			my $bye_panel = Tab::Panel->create({ 
				round  => $round->id,
				letter => $letter,
				flight => 1,
				bye    => 1
			});

			Tab::Ballot->create({
				panel => $bye_panel->id,
				entry => $other->id,
				bye   => 1,
				audit => 0,
				judge => 0
			});

		}

	} else { 

		# Otherwise, delete the ballots that are now unused, and the panel too
		# if it's just a bye placeholder.

		my $bye_panel;

		foreach my $ballot (@existing_ballots) { 
			next unless $ballot && $ballot->id;
			$bye_panel = $ballot->panel if $ballot->panel->bye;
			$ballot->delete;
		}

		$bye_panel->delete if $bye_panel;

	}

	my $aff_string = $event->setting("aff_label");
	my $neg_string = $event->setting("neg_label");
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $side_string = $aff_string if $side == 1;
	$side_string = $neg_string if $side == 2;

	my $msg = $entry->code." was swapped into ".$side." of section ".$panel->letter;
	$msg = $entry->code." was swapped for ".$other->code if $other;

    Tab::TournChange->create({ 
        type    => 'tabbing',
        event   => $round->event->id,
        tourn   => $round->event->tourn->id,
        account => $account->id,
        text    => $msg
    }); 

	$m->redirect("debate_round_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");

</%init>
