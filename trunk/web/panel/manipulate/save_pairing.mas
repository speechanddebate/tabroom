<%args>
	$round_id
	$team1
	$seed1
	$wins1
	$team2
	$seed2
	$wins2
	$bracket_to_return
</%args>

<%flags>
        inherit => undef
</%flags>

<%perl>

	#print "Round:".$round_id."<br>";
	#print "Team1:".$team1."<br>";
	#print "Seed1:".$seed1."<br>";
	#print "wins1:".$wins1."<br>";
	#print "Team2:".$team2."<br>";
	#print "Seed2:".$seed2."<br>";
	#print "wins2:".$wins2."<br>";

	my $bye = 0;
	my $bracket = $wins1;

	Tab::Panel->set_sql(check_already => "
		select distinct panel.*
		from panel, ballot
		where panel.round = ? 
		and panel.id = ballot.panel
		and ballot.entry = ? 
	");

	my $already1 = Tab::Panel->search_check_already($round_id, $team1)->first;
	my $already2 = Tab::Panel->search_check_already($round_id, $team2)->first;

	if ($already1 || $already2) { 
		return;
	} else { 

		Tab::Round->set_sql( max_letter => "select max(cast(letter as signed)) from panel where round = ?");

		my $letter = Tab::Round->sql_max_letter->select_val($round_id);
		$letter++;

		if ( $wins2 > $wins1 ) { 
			$bracket = $wins2; 
		}
		
		if ($team2 == -1) { 
			$bye = 1; 
		}

		my $panel = Tab::Panel->create({
			round   => $round_id,
			bye     => $bye,
			letter  => $letter,
			bracket => $bracket,
			flight  => 1
		});

		#necessary for return value
		if ($panel->id) { print $panel->id; } else { print "This failed"; }
			
		my $pullup = 0;

		if ( $wins2 > $wins1 ) { 
			$pullup = 1; 
		}

		Tab::Ballot->create({
			panel  => $panel->id,
			judge  => 0,
			entry  => $team1,
			side   => 1,
			audit  => $bye,
			seed   => $seed1,
			pullup => $pullup
		});

		if ($team2 > -1) {

			$pullup = 0;

			if ($wins1 > $wins2) { 	
				$pullup = 1; 
			}

			Tab::Ballot->create({
				panel  => $panel->id,
				judge  => 0,
				entry  => $team2,
				side   => 2,
				audit  => $bye,
				seed   => $seed2,
				pullup => $pullup
			});
		
		}

		unless ( $bracket_to_return == -42 ) { 	$m->redirect("manual_powermatch.mhtml?round_id=$round_id&bracket=$bracket_to_return"); }

	}
	
</%perl>
