<%args>
	$round_id
	$bracket_to_pair
	$from_main => undef
	$fromjava => undef
</%args>
<%perl>

#load stuff in

	my $round = Tab::Round->retrieve($round_id);
	my $oddround=1; if (int($round->name/2) == $round->name/2) { $oddround= 0 };

	my @round_dummy = Tab::Round->search( name=>$round->name-1, event=>$round->event );	

	my $round_for_seeding = Tab::Round->retrieve( $round_dummy[0]->id );
		
	my ($entry_by_id_hash_ref, $precluded_hash_ref) = $m->comp("/funclib/make_pairing_hash.mas", round_id => $round->id);			
	my %entry_by_id = %{$entry_by_id_hash_ref};

#create a string that holds all entries

	my $entrylist;
	
	foreach my $key (keys %entry_by_id) {
		if ($entry_by_id{$key}{'placement'} == $bracket_to_pair) {
			if ($entrylist ne "") { $entrylist .= " or "; }
			$entrylist .= " ballot.entry=$key ";
		}
	}

#perform delete

	if ($entrylist) { 

		Tab::BallotValue->set_sql( delete_round => "
			delete ballot_value 
			from ballot_value, ballot, panel
			where panel.round = $round_id
			and panel.id = ballot.panel
			and ballot.id = ballot_value.ballot
			and ($entrylist)
		");

		Tab::Ballot->set_sql( delete_round => "
			delete ballot, panel from ballot, panel
			where panel.round = $round_id
			and panel.id = ballot.panel
			and ($entrylist)
		");

		Tab::BallotValue->sql_delete_round->execute();	
		Tab::Ballot->sql_delete_round->execute();

	}

#	print $entrylist."<br>";
		
	if ($from_main || $fromjava) {
		$m->redirect("manual_powermatch.mhtml?round_id=$round_id&bracket=$bracket_to_pair&msg=Pairings for bracket deleted");
	}

	return;
	
</%perl>
