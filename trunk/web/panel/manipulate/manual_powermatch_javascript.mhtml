<%args>
	$account
	$round_id
	$bracket            => undef
	$entries_hash_ref   => undef
	$precluded_hash_ref => undef
	$team_to_pair       => undef
</%args>
<%init>
	#WARN CHRIS ABOUT SAVE_PAIRING.MAS

	#set to zero to suppress messages, 1 to enable
	my $debug=0;
	print "At load bracket is $bracket<br>" if $debug;
	
	# Works off of 4 basic global hash/arrays; this allows the functions to
	# access the information they need @entries is a global array of all
	# entries in the event; %entries is a hash with record and SOP information
	# in it %precluded stores which teams can't hit each other; %bracket are
	# the teams in the bracket being paired
	# for top 3 tables, 0=code, 1=W, 2=seed, 3=SOP, 4=TB2, 5=seed w/o wins, 6=oppW, 7=side due, 8=bracket, 9=oppon, 10=bye button, 11=pull button, 12=entry id
	
	use POSIX;
	use List::Util 'shuffle';
	use Time::HiRes qw( time );

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $round_name = $round->name;
	$bracket = $round_name - 1 unless defined $bracket;
	print "After check bracket is $bracket<br>" if $debug;
	
	my $bracket_not_set++ if $event->setting("bracket_set_for") != $round_id;

	my $oddround = 1 if int($round->name) % 2;
	$oddround = 1 if $event->setting("no_side_constraints");

	print "Odd round marker:".$oddround."<br>" if $debug;
	my $start = time(); 

	#load the pairing hash	
	($entries_hash_ref, $precluded_hash_ref) = $m->comp("/funclib/make_pairing_hash.mas", round_id => $round->id);			

	my %entries = %{$entries_hash_ref};
	my %precluded = %{$precluded_hash_ref};
	
	my $end = time();
	if ($debug) {
		print "hash setup time:  "; printf("%.2f\n", $end - $start); print "<Br>";
	}

	my $nteams = keys %entries;
	my $dummy = keys %precluded;
	if ($debug) {	
		print "n entries from hash:".$nteams."<br>";
		print "n preclusions from hash:".$dummy."<br>";
		$end = time();
		print "Current round setup time:  "; printf("%.2f\n", $end - $start); print "<br>";
	}

	$bracket = $round_name - 1 if ($bracket == -1 and $nteams>50);
		
	sub hasconflict {

		my ($team1, $team2, %precluded_ref) = @_;	
		
		my $returnvalue = 0;

		if ($precluded_ref{$team1}{$team2} == 1) { $returnvalue = 1; }

		if ($precluded_ref{$team2}{$team1} == 1) { $returnvalue = 1; }
		
		if ($team1 == $team2) { $returnvalue = 1; }
		
		return $returnvalue;

	}

#	Declare the variables to mark the number of teams in the bracket

	my $aff_teams_in_bracket = 0;
	my $neg_teams_in_bracket = 0;

#	Count paired and unpaired teams in the bracket

	my $paired_teams = 0;
	my $unpaired_teams = 0;

	foreach my $key (keys %entries) {
		if ( ($entries{$key}{'placement'} == $bracket or $bracket == -1) and $entries{$key}{'opponent'} > 0 ) { $paired_teams++; }
		if ( ($entries{$key}{'placement'} == $bracket or $bracket == -1) and $entries{$key}{'opponent'} < 1 ) { $unpaired_teams++; }
	}
	
	sub had_bye_already {

		my ($team) = @_;

		Tab::Ballot->set_sql(  byes => "
			select distinct ballot.id
			from ballot
			where ballot.entry = ? 
			and ballot.bye = 1
		");

		Tab::Ballot->set_sql(  panel_byes => "
			select distinct ballot.id
			from ballot, panel
			where ballot.entry = ? 
			and ballot.panel = panel.id
			and panel.bye = 1
		");
	
		my @byes = Tab::Ballot->search_byes($team);
		push @byes, Tab::Ballot->search_panel_byes($team);

		my $warn = "This team has already received a bye.  Proceed?" if @byes;
		return $warn;
	}
	
	print "bracket is $bracket<br>" if $debug;
	
	my $display_flag;
				
</%init>

	<div class="main" display="table" >

	<script>

		showbracket = function(bracket) {
		
			//SET VARIABLES
			var BracketIn; var row_ctr;
						
			//UPDATE AFF BRACKET
			var MasterTable = document.getElementById("affbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			row_ctr=0;
			for (var i = 1; i < TableRows.length; i++) {
				BracketIn = parseFloat(TableRows[i].cells[8].textContent); 
				TableRows[i].style.display = "none" ;
				if ( BracketIn == bracket || bracket == -1 ) {  
					TableRows[i].style.display = "table-row" ; 
					row_ctr++;
					TableRows[i].className = "rightalign padcell odd"; 					
					if ((row_ctr % 2) == 0) { TableRows[i].className = "rightalign padcell even"; }
				}
				if (TableRows[i].cells[9].textContent.trim() == "Choose" ) {  
					TableRows[i].cells[10].style.display = "table-cell";
					TableRows[i].cells[11].style.display = "table-cell";
				}

			}
			
			//UPDATE NEG BRACKET
			var MasterTable = document.getElementById("negbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			row_ctr=0;
			for (var i = 1; i < TableRows.length; i++) {
				BracketIn = parseFloat(TableRows[i].cells[8].textContent); 
				TableRows[i].style.display = "none" ;
				if ( BracketIn == bracket || bracket == -1 ) {  
					TableRows[i].style.display = "table-row" ; 
					row_ctr++;
					TableRows[i].className = "rightalign padcell odd"; 					
					if ((row_ctr % 2) == 0) { TableRows[i].className = "rightalign padcell even"; }
				}
				if (TableRows[i].cells[9].textContent.trim() == "Choose" ) {  
					TableRows[i].cells[10].style.display = "table-cell";
					TableRows[i].cells[11].style.display = "table-cell";
				}

			}

			//UPDATE UNPAIRED TABLE
			var MasterTable = document.getElementById("unpaired");
			var TableRows = MasterTable.getElementsByTagName("tr");
			var Oppn; 
			row_ctr=0;
			for (var i = 1; i < TableRows.length; i++) {
				BracketIn = parseFloat(TableRows[i].cells[8].firstChild.nodeValue); 
				Oppn = parseFloat(TableRows[i].cells[9].firstChild.nodeValue); 
				TableRows[i].style.display = "none" ;
				if ( BracketIn != bracket && (isNaN(Oppn) == true  || Oppn == 0) ) {  
					TableRows[i].style.display = "table-row" ; 
					row_ctr++;
					TableRows[i].className = "rightalign padcell odd"; 					
					if ((row_ctr % 2) == 0) { TableRows[i].className = "rightalign padcell even"; }
				}
			}

//			UPDATE THE HEADINGS AT THE TOP
			var headingDiv       = document.getElementById("bracketlabel");
			headingDiv.innerHTML = "<H4>" + bracket + " win bracket</H4>";
			var headingDiv       = document.getElementById("affheader");
			headingDiv.innerHTML = "<H5>Affirmative " + bracket + "-win bracket</H5>";
			var headingDiv       = document.getElementById("negheader");
			headingDiv.innerHTML = "<H5>Negative " + bracket + "-win bracket</H5>";
			
//			UPDATE THE BRACKET PAIRING FUNCTIONS
			
			var curr_rd = <% $round_id %>;
			document.getElementById("autopairlink").href = "/panel/round/pair_bracket.mas?round_id=" + curr_rd + "&bracket_to_pair=" + bracket + "&fromjava=true";		
			document.getElementById("collapse_up").href = "collapse_bracket.mas?round_id=" + curr_rd + "&bracket=" + bracket + "&pull_iterator=1&fromjava=true";
			var adj_bracket = parseFloat(bracket) + 1;
			var max_wins = <% $round->name %> -1 ;
			var pull_iterator = 1;
			if ( adj_bracket > max_wins ) { adj_bracket = max_wins; pull_iterator = 0;}
			document.getElementById("collapse_up").innerHTML = "Collapse " + bracket + "-wins into " + adj_bracket + "-win bracket";
			document.getElementById("collapse_up").href = "collapse_bracket.mas?round_id=" + curr_rd + ">&bracket=" + bracket +"&pull_iterator=" + pull_iterator + "&fromjava=true";
			var adj_bracket = parseFloat(bracket) - 1;
			pull_iterator = -1;
			if (adj_bracket < 0) { adj_bracket = 0; pull_iterator = 0; }
			document.getElementById("collapse_down").innerHTML = "Collapse " + bracket + "-wins into " + adj_bracket + "-win bracket";
			document.getElementById("collapse_down").href = "collapse_bracket.mas?round_id=" + curr_rd + ">&bracket=" + bracket +"&pull_iterator=" + pull_iterator + "&fromjava=true";
			document.getElementById("dump_bracket").innerHTML = "Dump debates in " + bracket + "-win bracket";
			document.getElementById("dump_bracket").href = "dump_bracket.mas?round_id=" + curr_rd + "&bracket_to_pair=" + bracket +"&fromjava=true";
			document.getElementById("dump_and_autopair_bracket").innerHTML = "Dump debates in " + bracket + "-win debates & autopair";
			document.getElementById("dump_and_autopair_bracket").href = "/panel/round/pair_bracket.mas?round_id=" + curr_rd + "&bracket_to_pair=" + bracket + "&delete_existing=Seaver&fromjava=true";

			count_paired(bracket);			
					
		}
		
		count_paired = function(bracket) {

			//this is totally annoying and should be un-necessary but otherwise it doesn't work
			var due_aff=0; var due_neg=0; var n_unpaired=0;
						
			//UPDATE AFF BRACKET
			var MasterTable = document.getElementById("affbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				BracketIn = parseFloat(TableRows[i].cells[8].textContent); 
				if ( BracketIn == bracket ) {  
					due_aff++; 
					if (TableRows[i].cells[9].textContent.trim() == "Choose" ) {  
						n_unpaired++; //window.alert("Counted " + TableRows[i].cells[0].textContent.trim() + " " + TableRows[i].cells[9].textContent.trim()); 
					}	
				}
			}
			
			//UPDATE NEG BRACKET
			var MasterTable = document.getElementById("negbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			row_ctr=0;
			for (var i = 1; i < TableRows.length; i++) {
				BracketIn = parseFloat(TableRows[i].cells[8].textContent); 
				if ( BracketIn == bracket ) {  
					due_neg++; 
					if (TableRows[i].cells[9].textContent.trim() == "Choose" ) {  
						n_unpaired++; //window.alert("Counted " + TableRows[i].cells[0].textContent.trim() + " " + TableRows[i].cells[9].textContent.trim());
					}	
				}

			document.getElementById("due_aff").innerHTML = due_aff;
			document.getElementById("due_neg").innerHTML = due_neg;
			document.getElementById("paired_already").innerHTML = due_neg + due_aff - n_unpaired;
			document.getElementById("left_to_pair").innerHTML = n_unpaired;

			}

		}
		
		pullme = function(table_from, pull_direction, entry) {
	
			//change the table they are in
			var current_row = document.getElementById(table_from+entry);
			var BracketIn = parseFloat(current_row.cells[8].firstChild.nodeValue); 		
			var NewBracket;
			if (pull_direction == 'DOWN' ) NewBracket = BracketIn - 1;
			if (pull_direction == 'UP' ) NewBracket = BracketIn + 1;
			current_row.cells[8].innerHTML = NewBracket;
			
			//change the unpaired table
			if (table_from == "aff" || table_from == "neg" ) {
				var current_row = document.getElementById('unp'+entry);
				current_row.cells[8].innerHTML = NewBracket;
				showbracket(BracketIn);
			}
			
			if (table_from == "unp") {

				try {
				var current_row = document.getElementById('aff'+entry);
				current_row.cells[8].innerHTML = NewBracket;
				} catch(err) {}

				try {
				var current_row = document.getElementById('neg'+entry);
				current_row.cells[8].innerHTML = NewBracket;
				} catch(err) {}

				showbracket(NewBracket);
			}
			
			//save it
			$.post("pullup_javascript.mas",{ bracket: NewBracket, team: entry }); 

		}

		update_screen_after_bye = function(panel_id, entry, wins) {

			var entry_name;

			//update their row for the onscreen display
			try {
				var current_row = document.getElementById('aff'+entry);
				entry_name = current_row.cells[0].textContent;
				current_row.cells[9].innerHTML = "<a class='white fullblock padless' onclick='deletepanel( " + panel_id + ", " + entry + ", -1) '>BYE</a>";
				current_row.cells[10].style.display = "none" ; current_row.cells[11].style.display = "none" ;
			} catch(err) {}

			try {
				var current_row = document.getElementById('neg'+entry);
				entry_name = current_row.cells[0].textContent;
				current_row.cells[9].innerHTML = "<a class='white fullblock padless' onclick='deletepanel(" + panel_id + ", " + entry +", -1)'>BYE</a>";
				current_row.cells[10].style.display = "none" ; current_row.cells[11].style.display = "none" ;
			} catch(err) {}
			
			try {
				var current_row = document.getElementById('unp'+entry);
				current_row.cells[9].innerHTML = -1;
				entry_name = current_row.cells[0].textContent;
				current_row.style.display = "none" ;
			} catch(err) {}

			//add it to the pairings table
			var my_table = document.getElementById("pairings");
			var my_row = my_table.insertRow();
			my_row.id = "pair"+panel_id;
			var cell1 = my_row.insertCell(0);
			var cell2 = my_row.insertCell(1);
			var cell3 = my_row.insertCell(2);
			cell1.innerHTML = "<span class='oneeighty nowrap'>" + entry_name + "</span><span class='smallspan'>" + wins + "wins BYE </span>";
			cell2.innerHTML = "<span class='oneeighty nowrap'> BYE </span>";
			cell3.innerHTML = "<a class='dkred fullblock centeralign' onclick='deletepanel( " + panel_id + ", " + entry + ", -1 );'>Delete</a>";
			
		}
		
		givebye = function(entry, hadbye, wins) {

			//Give user abort option if had bye before
			if (hadbye.length > 5) {
				var doit = window.confirm(hadbye);
				if ( doit == false ) { return; }
			}

			//store the bye and call screen update
			var rd_id= <% $round_id %>;
			var bracket=<% $bracket %>;
			var panel_id; 
			$.post("save_pairing.mas",{ round_id: rd_id, team1: entry, wins1: wins, seed1: wins, team2: -1, wins2: 0, seed2: 0, bracket_to_return: -42 }, function(dummy){ 
				panel_id = parseFloat(dummy); update_screen_after_bye(panel_id, entry, wins);  }); 

		}
		
		deletepanel = function(panel_id, aff, neg) {

			//delete the row from the pairings
			var current_row = document.getElementById("pair"+panel_id);
			current_row.parentNode.removeChild(current_row);
			
			//update the other 3 tables
			
			//GOTTA ADD THE TEAM TO THE CHOOSE BUTTON
			
			try {
				var current_row = document.getElementById('aff'+aff);
				current_row.cells[9].innerHTML = "<a class='dkblue fullblock centeralign' onclick='save_pairing( 1, " + current_row.cells[12].innerHTML + ", " + current_row.cells[1].innerHTML + ", " + current_row.cells[2].innerHTML + ")' > Choose </a>";

			} catch(err) {}

			try {
				var current_row = document.getElementById('neg'+neg);
				current_row.cells[9].innerHTML = "<a class='dkblue fullblock centeralign' onclick='save_pairing( 2, " + current_row.cells[12].innerHTML + ", " + current_row.cells[1].innerHTML + ", " + current_row.cells[2].innerHTML + ")' > Choose </a>";

			} catch(err) {}
			
			try {
				var current_row = document.getElementById('unp'+aff);
				current_row.cells[9].innerHTML = 0;
			} catch(err) {}
			try {
				var current_row = document.getElementById('unp'+neg);
				current_row.cells[9].innerHTML = 0;
			} catch(err) {}

			var bracket = document.getElementById("bracketselector").value;			
			showbracket(bracket);
			
			//process in database
			$.post("dump_panel.mas",{ panel_id: panel_id }); 

		}
		
		testfunction = function() {

			var dummy;	
			$.post("test.mas",{suggest:42},function(result){
			    window.alert(result);
			    dummy = result;
			  });

			window.alert("call finished");
			window.alert("dummy is " + dummy); 
			window.alert("function done");  
  		}

		show_opponents = function(entry, entry_name, wins, seed) {

			//update header
			var instr = document.getElementById('instruction_header');
			instr.innerHTML = "<h5>Finding an opponent for " + entry_name + " </h5>";
			
			//store teeam id in team_to_pair element
			var team_to_pair = document.getElementById('team_to_pair_entry');
			team_to_pair.innerHTML = entry;
			var team_to_pair = document.getElementById('team_to_pair_wins');
			team_to_pair.innerHTML = wins;
			var team_to_pair = document.getElementById('team_to_pair_seed');
			team_to_pair.innerHTML = seed;
			
			//reset anchor styles
			reset_anchor_styles();
			
			//update conflicts
			var MasterTable = document.getElementById("preclusion_data");
			var TableRows = MasterTable.getElementsByTagName("tr");
			row_ctr=0;
			for (var i = 1; i < TableRows.length; i++) {
				if ( TableRows[i].cells[0].textContent == entry || TableRows[i].cells[1].textContent == entry ) {  
					var to_change;
					if (TableRows[i].cells[0].textContent == entry) { to_change = TableRows[i].cells[1].textContent.trim(); }
					if (TableRows[i].cells[1].textContent == entry) { to_change = TableRows[i].cells[0].textContent.trim(); }
					try {
						var current_row = document.getElementById('aff'+to_change);
						var curr_anchor = current_row.cells[0].firstElementChild;
						curr_anchor.className = "block padless dkred";
						if ( parseFloat(current_row.cells[12].textContent) == entry ) { curr_anchor.className = "block padless blue"; }
					} catch(err) { }
					try {	
						var current_row = document.getElementById('neg'+to_change);
						var curr_anchor = current_row.cells[0].firstElementChild;
						curr_anchor.className = "block padless dkred";
						if ( parseFloat(current_row.cells[12].textContent) == entry ) { curr_anchor.className = "block padless blue"; }
					} catch(err) {}
					try {	
						var current_row = document.getElementById('unp'+to_change);
						var curr_anchor = current_row.cells[0].firstElementChild;
						curr_anchor.className = "block padless dkred";
					} catch(err) {}

				}
			}


		}

		reset_anchor_styles = function() {
			
			var MasterTable = document.getElementById("affbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var curr_anchor = TableRows[i].cells[0].firstElementChild;
				curr_anchor.className = "plain block padless white";
			}
			var MasterTable = document.getElementById("negbracket");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var curr_anchor = TableRows[i].cells[0].firstElementChild;
				curr_anchor.className = "plain block padless white";
			}

			var MasterTable = document.getElementById("unpaired");
			var TableRows = MasterTable.getElementsByTagName("tr");
			for (var i = 1; i < TableRows.length; i++) {
				var curr_anchor = TableRows[i].cells[0].firstElementChild;
				curr_anchor.className = "plain block padless white";
			}

		}	

		update_screen_after_pairing = function(panel_id, aff, neg, bracket) {

			var current_row;
			
			//pull aff name & wins
			current_row = document.getElementById('aff'+aff);
			var aff_name = current_row.cells[0].textContent;
			var aff_wins = current_row.cells[1].textContent;
			//pull neg name & wins
			current_row = document.getElementById('neg'+neg);
			var neg_name = current_row.cells[0].textContent;
			var neg_wins = current_row.cells[1].textContent;
			
			//update aff row for the onscreen display, plus suppress the action buttons
			current_row = document.getElementById('aff'+aff);
			current_row.cells[9].innerHTML = "<a class='plain fullblock padless' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ") '>" + neg_name + "</a>";
			current_row.cells[10].style.display = "none" ; current_row.cells[11].style.display = "none" ;

			//update neg row for the onscreen display and suppress action buttons
			current_row = document.getElementById('neg'+neg);
			current_row.cells[9].innerHTML = "<a class='plain fullblock padless' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ") '>" + aff_name + "</a>";
			current_row.cells[10].style.display = "none" ; current_row.cells[11].style.display = "none" ;

			//update unpaired table
			current_row = document.getElementById('unp'+aff);
			current_row.cells[9].innerHTML = neg;
			current_row = document.getElementById('unp'+neg);
			current_row.cells[9].innerHTML = aff;
			
			//add it to the pairings table
			var my_table = document.getElementById("pairings");
			var my_row = my_table.insertRow();
			my_row.id = "pair"+panel_id;
			var cell1 = my_row.insertCell(0);
			var cell2 = my_row.insertCell(1);
			var cell3 = my_row.insertCell(2);
			cell1.innerHTML = "<span class='oneeighty nowrap'>" + aff_name + "</span><span class='smallspan'>" + aff_wins + "wins </span>";
			cell2.innerHTML = "<span class='oneeighty nowrap'>" + neg_name + "</span><span class='smallspan'>" + neg_wins + "wins </span>";
			cell3.innerHTML = "<a class='dkred fullblock centeralign' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ");'>Delete</a>";

			//update header
			var instr = document.getElementById('instruction_header');
			instr.innerHTML = "<h5>Tap an entry code in the table below to find a match; tap an opponent to delete match:</h5>";
			
			count_paired(bracket);
			
		}

		save_pairing = function( side, entry, wins, seed ) {
		
			//pull the entry team row
			var table_from = 'aff';
			if ( side == 2 ) { table_from = 'neg'; }
			var current_row = document.getElementById(table_from+entry);
			var bracket = current_row.cells[8].textContent;
			
			//let the user bail if there's a conflict
			if ( current_row.cells[0].firstElementChild.className.trim() == "block padless dkred") {
				var doit = window.confirm("These teams have a conflict; click OK to pair them anyway or cancel to cancel:");
				if ( doit == false ) { return; }
			}
						
			//get round
			var curr_rd = <% $round_id %>;
	
			//load team_to_pair values
			var team_to_pair_entry = document.getElementById('team_to_pair_entry').innerHTML;
			var team_to_pair_wins = document.getElementById('team_to_pair_wins').innerHTML;
			var team_to_pair_seed = document.getElementById('team_to_pair_seed').innerHTML;
			
			//set sides correctly
			var team1; var wins1; var seed1; var team2; var wins2; var seed2;
			
			if ( side == 1) {
				team1 = entry; wins1 = wins; seed1 = seed;
				team2 = team_to_pair_entry; wins2 = team_to_pair_wins; seed2 = team_to_pair_seed;
			} else {
				team1 = team_to_pair_entry; wins1 = team_to_pair_wins; seed1 = team_to_pair_seed;
				team2 = entry; wins2 = wins; seed2 = seed;
			}
			
			//save it
			
			$.post("save_pairing.mas",{ round_id: curr_rd, team1: team1, wins1: wins1, seed1: seed1, team2: team2, wins2: wins2, seed2: seed2, bracket_to_return: -42 }, function(dummy){ 
				panel_id = parseFloat(dummy); 
				update_screen_after_pairing(panel_id, team1, team2, bracket); 
			}); 

			//clean up screen
			reset_anchor_styles();
			showbracket(bracket);

		}
						
	</script>

		<div class="block padno">
			<span class="half inline"> 
				<h4>Round <% $round->name %> Manual Pairing</h4>
			</span>
		
%			unless ($bracket_not_set) { 
				<span class="right">
					<h4 id="bracketlabel"><% $bracket ? $bracket : 0 %> win bracket</h4> 
				</span>
%			}
		</div>

%		if ($bracket_not_set) { 

%			my $other_round_id = $event->setting("bracket_set");
%			my $other_round = Tab::Round->retrieve($other_round_id) if $other_round_id;

%			if ($other_round) { 

				<p>
					Current brackets are set for <% $other_round->realname %>.
					Recalculating brackets will mess with that round unless
					it's already completed.
				</p>

				<div class="evenrow centeralign block">
					<a class="inline dkblue" href="reset_bracket.mas?round_id=<% $round_id %>&winsonly=true&fromjava=true">
						Calculate Initial Brackets
					</a>
				</div>

%			} else { 
%				$m->redirect("reset_bracket.mas?round_id=$round_id&winsonly=true");
%			}


%		} else { 

%			if ($team_to_pair > 0) {

				<div id="instruction_header" class="block padless centeralign">
					<h5>Finding an opponent for <% $entries{$team_to_pair}{'code'} %></h5>
				</div>

%			} else {

				<p  id="instruction_header" class="explain centeralign padless">
					Tap an entry code in the table below to find a match; tap an opponent to delete match:
				</p>
%			}
		
			<& /funclib/tablesorter.mas, table => "affbracket" &> 
		
%			unless($oddround) {		
				<h5 id="affheader">Affirmative <% $bracket %>-win Bracket</h5>
%			} 		

			<table cellpadding="3" id="affbracket" class="martop">
		
				<thead>
					<tr class="yellowrow">
						<th class="smaller" title="Entry Designation">Code</th>
						<th class="smaller" title="Rounds Won">W</th>
						<th class="smaller" title="Seed" >Seed</th>
						<th class="smaller" title="Seed + Opponent Average Seed">SOP</th>
						<th class="smaller" title="2nd Tiebreaker (usually Points)">TB2</th>
						<th class="smaller" title="Overall Seed Excluding Win/Loss">2Sd</th>
						<th class="smaller" title="Average Opponents' Wins">OW</th>
%						$display_flag="style='display:table-cell;'"; $display_flag="style='display:none;'" if $oddround; 
						<th class="smaller" title="Side Due" <% $display_flag %>>Due</th>
						<th class="smaller" title="Bracket Placement">Brkt</th>
						<th class="smaller" title="Opponent This Round">Vs</th>
						<th class="smaller nosort" colspan="3">Action</th>
					</tr>
				</thead>
				
				<tbody style="font-size: 90%;">
			
%				foreach my $key (sort {$entries{$a}->{'SOP'} <=> $entries{$b}->{'SOP'} || $entries{$a}->{'seed'} <=> $entries{$b}->{'seed'} } keys(%entries)) {

%					if ($key and $key > -1 and ($entries{$key}{sidedue} == 1 or $oddround == 1) ) {

%						$aff_teams_in_bracket++;

%						$display_flag="style='display:none;'"; if ($entries{$key}{'placement'} == $bracket or $bracket == -1) { $display_flag="" }

						<tr class="<% $key == $team_to_pair ? "lirdrow" : "" %> rightalign padcell" <% $display_flag %> id="aff<% $key %>" >

							<!-- Col 0, entry -->
							<td class="leftalign">
%								unless ($key == $team_to_pair) { 
									<a class="<% hasconflict($team_to_pair, $key, %precluded) ? "dkred" : ($team_to_pair == $key ) ? "blue" : "white" %> block padless white" 
									onclick="show_opponents( <% $key %>, '<% $entries{$key}{'code'} %>', <% $entries{$key}{'wins'} %>, <% $entries{$key}{'seed'} %> )">
%								}
									<% $entries{$key}{'code'} %>
								</a>
							</td>
							
							<!-- Col 1, wins -->
							<td>
								<% $entries{$key}{'wins'} %>
							</td>

							<!-- Col 2, seed -->
							<td>
								<% $entries{$key}{'seed'} %>
							</td>
			
							<!-- Col 3, SOP -->			
							<td>
								<% sprintf("%.1f", $entries{$key}{'SOP'}) %>
							</td>

							<!-- Col 4, TB after wins -->
							<td>
								<% sprintf("%.1f", $entries{$key}{'next_tb'}) %>
							</td>
								
							<!-- Col 5, seed w/o wins -->
							<td>
								<% $entries{$key}{'seed_nowins'} %>
							</td>

							<!-- Col 6, opp wins -->
							<td>
								<% sprintf("%.1f", $entries{$key}{'opp_wins'}) %>
							</td>
			
							<!-- Col 7, side due -->
%							$display_flag="style='display:table-cell;'"; $display_flag="style='display:none;'" if $oddround; 
							<td class="centeralign" <% $display_flag %>>
								<% $entries{$key}{'sidedue'} == 1 ? "A" : "N" %>
							</td>
							
							<!-- Col 8, bracket -->			
							<td>
								<% $entries{$key}{'placement'} %>
							</td>

							<!-- Col 9, opponent -->
							<td class="leftalign" <% $display_flag %>>
%							if ( $entries{$key}{'opponent'} == -1 ) {
								<a class="white fullblock padless" onclick="deletepanel( <% $entries{$key}{'panel'} %>, <% $key %>, <% $entries{$key}{'opponent'} %> )">
									BYE
								</a>	
%							} elsif ($entries{$key}{'opponent'} > 0)  {
								<a class="white fullblock padless" onclick="deletepanel( <% $entries{$key}{'panel'} %>, <% $key %>, <% $entries{$key}{'opponent'} %> )">
									<% $entries{$entries{$key}{'opponent'}}{'code'} %>
								</a>	
%							} else {

%							if ($entries{$key}{'opponent'} == 0 and $team_to_pair and $team_to_pair != $key) { $display_flag="style='display:table-cell;'" }
								
								<a class="dkblue fullblock centeralign" onclick="save_pairing( 1, <% $key %>, <% $entries{$key}{'wins'} %>, <% $entries{$key}{'seed'} %> ); ">
								
									Choose
								</a>

%							}								
							</td>	

							<!-- Col 10, the bye button -->							
%#							set display flag for columns 10 and 11							
%							$display_flag = "style='display:table-cell;'" ; 
%							if ($entries{$key}{'opponent'} == -1 || $entries{$key}{'opponent'} > 0) { $display_flag="style='display:none;'" }							
							<td <% $display_flag %>>
%							my $warn = had_bye_already($key);
								<a id="affbyebutton<% $key %>" class="dkblue fullblock centeralign" onclick="givebye(<% $key %>, '<% $warn %>', <% $entries{$key}{'wins'} %>);">
									Bye
								</a>
							</td>

							<!-- Col 11, pull up/down button -->
							<td <% $display_flag %>>
								<a id="affpullbutton<% $key %>" class="dkblue centeralign nowrap fullblock" onclick="pullme('aff', 'DOWN', <% $key %>);" >
									Pull &darr;
								</a>
							</td>		

							<!-- Col 12, entry id -->
							<td style="display:none">
								<% $key %>	
							</td>		
				
						</tr>
%					}			

%				}

			</tbody>
			</table>

%		unless ($oddround) {
		
			<& /funclib/tablesorter.mas, table => "negbracket" &> 

			<table cellpadding="3" id="negbracket" class="martop">

				<h5 id="negheader">Negative <% $bracket %>-win Bracket</h5>

				<thead>
					<tr class="yellowrow">
						<th class="smaller" title="Entry Designation">Code</th>
						<th class="smaller" title="Rounds Won">W</th>
						<th class="smaller" title="Seed" >Seed</th>
						<th class="smaller" title="Seed + Opponent Average Seed">SOP</th>
						<th class="smaller" title="2nd Tiebreaker (usually Hi/Lo Points)">TB2</th>
						<th class="smaller" title="Seed Without Wins">2Sd</th>
						<th class="smaller" title="Average Opponents' Wins">OW</th>
%						$display_flag="style='display:table-cell;'"; $display_flag="style='display:none;'" if $oddround; 
						<th class="smaller" title="Side Due" <% $display_flag %>>Due</th>
						<th class="smaller" title="Bracket Placement">Brkt</th>
						<th class="smaller" title="Opponent This Round">Vs</th>
						<th class="smaller nosort" colspan="3">Action</th>
					</tr>
				</thead>
					
				<tbody style="font-size: 90%">
						
%				foreach my $key (sort {$entries{$a}->{'SOP'} <=> $entries{$b}->{'SOP'}} keys(%entries)) {

%					$display_flag="style='display:none;';"; if ($entries{$key}{'placement'} == $bracket or $bracket == -1) { $display_flag="" }

%					if ($key and $key > -1 and $entries{$key}{sidedue} == 2 ) {

						<tr class="rightalign padcell" <% $display_flag %> id="neg<% $key %>">

%							$neg_teams_in_bracket++;
							<!-- Col 0, entry -->
							<td>
								<a class="<% hasconflict($team_to_pair, $key, %precluded) ? "dkred" : ($team_to_pair == $key ) ? "blue" : "white" %> block padless white" 
									onclick="show_opponents( <% $key %>, '<% $entries{$key}{'code'} %>', <% $entries{$key}{'wins'} %>, <% $entries{$key}{'seed'} %> )">
									<% $entries{$key}{'code'} %>
								</a>
							</td>
							
							<!-- Col 1, wins -->
							<td class="centeralign padno">
								<% $entries{$key}{'wins'} %>
							</td>

							<!-- Col 2, seed -->
							<td>
								<% $entries{$key}{'seed'} %>
							</td>		
							
							<!-- Col 3, SOP -->
							<td>
								<% sprintf("%.1f", $entries{$key}{'SOP'}) %>
							</td>

							<!-- Col 4, 1st TB after wins -->
							<td>
								<% sprintf("%.1f", $entries{$key}{'next_tb'}) %>
							</td>
							
							<!-- Col 5, seed w/o wins -->
							<td>
								<% $entries{$key}{'seed_nowins'} %>
							</td>

							<!-- Col 6, oppwins -->
							<td>
								<% sprintf("%.1f", $entries{$key}{'opp_wins'}) %>
							</td>

							<!-- Col 7, side due -->
%							$display_flag="style='display:table-cell;'"; $display_flag="style='display:none;'" if $oddround; 
							<td class="centeralign">
								<% $entries{$key}{'sidedue'} == 1 ? "A" : "N" %>
							</td>

							<!-- Col 8, entry -->
							<td>
								<% $entries{$key}{'placement'} %>
							</td>

							<!-- Col 9, oppn -->
							<td>
%								if ( $entries{$key}{'opponent'} > 0 ) {
								<a class="white fullblock padless" onclick="deletepanel( <% $entries{$key}{'panel'} %>, <% $key %>, <% $entries{$key}{'opponent'} %> )">
									<% $entries{$entries{$key}{'opponent'}}{'code'} %>
								</a>	
%								} elsif ( $entries{$key}{'opponent'} == -1 ) {

									<a class="plain fullblock padless" onclick="deletepanel( <% $entries{$key}{'panel'} %>, <% $key %>, <% $entries{$key}{'opponent'} %> )">
										BYE				
									</a>		

%								} else {	

									<a class="dkblue fullblock centeralign" onclick="save_pairing( 2, <% $key %>, <% $entries{$key}{'wins'} %>, <% $entries{$key}{'seed'} %> )">
										Choose							
										
									</a>
								
%								}								
							</td>		
																
							<!-- Col 10, bye button -->
%							#set display flag for both columns 10 and 11
%							$display_flag = "style='display:table-cell;'" ; 
%							if ($entries{$key}{'opponent'} == -1 || $entries{$key}{'opponent'} > 0) { $display_flag="style='display:none;'" }

							<td <% $display_flag %> >
%								my $warn = had_bye_already($key);
								<a id="negbyebutton<% $key %>" class="dkblue fullblock centeralign" onclick="givebye(<% $key %>, '<% $warn %>', <% $entries{$key}{'wins'} %>);">
									Bye
								</a>
							</td>

							<!-- Col 11, pull up/down button -->
							<td <% $display_flag %>>
								<a id="negpullbutton<% $key %>" class="dkblue nowrap fullblock centeralign" onclick="pullme('neg', 'DOWN', <% $key %>);">
									Pull &darr;
								</a>
							</td>		

							<!-- Col 12, entry id -->
							<td style="display:none">
								<% $key %>	
							</td>		
				


						</tr>

%					}

%				}

				</tbody>
				</table>

%			} #don't show neg table in an odd round
		
%			if ( $bracket > -1 ) {

				<hr style="margin-top: 40px;" />

				<h5 class="martop" style="margin-top: 20px;">
					Unpaired teams in other brackets
				</h5> 

				<& /funclib/tablesorter.mas, table => "unpaired" &> 

				<table cellpadding="3" width="100%" id="unpaired" class="tablesorter">

					<thead>
						<tr class="yellowrow">
							<th class="smaller" title="Entry Designation">Code</th>
							<th class="smaller" title="Rounds Won">W</th>
							<th class="smaller" title="Seed" >Seed</th>
							<th class="smaller" title="Seed + Opponent Average Seed">SOP</th>
							<th class="smaller" title="2nd Tiebreaker (usually Points)">TB2</th>
							<th class="smaller" title="Average Opponents' Wins">OW</th>
							<th class="smaller" title="Average Opp Seed">OppSeed</th>							
%							$display_flag="style='display:table-cell;'"; $display_flag="style='display:none;'" if $oddround; 
							<th class="smaller" title="Side Due" <% $display_flag %>>Due</th>
							<th class="smaller" title="Bracket Placement">Brkt</th>
							<th style='display:none;'>Opponent</th>
							<th class="smaller nosort" colspan="3">Action</th>
						</tr>
					</thead>

				<tbody style="font-size: 90%">


%				foreach my $key (sort {$entries{$a}->{'seed'} <=> $entries{$b}->{'seed'}} keys(%entries)) {

%					if ( $key and $key > -1 ) {

%					$display_flag="style='display:none;'"; 
%					if ($entries{$key}{'opponent'} == 0 and $entries{$key}{'placement'} != $bracket ) { $display_flag="table-row" }
%#					col 8 is bracket, col 9 is opponent, starts with col 0

						<tr class="rightalign padcell" <% $display_flag %> id="unp<% $key %>">
							<td>
								<span class="<% hasconflict($team_to_pair, $key, %precluded) ? "dkred" : "" %> block">
									<% $entries{$key}{'code'} %>
								</span>
							</td>
							
							<td class="centeralign padno"> <% $entries{$key}{'wins'} %>
							</td>
							
							<td> <% $entries{$key}{'seed'} %>
							</td>
							
							<td> <% sprintf("%.1f", $entries{$key}{'SOP'}) %>
							</td>
							
							<td> <% sprintf("%.1f", $entries{$key}{'next_tb'}) %>
							</td>
							
							<td> <% sprintf("%.1f", $entries{$key}{'opp_wins'}) %>
							</td>
							
							<td> <% sprintf("%.1f", $entries{$key}{'oppseed'}) %>
							</td>
							
%							$display_flag="style='display:table-cell;'"; 
%							$display_flag="style='display:none;'" if $oddround; 
							<td class="centeralign" <% $display_flag %>> <% $entries{$key}{'sidedue'} == 1 ? "A" : "N" %>
							</td>
							<td><% $entries{$key}{'placement'} %>
							</td>
							
							<td style='display:none;'><% $entries{$key}{'opponent'} %>
							</td>

							<td>
								<a class="dkblue nowrap block centeralign" onclick="pullme('unp', 'UP', <% $key %>);">
									Pull &uarr;
								</a>
							</td>

							<td>
%								my $warn = had_bye_already($key);	
								<a class="dkblue fullblock centeralign" onclick="givebye(<% $key %>, '<% $warn %>', <% $entries{$key}{'wins'} %>);">									 		Bye
								</a>
							</td>		
						</tr>
%					}
%				}	# end team loop

				</tbody>
			</table>

%	 }							#end conditional table

		<h4>Current Pairings</h4> 
		
		<& /funclib/tablesorter.mas, table => "pairings" &> 
		
		<table cellpadding="3" width="100%" id="pairings" class="tablesorter">
		
			<thead>
				<tr class="yellowrow">
					<th class="smaller">Aff</th>
					<th class="smaller">Neg</th>
					<th class="smaller nosort" colspan="3">Action</th>
				</tr>
			</thead>
				
			<tbody style="font-size: 90%">

<%perl> 

			my @panels = Tab::Panel->search( round=>$round_id );			

			foreach my $panel (@panels) {

				my @ballots = Tab::Ballot->search( panel=>$panel->id );

				my $aff = 0; 
				my $neg = 0; 
				my $bye = ""; 
				my $warning = "";

				foreach my $ballot (@ballots) {

					if ($ballot->side == 1) { 
						$aff = $ballot->entry; 
					}

					if ($ballot->side == 2) { 
						$neg = $ballot->entry; 
					}

					if ($panel->bye or $ballot->bye) { 
						$aff = $ballot->entry; 
						$bye = "BYE"; 
					}

					if ($ballot->side != 1 and $ballot->side != 2 and $bye eq "" and $aff == 0) {

						$aff = $ballot->entry; 
						$warning = "SIDE ERROR";

					} elsif ($ballot->side != 1 and $ballot->side != 2 and $bye eq "" and $neg == 0) {
						
						$neg = $ballot->entry; 
						$warning = "SIDE ERROR";

					}

				}

</%perl> 

				<tr id="pair<% $panel->id %>">
					<td>
						<span class="oneeighty nowrap">
							<% $entries{$aff}{'code'} %>
						</span>
						
						<span class="smallspan">
							<% $entries{$aff}{'wins'} %> wins <% $bye %> <% $warning %> 
						</span>
					</td>

					<td>
%						if ($entries{$neg}) { 
							<span class="oneeighty nowrap">
								<% $entries{$neg}{'code'} %> 
							</span>
							<span class="smallspan">
								<% $entries{$neg}{'wins'} %> wins <% $bye %> <% $warning %> 
							</span>
%						} 
					</td>

					<td>
						<a class="dkred fullblock centeralign" onclick="deletepanel( <% $panel->id %>, <% $aff %>, <% $ neg %> );">
							Delete
						</a>
					</td>
				</tr>

%			}

			</tbody>
				
			</table>

%			if ($account->site_admin) { 
				<br />
%				$end = time(); 
				Total time: <% printf("%.2f\n", $end - $start) %>
%			}

%		}

		<table id="preclusion_data" style="display:none;" >
%		foreach my $key1 (keys %precluded) {
%			foreach my $key2 (keys %{$precluded{$key1}}) {
			<tr>
				<td> <% $key1 %> </td>
				<td> <% $key2 %> </td>
			</tr>	
%			}	
%		}
		</table>
	
		<p id="team_to_pair_entry" style="display:none;"></p>
		<p id="team_to_pair_wins" style="display:none;"></p>
		<p id="team_to_pair_seed" style="display:none;"></p>				
</div>

	<div class="menu">
	
		<div class="sidenote">

			<h4>Bracket</h4>

			<div class="evenrow centeralign block">
				<form action="manual_powermatch_javascript.mhtml?round_id=<% $round_id %>" method="POST">
					<select id="bracketselector" name="bracket" onchange='showbracket(this.value)' class="fixedsmall">
%						foreach my $allbrack (sort {$b <=> $a} 0 .. ($round->name - 1) ) { 
							<option value="<% $allbrack %>" <% $allbrack == $bracket ? "selected" : "" %>>
								<% $allbrack %> win bracket
							</option>
%						}
						<option value="-1" <% $bracket == -1 ? "selected" : "" %> >Show All</option>
					</select>
				</form>
				<noscript>
					<input class="thin" type="submit" value="Load">
				</noscript>
			</div>

%			if ($oddround == 1) {			

				<div class="white padless">
					<span class="hundo">
						Teams in bracket
					</span>
					<span class="eighty">
						<% $aff_teams_in_bracket %>
					</span>
				</div>

%			} else {
				<div class="oddrow block padless">
					<span class="hundo">
						Due Aff Teams
					</span>
					<span id="due_aff" class="eighty">
						<% $aff_teams_in_bracket %>
					</span>
				</div>

				<div class="white padless">
					<span class="hundo">
						Due Neg Teams
					</span>
					<span id="due_neg" class="eighty">
						<% $neg_teams_in_bracket %>
					</span>
				</div>
%			}

			<div class="oddrow block padless">
				<span class="hundo">
					Paired Already
				</span>
				<span id="paired_already" class="eighty">
					<% $paired_teams %>
				</span>
			</div>

			<div class="white padless">
				<span class="hundo">
					Left to Pair
				</span>
				<span id="left_to_pair" class="eighty">
					<% $unpaired_teams %> 
				</span>
			</div>

			<a class="blue block" href="/panel/schemat/show.mhtml?round_id=<% $round_id %>">
				<% $round->realname %> Schematic
			</a>

		</div>

		<div class="sidenote">

			<h4>Bracket Changes</h4>


%			if ($bracket != -1) {	

				<a id="autopairlink" class="yellow block" href="/panel/round/pair_bracket.mas?round_id=<% $round_id %>&bracket_to_pair=<% $bracket %>&fromjava=true">
					Auto-pair remaining entries
				</a>

				<a id="collapse_up" class="yellow block" href="collapse_bracket.mas?round_id=<% $round %>&bracket=<% $bracket %>&pull_iterator=1&fromjava=true">
					Collapse <% $bracket %>-wins into <% $bracket + 1 %>-win bracket
				</a>

				<a id="collapse_down" class="yellow block" href="collapse_bracket.mas?round_id=<% $round %>&bracket=<% $bracket %>&pull_iterator=-1&fromjava=true">
					Collapse <% $bracket %>-wins into <% $bracket - 1 %>-win bracket
				</a>

				<a id="dump_bracket" class="martop dkred block" href="dump_bracket.mas?round_id=<% $round_id %>&bracket_to_pair=<% $bracket %>&fromjava=true">
					Dump debates in <% $bracket %>-win bracket
				</a>

				<a id="dump_and_autopair_bracket" class="martop dkred block" href="/panel/round/pair_bracket.mas?round_id=<% $round_id %>&bracket_to_pair=<% $bracket %>&delete_existing=Seaver">
					Dump <% $bracket %>-win debates & autopair
				</a>
%			}			

		</div>

		<div class="sidenote">

			<h4>Round Changes</h4>

			<a class="yellow block" href="reset_bracket.mas?round_id=<% $round_id %>&winsonly=false&fromjava=true">Reset brackets using current pairings</a>
			<a class="yellow block" href="reset_bracket.mas?round_id=<% $round_id %>&winsonly=true&fromjava=true">Reset brackets to win totals</a>

%			if ($oddround) {			
				<a class="yellow block" href="snake_sides.mas?round_id=<% $round_id %>">Assign debate sides</a>
%			}			

<!--			<a class="yellow block" href="index.mhtml">Exit and assign rooms (inactive) </a>
				<a class="yellow block" href="index.mhtml">Exit and assign judges (inactive)</a>
-->

			<a class="martop dkred block" href="/funclib/round_dump.mas?round_id=<% $round_id %>&from_pairing=Redsox&fromjava=true">Dump Whole Round</a>

		</div>
		
		<a class="blue block" href="/panel/manipulate/manual_powermatch.mhtml?round_id=<% $round_id %>&bracket=<% $bracket %>">
			Hand powermatch without Javascript
		</a>

	</div>
