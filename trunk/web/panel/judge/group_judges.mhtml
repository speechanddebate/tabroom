<%args>
	$tourn
	$account
	$group_id    => undef
	$clear       => undef
	$panelsize   => undef
	$round_type  => undef
	$timeslot_id => undef
</%args>
<%init>

	unless ($group_id) { 
		$m->print("No judge group sent.  Hit back and try again");
		$m->abort();
	}

	my $group = Tab::JudgeGroup->retrieve($group_id) if $group_id;

	foreach my $event ($group->events) { 

		if ($event->type ne "speech" && $event->type ne "congress") { 

			my $err = "You have attempted to assign judges to a debate event en
			masse.  That will not work very well.  Pair on the pairing
			instead";

			$m->redirect("index.mhtml?group_id=".$group->id."&err=$err");
		}

	}


	$m->abort unless $group;

	$m->print('<div class="main">');
	$m->print('<h2>Paneling judges in '.$group->abbr.'</h2>');
	$m->flush_buffer;

	my @panels;
	my @ballots;

	my $same_school++ if $group->setting("allow_school_panels");
	my $ncfl++ if $tourn->setting("ncfl");

	my $timeslot = Tab::Timeslot->retrieve($timeslot_id) if $timeslot_id && $timeslot_id ne "all";

    my $text = $account->first." ".$account->last." (".$account->email.") has repaneled the judges in group ".$group->abbr;

	$text .= " timeslot ".$timeslot->name if $timeslot;
	$text .= " (all timeslots) " if $timeslot_id eq "all";
	$text .= " round type ".$round_type if $round_type;
	$text .= ".  Existing judge assignments were wiped out." if $clear;
	$text .= ".  Existing judge assignments were preserved." unless $clear;

    Tab::TournChange->create({ 
        type    => 'tabbing',
        tourn   => $group->tourn->id,
        account => $account->id,
        text    => $text
    }); 

	$m->print('<p>'.$text.'</p>');

	if ($clear) { 

		$m->print("<P>Clearing out existing judge assignments...");
		$m->flush_buffer;

		if ($timeslot_id ne "all" && $round_type ne "all") { 
	
			Tab::Ballot->set_sql( remove_judges_rtts => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.judge_group = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.timeslot = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( remove_scores_rtts => "
				delete ballot_value.* 
				from ballot_value, ballot, panel, round, event
				where ballot_value.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.judge_group = ?
				and round.timeslot = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_rtts => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.judge = b2.judge
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.judge_group = ? 
					and round.timeslot = ?
					and round.type = ?
			");

			Tab::Ballot->sql_remove_judges_rtts->execute($group->id, $timeslot_id, $round_type);
			Tab::Ballot->sql_remove_scores_rtts->execute($group->id, $timeslot_id, $round_type);
			Tab::Ballot->sql_dedupe_ballots_rtts->execute($group->id, $timeslot_id, $round_type);

		} elsif ($timeslot_id ne "all") { 

			Tab::Ballot->set_sql( remove_judges_ts => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.judge_group = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.timeslot = ?
			");

			Tab::Ballot->set_sql( remove_scores_ts => "
				delete ballot_value.* 
				from ballot_value, ballot, panel, round, event
				where ballot_value.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.judge_group = ?
				and round.timeslot = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_ts => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.judge = b2.judge
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.judge_group = ? 
					and round.timeslot = ?
			");

			Tab::Ballot->sql_remove_judges_ts->execute($group->id, $timeslot_id);
			Tab::Ballot->sql_remove_scores_ts->execute($group->id, $timeslot_id);
			Tab::Ballot->sql_dedupe_ballots_ts->execute($group->id, $timeslot_id);

		} elsif ($round_type ne "all") { 

			Tab::Ballot->set_sql( remove_judges_rt => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.judge_group = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.type = ?
			");

			Tab::Ballot->set_sql( remove_scores_rt => "
				delete ballot_value.* 
				from ballot_value, ballot, panel, round, event
				where ballot_value.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.judge_group = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_rt => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.judge = b2.judge
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.judge_group = ? 
					and round.type = ?
			");

			Tab::Ballot->sql_remove_judges_rt->execute($group->id, $round_type);
			Tab::Ballot->sql_remove_scores_rt->execute($group->id, $round_type);
			Tab::Ballot->sql_dedupe_ballots_rt->execute($group->id, $round_type);

		} else { 

			Tab::Ballot->set_sql( remove_judges => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and ballot.entry = entry.id
				and entry.event = event.id
				and panel.round = round.id
				and round.event = event.id 
				and event.judge_group = ? 
			");

			Tab::Ballot->set_sql( remove_scores => "
				delete ballot_value.* 
				from ballot_value, ballot, panel, round, event
				where ballot_value.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.judge_group = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.judge = b2.judge
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.judge_group = ? 
			");

			Tab::Ballot->sql_remove_judges->execute($group->id);
			Tab::Ballot->sql_remove_scores->execute($group->id);
			Tab::Ballot->sql_dedupe_ballots->execute($group->id);

		} 
		
		$m->print("...done</p>");
		$m->flush_buffer;

	}

    my %rating_by_judge_event = (); 

    if ($group->setting("coach_ratings")) { 
		
		$m->print("<P>Sorting judges by coach rating...");
		$m->flush_buffer;

		my @tiers = $group->rating_tiers;
		my %tier_names = (); 
		foreach my $tier (@tiers) { 
			$tier_names{$tier->id} = $tier->name;
		}

		foreach my $event ($group->events) { 
			my $event_id = $event->id;
			my @ratings = $m->comp("/funclib/group_ratings.mas", event => $event);
			foreach my $rating (@ratings) { 
				$rating_by_judge_event{$rating->judge->id."-".$event_id} = $tier_names{$rating->rating_tier->id} if $rating && $rating->rating_tier;
			}
		}

		$m->print("...done</p>");
		$m->flush_buffer;
    }

	# Get an array of the panels with a score that is the number of kids who
	# belong to the teams represented in the panel.  This is a rough idea of
	# how struck the panel is. 

	$m->print("<P>Scoring panels by difficulty of finding a judge...");
	$m->flush_buffer;

	Tab::Panel->columns(TEMP => "temp_score");

	if ($timeslot_id ne "all" && $round_type ne "all") { 

		Tab::Panel->set_sql( scored_panels => "
			select panel.*, count(distinct e2.id) as temp_score
				from panel, ballot, entry, entry as e2, event, round
					where entry.event = event.id
					and event.judge_group = ? 
					and panel.id = ballot.panel
					and panel.round = round.id
					and round.timeslot = ?
					and round.type = ?
					and ballot.entry = entry.id
					and entry.school = e2.school
					and entry.id < e2.id
					group by panel.id
					order by temp_score desc
		");

		Tab::Panel->set_sql( empty_panels => "
			select panel.*
				from panel, round, event
				where panel.round = round.id
				and round.event = event.id
				and event.judge_group = ? 
				and round.timeslot = ?
				and round.type = ?
				and not exists (
					select entry.* 
					from entry, ballot
					where entry.id = ballot.entry
					and ballot.panel = panel.id
				)
				group by panel.id
		");

		Tab::Ballot->set_sql( judge_ballots => "
			select ballot.* 
				from panel, ballot, round, event
				where panel.round = round.id
				and round.event = event.id
				and event.judge_group = ? 
				and round.timeslot = ?
				and round.type = ?
				and ballot.panel = panel.id
		");

		@panels = Tab::Panel->search_scored_panels($group->id, $timeslot_id, $round_type);
		push @panels, Tab::Panel->search_empty_panels($group->id, $timeslot_id, $round_type);
		@ballots = Tab::Ballot->search_judge_ballots($group->id, $timeslot_id, $round_type);

	} elsif ($timeslot_id ne "all") { 

		Tab::Panel->set_sql( scored_panels => "
			select panel.*, count(distinct e2.id) as temp_score
				from panel, ballot, entry, entry as e2, event, round
					where entry.event = event.id
					and event.judge_group = ? 
					and panel.id = ballot.panel
					and panel.round = round.id
					and round.timeslot = ?
					and ballot.entry = entry.id
					and entry.school = e2.school
					and entry.id < e2.id
					group by panel.id
					order by temp_score desc
		");

		Tab::Panel->set_sql( empty_panels => "
			select panel.*
				from panel, round, event
				where panel.round = round.id
				and event.judge_group = ?
				and round.event = event.id
				and round.timeslot = ?
				and not exists (
					select entry.* 
					from entry, ballot
					where entry.id = ballot.entry
					and ballot.panel = panel.id
				)
				group by panel.id
		");

		Tab::Ballot->set_sql( judge_ballots => "
			select ballot.* 
				from panel, ballot, round, event
				where panel.round = round.id
				and round.event = event.id
				and event.judge_group = ? 
				and round.timeslot = ?
				and ballot.panel = panel.id
		");

		@panels = Tab::Panel->search_scored_panels($group->id, $timeslot_id);
		push @panels, Tab::Panel->search_empty_panels($group->id, $timeslot_id);
		@ballots = Tab::Ballot->search_judge_ballots($group->id, $timeslot_id);

	} elsif ($round_type ne "all") { 

		Tab::Panel->set_sql( scored_panels => "
			select panel.*, count(distinct e2.id) as temp_score
				from panel, ballot, entry, entry as e2, event, round
					where entry.event = event.id
					and event.judge_group = ? 
					and panel.id = ballot.panel
					and panel.round = round.id
					and round.type = ?
					and ballot.entry = entry.id
					and entry.school = e2.school
					and entry.id < e2.id
					group by panel.id
					order by temp_score desc
		");

		Tab::Panel->set_sql( empty_panels => "
			select panel.*
				from panel, round, event
				where panel.round = round.id
				and event.judge_group = ?
				and round.event = event.id
				and round.type = ?
				and not exists (
					select entry.* 
					from entry, ballot
					where entry.id = ballot.entry
					and ballot.panel = panel.id
				)
				group by panel.id
		");

		Tab::Ballot->set_sql( judge_ballots => "
			select ballot.* 
				from panel, ballot, round, event
				where panel.round = round.id
				and round.event = event.id
				and event.judge_group = ? 
				and round.type = ? 
				and ballot.panel = panel.id
		");

		@panels = Tab::Panel->search_scored_panels($group->id, $round_type);
		push (@panels, Tab::Panel->search_empty_panels($group->id, $round_type));
		@ballots = Tab::Ballot->search_judge_ballots($group->id, $round_type);

	} else { 

		Tab::Panel->set_sql( scored_panels => "
			select panel.*, count(distinct e2.id) as temp_score
				from panel, ballot, entry, entry as e2, event
					where entry.event = event.id
					and event.judge_group = ? 
					and panel.id = ballot.panel
					and ballot.entry = entry.id
					and entry.school = e2.school
					and entry.id < e2.id
					group by panel.id
					order by temp_score desc
		");

		Tab::Ballot->set_sql( judge_ballots => "
			select ballot.* 
				from panel, ballot, round, event
				where panel.round = round.id
				and round.event = event.id
				and event.judge_group = ? 
				and ballot.panel = panel.id
		");

		@panels = Tab::Panel->search_scored_panels($group->id);
		@ballots = Tab::Ballot->search_judge_ballots($group->id);

	}

	my %ballots_by_panel = ();

	foreach my $ballot (@ballots) {
		push @{$ballots_by_panel{$ballot->panel->id}}, $ballot;
	}

	$m->print("...done. <p>Finding clean judges for ".scalar @panels." panels.  This will take a while.</p><p>");
	$m->flush_buffer;

	my @empty_panels;

	my $count;
		
	PANEL:
	foreach my $panel (@panels) { 

		$count++;

		$m->print($count." panels done...<br \>") unless $count % 50;
		$m->flush_buffer;

		my $event_id = $panel->round->event->id;

		my $panel_needs = $panel->round->judges;
		$panel_needs = 1 unless $panel_needs;
		$panel_needs = $panelsize if $panel_needs < $panelsize;
	
		# Skip if the panel already has enough judges
		my @ballots = @{$ballots_by_panel{$panel->id}} if $ballots_by_panel{$panel->id};
		my @already_judging;

		foreach my $ballot (@ballots) { 
			push @already_judging, $ballot->judge->id if $ballot->judge && $ballot->judge->id;
		}

		my %jseen = (); 
		@already_judging = grep { ! $jseen{$_} ++ } @already_judging;

		my $already = scalar @already_judging;

		next if ($already >= $panel_needs);  
	
		my @clean_judges = $m->comp("/funclib/clean_judges.mas", panel => $panel, mass => "yes");

		@clean_judges = sort {$a->standby cmp $b->standby} @clean_judges; #Standbys to the bottom

		if ($panel->round->type ne "prelim") { 
			@clean_judges = sort {$rating_by_judge_event{$a->id."-".$event_id} cmp $rating_by_judge_event{$b->id."-".$event_id}} @clean_judges;
		}
	
		my %schools_used = ();  # This will become the region (diocese) if we're running NCFLs.
	
		$already++;

		NEED:	
		foreach ( $already .. $panel_needs) { 
		
			unless (@clean_judges) { 
				push (@empty_panels, $panel);
				next PANEL;
			}

			my $chosen_judge;
	
			JUDGE:
			while (@clean_judges) { 
				
				my $clean_judge = shift @clean_judges;
	
				# If that school or region is on this panel already, move to the next candidate.
				unless ($same_school) { 
					if ($ncfl) { 
						next JUDGE if $schools_used{"dio-".$clean_judge->school->region->id};
					} else { 
						next JUDGE if $schools_used{"school-".$clean_judge->school->id};
					}
				}
	
				# Otherwise, we've found our judge.
				$chosen_judge = $clean_judge;
				$schools_used{"school-".$clean_judge->school->id}++;
				$schools_used{"dio-".$clean_judge->school->region->id}++ if $ncfl;
				$clean_judge->score("-1200");  #I don't know why this is necessary but if I don't do this it caches old scores and screws people.

				last JUDGE;

			}
	
			push (@empty_panels, $panel) unless $chosen_judge;
			next PANEL unless $chosen_judge;

			$m->comp("/funclib/panel_judgeadd.mas",  judge => $chosen_judge, panel => $panel);

		}
	}

</%init>

	<h4>Judge paneling done</h4>

	<p>There are <% scalar @empty_panels %> that I couldn't find judges for</p>

	<a class="third padmore dkblue" href="/panel/report/disasters.mhtml">
		Check for Disasters
	</a>

	<a class="third padmore dkblue" href="/panel/judge/chart.mhtml?group_id=<% $group->id %>">
		See Judge Chart
	</a>

	</div>

	<& menu.mas, tourn => $tourn, group => $group, whoami => "index" &>


