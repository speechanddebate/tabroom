<%flags>
	inherit => undef
</%flags>
<%args>
	$url => undef
</%args>
<%init>

	$m->redirect("http://www.tabroom.com") unless $url;

	use PHP::Serialization;
	use MIME::Base64;
	use Crypt::Rijndael;
	use Crypt::PasswdMD5;

	my $now = DateTime->now;

	my %cookies = Apache2::Cookie->fetch;

	unless ($cookies{'CHOCOLATECHIP'}) {
		$m->redirect("$Tab::url_prefix/user/login/dechoc.mhtml?url=$url");
	}

	my $serialized_data = $cookies{'CHOCOLATECHIP'}->value;

	my $debased_data = decode_base64($serialized_data);
	my $key = $Tab::bakery_key;
	my $cipher = Crypt::Rijndael->new( $key , Crypt::Rijndael::MODE_ECB());
	my $white = $cipher->decrypt($debased_data);

	my ($garbage, $namebit, $mailbit, $initbit, $typebit) =  split(/s:4:/, $white);

	my @lulz = split(/\"/, $namebit);
	my $name = $lulz[3];

	@lulz = split(/\"/, $mailbit);
	my $email = $lulz[3];

	@lulz = split(/\"/, $initbit);
	my $site = $lulz[3];
	my $timestamp = $lulz[10];
	$timestamp =~ s/[\D_]//g;

	my $time = DateTime->from_epoch( epoch => $timestamp );

	my @site_accounts = Tab::Account->search( idebate_site => $site );

	my $account = shift @site_accounts if @site_accounts;


	unless ($account) { 
	
		my @email_accounts = Tab::Account->search( email => $email );

		if (@email_accounts) { 

			$account = shift @email_accounts;
			$account->idebate_site($site);
			$account->update;

		} else { 

			my ($first, $last) = split (/\ /, $name);
			$account = Tab::Account->create({ 
				email        => $email,
				idebate_site => $site
			});

		}
	}

	my $string_key = "$Tab::string";
	my $auth = $m->comp("/funclib/generate_randomstring.mas", length => 16);

	my $shauser = Digest::SHA::sha1_hex($string_key, $account->id);
	my $shakey = Digest::SHA::sha1_hex($string_key, $auth);

	my $session = Tab::Session->create( { 
		account   => $account->id,
		authkey   => $shakey,
		userkey   => $shauser,
		ip        => $ENV{REMOTE_ADDR},
		timestamp => $time,
	});

	$m->redirect("$Tab::url_prefix/user/login/login_save.mhtml?session_id=".$session->id."&url=".$url);


</%init>
	
