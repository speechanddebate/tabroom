<%args>
	$tourn
	$event_id
	$deadline        => 0
	$deadlinetime    => "5:00 P"
	$code_start      => 0
	$cap             => 0
	$school_cap      => 0
	$waitlist        => 0
	$waitlist_all    => 0
	$no_judge_burden => 0
	$self_strike     => 0
	$field_report    => 0
	$field_waitlist  => 0
	$ask_for_titles  => 0
	$enter_me_twice  => 0
	$code_hide       => 0
	$supp            => 0
	$no_prefs        => 0
	$hybrids         => 0
	$apda            => 0
	$ask_quals       => 0
	$more_quals      => 0
	$at_larges       => 0
	$breakout_new    => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	my $msg;
	my $err;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $deadlinedt = Tab::dtme($deadline,$deadlinetime,$tz) if $deadline;
	my $reg_end = $tourn->reg_end->set_time_zone($tz);

	if ($reg_end < $deadlinedt) { 
		$err = "A custom entry deadline can only be set BEFORE the tournament wide deadline.  Deadline was removed";
		undef $deadlinedt;
		$event->setting("deadline", 0);
	}

	$event->setting("deadline", "date", $deadlinedt) if $deadlinedt;
	$event->setting("deadline", "0") unless $deadlinedt;
	$event->setting("code_start", $code_start);
	$event->setting("cap", $cap);
	$event->setting("school_cap", $school_cap);
	$event->setting("waitlist", $waitlist);
	$event->setting("waitlist_all", $waitlist_all);
	$event->setting("no_judge_burden", $no_judge_burden);
	$event->setting("self_strike", $self_strike);
	$event->setting("field_report", $field_report);
	$event->setting("field_waitlist", $field_waitlist);
	$event->setting("code_hide", $code_hide);
	$event->setting("ask_for_titles", $ask_for_titles);
	$event->setting("enter_me_twice", $enter_me_twice);
	$event->setting("supp", $supp);
	$event->setting("no_prefs", $no_prefs);
	$event->setting("hybrids", $hybrids);
	$event->setting("apda", $apda);
	$event->setting("seed_presets", "protect") if $apda == 1;
	$event->setting("ask_quals", $ask_quals);
	$event->setting("more_quals", $more_quals);
	$event->setting("at_larges", $at_larges);

	my $breakouts = $event->setting("breakouts");

	foreach my $breakout (1 .. $breakouts) { 

		next if $event->setting("breakout_".$breakout."_delete");

		if ($ARGS{"breakout_".$breakout."_delete"}) { 
			$event->setting("breakout_".$breakout."_delete", 1);
			$event->setting("breakout_".$breakout."_label", "");
			$event->setting("breakout_".$breakout."_selfreg", "");
			$event->setting("breakout_".$breakout."_exclude_elims", "");
		} else { 
			$event->setting("breakout_".$breakout."_label", $ARGS{"breakout_".$breakout."_label"});
			$event->setting("breakout_".$breakout."_selfreg", $ARGS{"breakout_".$breakout."_selfreg"});
			$event->setting("breakout_".$breakout."_exclude_elims", $ARGS{"breakout_".$breakout."_exclude_elims"});
		}
	}

	if ($breakout_new) { 

		$breakouts++;
		$event->setting("breakouts", $breakouts);
		$event->setting("breakout_".$breakouts."_label", $ARGS{"breakout_new"});
		$msg .= "Added breakout number $breakouts";
	}

	$m->redirect("register.mhtml?event_id=".$event->id."&msg=$msg&err=$err");
		
</%init>
