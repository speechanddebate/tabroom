<%args>
	$tourn
	$event_id
	$num_schools   => undef
	$num_entries   => undef
	$large_schools => undef
	$large_percent => undef
</%args>
<%init>

	use POSIX;

	my $event = Tab::Event->retrieve($event_id);

	my @all_schools = $tourn->schools;
	my @schools;

	my $school_count;

	foreach my $school (@all_schools) { 
		next if $school_count++ > $num_schools;
		push @schools, $school;
	}

	my $existing_number = scalar @schools;

	my $test_chapter = Tab::Chapter->retrieve(1000);

	unless ($test_chapter) { 

		$test_chapter = Tab::Chapter->create({
			id         => 1000,
			name       => "Test Tournament Chapter",
			state      => "XX",
			coaches    => "tabroom.com test",
			country    => "XX",
			self_prefs => 0
		});

	}

	my @test_students = Tab::Student->search( chapter => 1000);
	my $test_students_count = scalar @test_students;

	foreach my $step ($existing_number .. $num_schools) { 

		my $number = $step + 1;

		my $new_school = Tab::School->create({
			tourn => $tourn->id,
			name => "School ".$number,
			code => $number,
			chapter => 1000
		});

		push @schools, $new_school;

	}


	Tab::Event->set_sql( delete_bv => "
		delete ballot_value.*
		from ballot_value, ballot, panel, round
		where round.event = ? 
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
	");

	Tab::Event->set_sql( delete_b => "
		delete ballot.*
		from ballot, panel, round
		where round.event = ? 
		and round.id = panel.round
		and panel.id = ballot.panel
	");

	Tab::Event->set_sql( delete_p => "
		delete panel.*
		from panel, round
		where round.event = ? 
		and round.id = panel.round
	");

	Tab::Event->set_sql( delete_es => "
		delete entry_student.*
		from entry, entry_student
		where entry_student.entry = entry.id
		and entry.event = ? 
	");

	Tab::Event->set_sql( delete_e => "
		delete from entry where event = ? 
	");

	Tab::Event->sql_delete_bv->execute($event->id);
	Tab::Event->sql_delete_b->execute($event->id);
	Tab::Event->sql_delete_p->execute($event->id);
	Tab::Event->sql_delete_es->execute($event->id);
	Tab::Event->sql_delete_e->execute($event->id);

	my $students = $event->setting("min_entry");
	my $code = 100;

	my @school_array;

	foreach (1 .. $large_schools) { 

		my $large_quota = ceil($num_entries * $large_percent / 100);
		my $large = shift @schools;

		next unless $large;

		foreach (1 .. $large_quota) { 
			push @school_array, $large->id;
			$num_entries--;
		}

	}

	use List::Util 'shuffle'; 
	@schools = shuffle(@schools);
	
	foreach my $school (@schools) { 
		next unless $num_entries;
		push @school_array, $school->id;
		$num_entries--;
	}

	foreach (1 .. $num_entries) { 
		push @school_array, $schools[rand @schools]->id;
	}

	foreach my $school_id (@school_array) { 

		my $entry = Tab::Entry->create({
			event       => $event_id,
			school      => $school_id,
			code        => $code,
			name        => "Entry ".($code - 99),
			dropped     => 0,
			waitlist    => 0,
			
		});

		$code++;

		foreach (1 .. $students) { 

			my $student;
			$student = shift @test_students if @test_students;

			unless ($student) { 

				$test_students_count++;

				$student = Tab::Student->create({
					first     => "Test",
					last      => $test_students_count,
					chapter   => 1000,
					grad_year => 1,
					novice    => 0,
				});

			}

			Tab::EntryStudent->create({
				student => $student->id,
				entry => $entry->id
			});

		}

	}

	my $msg = "Created ".($code - 100)." fake entries from $num_schools schools in ".$event->abbr;

	$m->redirect("fake.mhtml?event_id=$event_id&msg=$msg");

</%init>

