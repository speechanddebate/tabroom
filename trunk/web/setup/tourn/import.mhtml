<%args>
	$tourn
	$account
	$clone
</%args>
<%perl>

	return unless $clone;

	my $old_tourn = Tab::Tourn->retrieve($clone);
	my $ostart = $old_tourn->start;

	# $diff is the change between the old start & the new start.  translates
	# all dates.

	my $diff = $tourn->start->delta_days($ostart);  

	my $reg_start = $old_tourn->reg_start->clone;
	$reg_start->add_duration($diff);

	my $reg_end = $old_tourn->end->clone;
	$reg_end->add_duration($diff);

	$tourn->reg_start($reg_start);
	$tourn->reg_end($reg_end);
	$tourn->update;

	#Settings
	foreach my $setting ($old_tourn->settings) {

		next unless $setting->value;
		next if $setting->value eq "text" && not defined $setting->value_text;

		next if Tab::TournSetting->search( tourn => $tourn->id, tag => $setting->tag);

		Tab::debuglog("Setting is ".$setting->id." and value is ".$setting->value." and text is ".$setting->value_text);

		my $nsetting = $setting->copy({
			tourn => $tourn->id
		});

		if ($nsetting->value eq "date") { 
			my $new_date = $nsetting->value_date->clone;
			$new_date->add_duration($diff);
			$nsetting->value_date($new_date);
		}

		$nsetting->update;
	}

	#Tiebreakers and sets
	my %tb_set_translator = ();
	foreach my $tb_set ($old_tourn->tiebreak_sets) {

		my $ntb_set = $tb_set->copy;
		$ntb_set->tourn($tourn->id);
		$ntb_set->update;

		foreach my $tb ($tb_set->tiebreaks) { 
			my $ntb = $tb->copy;
			$ntb->tb_set($ntb_set->id);
			$ntb->update;
		}

		$tb_set_translator{$tb_set->id} = $ntb_set->id;

	}

	
	my @circuits;

	#Circuits
	foreach my $circuit ($old_tourn->tourn_circuits) { 

		unless (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->circuit->id)) { 
			my $ncircuit = $circuit->copy({
				tourn => $tourn->id,
				approved => 0
			});
		}

		push (@circuits, $circuit->circuit);
	}

	foreach my $housing ($old_tourn->housing_slots) { 

		my $nhousing = $housing->copy;
		$nhousing->tourn($tourn->id);

		my $new_night = $housing->night;
		$new_night->add_duration($diff);
		$nhousing->night($new_night);

		$nhousing->update;
	}

	#Limits on Double Entry
	my %event_double_translator = ();
	foreach my $ed ($old_tourn->event_doubles) { 
		my $ned = $ed->copy;
		$ned->tourn($tourn->id);
		$ned->update;
		$event_double_translator{$ed->id} = $ned->id;
	}

	#Tournament Sites
	foreach my $tournsite ($old_tourn->tourn_sites) {
		my $ntournsite = $tournsite->copy;
		$ntournsite->tourn($tourn->id);
		$ntournsite->update;
	}

	#Webpages
	if ($tourn->webname eq $old_tourn->webname) { 
		foreach my $webpage ($tourn->webpages) {
			my $nwebpage = $webpage->copy;
			$nwebpage->tourn($tourn->id);
			$nwebpage->update;
		}
	}

	#Concessions
	foreach my $concession ($old_tourn->concessions) {

		my $nconcession = $concession->copy;
		$nconcession->tourn($tourn->id);

		my $new_deadline = $concession->deadline;
		$new_deadline->add_duration($diff) if $new_deadline;
		$nconcession->deadline($new_deadline) if $new_deadline;

		$nconcession->update;
	}


	#Tournament Standing Fees
	foreach my $tourn_fee ($old_tourn->tourn_fees) {

		my $ntourn_fee = $tourn_fee->copy;
		$ntourn_fee->tourn($tourn->id);

		my $new_start = $ntourn_fee->start;
		$new_start->add_duration($diff) if $new_start;
		$ntourn_fee->start($new_start) if $new_start;

		my $new_end = $ntourn_fee->end;
		$new_end->add_duration($diff) if $new_end;
		$ntourn_fee->end($new_end) if $new_end;

		$ntourn_fee->update;
	}

	#Followers of this tournament, if it's actually the same tournament.
	if ($tourn->webname eq $old_tourn->webname) {
		foreach my $follower (Tab::FollowTourn->search( tourn => $old_tourn->id )) { 
			my $nfollow = $follower->copy;
			$nfollow->tourn($tourn->id);
			$nfollow->update;
		}
	}

	#Timeslots
	my %timeslot_translator = ();
	foreach my $ts ($old_tourn->timeslots) { 

		my $nts = $ts->copy;
		$nts->tourn($tourn->id);

		my $ntstart = $nts->start;
		$ntstart->add_duration($diff);
		$nts->start($ntstart);
		
		my $ntend = $nts->end;
		$ntend->add_duration($diff);
		$nts->end($ntend);

		$nts->update;

		$timeslot_translator{$ts->id} = $nts->id;

	}

	#Judge Groups
	my %judge_group_translator = ();
	my %pool_translator = ();
	my %rating_subset_translator = ();

	foreach my $jg ($old_tourn->judge_groups) { 

		my $njg = $jg->copy;
		$njg->tourn($tourn->id);
		$njg->update;

		$judge_group_translator{$jg->id} = $njg->id;

		#Settings

		foreach my $setting ($jg->settings) {

			next if $njg->setting($setting->tag);

			my $nsetting = $setting->copy({
				judge_group => $njg->id	
			});

			$nsetting->judge_group($njg->id);

			if ($nsetting->value eq "date") { 
				if ($nsetting->value_date) { 
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
				}
			}

			$nsetting->update;
		}

		foreach my $pool ($jg->pools) { 
			my $npool = $pool->copy;
			$npool->judge_group($njg->id);
			$npool->update;
			$pool_translator{$pool->id} = $npool->id;
		}

		foreach my $rs ($jg->rating_subsets) { 

			my $nrs = $rs->copy;
			$nrs->judge_group($njg->id);
			$nrs->update;

			$rating_subset_translator{$rs->id} = $nrs->id;
		
			#Rating/Preference Tiers
			foreach my $rating_tier ($rs->rating_tiers) {
				my $nrating_tier = $rating_tier->copy;
				$nrating_tier->rating_subset($nrs->id);
				$nrating_tier->update;
			}

		}

		foreach my $strike_time ($jg->strike_times) { 

			my $nstrike_time = $strike_time->copy;
			$nstrike_time->judge_group($njg->id);

			my $new_start = $strike_time->start;
			$new_start->add_duration($diff);
			$nstrike_time->start($new_start);

			my $new_end = $strike_time->end;
			$new_end->add_duration($diff);
			$nstrike_time->end($new_end);

			$nstrike_time->update;

		}

	}

	#Events
	my %event_translator = ();
	my %round_translator = ();

	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 

		my $nevent = $event->copy;

		$nevent->tourn($tourn->id);
		$nevent->judge_group($judge_group_translator{$event->judge_group->id});
		$nevent->event_double($event_double_translator{$event->event_double->id}) if $event->event_double;
		$nevent->rating_subset($rating_subset_translator{$event->rating_subset->id}) if $event->rating_subset;
		$nevent->update;

        my @settings = Tab::EventSetting->search( event => $event->id);

        foreach my $setting (@settings) { 

            my $nsetting = $setting->copy({
                event => $nevent->id
            });

            if ($setting->tag eq "speaker_tbset") { 
                $nsetting->value($tb_set_translator{$setting->value});
                $nsetting->update;
            }

            if ($nsetting->value eq "date") { 
                my $new_date = $nsetting->value_date->clone;
                $new_date->add_duration($diff);
                $nsetting->value_date($new_date);
                $nsetting->update;
            }

        }

		# Copy the ballots from the old tournament into the new one
		system $Tab::s3_cmd." cp -r $Tab::s3_bucket/tourns/".$old_tourn->id."/events/".$event->id." $Tab::s3_bucket/tourns/".$tourn->id."/events/".$nevent->id;

		# Copy the room pool assignments for this event
		foreach my $pool ($event->room_pools) { 
			my $npool = $pool->copy;
			$npool->event($nevent->id);
			$npool->update;
		}

		foreach my $round ($event->rounds) { 

			my $nround = $round->copy({
				event => $nevent->id
			});

			$nround->timeslot($timeslot_translator{$round->timeslot->id}) if $round->timeslot;
			$nround->pool($pool_translator{$round->pool->id}) if $round->pool;
			$nround->tb_set($tb_set_translator{$round->tb_set->id}) if $round->tb_set;
			$nround->motion("");
			$nround->update;

			$round_translator{$round->id} = $nround->id;

		}

	} # End of events

	Tab::Round->set_sql(clear_publish => "
        update round, event
            set round.published = 0,
            round.listed = 0,
            round.motion = NULL,
            round.online = 0,
            round.post_results = 0,
            round.created = NULL,
            round.completed = NULL,
            round.blasted = NULL
        where round.event = event.id
        and event.tourn = ?
	");

	Tab::Round->sql_clear_publish->execute($tourn->id);

	foreach my $room_strike ($old_tourn->room_strikes) { 

		my $nroom_strike = $room_strike->copy;
		$nroom_strike->delete if $nroom_strike->type eq "entry";
		$nroom_strike->delete if $nroom_strike->type eq "judge";
		$nroom_strike->tourn($tourn->id);
		$nroom_strike->timeslot($timeslot_translator{$room_strike->timeslot->id}) if $room_strike->timeslot;
		$nroom_strike->event($event_translator{$room_strike->event->id}) if $room_strike->event;

		if ($nroom_strike->start) { 
			my $new_start = $nroom_strike->start;
			$new_start->add_duration($diff);
			$nroom_strike->start($new_start);
		}
	
		if ($nroom_strike->end) { 
			my $new_end = $nroom_strike->end;
			$new_end->add_duration($diff);
			$nroom_strike->end($new_end);
		}
		
		$nroom_strike->update;

	}

	#Sweepstakes
	my %sweep_set_translator = ();
	foreach my $sweep_set ($old_tourn->sweep_sets) {

		my $nsweep_set = $sweep_set->copy({
			tourn => $tourn->id
		});

		$sweep_set_translator{$sweep_set->id} = $nsweep_set->id;

		foreach my $sweep_event ($sweep_set->sweep_events) { 

			my $nsweep_event = $sweep_event->copy({  
				event     => $event_translator{$sweep_event->id},
				sweep_set => $nsweep_set->id 
			});
		}

		foreach my $sweep_rule ($sweep_set->rules) { 

			if ($sweep_rule->tag eq "ignore_round") { 

				my $nsweep_rule = $sweep_rule->copy({  
					sweep_set => $nsweep_set->id,
					value     => $round_translator{$sweep_rule->value}
				});

			} else { 

				my $nsweep_rule = $sweep_rule->copy({  
					sweep_set => $nsweep_set->id 
				});

			}

		}

	}

	foreach my $sweep_set ($old_tourn->sweep_sets) {

		my @links = Tab::SweepInclude->search( parent => $sweep_set );

		foreach my $link (@links) { 

			my $nlink = $link->copy({ 
				parent => $sweep_set_translator{$sweep_set->id},
				child => $sweep_set_translator{$sweep_set->child->id},
			});

		}

	}

	#Housing slots

	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);

	my $msg = "Tournament ".$old_tourn->name." has been imported into this one.";
	$m->redirect("settings.mhtml?msg=$msg");

</%perl>
