<%args>
	$tourn
	$account
	$clone
	$erase   => undef
	$entries => undef
</%args>
<%perl>

	return unless $clone;

	if ($erase)  {
		Tab::Setting->set_sql( delete_event => " delete setting.* from setting, event where setting.type = 'event' and setting.event = event.id and event.tourn = ? ");
		Tab::Setting->set_sql( delete_class => " delete setting.* from setting, judge_group where setting.judge_group = judge_group.id and judge_group.tourn = ? and setting.type ='class' ");

		Tab::Setting->set_sql( delete_tourn => " delete setting.* from setting where setting.tourn = ? and setting.class='tourn'");

		Tab::Strike->set_sql( delete => " delete strike.* from strike,judge,judge_group where strike.judge = judge.id and judge.judge_group = judge_group.id and judge_group.tourn = ?");
		Tab::Judge->set_sql( delete => "delete judge.* from judge, judge_group where judge.judge_group = judge_group.id and judge_group.tourn = ? ");
		Tab::Entry->set_sql( delete => "delete entry.* from entry, school where entry.school = school.id and school.tourn = ? ");
		Tab::Round->set_sql( delete => "delete round.* from round, event where round.event = event.id and event.tourn = ? ");
		Tab::School->set_sql( delete => "delete from school where tourn = ? ");
		Tab::Event->set_sql( delete => "delete from event where tourn = ? ");
		Tab::JudgeGroup->set_sql( delete => "delete from judge_group where tourn = ? ");
		Tab::Timeslot->set_sql( delete => "delete from timeslot where tourn = ? ");

		Tab::Setting->sql_delete_event->execute($tourn->id);
		Tab::Setting->sql_delete_class->execute($tourn->id);
		Tab::Setting->sql_delete_tourn->execute($tourn->id);
		Tab::Strike->sql_delete->execute($tourn->id);
		Tab::Judge->sql_delete->execute($tourn->id);
		Tab::Entry->sql_delete->execute($tourn->id);
		Tab::Round->sql_delete->execute($tourn->id);
		Tab::School->sql_delete->execute($tourn->id);
		Tab::Event->sql_delete->execute($tourn->id);
		Tab::JudgeGroup->sql_delete->execute($tourn->id);
		Tab::Timeslot->sql_delete->execute($tourn->id);
	}

	my $old_tourn = Tab::Tourn->retrieve($clone);
	my $ostart = $old_tourn->start;

	# $diff is the change between the old start & the new start.  translates
	# all dates.

	my $diff = $tourn->start->delta_days($ostart);  

	my $reg_start = $old_tourn->reg_start->clone;
	$reg_start->add_duration($diff);

	my $reg_end = $old_tourn->end->clone;
	$reg_end->add_duration($diff);

	$tourn->reg_start($reg_start);
	$tourn->reg_end($reg_end);
	$tourn->update;

	#Settings
	foreach my $setting ($old_tourn->settings) {

		next unless $setting->value;
		next if $setting->value eq "text" && not defined $setting->value_text;

		next if Tab::Setting->search( tourn => $tourn->id, tag => $setting->tag, type => "tourn");

		my $nsetting = $setting->copy({
			tourn => $tourn->id
		});

		if ($nsetting->value eq "date") { 
			my $new_date = $nsetting->value_date->clone;
			$new_date->add_duration($diff);
			$nsetting->value_date($new_date);
		}

		$nsetting->update;
	}

	#Tiebreakers and sets
	my %tb_set_translator = ();
	my %already = map {$_->name => 1} $tourn->tiebreak_sets;

	foreach my $tb_set ($old_tourn->tiebreak_sets) {

		next if $already{$tb_set->name};

		my $ntb_set = $tb_set->copy;
		$ntb_set->tourn($tourn->id);
		$ntb_set->update;

		foreach my $tb ($tb_set->tiebreaks) { 
			my $ntb = $tb->copy;
			$ntb->tb_set($ntb_set->id);
			$ntb->update;
		}

		$tb_set_translator{$tb_set->id} = $ntb_set->id;

	}

	
	my @circuits;

	#Circuits
	foreach my $circuit ($old_tourn->tourn_circuits) { 

		unless (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->circuit->id)) { 
			my $ncircuit = $circuit->copy({
				tourn => $tourn->id,
				approved => 0
			});
		}

		push (@circuits, $circuit->circuit);
	}

	foreach my $housing ($old_tourn->housing_slots) { 

		my $nhousing = $housing->copy;
		$nhousing->tourn($tourn->id);

		my $new_night = $housing->night;
		$new_night->add_duration($diff);
		$nhousing->night($new_night);

		$nhousing->update;
	}

	#Limits on Double Entry
	my %event_double_translator = ();
	foreach my $ed ($old_tourn->event_doubles) { 
		my $ned = $ed->copy;
		$ned->tourn($tourn->id);
		$ned->update;
		$event_double_translator{$ed->id} = $ned->id;
	}

	#Tournament Sites
	foreach my $tournsite ($old_tourn->tourn_sites) {
		my $ntournsite = $tournsite->copy;
		$ntournsite->tourn($tourn->id);
		$ntournsite->update;
	}

	#Webpages
	if ($tourn->webname eq $old_tourn->webname) { 
		foreach my $webpage ($tourn->webpages) {
			my $nwebpage = $webpage->copy;
			$nwebpage->tourn($tourn->id);
			$nwebpage->update;
		}
	}

	#Concessions
	foreach my $concession ($old_tourn->concessions) {

		my $nconcession = $concession->copy;
		$nconcession->tourn($tourn->id);

		my $new_deadline = $concession->deadline;
		$new_deadline->add_duration($diff) if $new_deadline;
		$nconcession->deadline($new_deadline) if $new_deadline;

		$nconcession->update;
	}


	#Tournament Standing Fees
	foreach my $tourn_fee ($old_tourn->tourn_fees) {

		my $ntourn_fee = $tourn_fee->copy;
		$ntourn_fee->tourn($tourn->id);

		my $new_start = $ntourn_fee->start;
		$new_start->add_duration($diff) if $new_start;
		$ntourn_fee->start($new_start) if $new_start;

		my $new_end = $ntourn_fee->end;
		$new_end->add_duration($diff) if $new_end;
		$ntourn_fee->end($new_end) if $new_end;

		$ntourn_fee->update;
	}

	#Followers of this tournament, if it's actually the same tournament.
	if ($tourn->webname eq $old_tourn->webname) {
		foreach my $follower (Tab::FollowTourn->search( tourn => $old_tourn->id )) { 
			my $nfollow = $follower->copy;
			$nfollow->tourn($tourn->id);
			$nfollow->update;
		}
	}

	#Timeslots
	my %timeslot_translator = ();
	foreach my $ts ($old_tourn->timeslots) { 

		my $nts = $ts->copy;
		$nts->tourn($tourn->id);

		my $ntstart = $nts->start;
		$ntstart->add_duration($diff);
		$nts->start($ntstart);
		
		my $ntend = $nts->end;
		$ntend->add_duration($diff);
		$nts->end($ntend);

		$nts->update;

		$timeslot_translator{$ts->id} = $nts->id;

	}

	#Judge Groups
	my %judge_group_translator = ();
	my %jpool_translator = ();
	my %rating_subset_translator = ();

	foreach my $jg ($old_tourn->judge_groups) { 

		my $njg = $jg->copy;
		$njg->tourn($tourn->id);
		$njg->update;

		$judge_group_translator{$jg->id} = $njg->id;

		#Settings

		foreach my $setting ($jg->settings) {

			next if $njg->setting($setting->tag);

			my $nsetting = $setting->copy({
				judge_group => $njg->id	
			});

			$nsetting->judge_group($njg->id);

			if ($nsetting->value eq "date") { 
				if ($nsetting->value_date) { 
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
				}
			}

			$nsetting->update;
		}

		foreach my $jpool ($jg->jpools) { 
			my $npool = $jpool->copy;
			$npool->judge_group($njg->id);
			$npool->update;
			$jpool_translator{$jpool->id} = $npool->id;
		}

		foreach my $rs ($jg->rating_subsets) { 

			my $nrs = $rs->copy;
			$nrs->judge_group($njg->id);
			$nrs->update;

			$rating_subset_translator{$rs->id} = $nrs->id;
		
			#Rating/Preference Tiers
			foreach my $rating_tier ($rs->rating_tiers) {
				my $nrating_tier = $rating_tier->copy;
				$nrating_tier->rating_subset($nrs->id);
				$nrating_tier->update;
			}

		}

		foreach my $strike_time ($jg->strike_times) { 

			my $nstrike_time = $strike_time->copy;
			$nstrike_time->judge_group($njg->id);

			my $new_start = $strike_time->start;
			$new_start->add_duration($diff);
			$nstrike_time->start($new_start);

			my $new_end = $strike_time->end;
			$new_end->add_duration($diff);
			$nstrike_time->end($new_end);

			$nstrike_time->update;

		}

	}

	#Events
	my %event_translator = ();
	my %round_translator = ();

	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 

		my $nevent = $event->copy({  
			tourn         => $tourn->id,
			judge_group   => $judge_group_translator{$event->judge_group},
			event_double  => $event_double_translator{$event->event_double},
			rating_subset => $rating_subset_translator{$event->rating_subset}
		});

		$event_translator{$event->id} = $nevent;

        my @settings = Tab::Setting->search( event => $event->id, type => 'event');

        foreach my $setting (@settings) { 

            my $nsetting = $setting->copy({
                event => $nevent->id
            });

            if ($setting->tag eq "speaker_tbset") { 
                $nsetting->value($tb_set_translator{$setting->value});
                $nsetting->update;
            }

            if ($nsetting->value eq "date") { 
                my $new_date = $nsetting->value_date->clone;
                $new_date->add_duration($diff);
                $nsetting->value_date($new_date);
                $nsetting->update;
            }

        }

		# Copy the ballots from the old tournament into the new one
		system $Tab::s3_cmd." cp -r $Tab::s3_bucket/tourns/".$old_tourn->id."/events/".$event->id." $Tab::s3_bucket/tourns/".$tourn->id."/events/".$nevent->id;

		# Copy the rounds
		foreach my $round ($event->rounds) { 

			my $nround = $round->copy({
				event => $nevent->id
			});

			$nround->timeslot($timeslot_translator{$round->timeslot->id}) if $round->timeslot;
			$nround->tb_set($tb_set_translator{$round->tb_set->id}) if $round->tb_set;
			$nround->setting("motion", 0);
			$nround->update;

			$round_translator{$round->id} = $nround->id;

			foreach my $jpool ($round->jpools) { 
				Tab::JPoolRound->create({
					round => $nround->id,
					jpool => $jpool_translator{$round->jpool->id}
				});
			}

			foreach my $rpool ($round->rpools) { 

				Tab::RPoolRound->create({
					round => $nround->id,
					rpool => $rpool_translator{$round->rpool->id}
				});

				foreach my $room ($rpool->rooms) { 
					Tab::RPoolRoom->create({
						round => $nround->id,
						room => $room->id
					});
				}
			}

			foreach my $setting ($round->settings) {

				next if $setting->value eq "date";
				next if $setting->tag eq "entry_list_published";
				next if $setting->tag eq "motion";
				next if $setting->tag eq "cat_id";

				my $nsetting = $setting->copy({
					round => $nround->id
				});

			}

		}

	} # End of events

	Tab::Round->set_sql(clear_publish => "
        update round, event
            set round.published = 0,
            round.motion = NULL,
            round.online = 0,
            round.post_results = 0,
            round.created = NULL,
        where round.event = event.id
        and event.tourn = ?
	");

	Tab::Round->sql_clear_publish->execute($tourn->id);

	foreach my $room_strike ($old_tourn->room_strikes) { 

		my $nroom_strike = $room_strike->copy;
		$nroom_strike->delete if $nroom_strike->type eq "entry";
		$nroom_strike->delete if $nroom_strike->type eq "judge";
		$nroom_strike->tourn($tourn->id);
		$nroom_strike->timeslot($timeslot_translator{$room_strike->timeslot->id}) if $room_strike->timeslot;
		$nroom_strike->event($event_translator{$room_strike->event->id}) if $room_strike->event;

		if ($nroom_strike->start) { 
			my $new_start = $nroom_strike->start;
			$new_start->add_duration($diff);
			$nroom_strike->start($new_start);
		}
	
		if ($nroom_strike->end) { 
			my $new_end = $nroom_strike->end;
			$new_end->add_duration($diff);
			$nroom_strike->end($new_end);
		}
		
		$nroom_strike->update;

	}

	#Sweepstakes
	my %sweep_set_translator = ();
	foreach my $sweep_set ($old_tourn->sweep_sets) {

		my $nsweep_set = $sweep_set->copy({
			tourn => $tourn->id
		});

		$sweep_set_translator{$sweep_set->id} = $nsweep_set->id;

		foreach my $sweep_event ($sweep_set->sweep_events) { 

			my $nsweep_event = $sweep_event->copy({  
				event     => $event_translator{$sweep_event->id},
				sweep_set => $nsweep_set->id 
			});
		}

		foreach my $sweep_rule ($sweep_set->rules) { 

			if ($sweep_rule->tag eq "ignore_round") { 

				my $nsweep_rule = $sweep_rule->copy({  
					sweep_set => $nsweep_set->id,
					value     => $round_translator{$sweep_rule->value}
				});

			} else { 

				my $nsweep_rule = $sweep_rule->copy({  
					sweep_set => $nsweep_set->id 
				});

			}
		}
	}

	foreach my $sweep_set ($old_tourn->sweep_sets) {

		my @links = Tab::SweepInclude->search( parent => $sweep_set );

		foreach my $link (@links) { 

			my $nlink = $link->copy({ 
				parent => $sweep_set_translator{$link->parent->id},
				child  => $sweep_set_translator{$link->child->id},
			});
		}

	}


	# Schools if we're doing that thing

	if ($entries) {

		my %school_translator;

		foreach my $school ($old_tourn->schools) { 
			my $new_school = $school->copy({ tourn => $tourn->id });
			$school_translator{$school->id} = $new_school;
		}

		my %judge_translator;

		foreach my $judge ($m->comp("/funclib/tourn_judges.mas", tourn => $old_tourn)) { 

			my $school = $school_translator{$judge->school} if $judge->school;
			$school = 0 unless $school;

			my $new_judge = $judge->copy({ judge_group => $judge_group_translator{$judge->judge_group->id}, school => $school });

			$judge_translator{$judge->id} = $new_judge;

			foreach my $strike ($judge->strikes) { 

				next if $strike->entry;

				$strike->copy({ 
					tourn  => $tourn->id,
					school => $school_translator{$strike->school},
					event  => $event_translator{$strike->event},
					judge  => $new_judge->id
				});

			}

			foreach my $setting ($judge->settings) { 
				$setting->copy({  judge => $new_judge->id });
			}

		}


		foreach my $school ($old_tourn->schools) { 

			my $new_school = $school_translator{$school->id};

			foreach my $entry ($school->entries) { 

				my $event_id = $entry->event->id;
				my $new_event = $event_translator{$event_id};

				Tab::debuglog("Event $event_id translated to new $new_event");
				
				next unless $new_event;

				my $new_entry = $entry->copy({ school => $new_school->id,  event => $new_event });

				foreach my $es ($entry->entry_students) {
					$es->copy({ entry => $new_entry });
				}

				foreach my $strike ($entry->strikes) { 
					$strike->copy({ 
						tourn => $tourn->id,
						entry => $new_entry->id,
						judge => $judge_translator{$strike->judge->id} });
				}

				foreach my $rating ($entry->ratings) { 
					$rating->copy({ 
						tourn => $tourn->id,
						entry => $new_entry->id,
						judge => $judge_translator{$rating->judge->id} });
				}

			}

		}

	}

	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);

	my $msg = "Tournament ".$old_tourn->name." has been imported into this one.";
	$m->redirect("settings.mhtml?msg=$msg");

</%perl>
