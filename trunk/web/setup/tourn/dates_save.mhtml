<%args>
	$tourn
	$account
	$name                => undef
	$circuit_id          => undef
	$start               => undef
	$starttime           => undef
	$end                 => undef
	$endtime             => undef
	$reg_start           => undef
	$reg_starttime       => undef
	$reg_end             => undef
	$reg_endtime         => undef
	$drop_deadline       => undef
	$drop_deadlinetime   => undef
	$judge_deadline      => undef
	$judge_deadlinetime  => undef
	$freeze_deadline     => undef
	$freeze_deadlinetime => undef
	$fine_deadline       => undef
	$fine_deadlinetime   => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $startdt;
	my $enddt;

	my $reg_startdt;
	my $reg_enddt;

	eval { 
		$startdt = Tab::dtme($start, $starttime, $tz);
		$enddt = Tab::dtme($end, $endtime, $tz);

		$reg_startdt = Tab::dtme($reg_start,$reg_starttime, $tz);
		$reg_enddt = Tab::dtme($reg_end,$reg_endtime, $tz);
	};

	unless ($startdt) { 
		my $err = "Start date was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}
	unless ($enddt) { 
		my $err = "End date was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}
	unless ($reg_startdt) { 
		my $err = "Registration start date was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}
	unless ($reg_enddt) { 
		my $err = "Registration deadline was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year < 200 || $enddt->year < 200) {
		my $err = "Those tournament start or end dates are set to occur during the Roman Empire.  <br /><br />I doubt that's what you want.  <br /><br />Please use full years (2014 instead of 14).";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year < 2000 || $enddt->year < 2000) {
		my $err = "The year you chose for your start or end date is several years in the past. <br /> <br />I doubt that's what you want.  Try again?";
		$m->redirect("dates.mhtml?err=$err");
	}

	$tourn->start($startdt);
	$tourn->end($enddt);

	$tourn->reg_end($reg_enddt);
	$tourn->reg_start($reg_startdt);

	$tourn->update;

	my $drop_deadlinedt;
	my $judge_deadlinedt;
	my $freeze_deadlinedt;
	my $fine_deadlinedt;

	eval { 
		$drop_deadlinedt = Tab::dtme($drop_deadline,$drop_deadlinetime, $tz);
		$judge_deadlinedt = Tab::dtme($judge_deadline,$judge_deadlinetime, $tz);
		$freeze_deadlinedt = Tab::dtme($freeze_deadline,$freeze_deadlinetime, $tz);
		$fine_deadlinedt = Tab::dtme($fine_deadline,$fine_deadlinetime, $tz);
	};

	$drop_deadlinedt = $reg_enddt->clone unless $drop_deadlinedt;
	$judge_deadlinedt = $reg_enddt->clone unless $judge_deadlinedt;
	$freeze_deadlinedt = $reg_enddt->clone unless $freeze_deadlinedt;
	$fine_deadlinedt = $reg_enddt->clone unless $fine_deadlinedt;

	$tourn->setting("drop_deadline", "date", $drop_deadlinedt);
	$tourn->setting("judge_deadline", "date", $judge_deadlinedt);
	$tourn->setting("freeze_deadline", "date", $freeze_deadlinedt);
	$tourn->setting("fine_deadline", "date", $fine_deadlinedt);

	my $msg = "Date changes have been saved";

	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);

	$m->redirect("dates.mhtml?msg=$msg");

</%init>
