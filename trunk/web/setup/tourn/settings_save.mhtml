<%args>
	$tourn
	$from                  => undef
	$require_adult_contact => 0
	$hidden                => 0
	$track_reg_changes     => 0
	$publish_schools       => 0
	$overall_cap           => 0
	$hide_codes            => 0
	$school_codes          => 0
	$first_school_code     => 0
	$ncfl                  => 0
	$regions               => 0
	$closed_entry          => 0
	$student_claim         => 0
	$onsite_registration   => 0
	$onsite_only_paid      => 0
	$onsite_starts         => undef
	$onsite_startstime     => undef
	$onsite_ends           => undef
	$onsite_endstime       => undef
	$regpack               => undef
</%args>
<%init> 

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $onsite_endsdt;
	my $onsite_startsdt;

	eval { 
		$onsite_endsdt = Tab::dtme($onsite_ends,$onsite_endstime, $tz);
	};
	eval { 
		$onsite_startsdt = Tab::dtme($onsite_starts,$onsite_startstime, $tz);
	};

	if ($onsite_registration && (not defined $onsite_endsdt || not defined $onsite_startsdt)) { 
		$m->print("You must specify a date for onsite registration to begin and end.  Please go back and try again");
		$m->abort;
	}

	if ($onsite_registration && ($onsite_startsdt < $tourn->reg_end)) { 

		my $err = "You cannot start onsite registration before your tournament entry deadline. <br /> Onsite registration is to
		confirm when people have arrived at your tournament physically and should be only used for the day before or day of your
		tournament.";

		$m->redirect("settings.mhtml?err=$err");

	}	

	$tourn->setting("require_adult_contact", $require_adult_contact);
	$tourn->setting("track_reg_changes", $track_reg_changes);
	$tourn->setting("publish_schools", $publish_schools);
	$tourn->setting("overall_cap", $overall_cap);
	$tourn->setting("hide_codes", $hide_codes);
	$tourn->setting("school_codes", $school_codes);
	$tourn->setting("first_school_code", $first_school_code);
	$tourn->setting("ncfl", $ncfl);
	$tourn->setting("regions", $regions);
	$tourn->setting("closed_entry", $closed_entry);
	$tourn->setting("onsite_registration", $onsite_registration);
	$tourn->setting("onsite_only_paid", $onsite_only_paid);
	$tourn->setting("student_claim", $student_claim);
	$tourn->setting("onsite_ends", "date", $onsite_endsdt) if $onsite_endsdt;
	$tourn->setting("onsite_starts", "date", $onsite_startsdt) if $onsite_startsdt;

	$tourn->hidden($hidden);
	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);
	$tourn->update;

	if ($regpack) { 
        my $req = Apache2::Request->new($r);
        my $upload = $req->upload("regpack");

		my @handles = $r->upload;
		my $file = $req->upload($handles[0]);
		my $filename = $file->tempname if $file;

		if ($upload) { 
			my $filename  = $upload->filename;
			$filename =~ s/[^\w.]//g;
			$filename =~ s/\s//g;
			my $filepath = "$Tab::file_root/files/tourns/".$tourn->id."/";
			my $garbage = `rm -f $filepath`;
			$garbage = `mkdir -p $filepath`;

			my $filetemp = $upload->tempname;
			$garbage = `cp $filetemp $filepath/$filename`;
			system $Tab::s3_cmd." put $filepath/$filename ".$Tab::s3_bucket."/tourns/".$tourn->id."/";

			$tourn->setting("registration_packet", $filename);
		}
	}

	my $msg = "Tournament settings saved";

	$m->redirect("settings.mhtml?msg=$msg");

</%init> 

