<%args>
	$person
	$tourn
	$tourn_settings
	$event_id   => undef
	$school_id  => undef
	$student_id => undef
	$title      => undef
	$author     => undef
	$seed       => undef
	$code       => undef
	$from       => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id) if $event_id;
	my $school = Tab::School->retrieve($school_id) if $school_id;

	unless ($school) {
		$m->print("No school found");
		$m->abort;
	}

	unless ($event) {
		$m->print("No event found");
		$m->abort;
	}

	my %event_settings = $event->all_settings;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    my $now = DateTime->now;
    $now->set_time_zone($tz);

	my $fine_amount;
	my $fine_dt = $tourn_settings->{"fine_deadline"};
	$fine_dt->set_time_zone($tourn->tz) if $fine_dt;

	if ($fine_dt < $now) {
		$fine_amount = $tourn_settings->{"drop_fine"};
	}

	my $minimum = $event_settings{"min_entry"} || 1;
	my %already;
	my $err;

	foreach my $slot (1 .. ($event_settings{"max_entry"} || 1)) {

		if ($slot < $minimum && not defined $ARGS{$slot}) {
			$err = "You did not enter enough students for a valid entry";
			$m->redirect("entries.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		if ($already{$ARGS{$slot}}) {
			$err = "You entered the same student twice.  Please try again.  Student is ".$ARGS{$slot};
			$m->redirect("entries.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		$already{$ARGS{$slot}}++ if $ARGS{$slot};
	}

	Tab::Entry->set_sql(already => "
		select entry.*
			from entry, entry_student
		where entry.event = ?
			and entry.id = entry_student.entry
			and entry_student.student = ?
	");

	my %exists;

	foreach my $student_id (keys %already) {

		my %ok = map {$_->id => $_} Tab::Entry->search_already($event->id, $student_id);

		if (%exists) {
			foreach my $key (keys %exists) {
				delete $exists{$key} unless $ok{$key};
			}
		} else {
			%exists = %ok;
		}
	}

	my $entry;
	my @keys = keys %exists if %exists;
	my $key = shift @keys if @keys;
	$entry = $exists{$key} if $key;

	my @students;

	if ($entry) {

		$entry->unconfirmed(0);
		$entry->dropped(0);
		$entry->update();

		foreach my $student_id (keys %already) {
			$entry->add_student($student_id);
			push (@students, Tab::Student->retrieve($student_id));
		}

	} else {

		$entry = Tab::Entry->create({
			tourn         => $tourn->id,
			school        => $school_id,
			event         => $event_id,
			dropped       => 0,
			waitlist      => 0,
			registered_by => $person->id
		});

		foreach my $student_id (keys %already) {
			$entry->add_student($student_id);
			push (@students, Tab::Student->retrieve($student_id));
		}
	}

	$entry->setting("title", $title);
	$entry->setting("author", $author);

	if ($event_settings{"apda"}) {
		$entry->setting("pairing_seed", 4);
	}

    if ($tourn_settings->{"track_reg_changes"}) {

        my $description = "Entered ".$event->abbr." entry $code (".$entry->name.") as an admin.";

        my $change = $m->comp("/funclib/log.mas",
            tourn       => $tourn->id,
            school      => $school_id,
            type        => "registration",
            description => $description,
			person      => $person
        );

    }


	if ($fine_amount > 0) {

		my $add_reason = "Late Add in ". $entry->event->abbr;

		my $fine = Tab::Fine->create({
			school    => $school_id,
			amount    => $fine_amount,
			reason    => $add_reason,
			levied_at => $now,
			levied_by => $person->id,
			deleted   => 0,
			payment   => 0
		}) if $fine_amount > 0;
	}

	my $name;

	if (scalar @students > 2) {
		$name = $school->short_name." ";
		foreach my $stud (@students) {
			$name .= ucfirst substr($stud->last,0,1) if $stud;
		}
	} else {
		$name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
		$name = $students[0]->last." & ".$students[1]->last if scalar @students == 2;
	}

	$entry->name($name);

    if ($code && $code ne $entry->code) {

        my $other = Tab::Entry->search_where({
			code        => $code,
			school      => $school->id,
			event       => $event->id,
			unconfirmed => 0,
			id          => {
				'!=', $entry->id
			}
		})->first;

		if ($other) {
            $err .= "Code $code is already taken.  Choose another";
			$m->redirect("/register/entry/edit.mhtml?school_id=$school_id&entry_id=".$entry->id."&err=$err");
        } else {
            $entry->code($code);
        }
    }

	$entry->update();

	foreach my $student (@students) {

		$m->comp("/funclib/person_conflict.mas",
			entered => $person,
			tourn   => $tourn,
			person  => $student->person
		) if $student->person;
	}

	my $msg = $entry->name." registered in ".$event->name;

    if ( $event_settings{"ask_for_titles"}
            || $event_settings{"code_style"} eq "register"
            || $event_settings{"ask_quals"}
            || $event_settings{"max_entry"} > 2
            || $event_settings{"apda_seeds"}
            || $err
        ) {

		my $msg = "Additional details required";
		$m->redirect("/register/entry/edit.mhtml?entry_id=".$entry->id."&msg=$msg&err=$err");
	}

	if ($from eq "roster") {
		$m->redirect("/register/event/roster.mhtml?event_id=$event_id&msg=$msg&err=$err");
	}

	$m->redirect("entries.mhtml?school_id=$school_id&event_id=$event_id&msg=$msg&err=$err");

</%init>
