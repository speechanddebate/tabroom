<%args>
	$person
	$perms
	$tourn
	$tourn_settings
	$entry_id       => undef
	$property_name  => undef
	$property_value => undef
	$setting_name   => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($entry_id);

	unless ($entry) {
		$m->print('{ "error": true, "message": "No entry found for ID '.$entry_id.'"}');
		$m->abort();
	}

	my $now = DateTime->now(time_zone => "UTC");
	my $message;

	if ($property_name eq "ada") {

		$message = "not requiring accessible rooms";
		$message = "requiring accessible rooms" if $property_value == 1;

	} elsif ($property_name eq "unconfirmed") {

		if ($property_value == 1) {

			#Gotta reverse or I just know it's going to confuse the NSDA office
			$property_value = 0;

			$message = "accepted";

			foreach my $student ($entry->students) {
				foreach my $entry ($student->entries) {
					if (
						$entry->event->setting("supp")
						|| $entry->event->setting("conn")
					) {
						$entry->unconfirmed(0);
						$entry->update();
					}
				}
			}

			$entry->setting("accepted_at", "date", $now);
			$entry->setting("accepted_by", $person->id);

			Tab::ChangeLog->create({
				person      => $person,
				tourn       => $tourn,
				school      => $school,
				event       => $entry->event,
				tag         => "registration",
				entry       => $entry,
				description => "Entry accepted",
			});

		} else {

			#Gotta reverse or I just know it's going to confuse the NSDA office
			$property_value = 1;
			$message .= "accepted";

			$m->comp("/funclib/log.mas",
				tourn       => $tourn,
				person      => $person,
				entry       => $entry,
				type        => "registration",
				description => "Entry marked as NOT accepted"
			);

		}

	} elsif ($property_name eq "dropped") {

		if ($property_value == 1) {

			$message .= "dropped";
			$entry->setting("dropped_at", "date", $now);
			$entry->setting("dropped_by", $person->id);

			if ($setting_name eq "apply_fine") {

				my $fine_amount = $tourn_settings->{"drop_fine"};

				my $event = $entry->event;
				my $event_fine = $event->setting("drop_fine");
				$fine_amount = $event_fine if $event_fine;

				my $drop_reason = "Dropped ". $entry->code;

				my $fine = Tab::Fine->create({
					school    => $entry->school->id,
					amount    => $fine_amount,
					reason    => $drop_reason,
					tourn     => $tourn->id,
					levied_at => $now,
					levied_by => $person->id,
					deleted   => 0,
					payment   => 0
				}) if $fine_amount > 0;

				$message .= " and drop fine of $fine_amount added";
			}

		} else {

			$message .= "active";
			$entry->setting("dropped_at", 0);
			$entry->setting("dropped_by", 0);

			if ($setting_name eq "apply_fine") {
				my $reason_key = "Dropped ".$entry->code;
				foreach my $fine (Tab::Fine->search(
					school => $entry->school->id,
					reason => $reason_key )
				) {
					$fine->delete();
				}
				$message .= " and drop fine removed ";
			}
		}
	}

	if ($property_name eq "accepted") {

	} elsif ($property_name) {
		$entry->$property_name($property_value);
		$entry->update();
	}

	if ($setting_name eq "rejected") {

	} elsif ($setting_name && $setting_name ne "apply_fine") {
		$entry->setting($setting_name, $property_value);
	}

	$m->print('{ "error": false, "message": "'.$entry->name.' marked as '.$message.'"}');

	$m->abort();

</%init>

