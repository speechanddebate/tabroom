<%args>
	$person
	$session
	$event_id
	$school_id  => undef
	$student_id => undef
	$partner_id => undef
	$waitlist   => "0"
	$title      => undef
	$author     => undef
	$code       => undef
	$seed       => undef
	$hybrid     => undef
</%args>
<%init>

	my $now = DateTime->now;

	my $event = Tab::Event->retrieve($event_id);
	my $school = Tab::School->retrieve($school_id);
	my $tourn = $event->tourn;

	$waitlist = 1 if $event->setting("waitlist_all");
	my $min = $event->setting("min_entry") || 1;
	my $max = $event->setting("max_entry") || 1;

	my @students;

	my $msg;
	my $err;
	my $name;

	my $student = Tab::Student->retrieve($student_id) if $student_id;
	my $partner = Tab::Student->retrieve($partner_id) if $partner_id;

	if ($max > 1) {

		unless ( ($student && $partner) || ($min == 1 && ($student || $partner)) ) {
			$err = "You did not enter enough students for that entry.  Try again";
			$m->redirect("/register/school/hybrid_entry.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		if ($student_id == $partner_id) {
			$err = "You have tried to enter the same person twice in a team event.  Try again.";
    	   	$m->redirect("/register/school/hybrid_entry.mhtml?err=$err&event_id=$event_id&school_id=$school_id");
		}
	}

	samecheck($school, $student, $event);
	samecheck($school, $partner, $event);

	push (@students, $student);
	push (@students, $partner) if $partner;

	if ($max > 1) {

		$name = "Team ".$school->short_name;

	} elsif ($max == 2) {

		$name = $student->last." & ".$partner->last if $student && $partner;
		$name = $student->first." & ".$student->last if $student &! $partner;
		$name = $partner->first." & ".$partner->last if $partner &! $student;

	} else {

		unless ($student) {
			$err = "You did not enter a student for that entry.  Try again";
			$m->redirect("/register/school/hybrid_entry.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		samecheck($school,$student, $event);
		push (@students, $student);
		$name = $student->first." ".$student->last;
	}

	sub samecheck {

		my ($school, $student, $event) = @_;
		my $tourn = $event->tourn;

		my @entries = $m->comp(
			'/funclib/student_entries.mas',
			student => $student,
			active  => 1,
			tourn   => $tourn
		);

		if (grep $event->id == $_->event->id, @entries) {
			my $err = $student->first." ".$student->last." is already entered";
			$m->redirect("/register/school/hybrid_entry.mhtml?school_id=".$school->id."&event_id=".$event->id."&err=$err")
		}
	}

	my $other_school;

	if ($hybrid && $partner) {

		$other_school = Tab::School->search(
			chapter => $partner->chapter->id,
			tourn   => $tourn->id
		)->first;

		unless ($other_school) {
			$other_school = $m->comp(
				"/register/data/add_school_save.mhtml",
				person    => $person,
				chapter_id => $partner->chapter->id,
				tourn      => $tourn,
				return     => "yes"
			);
		}
	}

	my $entry = Tab::Entry->create({
		tourn         => $tourn->id,
		school        => $school_id,
		waitlist      => $waitlist,
		event         => $event_id,
		name          => $name,
		registered_by => $person->id,
		dropped       => 0,
	});

	foreach my $student (@students) {

		next unless $entry;
		next unless $student > 0;

		my $es = Tab::EntryStudent->create({
			entry   => $entry->id,
			student => $student->id
		});

		$m->comp("/funclib/person_conflict.mas",
			tourn   => $tourn,
			entered => $person,
			person  => $student->person
		) if $student->person;

	}

	if ($other_school) {
		Tab::Strike->create({
			entry  => $entry->id,
			type   => "hybrid",
			tourn  => $tourn->id,
			school => $other_school->id
		});

	}

	if ($tourn->setting("track_reg_changes")) {

		my $description = $person->first." ".$person->last." entered ".$event->abbr." entry $code (".$name.")";

		my $change = $m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			school      => $school_id,
			type        => "registration",
			description => $description,
			person      => $person
		);

	}

	$name =~ s/\&/and/g;

	$msg = $name." has been entered in ". $event->name;
	$msg = $name." was placed on the waitlist " if $waitlist;

	if (       $event->setting("ask_for_titles")
			|| $event->setting("ask_quals")
			|| $max > 2
			|| $event->setting("apda")
			|| $err
		) {

		$m->redirect("edit.mhtml?entry_id=".$entry->id."&school_id=$school_id&err=$err");

	}

	$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
	$entry->update;

	$m->redirect("entries.mhtml?event_id=$event_id&school_id=$school_id&msg=$msg");

</%init>
