<%args>
	$tourn
	$person
	$perms
	$judge_id      => undef
	$property_name  => undef
	$property_value => undef
	$setting_name   => undef
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($judge_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$judge_id.'"}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($property_name);

	unless ($entry) {
		$m->print('{ "error": true, "message": "No entry found for ID '.$property_name.'"}');
		$m->abort();
	}

	my $message;

	my $now = DateTime->now();

	if ($property_value == 1) {

		if ($setting_name eq "school") {

			unless (Tab::Strike->search(
				school => $entry->school->id,
				judge  => $judge->id,
				tourn  => $tourn->id
			)->first) {

				Tab::Strike->create({
					type       => "school",
					school     => $entry->school->id,
					judge      => $judge->id,
					tourn      => $tourn->id,
					entered_by => $person->id
				});

			}

			$message = $entry->school->short_name." whole school struck against ".$judge->first." ".$judge->last;

		} elsif ($setting_name eq "conflict") {

			unless (Tab::Strike->search(
				entry    => $entry->id,
				type     => "entry",
				judge    => $judge->id,
				tourn    => $tourn->id,
				conflict => 1
			)->first) {

				Tab::Strike->create({
					type       => "entry",
					entry      => $entry->id,
					registrant => 1,
					conflict   => 1,
					judge      => $judge->id,
					tourn      => $tourn->id,
					entered_by => $person->id
				});

			}

			$message = $entry->code." conflicted against ".$judge->first." ".$judge->last;


		} else {

			unless (Tab::Strike->search(
				entry => $entry->id,
				type  => "entry",
				judge => $judge->id,
				tourn => $tourn->id
			)->first) {

				Tab::Strike->create({
					type       => "entry",
					registrant => 1,
					entry      => $entry->id,
					judge      => $judge->id,
					tourn      => $tourn->id,
					entered_by => $person->id
				});

			}

			$message = $entry->code." struck against ".$judge->first." ".$judge->last;
		}

	} else {

		if ($setting_name eq "school") {

			foreach (Tab::Strike->search(
				school => $entry->school->id,
				judge  => $judge->id,
				tourn  => $tourn->id
			)) {
				$_->delete();
			}

			$message = $entry->school->short_name." school strike against ".$judge->first." ".$judge->last." deleted";

		} elsif ($setting_name eq "conflict") {
				
			foreach (Tab::Strike->search(
				entry    => $entry->id,
				type     => "entry",
				conflict => 1,
				judge    => $judge->id,
				tourn    => $tourn->id
			)) {
				$_->delete();

			}

			$message = $entry->code." strike against ".$judge->first." ".$judge->last." deleted";

		} else {

			foreach (Tab::Strike->search(
				entry    => $entry->id,
				type     => "entry",
				conflict => 0,
				judge    => $judge->id,
				tourn    => $tourn->id
			)) {

				$_->delete();
			}

			$message = $entry->code." strike against ".$judge->first." ".$judge->last." deleted";
		}
	}

	$m->print('{ "error": false, "message": "'.$message.'"}');

	$m->abort();

</%init>

