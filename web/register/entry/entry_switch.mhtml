<%args>
	$person
	$perms
	$entry_id       => undef
	$property_name  => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
	$dbh
	$tourn
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($entry_id);

	unless ($entry) {
		$m->print('{ "error": true, "message": "No entry found for ID '.$entry_id.'"}');
		$m->abort();
	}

	my $check_sth = $dbh->prepare("
		select tourn.id
			from (tourn, event, entry)
		where 1=1
			and entry.id = ?
			and entry.event = event.id
			and event.tourn = tourn.id
	");

	$check_sth->execute($entry->id);
	my ($sent_tourn) = $check_sth->fetch();

	unless ($sent_tourn == $tourn) {
		$m->abort("/funclib/abort.mas", message => "You are attempting to edit a tournament element that is not in your current tournament: ".$tourn->name);
	}

	my $message;
	my @replace;

	if ($property_name eq "ada") {
		$message = "not needing accessible rooms";
		$message = "needing accessible rooms" if $property_value == 1;
	} else {
		$message .= " not " if $property_value == 0;
		$message .= $property_name;
	}

	if ($setting_name) {

		if ($setting_name eq "no_elims") {
			$message = "eligible to clear";
			$message = "in" . $message if $property_value == 1;
		}

		if ($setting_name eq "nsda_vacate") {
			$message = " ceding this entry's slot to Nationals";
			$message = "not" . $message if $property_value != 1;
		}

		if ($setting_name eq "open_prefs") {
			$message = " being able to fill out prefs after the deadline";
			$message = "not" . $message if $property_value != 1;
		}

		if ($setting_name eq "exclude_from_sweeps") {
			$message = " earning sweepstakes points";
			$message = "not" . $message if $property_value == 1;
		}

		if ($setting_name eq "dq") {
			$entry->dropped(1);
			$entry->update();
			$message .= " disqualified";
		}

		if ($setting_name eq "reregistered") {

			#Check Extemp Debate

			if ($entry->event->setting("supp")) {

				if ($entry->event->type eq "debate") {

					Tab::Entry->set_sql( not_xdb => "
						select xdb.id, xdb_event.abbr
						from entry, entry_student, entry_setting, event,
							entry xdb, entry_student xdb_es,
							event xdb_event, event_setting

						where entry.id = ?
							and entry_student.entry = entry.id
							and entry_student.student = xdb_es.student
							and xdb_es.entry = xdb.id

							and xdb.event = xdb_event.id
							and xdb_event.type != 'debate'

							and xdb_event.id = event_setting.event
							and event_setting.tag = 'supp'

							and entry_setting.entry = xdb.id
							and entry_setting.tag = 'reregistered'

							and xdb_event.tourn = event.tourn
							and event.id = entry.event
					");

					if (Tab::Entry->search_not_xdb($entry->id)) {

						$message = "Cannot register in both Debate supps and Speech supps";

						my %response = (
							error   => 1,
							message => $message,
							replace => \@replace
						);

						$m->print(JSON::encode_json(\%response));

						$m->abort();
					}

				} else {

					Tab::Entry->set_sql( xdb => "
						select xdb.id, xdb_event.abbr
						from entry, entry_student, entry_setting, event,
							entry xdb, entry_student xdb_es,
							event xdb_event, event_setting

						where entry.id = ?
							and entry_student.entry = entry.id
							and entry_student.student = xdb_es.student
							and xdb_es.entry = xdb.id

							and xdb.event = xdb_event.id
							and xdb_event.type = 'debate'

							and xdb_event.id = event_setting.event
							and event_setting.tag = 'supp'

							and entry_setting.entry = xdb.id
							and entry_setting.tag = 'reregistered'

							and xdb_event.tourn = event.tourn
							and event.id = entry.event
					");

					if (Tab::Entry->search_xdb($entry->id)) {

						$message = "Cannot register in both Debate supps and Speech supps";

						my %response = (
							error   => 1,
							message => $message,
							replace => \@replace
						);

						$m->print(JSON::encode_json(\%response));

						$m->abort();
					}
				}
			}

			$message = " re-registered for ".$entry->event->abbr;

			my $replace;

			if ($property_value == 1) {
				$entry->dropped(0);
				$property_value = $person->id;
				$replace = {
					id      => $entry->id,
					content => "Confirmed by <br />".$person->email
				};

			} else {
				$message = "NOT " . $message;
				$entry->dropped(1);
				$replace = {
					id      => $entry->id,
					content => "Not Confirmed"
				};
			}

			push @replace, $replace;
			$entry->update();
		}

		$entry->setting($setting_name, $property_value);

		unless ($message) {
			$message .= " not " unless $property_value;
			$message .= $setting_name;
		}

	} elsif ($property_name eq "active") {

		my $dropped_value = 1;
		$dropped_value = 0 if $property_value == 1;

		if ($dropped_value) {
			$message = "Marked as dropped";
		} else {
			$message = "Marked as active";
		}

		$entry->dropped($dropped_value);
		$entry->update();

	} else {

		$entry->$property_name($property_value);

		if ($property_name eq "dq") {
			$entry->dropped($property_value);
		}

		$entry->update();
	}

	if ($property_name eq "waitlist") {

		if ($property_value != 1) {

			my $now = DateTime->now;
			$entry->setting("off_waitlist", "date", $now);

			$m->comp("/funclib/unwaitlist_entry.mas",
				entry  => $entry,
				person => $person
			);

			$message = "off waitlist.  <br />Coaches notified by email";
		} else {
			$entry->setting("off_waitlist", 0);
			$message = "waitlisted";
		}
	}

	my $msg = $entry->name.' marked as '.$message;

	Tab::ChangeLog->create({
		tag         => "tabbing",
		person      => $person,
		entry       => $entry,
		tourn       => $tourn,
		description => $msg,
	});

    my %response = (
		error   => 0,
		message => $msg,
		replace => \@replace
    );

    $m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>

