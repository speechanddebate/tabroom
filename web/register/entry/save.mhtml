<%args>
	$tourn
	$tourn_settings
	$person
	$dbh
	$entry_id     => undef
	$name         => undef
	$code         => undef
	$seed         => undef
	$pairing_seed => undef
	$atlarge      => undef
	$pod          => undef
</%args>
<%init>

	my $entry = Tab::Entry->retrieve(int($entry_id));

	unless ($entry) {
		$m->comp("/funclib/abort.mas", message => "No entry found for ID $entry_id");
	}

	my $school = $entry->school;
	my $now = DateTime->now();

	unless ($name) {
		$name = $m->comp("/funclib/entry_name.mas", entry => $entry);
	}

	if ($name && $name ne $entry->name) {
		$entry->name($name);
		$entry->update;
	}

	my $event = $entry->event;
	my %event_settings = $event->all_settings;
	my %entry_settings = $entry->all_settings;

	$code =~ s/[^\w\s&-\/]//g;

	my $msg;
	my $err;

	if ($event_settings{"code_style"} eq "names") {
		$code = $name;
	}

	if ($code ne $entry->code || (not defined $code)) {

		my @existing;

		if ($code && (not defined $tourn_settings->{"nonunique_entry_codes"}))  {

			Tab::Entry->set_sql( by_code => "
				select distinct entry.*
					from entry, event
				where entry.event = event.id
					and event.tourn = ?
					and entry.code = ?
					and entry.unconfirmed = 0
				order by entry.name
			");

			push @existing, Tab::Entry->search_by_code($tourn->id, $code);

			Tab::Judge->set_sql( by_code => "
				select distinct judge.*
					from judge, category
				where judge.category = category.id
					and category.tourn = ?
					and judge.code = ?
				order by judge.last
			");

			push @existing, Tab::Judge->search_by_code($tourn->id, $code);
		}

		if (@existing) {
			$err = "Warning: ".scalar @existing." entries or judges with code $code already exist.";
		}

		$msg .= " Entry code ".$entry->code." changed to ".$code;
		$entry->code($code);
		$entry->update();

		my $change = $m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			entry       => $entry,
			event       => $event,
			type        => "tabbing",
			description => $msg,
			person      => $person
		);
	}

	my @keys = (
		"backtab",
		"seed",
		'atlarge',
		'observers',
		'pod',
		'coach_script',
	);

	if ($person->site_admin) {
		push @keys, "source_entry";
	}

	if ($tourn_settings->{"nsda_district"}
		|| $tourn_settings->{"nsda_ms_nats"}
		|| $tourn_settings->{"nsda_nats"}
	) {
		push @keys, "nsda_house_bloc";
	}


	foreach my $key (@keys) {
		if ($ARGS{$key} && $entry_settings{$key} eq $ARGS{$key}) {
			$entry->setting($key, $ARGS{$key});
		} elsif (not defined $ARGS{$key} && $entry_settings{$key}) {
			$entry->setting($key, 0);
		}
	}

    if ($seed eq "full") {
        $entry->setting("pairing_seed", 1);
    } elsif ($seed eq "half") {
        $entry->setting("pairing_seed", 2);
    } elsif ($seed eq "free") {
        $entry->setting("pairing_seed", 3);
    } elsif ($event_settings{"apda"}) {
        $entry->setting("pairing_seed", 4);
    } else {
		$entry->setting("pairing_seed", $pairing_seed);
    }

	if ($tourn_settings->{"nsda_nats"}) {

		unless ($ARGS{"coach_points"}) {
			$ARGS{"coach_points"} = $ARGS{"coach_points_id"};
		}

		if ($ARGS{"coach_points"} && $ARGS{"coach_points"} ne $entry_settings{coach_points} ) {

			my $coach_person = Tab::Person->search(
				nsda => $ARGS{"coach_points"}
			)->first;

			unless ($coach_person) {
				$coach_person = $m->comp(
					"/funclib/nsda/user_import.mas",
					nsda_id => $ARGS{"coach_pointsn"}
				);
			}

			if ($coach_person) {
				$entry->setting("coach_points", $ARGS{"coach_points"});
			}

		} elsif ( (not defined $ARGS{coach_points}) && $entry_settings{coach_points} )   {
			$entry->setting("coach_points", 0);
		}
	}

	if ($event_settings{"breakouts"}) {

		foreach my $breakout (1 .. $event_settings{"breakouts"}) {
			next if $event_settings{"breakout_".$breakout."_delete"};

			if ($ARGS{"breakout_".$breakout}) {
				$entry->setting("breakout_".$breakout, $ARGS{"breakout_".$breakout});
			} else {
				$entry->setting("breakout_".$breakout, 0);
			}
		}
	}

	$msg = "Entry information updated";

	if ($tourn_settings->{'nsda_nats'}) {

		my $natlog;

		if ($event_settings{"supp"} || $event_settings{"conn"}) {

			if ($ARGS{"reregistered"}) {

				if ($ARGS{"reregistered"} ne $entry_settings{"reregstered"}) {
					$entry->setting("reregistered", $ARGS{"reregistered"});
					$natlog = "Entry ".$entry->code." re-registered";
				}

				if ($entry->unconfirmed > 0) {
					$entry->unconfirmed(0);
				}

				if ($entry->dropped > 0) {
					$entry->dropped(0);
				}

				$entry->update();

			} elsif ($entry_settings{"reregistered"}) {

				if ($entry_settings{"reregistered"}) {
					$entry->setting("reregistered", 0);
					$natlog = "Entry ".$entry->code." un re-registered";
				}

				if ($entry->unconfirmed < 1) {
					$entry->unconfirmed(1);
				}

				if ($entry->dropped < 1) {
					$entry->dropped(1);
				}

				$entry->update();
			}

		} else {

			if (
				$ARGS{"entry_status"} eq "accepted"
				&& (
					$entry->active != 1
					|| $entry->unconfirmed == 1
				)
			) {

				$natlog = "Entry ".$entry->code." accepted ";

				$entry->unconfirmed(0);
				$entry->update();

				$entry->setting('accepted_by', $person->id);
				$entry->setting('accepted_at', "date", $now);

				$entry->setting('rejected_by', 0);
				$entry->setting('rejected_at', 0);

				$msg .= ".  Entry marked accepted";

			} elsif (
				$ARGS{"entry_status"} eq "rejected"
				&& (
					$entry->active == 1
					|| (not defined $entry_settings{rejected_by})
				)
			) {

				$entry->unconfirmed(1);
				$entry->update();

				$entry->setting('accepted_by', 0);
				$entry->setting('accepted_at', 0);

				$entry->setting('rejected_by', $person->id);
				$entry->setting('rejected_at', "date", $now);

				$msg .= ".  Entry marked rejected. <br /> Promotion process said: ";

		        my $return = $m->comp(
		            "/funclib/promote_slot.mas",
			            entry  => $entry,
			            person => $person
		        );

				$natlog = "Entry ".$entry->code." rejected.  Promotion process returned $return.";
				$msg .= $return;

			} elsif (
				$ARGS{"entry_status"} eq "rejected_no_promotion"
				&& (
					$entry->active == 1
					|| (not defined $entry_settings{rejected_by})
				)
			) {

				$entry->unconfirmed(1);
				$entry->update();

				$entry->setting('rejected_by', $person->id);
				$entry->setting('rejected_at', "date", $now);

				$msg .= ".  Entry marked rejected and next alternate was NOT promoted";
				$natlog = "Entry ".$entry->code." rejected.  Promotion process was manually skipped.";

			} elsif (
				($ARGS{"entry_status"} eq "pending")
				&& ($entry_settings{"rejected_by"} || $entry_settings{accepted_by})
			) {

				$entry->unconfirmed(1);
				$entry->update();

				$entry->setting('accepted_by', 0);
				$entry->setting('accepted_at', 0);

				$entry->setting('rejected_by', 0);
				$entry->setting('rejected_at', 0);

				$natlog = "Entry ".$entry->code." re-marked as pending.";
				$msg .= ".  Entry marked pending ";
			}

			if (
				$ARGS{"entry_status"} eq "rejected_no_promotion"
				|| $ARGS{"entry_status"} eq "rejected"
			) {

				my $tz = $tourn->tz;
				$tz = "UTC" unless $tz;

				my $fifty_percent_deadline = $tourn_settings->{"fifty_percent_deadline"};
				$fifty_percent_deadline->set_time_zone($tz) if $fifty_percent_deadline;

				my $hundred_percent_deadline = $tourn_settings->{"hundred_percent_deadline"};
				$hundred_percent_deadline->set_time_zone($tz) if $hundred_percent_deadline;

				my $now = DateTime->now(
					time_zone => $tz
				);

				my $created = $entry->created_at;
				$created->add(days => 7);

				my $fee = $event->fee;

				if ($tourn->hotels()) {

					my $hotel = eval {
						return Tab::Hotel->retrieve($school->setting("hotel"));
					};

					if ($hotel) {
						if ($hotel->surcharge) {
							foreach my $student ($entry->students) {
								$fee = $fee += $hotel->surcharge;
							}
						} elsif ($hotel->multiple) {
							$fee = $fee * $hotel->multiple;
						}
					}
				}

				if ($created > $now) {

					# No fee for recently promoted alternates being dropped

				} elsif ( $hundred_percent_deadline && $hundred_percent_deadline < $now) {

					my $drop_reason = "Dropped entry ".$entry->name." in ".$event->abbr." after the ";
					$drop_reason .= $hundred_percent_deadline->month."/".$hundred_percent_deadline->day." deadline";

					$natlog .= "100% fees assessed as a fine because we are after the ".$hundred_percent_deadline->month."/".$hundred_percent_deadline->day." deadline";

					my $fine = Tab::Fine->create({
						school    => $school->id,
						tourn     => $tourn->id,
						amount    => $fee,
						reason    => $drop_reason,
						levied_at => $now,
						levied_by => $person->id
					});

					$msg .= " and the full late drop fine was assessed ";

				} elsif ( $fifty_percent_deadline && $fifty_percent_deadline < $now) {

					my $drop_reason = "Dropped entry ".$entry->name." in ".$event->abbr." after the ";
					$drop_reason .= $fifty_percent_deadline->month."/".$fifty_percent_deadline->day." deadline";

					$natlog .= "50% fees assessed as a fine because we are after the ".$fifty_percent_deadline->month."/".$fifty_percent_deadline->day." deadline";

					my $fine = Tab::Fine->create({
						school    => $school->id,
						amount    => ($fee / 2),
						reason    => $drop_reason,
						levied_at => $now,
						levied_by => $person->id
					});

					$msg .= " and a 50% late drop fine was assessed ";

				}
			}
		}

		foreach my $student ($entry->students) {
			$m->comp("/funclib/nsda/entry_check.mas",
				entry => $entry->id,
				dbh   => $dbh
			);
		}

		if ($natlog) {
			Tab::ChangeLog->create({
				person      => $person,
				tourn       => $tourn,
				school      => $school,
				event       => $event,
				tag         => "registration",
				entry       => $entry,
				description => $natlog,
			});
		}
	}

	$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err&msg=$msg");

</%init>
