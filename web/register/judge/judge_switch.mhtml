<%args>
	$person
	$perms
	$judge_id       => undef
	$property_name  => undef
	$property_value => undef
	$setting_name   => undef
	$tourn
	$tourn_settings
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($judge_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$judge_id.'"}');
		$m->abort();
	}

	my $no_refresh++ if $setting_name eq "tab_room_nore";
	$setting_name = "tab_room" if $setting_name eq "tab_room_nore";

	my $message;

	if ($property_name eq "ada") {

		$message = "not needing accessible rooms";
		$message = "needing accessible rooms" if $property_value == 1;

	} elsif ($property_name) {
		$message .= " not " if $property_value == 0;
		$message .= $property_name." is ".$property_value;
	} elsif ($setting_name) {
		$message .= " not " if $property_value == 0;
		$message .= $setting_name;
	}

	if ($property_name) {
		$judge->$property_name($property_value);
		$judge->update;
	} elsif ($setting_name eq "final_bio" && $property_value) {
		$judge->setting($setting_name, "text", $property_value);
	} elsif ($setting_name) {
		$property_value = "0" unless $property_value;
		$judge->setting($setting_name, $property_value);
	}

	my $refresh = "false";

	if ($setting_name eq "tab_room") {

		if ($property_value == 1) {

			if ($judge->obligation < 2) {
				$judge->obligation(2);
			}

			$judge->active(0);

		} else {

			if ($judge->obligation > 3) {
				$judge->obligation(3);
			}

			$judge->active(1);
		}

		$judge->update();
		$refresh = "true" unless $no_refresh;
	}

	if ($tourn_settings->{"nsda_nats"}) {

		my $response = $m->comp(
			"/funclib/nsda/judge_check.mas",
			tourn    => $tourn,
			judge_id => $judge->id
		);

		if ($judge->school) {
			$m->comp("/funclib/judgemath/nats_check_judging.mas", school => $judge->school);
		}
	}

	$m->print('{
		"error"   : false,
		"message" : "'.$judge->first." ".$judge->last.': '.$message.'",
		"refresh" : '.$refresh.'
	}');

	$m->abort();

</%init>

