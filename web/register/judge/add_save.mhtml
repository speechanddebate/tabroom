<%args>
	$person
	$tourn
	$tourn_settings
	$from        => undef
	$email       => undef
	$first       => 0
	$middle      => undef
	$last        => 0
	$phone       => 0
	$school_id   => 0
	$obligation  => 0
	$hired       => 0
	$category_id => undef
</%args>
<%init>

	use Email::Valid;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);
	my $category = Tab::Category->retrieve( $category_id );

	unless ($category) {
		$m->comp('/funclib/abort.mas',
			message => "No judge category found for $category_id"
		);
	}

	my $school = Tab::School->retrieve($school_id) if $school_id;
	my $chapter = $school->chapter if $school;

	my $judge;
	my $judge_person;
	my $chapter_judge;

	my %category_settings = $category->all_settings();

	if ($category_settings{"rounds_per"} || $category_settings{"nats_category"}) {

		unless ($obligation || $hired) {
			$obligation = $category_settings{'max_rounds'};
		}

		unless ($obligation || $hired) {
			$obligation = 6;
		}
	}

	my $msg;

	if ($ARGS{"chapter_judge_id"}) {
		$chapter_judge = Tab::ChapterJudge->retrieve(int($ARGS{"chapter_judge_id"}));
	}

	if ($chapter_judge && $chapter_judge->person) {
		$judge_person = $chapter_judge->person;
	} else {
		if ($ARGS{"tabroom_email"}) {
			$judge_person = Tab::Person->search(email => $ARGS{"tabroom_email"})->first;
		} elsif ($ARGS{"email"}) {
			$judge_person = Tab::Person->search(email => $ARGS{"email"})->first;
		} elsif ($ARGS{"phone"}) {
			$judge_person = Tab::Person->search(phone => $ARGS{"phone"})->first;
		}
	}

	unless (
		$chapter_judge
		|| $judge_person
		|| ($ARGS{"first"} && $ARGS{"last"})
	) {
		my $err = "Insufficient information provided to register a judge: must have at least one of a ";
		$err .= "valid Tabroom judge, a valid Tabroom account email or a first and last name.";
		$m->redirect("add.mhtml?category_id=".$category->id."&school_id=".$school_id."&err=$err");
	}

	if ($judge_person) {
		$first  = $judge_person->first;
		$middle = $judge_person->middle;
		$last   = $judge_person->last;
	}

	#Check for duplicates

	my @existing;

	if ($judge_person > 0) {
		push @existing, $m->comp(
			"/funclib/person_judges.mas",
			person => $judge_person,
			tourn  => $tourn
		);
	}

	if ($chapter_judge > 0) {
		Tab::Judge->set_sql( tourn => "
			select judge.*
			from judge, category
				where category.tourn = ?
				and category.id = judge.category
				and judge.chapter_judge = ?
		");
		push @existing, Tab::Judge->search_tourn($tourn->id, $chapter_judge->id);
	}

	my @same;
	my @other;

	foreach my $existing (@existing) {
		if ($existing->category == $category) {
			push @same, $existing;
		} else {
			push @other, $existing;
		}
	}

	my $err;

	if (@same) {

		my %done;
		$err = $same[0]->first." ".$same[0]->last." is already registered in ".$category->abbr.": ";
		$m->redirect("edit.mhtml?category_id=".$category->id."&school_id=".$school_id."&err=$err");

	} else {

		if (@other) {
			$err = $other[0]->first." ".$other[0]->last." is already entered in the tournament in ";
			foreach my $other (@other) {
				$err .= " ".$other->category->abbr;
			}
			$err .= ". They have been entered in ".$category->abbr." but be careful about double booking.";
		}

		if ($chapter_judge && $judge_person == $chapter_judge->person) {

			# This will always be true if the chapter_judge record has a person
			# record attached due to the logic above.

		} elsif ($judge_person > 0 && $chapter_judge) {
			$chapter_judge->person($judge_person);
			$chapter_judge->update();
		}

		unless ($chapter_judge) {
			# See first if the tabroom account gets us there
			if ($judge_person && (not defined ($chapter_judge))) {
				my $chapter_judge = Tab::ChapterJudge->search(
					person  => $judge_person,
					chapter => $chapter
				)->first;

				if ($chapter_judge && $chapter_judge->retired) {
					$chapter_judge->retired(0);
					$chapter_judge->update();
				}
			}
		}

		unless ($chapter_judge) {

			if ($judge_person) {
				$ARGS{"first"}  = $judge_person->first;
				$ARGS{"last"}   = $judge_person->last;
				$ARGS{"middle"} = $judge_person->middle;
			}

			my $chapter_judge = Tab::ChapterJudge->search(
				first   => $ARGS{"first"},
				last    => $ARGS{"last"},
				middle  => $ARGS{"middle"},
				retired => 0
			)->first;
		}

		unless ($chapter_judge) {
			if ($chapter) {
				if ($judge_person) {
					$chapter_judge = Tab::ChapterJudge->create({
						first   => $judge_person->first,
						middle  => $judge_person->middle,
						last    => $judge_person->last,
						chapter => $chapter->id,
						person  => $judge_person->id
					});
				} else {
					$chapter_judge = Tab::ChapterJudge->create({
						first   => $ARGS{"first"},
						last    => $ARGS{"last"},
						middle  => $ARGS{"middle"},
						email   => $ARGS{"email"},
						phone   => $ARGS{"phone"},
						chapter => $chapter->id,
					});
				}
			}
		}

		my $next_code;

		unless ($category_settings{"no_codes"}) {
			$next_code = $m->comp(
				"/funclib/category_code.mas",
				category => $category
			);
		}

		$judge_person = 0 unless $judge_person;

		if ($chapter_judge) {

			$judge = Tab::Judge->create({
				chapter_judge => $chapter_judge->id,
				first         => $chapter_judge->first,
				middle        => $chapter_judge->middle,
				last          => $chapter_judge->last,
				active        => 1,
				code          => $next_code,
				obligation    => $obligation || 0,
				hired         => $hired || 0,
				category      => $category->id,
				covers        => $category->id,
				school        => $school_id,
				person        => $judge_person
			});

		} else {

			$school_id = 0 unless $school_id;
			$hired = 0 unless $hired;
			$obligation = 0 unless $obligation;

			$judge = Tab::Judge->create({
				first      => $first,
				middle     => $middle,
				last       => $last,
				active     => 1,
				code       => $next_code,
				obligation => $obligation,
				hired      => $hired,
				category   => $category->id,
				covers     => $category->id,
				school     => $school_id,
				person     => $judge_person
			});
		}

	    if ($judge_person) {
			$m->comp("/funclib/person_conflict.mas",
				tourn   => $tourn,
				entered => $person,
				person  => $judge_person
			);
			$m->comp("/funclib/nsda/membership.mas", person => $judge_person);
		}
	}

	$msg = "Judge ".$judge->first." ".$judge->last." created";

	my $description = "Entered ".$category->abbr." judge ".$judge->code ." ".$judge->first." ".$judge->last;

	my $change = $m->comp("/funclib/log.mas",
	   tourn       => $tourn->id,
	   school      => $school_id,
	   judge       => $judge->id,
	   type        => "registration",
	   description => $description,
	   person      => $person->id
	);

	if ($tourn_settings->{"nsda_nats"}) {

		$m->comp("/funclib/nsda/judge_check.mas",
			judge_obj => $judge->id,
			tourn     => $tourn
		);

		my @jpools = $m->comp(
			"/funclib/category_jpools.mas",
			category => $category,
			limit    => "registrant"
		);

		foreach my $jpool (@jpools) {

			my $exists = Tab::JPoolJudge->search(
				judge => $judge->id,
				jpool => $jpool->id
			)->first;

			if ($ARGS{$jpool->id}) {
				unless ($exists) {
					$exists = Tab::JPoolJudge->create({
						judge => $judge->id,
						jpool => $jpool->id
					});
				}
			} elsif ($exists) {
				$exists->delete();
			}
		}
	}

    if (
		$category_settings{"coach_ratings"}
		|| $category_settings{"ask_alts"}
	) {

		if ($ARGS{"rating"}) {

			my $tier = Tab::RatingTier->retrieve($ARGS{'rating'});

			if ($tier) {

				Tab::Rating->create({
					judge       => $judge,
					type        => "coach",
					rating_tier => $tier->id
				});

				$msg .= " and rated ".$tier->name;
			}

		} else {
			$m->redirect("/register/school/judge_details.mhtml?judge_id=".$judge->id."&school_id=".$school_id."&err=$err");
		}
	}

	if ($from && $school_id) {
		$m->redirect("/register/school/judges.mhtml?school_id=".$school_id."&category_id=$category_id&msg=$msg&err=$err");
	}

	$m->redirect("add.mhtml?last_id=".$judge->id."&category_id=$category_id&msg=$msg&err=$err");

</%init>

