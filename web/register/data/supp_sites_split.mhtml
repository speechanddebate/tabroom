<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$dbh
</%args>
<%init>

	$r->content_type('application/json');
	$m->clear_buffer();

	my $sth = $dbh->prepare('
		select
			event.id, event.name, event.type
		from event
		where event.tourn = ?
			and exists (
				select es.id
				from event_setting es
				where es.tag = "supp"
				and es.event = event.id
			)
			and not exists (
				select es.id
				from event_setting es
				where es.tag = "split_team"
				and es.event = event.id
			)
	');

	$sth->execute($tourn);
	my $events = $sth->fetchall_hash();
	my $supp_teams = $tourn_settings->{supp_teams};

	my @teams = sort {$supp_teams->{$a}{"code"} cmp $supp_teams->{$b}{"code"}} keys %{$supp_teams};
	my $first_id = shift @teams;
	my $first = $supp_teams->{$first_id};

	my %jpools;
	my %rpools;

	my $entry_split = $dbh->prepare("
		update entry, school_setting supp_team
			set entry.event = ?
		where entry.event = ?
			and entry.school = supp_team.school
			and supp_team.tag = 'supp_team'
			and supp_team.value = ?
	");

	my $panel_split = $dbh->prepare("
		update panel, ballot, entry, school_setting supp_team
			set panel.round = ?
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.school = supp_team.school
			and supp_team.tag = 'supp_team'
			and supp_team.value = ?
	");

	my $judge_split = $dbh->prepare("
		update judge, jpool_judge jpj, school_setting supp_team
			set jpj.jpool = ?
		where jpj.jpool = ?
			and jpj.judge = judge.id
			and judge.school = supp_team.school
			and supp_team.tag = 'supp_team'
			and supp_team.value = ?
	");

	foreach my $eventref (@{$events}) {

		my $event = Tab::Event->retrieve($eventref->{id});
		my @event_settings = $event->settings;

		if ($event->setting("split_team")) {

		}

		foreach my $round ($event->rounds) {

			my $start = $round->timeslot->start;
			$start->set_time_zone($tourn->tz);
			my $day = lc($start->day_abbr);

			if ($day ne "thu" && $day ne "wed") {
				next;
			}

			my $site = $round->site;
			my $jpool = $round->jpools->first;
			my $rpool = $round->rpools->first;

			unless ($jpools{$day}{$site}) {
				$jpools{$day}{$site} = $jpool;
			}

			unless ($rpools{$day}{$site}) {
				$rpools{$day}{$site} = $rpool;
			}
		}

		foreach my $team_id (@teams) {

			my $team = $supp_teams->{$team_id};
			my $new_event = $event->copy({
				name => $event->name." ".$team->{label},
				abbr => $event->abbr." ".$team->{code},
			});

			my $menu_pattern;

			foreach my $es (@event_settings) {
				$es->copy({ event => $new_event->id });

				if ($es->tag eq "menu_pattern") {
					$menu_pattern = $es->value;
				}
			}

			$new_event->setting("presplit", $event->id);
			$new_event->setting("split_team", $team_id);
			$new_event->setting("menu_pattern", $menu_pattern.$team->{code});

			$entry_split->execute($new_event->id, $event->id, $team_id);

			foreach my $round ($event->rounds) {

				# Which day is the round on
				my $start = $round->timeslot->start;
				$start->set_time_zone($tourn->tz);
				my $day = lc($start->day_abbr);

				if ($day ne "thu" && $day ne "wed") {
					next;
				}

				my $site = $team->{$day."_".$event->type};

				my $new_round = $round->copy({
					event => $new_event->id,
					site  => $site,
				});

				my @round_settings = $round->settings;

				my $usage;

				foreach my $rs (@round_settings) {

					if ($rs->tag eq "usage_by_jpool" && $rs->value > 0) {
						$usage++;
					}

					$rs->copy({ round => $new_round->id });
				}

				$new_round->setting("presplit", $round->id);
				$new_round->setting("split_team", $team_id);

				$panel_split->execute($new_round->id, $round->id, $team_id);

				unless ($jpools{$day}{$site}) {

					my $jpool = $round->jpools->first;

					if ($jpool && $jpool > 0) {
						my $new_jpool = $jpool->copy({
							name => $jpool->name." ".$team->{label},
							site => $site
						});

						if ($new_round->setting("usage_by_jpool")) {
							$new_round->setting("usage_by_jpool", $new_jpool->id);
						}

						$jpools{$day}{$site} = $new_jpool;
						$jpools{'cloned'}{$jpool}++;

						my @jps_settings = $jpool->settings;

						foreach my $jps (@jps_settings) {
							$jps->copy({ jpool => $new_jpool->id });
						}

						$new_jpool->setting("presplit", $jpool->id);
						$new_jpool->setting("split_team", $team_id);

						$judge_split->execute($new_jpool->id, $jpool->id, $team_id);
					}
				}

				if ($usage) {
					$new_round->setting("usage_by_jpool", $jpools{$day}{$site});
				}

				Tab::JPoolRound->create({
					jpool => $jpools{$day}{$site},
					round => $new_round->id
				});

				unless ($rpools{$day}{$site}) {
					my $rpool = $round->rpools->first;
					my $new_rpool = $rpool->copy({
						name => $rpool->name." ".$team->{label},
					});

					$rpools{$day}{$site} = $new_rpool;
					$rpools{'cloned'}{$rpool}++;
					$new_rpool->setting("presplit", $rpool->id);
					$new_rpool->setting("split_team", $team_id);
				}

				Tab::RPoolRound->create({
					rpool => $rpools{$day}{$site},
					round => $new_round->id
				});
			}
		}

		foreach my $round ($event->rounds) {

			my $start = $round->timeslot->start;
			$start->set_time_zone($tourn->tz);
			my $day = lc($start->day_abbr);

			if ($day ne "thu" && $day ne "wed") {
				next;
			}

			$round->setting("split_team", $first_id);

			my $site = $round->site;
			my $jpool = $jpools{$day}{$site};

			if ($jpools{'cloned'}{$jpool}){
				$jpool->name($jpool->name." ".$first->{label});
				$jpool->update();
				$jpool->setting("split_team", $first_id);
				delete $jpools{'cloned'}{$jpool};
			}

			my $rpool = $rpools{$day}{$site};

			if ($rpools{'cloned'}{$rpool}){
				$rpool->name($rpool->name." ".$first->{label});
				$rpool->update();
				$rpool->setting("split_team", $first_id);
				delete $rpools{'cloned'}{$rpool};
			}
		}

		$event->name($event->name." ".$first->{label});
		$event->abbr($event->abbr." ".$first->{code});
		$event->update();
		$event->setting("split_team", $first_id);
	}

	foreach my $event (@{$events}) {

		Tab::ChangeLog->create({
			tag         => 'tabbing',
			tourn       => $tourn,
			person      => $person->id,
			event       => $event->{id},
			description => "Split supp sites"
		});

	}

	my $response = ({
		message => "I have split ".scalar @{$events}." between ".((scalar @teams) + 1)." teams.  I might even have done it correctly! ",
		refresh => \1,
		error   => \0,
	});

	$m->print(JSON::encode_json($response));
	$m->abort();

</%init>
