<%args>
	$tourn
	$tourn_settings
	$person
	$dbh
</%args>
<%init>

	use Text::CSV;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	$m->print("<div id=\"wrapper\">");
	$m->print("<div id=\"content\">");

	$m->print("<div class=\"main\">");
	$m->print("<h2>Uploading data</h2>");

	$m->print("<span class='nospace upload_scroll'>");
	$m->flush_buffer();

	my $nats = $tourn->setting("nsda_nats");
	my $now = DateTime->now( time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload();
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;

	my $csv = Text::CSV->new({ sep_char => ',' });

	my $skipped;
	my $counter;

	my $sth = $dbh->prepare("
		select judge.id, person.email
			from judge, category, person
		where 1=1
			and person.id = judge.person
			and judge.category = category.id
			and category.tourn = ?
	");

	$sth->execute($tourn->id);
	my $judge_refs = $sth->fetchall_hash();
	my %judges = map {$_->{email} => $_->{id}} @{$judge_refs};

	my $entry_sth = $dbh->prepare("
		select entry.code, entry.id
			from entry, event
		where 1=1
			and entry.event = event.id
			and event.tourn = ?
	");

	$entry_sth->execute($tourn->id);
	my $entry_refs = $entry_sth->fetchall_hash();
	my %entries = map {$_->{code} => $_->{id} } @{$entry_refs};

	foreach my $entry (sort {$a cmp $b} keys %entries) {
		$m->print("<p>Entry $entry has id ".$entries{$entry}."</p>");
	}

	LINE:
	foreach my $line (<$io>) {

		unless ($csv->parse($line)) {
			next LINE;
		}

		my ($judge_email, @entry_codes) = $csv->fields();

		$judge_email =~ s/^"//;
		$judge_email =~ s/"$//g;
		$judge_email =~ s/^'//;
		$judge_email =~ s/'$//g;

		my $judge_id = $judges{$judge_email};

		if ($judge_id) {

			$m->print("<p>Conflicts for judge $judge_email ".$judge_id);

			foreach my $code (@entry_codes) {
				$code =~ s/^"//;
				$code =~ s/"$//g;
				$code =~ s/^'//;
				$code =~ s/'$//g;

				next unless $code;
				my $entry_id = $entries{$code};

				if ($entry_id) {
					Tab::Strike->create({
						registrant => 1,
						type       => "entry",
						conflict   => 1,
						judge      => $judge_id,
						entry      => $entry_id,
						tourn      => $tourn->id
					});
				} else {
					$m->print("<p class='padleft'>No entry found for $code</p>");
				}
			}

		} else {
			$m->print("<p>No judge record for $judge_email:</p>");
		}

		$m->flush_buffer();
	}

	$m->print("</span>");

	$m->print("<h5 class='centeralign redtext'>Data Upload Complete!</h5>");
	$m->print("</div>");
	$m->print("</div>");
	$m->print("</div>");
	$m->flush_buffer();
	$m->abort();

</%init>
