<%args>
	$tourn
	$person
	$event_id => undef
</%args>
<%init>

	use Text::CSV;

	my $nats = $tourn->setting("nsda_nats");
	my $event = Tab::Event->retrieve($event_id);

	unless ($event) {
		$m->comp("/funclib/abort.mas", message => "No valid event ID number sent: $event_id is not a valid ID");
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload;
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;
	my @entries;

	my $csv = Text::CSV->new({ sep_char => ',' });

	my $has_codes;
	my $err;

	ENTRY:
	foreach my $line (<$io>) {

		unless ($csv->parse($line)) {
			next LINE;
		}

		# If you think the below seems ugly you should have seen what it looked
		# like before...

		my ($school_name, $state, $code, $pairing_seed, @names) = $csv->fields();

		# Uglyish test to make sure this isn't some binary format from hell;
		my $test_school_name = $school_name;
		$test_school_name =~ s/[^a-zA-Z0-9 ]//g;

		my $length_diff = length($school_name) - length($test_school_name);
		next if $length_diff > 4;

		next unless $school_name;
		next if $school_name eq "School Name";

		foreach ( $school_name, $state, $code, $pairing_seed, @names) {
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
		}

		my %students;
		my $counter;

		while (@names) {
			$counter++;
			$students{$counter}{"first"}  = shift @names if @names;
			$students{$counter}{"middle"} = shift @names if @names;
			$students{$counter}{"last"}   = shift @names if @names;
			$students{$counter}{"novice"} = shift @names if @names;
			$students{$counter}{"email"}  = shift @names if @names;
			Tab::debuglog("student ".$students{$counter}{"last"}." email ".$students{$counter}{"email"});
		}

		my $school = Tab::School->search(
			name  => $school_name,
			tourn => $tourn->id
		)->first;

		my $chapter;
		$chapter = $school->chapter if $school;

		unless ($school) {

			foreach my $circuit ($tourn->circuits) {

				my @chapters = $m->comp(
					"/funclib/circuit_chapters.mas",
					circuit => $circuit,
					name    => $school_name
				);

				$chapter = shift @chapters;
				last if $chapter;
			}

			unless ($chapter) {

				$state = $tourn->state unless $state;

				$chapter = Tab::Chapter->create({
					name    => $school_name,
					state   => $state,
					country => $tourn->country
				});

				foreach my $circuit ($tourn->circuits) {
					Tab::ChapterCircuit->create({
						chapter => $chapter->id,
						circuit => $circuit->id
					});
				}
			}

			my ($school_code, $school_region) = $m->comp(
				"/funclib/chapter_code.mas",
					tourn   => $tourn,
					chapter => $chapter
				);

			$school = Tab::School->create({
				tourn      => $tourn->id,
				chapter    => $chapter->id,
				name       => $school_name,
				code       => $school_code
			});

			$school->setting("entered_on", "date", $now);
		}

		my @students;

		foreach my $skey (1 .. 5) {

			if ($students{$skey}{"first"}) {

				my $student = Tab::Student->search(
					chapter => $chapter->id,
					first   => $students{$skey}{"first"},
					last    => $students{$skey}{"last"},
					retired => 0
				)->first;

				$students{$skey}{"last"} = $students{$skey}{"first"} unless $students{$skey}{"last"};

				my $school_sid = $students{$skey}{"novice"} if $nats;

				$students{$skey}{"novice"} = 0
					unless $students{$skey}{"novice"} eq "Y"
					|| $students{$skey}{"novice"} eq "y";

				$student = Tab::Student->create({
					chapter    => $chapter->id,
					first      => $students{$skey}{"first"},
					middle     => $students{$skey}{"middle"},
					last       => $students{$skey}{"last"},
					novice     => $students{$skey}{"novice"},
					grad_year  => ($now->year + 1)
				});

				push @students, $student;

				Tab::debuglog("Student $student has email ".$students{$skey}{"email"});

				if ($students{$skey}{"email"}) {

					my $student_person = Tab::Person->search(
						email => $students{$skey}{"email"}
					)->first;

					Tab::debuglog("Found person $student_person");

					if ($student_person) {
						$err = $m->comp("/funclib/student_link.mas",
							student => $student,
							target  => $student_person,
							person  => $person
						);
					}
				}
			}
		}

		my $name;

		if (scalar @students == 1) {

			$name = $students[0]->first." ".$students[0]->last;

		} else {

			my $counter;
			my $num_students = scalar @students;

			foreach my $student (@students) {

				$counter++;

				if ($counter == $num_students) {
					$name .= " & ";
				} elsif ($name) {
					$name .= ", ";
				}

				$name .= $student->last;
			}
		}

		my $entry = Tab::Entry->create({
			school      => $school->id,
			event       => $event->id,
			tourn       => $tourn->id,
			name        => $name,
			dropped     => 0,
			waitlist    => 0,
			code        => $code
		});

		$entry->setting("pairing_seed", $pairing_seed);

		$has_codes++ if $code;

		unless ($code) {
			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
			$entry->update;
		}

		foreach my $student (@students) {
			Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $student->id
			});
		}
	}

	my $msg = scalar @entries ." entries imported into ". $event->name;

	$m->redirect("entry_recode_save.mhtml?event_id=".$event->id."&sort_by=School&err=$err") unless $has_codes;
	$m->redirect("index.mhtml?msg=$msg&err=$err");

</%init>
