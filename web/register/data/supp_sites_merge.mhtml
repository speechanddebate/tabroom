<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$dbh
	$event_id => undef
</%args>
<%init>

	$r->content_type('application/json');
	$m->clear_buffer();

	my $supp_teams = $tourn_settings->{supp_teams};
	my @teams = sort {$supp_teams->{$a}{"code"} cmp $supp_teams->{$b}{"code"}} keys %{$supp_teams};
	my $first_id = shift @teams;
	my $first = $supp_teams->{$first_id};

	my $limit;

	if ($event_id) {
		# This should be the event that will be MERGED, not the event it will
		# be MERGED INTO.
		$limit = "and event.id = ".int($event_id);
	}

	my $events_sth = $dbh->prepare('
		select
			event.id, event.name, event.abbr, event.type, presplit.value presplit
		from event, event_setting presplit, event original
		where event.tourn = ?
			'.$limit.'
			and presplit.event = event.id
			and presplit.tag   = "presplit"
			and presplit.value = original.id
			and original.tourn = event.tourn
	');

	$events_sth->execute($tourn);
	my $events = $events_sth->fetchall_hash();

	my $rounds_sth = $dbh->prepare('
		select
			round.id, round.name, round.label, round.type, presplit.value presplit
		from round, event, round_setting presplit, round original, event oe
		where event.tourn = ?
			'.$limit.'
			and event.id       = round.event
			and presplit.round = round.id
			and presplit.tag   = "presplit"
			and presplit.value = original.id
			and original.event = oe.id
			and oe.tourn       = event.tourn
	');

	$rounds_sth->execute($tourn);
	my $rounds = $rounds_sth->fetchall_hash();

	# Move Panels, Logs into One Round

	my $panel_transfer = $dbh->prepare("
		update panel set round = ? where round = ?
	");

	my $round_log_transfer = $dbh->prepare("
		update change_log set round = ? where round = ?
	");

	my $rpr_transfer = $dbh->prepare("
		update rpool_round rpr set rpr.round = ? where rpr.round = ?
	");

	my $jpr_transfer = $dbh->prepare("
		update jpool_round jpr set jpr.round = ? where jpr.round = ?
	");

	my $jpj_transfer = $dbh->prepare("
		update jpool_judge jpj, jpool
			set jpj.jpool = jpool.id
			where jpj.jpool = ?
			and jpool.id = ?
			and not exists (
				select jp2.id
				from jpool_judge jp2
				where jp2.jpool = jpool.id
				and jp2.judge = jpj.judge
			)
	");

	foreach my $round (@{$rounds}) {

		$panel_transfer->execute($round->{presplit}, $round->{id});
		$round_log_transfer->execute($round->{presplit}, $round->{id});

		if ($limit) {

			# If we are transferring just one event, leave both judge pools linked to the target
			$rpr_transfer->execute($round->{presplit}, $round->{id});
			$jpr_transfer->execute($round->{presplit}, $round->{id});

		} else {

			# If we are doing the whole shebang, collapse the split jpools into one.
			my $target_round = Tab::Round->retrieve($round->{presplit});
			my $source_round = Tab::Round->retrieve($round->{id});

			foreach my $jpool ($source_round->jpools) {
				next unless $jpool > 0;
				$jpj_transfer->execute($jpool->id, $jpool->setting("presplit"));
				$jpool->delete();
			}

			$target_round->setting("split_team", 0);

			foreach my $target_jpool ($target_round->jpools) {
				my $name = $target_jpool->name;

				# Remove the suffixes
				$name =~ s/$first->{label}//g;

				chomp $name;

				$target_jpool->name($name);
				$target_jpool->update();

				$target_jpool->setting("split_team", 0);
			}

			foreach my $target_rpool ($target_round->rpools) {
				my $name = $target_rpool->name;

				# Remove the suffixes
				$name =~ s/$first->{label}//g;

				chomp $name;

				$target_rpool->name($name);
				$target_rpool->update();

				$target_rpool->setting("split_team", 0);
			}
		}
	}

	# Move Entries Back Into Events
	my $entry_transfer = $dbh->prepare("
		update entry
			set entry.event =  ?
		where entry.event  = ?
	");

	my $event_log_transfer = $dbh->prepare("
		update change_log set event = ? where event = ?
	");

	my %presplits = ();

	foreach my $event (@{$events}) {
		$entry_transfer->execute($event->{presplit}, $event->{id});
		$event_log_transfer->execute($event->{presplit}, $event->{id});
		$presplits{$event->{presplit}}++;
	}

	foreach my $event_id (keys %presplits) {

		my $event = Tab::Event->retrieve($event_id);
		my $event_update = $dbh->prepare("update event set name = ?, abbr = ? where id = ?");

		my $name = $event->name;
		my $abbr = $event->abbr;

		# Remove the suffixes
		my $i = rindex($name,' ');
		$name = substr($name,0,$i) if $i>0;

		$abbr =~ s/\ ([$first->{code}]+)$/'' x length($1)/e;
		$name =~ s/\ ([$first->{label}]+)$/'' x length($1)/e;
		$name =~ s/\ ([$first->{code}]+)$/'' x length($1)/e;

		$event_update->execute($name, $abbr, $event_id);

		my $team = $event->setting("split_team");

		$event->setting("split_team", 0);

		my $menu_code = $event->setting('menu_pattern');

		if ($menu_code) {
			$menu_code =~ s/$supp_teams->{$team}{"code"}//;
			$event->setting("menu_pattern", $menu_code);
		}
	}

	my $prune_rounds_sth = $dbh->prepare('
		delete round.*
			from round
		where round.event = ?
		and not exists (
			select panel.id
			from panel
			where panel.round = round.id
		)
	');

	my $prune_event_sth = $dbh->prepare('
		delete event.*
			from event
		where event.id = ?
		and not exists (
			select round.id
			from round
			where round.event = event.id
		)
	');

	# Delete the old empty events
	foreach my $event (@{$events}) {
		$prune_rounds_sth->execute($event->{id});
		$prune_event_sth->execute($event->{id});
	}

	my $response = ({
		message => "I have re-merged ".scalar @{$events}." events. I might even have done it correctly!",
		error   => \0,
	});

	if ($ARGS{'event_id'}) {
		$response->{destroy} = $ARGS{event_id};
	}

	foreach my $event (@{$events}) {

		Tab::ChangeLog->create({
			tag         => 'tabbing',
			tourn       => $tourn,
			person      => $person->id,
			event       => $event->{presplit},
			description => "Re-merged supp split events",
		});

	}

	$m->print(JSON::encode_json($response));
	$m->abort();

</%init>
