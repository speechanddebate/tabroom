<%args>
	$dbh
	$tourn
	$tourn_settings
	$person
	$perms
	$subject        => undef
	$content        => undef
	$email_id       => undef
	$everybody      => undef
	$everybody_plus => undef
	$diodirs        => undef
	$judge_short    => undef
	$money_short    => undef
	$tba            => undef
	$hidden         => undef
</%args>
<%init>

	unless ($content) {
		my $err = "The email had no message body.  Try again,";
		$m->redirect("/register/emails/compose.mhtml&err=$err");
	} else {
		$content = $m->comp("/funclib/save_editor.mas", text => $content);
	}

	&outlog('<div class="main">');
	&outlog("<h2>Sending email</h2>");
	&outlog("<span class='nospace upload_scroll'>");

	my %events = $m->comp("/funclib/perms/events.mas",
		tourn   => $tourn,
		perms   => $perms,
		limited => 1,
	);

	my %categories = $m->comp("/funclib/perms/categories.mas",
		tourn   => $tourn,
		perms   => $perms,
		limited => 1
	);

	if ($ARGS{"supp_team"}) {
		$m->comp("supp_team.mas", args => \%ARGS);
		$m->abort();
	}

	if ($ARGS{"problems"}) {
		$m->comp("problem_emails.mas", args => \%ARGS);
		$m->abort();
	}

	if ($ARGS{"unregged_supps"}) {
		$m->comp("unregged_supps.mas", args => \%ARGS);
		$m->abort();
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	my $oldway;

	unless ($tourn_settings->{account_contacts}) {
		$oldway++;
	}

	my %tourn_contacts = $m->comp("/funclib/tourn_contacts.mas",
		tourn  => $tourn,
		oldway => $oldway
	);

	my @schools;
	my %ids;
	my %empties;
	my $sent_to;
	my $msg;

	&outlog("<p>Initial permissions and data loaded</p>");

	if ($tourn_settings->{nsda_nats}) {

		if ($ARGS{"unclaimed_entries"}) {

			&outlog("<p>Adding schools with unclaimed entries</p>");

			my $unclaimed_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
				from school, entry
				where school.id = entry.school
					and school.tourn = ?
					and entry.unconfirmed = 1
					and entry.dropped != 1
				and not exists (
					select es.id
					from entry_setting es
					where es.entry = entry.id
					and es.tag = 'rejected_by'
				)
				and not exists (
					select evs.id
					from event_setting evs
					where evs.event = entry.event
					and (evs.tag = 'supp')
				)
			");

			$unclaimed_sth->execute($tourn->id);
			my $unclaimed = $unclaimed_sth->fetchall_hash();

			push @schools, @{$unclaimed};

			if ($unclaimed) {
				&outlog("<p>".scalar @{$unclaimed}." schools added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$unclaimed}." schools with unclaimed entries";
		}

		if ($ARGS{"noncomplete_entries"}) {

			&outlog("<p>Adding schools with incomplete entries</p>");

			my $incomplete_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
				from school, entry, entry_student es
				where school.id = entry.school
					and school.tourn = ?
					and entry.id     = es.entry
					and entry.active = 1

					and not exists (
						select es.id
						from entry_setting es
						where es.entry = entry.id
						and es.tag = 'status'
						and es.value = 'complete'
					)
					and not exists (
						select evs.id
						from event_setting evs
						where evs.event = entry.event
						and evs.tag = 'usa_wsdc'
					)
			");

			$incomplete_sth->execute($tourn->id);
			my $incomplete = $incomplete_sth->fetchall_hash();

			push @schools, @{$incomplete};

			if ($incomplete) {
				&outlog("<p>".scalar @{$incomplete}." schools added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$incomplete}." schools with incomplete entries";
		}

		if ($ARGS{"noncomplete_judges"}) {

			&outlog("<p>Adding schools with incomplete judges</p>");

			my $incomplete_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
				from school, judge
				where school.id = judge.school
					and school.tourn = ?
					and school.chapter > 0
					and exists (
						select js.id
						from judge_setting js
						where js.tag = 'incomplete'
						and js.judge = judge.id
					)
				group by school.id
			");

			$incomplete_sth->execute($tourn->id);
			my $incomplete = $incomplete_sth->fetchall_hash();

			push @schools, @{$incomplete};

			if ($incomplete) {
				&outlog("<p>".scalar @{$incomplete}." schools added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$incomplete}." schools with incomplete judges";
		}
	}

	unless (
		$ARGS{'waitlist_only'}
		|| $ARGS{"everybody_plus"}
	) {

		my $empty_sth = $dbh->prepare("
			select school.id, school.chapter, school.name, school.state
				from school
				where tourn = ?
				and not exists (
					select entry.*
					from entry
					where entry.school = school.id
					and entry.active = 1
				)
				and not exists (
					select judge.*
					from judge
					where judge.school = school.id
					and judge.active = 1
				)
		");

		$empty_sth->execute($tourn->id);
		my $empties = $empty_sth->fetchall_hash();

		&outlog("<p>Adding schools with no active entries</p>");
		if ($empties) {
			&outlog("<p>".scalar @{$empties}." schools added to list</p>");
		}

		%empties = map {$_->{id} => $_} @{$empties};
	}

	if ($ARGS{"timeslot_id"}) {

		my $string;

		if ($ARGS{"timeslot_id"} eq int($ARGS{"timeslot_id"})) {
			$string .= $ARGS{'timeslot_id'};
		} else {
			foreach my $ts (@{$ARGS{"timeslot_id"}}) {
				$string .= ", " if $string;
				$string .= int($ts);
			}
		}

		my $timeslot_sth = $dbh->prepare('
			select school.id, school.chapter, school.name, school.state
				from school
			where tourn = ?
				and exists (
					select entry.id
						from entry, ballot, panel, round
					where entry.school = school.id
						and entry.active = 1
						and entry.id = ballot.entry
						and ballot.panel = panel.id
						and panel.round = round.id
						and round.timeslot IN ('.$string.')
				)
		');

		$timeslot_sth->execute($tourn->id);
		my $ts = $timeslot_sth->fetchall_hash();

		&outlog("<p>Adding schools with competitors in particular timeslots</p>");
		if ($ts) {
			&outlog("<p>".scalar @{$ts}." schools added to list</p>");
		}

		push @schools, @{$ts};
		$sent_to .= "\n" if $sent_to;
		$sent_to .= scalar @{$ts}." schools with entires active in selected timeslots";
	}

	if ($diodirs) {

		$sent_to .= "Diocesan Moderators ";

		my $dio_sth = $dbh->prepare('
			select
				permission.person
			from permission, school
			where school.tourn = ?
				and school.region = permission.region
			group by permission.person
		');

		$dio_sth->execute($tourn->id);
		my $dio_dirs = $dio_sth->fetchall_hash();

		foreach my $dir (@{$dio_dirs}) {
			$ids{$dir->{person}} = 1;
		}

		&outlog("<p>Adding diocesan moderators</p>");
		if ($dio_dirs) {
			&outlog("<p>".scalar @{$dio_dirs}." moderators added to list</p>");
		}

		$sent_to .= "\n" if $sent_to;
		$sent_to .= scalar @{$dio_dirs}." Diocesan Moderators ";
	}

	if ($everybody_plus) {

		my $all_sth = $dbh->prepare('
			select school.id, school.chapter, school.name, school.state
			from school
				where school.tourn = ?
		');

		$all_sth->execute($tourn->id);
		my $all = $all_sth->fetchall_hash();

		&outlog("<p>Adding all schools</p>");
		if ($all) {
			&outlog("<p>".scalar @{$all}." schools added to list</p>");
		}

		push @schools, @{$all};
		$sent_to .= "\n" if $sent_to;
		$sent_to .= "All ".scalar @{$all}." schools";
	}

	if ($everybody) {

		my $all_active_sth = $dbh->prepare('
			select school.id, school.chapter, school.name, school.state
			from school, entry
				where school.tourn = ?
				and entry.school = school.id
				and entry.active = 1
		');

		$all_active_sth->execute($tourn->id);
		my $all = $all_active_sth->fetchall_hash();

		push @schools, @{$all};

		&outlog("<p>Adding all schools with at least one active entry</p>");
		if ($all) {
			&outlog("<p>".scalar @{$all}." schools added to list</p>");
		}

		$sent_to .= "\n" if $sent_to;
		$sent_to .= "All ".scalar @{$all}." schools with active entries";
	}

	if ($ARGS{"not_checked_in"}) {

		my $all_nonsite_sth = $dbh->prepare('
			select school.id, school.chapter, school.name, school.state
			from school, entry
				where school.tourn = ?
				and entry.school = school.id
				and entry.active = 1
				and school.onsite != 1
		');

		$all_nonsite_sth->execute($tourn->id);
		my $all = $all_nonsite_sth->fetchall_hash();

		&outlog("<p>Adding all schools with at least one active entry that has not checked in</p>");
		if ($all) {
			&outlog("<p>".scalar @{$all}." schools added to list</p>");
		}
		push @schools, @{$all};

		$sent_to .= "\n" if $sent_to;
		$sent_to .= "All ".scalar @{$all}." schools with active entries not checked in";
	}

	if ($judge_short) {

		$sent_to .= " Schools short on judges ";

		if ($tourn_settings->{"nsda_nats"}) {

			$m->comp("/register/judge/nsda_judge_status.mhtml",
				tourn          => $tourn,
				tourn_settings => $tourn_settings,
				return         => 1
			);

			my $short_judging_sth = $dbh->prepare('
				select school.id, school.chapter, school.name, school.state
				from school, school_setting
					where school.tourn = ?
					and school_setting.school = school.id
					and school_setting.tag = "judging_unmet"

					and exists (
						select entry.id
						from entry
						where entry.school = school.id
						and entry.active = 1
					)
			');

			$short_judging_sth->execute($tourn->id);
			my $short = $short_judging_sth->fetchall_hash();

			&outlog("<p>Adding all schools short on their judging obligation</p>");
			if ($short) {
				&outlog("<p>".scalar @{$short}." schools added to list</p>");
			}

			push @schools, @{$short};
			$sent_to .= "\n" if $sent_to;
			$sent_to .= "All ".scalar @{$short}." schools with unmet judging obligations";

		} else {

			my @categories = $tourn->categories;
			my %settings;

			foreach my $category (@categories) {
				$settings{$category->id} = {$category->all_settings()};
			}

			my $counter;

			foreach my $school ($tourn->schools) {

				my $short;

				foreach my $category (@categories) {

					my ($uncovered, $overage) = $m->comp(
						"/funclib/judgemath/uncovered_burden_by_category.mas",
						category          => $category,
						category_settings => $settings{$category->id},
						school            => $school,
						tourn             => $tourn,
						tourn_settings    => $tourn_settings,
					);

					$short++ if $uncovered;
					last if $short;
				}

				next unless $short;

				my $school_frame = ({
					id      => $school->{id},
					name    => $school->{name},
					chapter => $school->{chapter}
				});

				push @schools, $school_frame;
				$counter++;
			}

			&outlog("<p>Adding all schools short on their judging obligation</p>");
			&outlog("<p>$counter schools added to list</p>");

			$sent_to .= "\n" if $sent_to;
			$sent_to .= $counter." schools with unmet judging obligations";
		}
	}

	my %school_balances;

	if ($money_short
		|| $ARGS{"uninvoice_short"}
		|| $ARGS{"moneyshort_nopo"}
		|| $ARGS{"moneyshort_po"}
	) {

		$sent_to .= " Schools with positive balances " if $money_short;
		$sent_to .= " Schools with uninvoiced balances " if $ARGS{"uninvoice_short"};

		&outlog("<p>Adding all schools with non-zero balances</p>");

		%school_balances = $m->comp(
			"/funclib/balances.mas",
				tourn          => $tourn,
				tourn_settings => $tourn_settings,
				person         => $person
		);

		my %po;

		if ($ARGS{"moneyshort_nopo"} || $ARGS{"moneyshort_po"}) {

			my $money_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
				from school, school_setting po
				where school.tourn = ?
					and school.id = po.school
					and po.tag = 'purchase_order'
			");

			$money_sth->execute($tourn->id);
			my $ref = $money_sth->fetchall_hash();

			$money_sth->finish();
			%po = map {$_->{id} => 1} @{$ref} if $ref;
		}

		my $counter;

		foreach my $school_id (keys %school_balances) {

			my $yup;

			if (
				($money_short || $ARGS{"moneyshort_nopo"} || $ARGS{"moneyshort_po"} )
				&& $school_balances{$school_id}{"balance"} > 0
			) {
				$yup++;
			}

			if ($ARGS{"uninvoice_short"} && $school_balances{$school_id}{"uninvoiced"} > 0) {
				$yup++;
			}

			if ($ARGS{"moneyshort_nopo"}) {

				if ($po{$school_id}) {
					undef $yup;
				}
			}

			if ($ARGS{"moneyshort_po"}) {
				unless ($po{$school_id}) {
					undef $yup;
				}
			}

			$school_balances{$school_id}{"id"} = $school_id;

			if ($yup && $school_id) {
				push @schools, $school_balances{$school_id};
				$counter++;
			}
		}

		&outlog("<p>$counter schools added to list</p>");

		$sent_to .= "\n" if $sent_to;
		$sent_to .= $counter." schools with pending financial balances";
	}

	if ($tba) {
		$sent_to .= "Schools with TBA entries at ";

		my $tba_sth = $dbh->prepare('
			select school.id, school.chapter, school.name, school.state
				from school, entry
			where entry.school = school.id
				and school.tourn = ?
				and exists (
					select tba.id
					from entry_setting tba
					where tba.entry = entry.id
					and tba.tag = "tba"
				)
		');

		$tba_sth->execute($tourn);
		my $tbas = $tba_sth->fetchall_hash();

		push @schools, @{$tbas};

		&outlog("<p>Adding all schools with TBA entries</p>");
		if ($tbas) {
			&outlog("<p>".scalar @{$tbas}." schools added to list</p>");
		}

		$sent_to .= "\n" if $sent_to;
		$sent_to .= scalar @{$tbas}." schools with TBA entries";
	}

	if ($ARGS{"event_id"}) {

		my $string;
		my $ev_counter;

		if ($ARGS{"event_id"} eq int($ARGS{"event_id"})) {
			if ($events{$ARGS{event_id}}) {
				$string .= $ARGS{'event_id'};
				$ev_counter++;
			}
		} else {
			foreach my $ev (@{$ARGS{"event_id"}}) {
				if ($events{$ev}) {
					$string .= ", " if $string;
					$string .= int($ev);
					$ev_counter++;
				}
			}
		}

		if ($string) {

			my $event_sth = $dbh->prepare('
				select school.id, school.chapter, school.name, school.state
					from school, entry
				where school.id = entry.school
					and school.tourn = ?
					and entry.active = 1
					and entry.event in ('.$string.')
				group by school.id
			');

			$event_sth->execute($tourn->id);
			my $events = $event_sth->fetchall_hash();

			my $hybrid_sth = $dbh->prepare('
				select school.id, school.chapter, school.name, school.state
					from school, entry, entry_student es, student
				where entry.active = 1
					and entry.event in ('.$string.')
					and entry.id = es.entry
					and es.student = student.id
					and student.chapter = school.chapter
					and school.tourn = ?
					and school.id != entry.school
				group by school.id
			');

			$hybrid_sth->execute($tourn->id);
			my $hybrids = $hybrid_sth->fetchall_hash();

			push @schools, @{$events};
			push @schools, @{$hybrids};

			&outlog("<p>Adding all schools with entries in $ev_counter chosen events</p>");
			if ($events) {
				&outlog("<p>".(scalar @{$events})." schools added to list</p>");
			}
			if ($hybrids) {
				&outlog("<p>".(scalar @{$hybrids})." schools with hybrid entries added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @schools." schools with entries in selected events";

		}
	}

	if ($ARGS{"waitlist_id"}) {

		my $string;
		my $counter;

		if ($ARGS{"waitlist_id"} eq int($ARGS{"waitlist_id"})) {
			if ($events{$ARGS{waitlist_id}}) {
				$string .= $ARGS{'waitlist_id'};
				$counter++;
			}
		} else {
			foreach my $ev (@{$ARGS{"waitlist_id"}}) {
				if ($events{$ev}) {
					$string .= ", " if $string;
					$string .= int($ev);
					$counter++;
				}
			}
		}

		if ($string) {

			my $waitlist_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
					from school, entry
				where school.id = entry.school
					and school.tourn = ?
					and entry.unconfirmed = 0
					and entry.waitlist = 1
					and entry.event IN (".$string.")
			");

			$waitlist_sth->execute($tourn->id);
			my $waitlisted = $waitlist_sth->fetchall_hash();
			push @schools, @{$waitlisted};

			&outlog("<p>Adding all schools with waitlisted entries in $counter chosen events</p>");
			if ($waitlisted) {
				&outlog("<p>".( scalar @{$waitlisted} )." schools added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$waitlisted}." schools with entries from selected events on waitlists";
		}
	}

	if ($ARGS{"video_id"}) {

		my $string;

		if ($ARGS{"video_id"} eq int($ARGS{"video_id"})) {
			if ($events{$ARGS{video_id}}) {
				$string .= $ARGS{'video_id'};
			}
		} else {
			foreach my $ev (@{$ARGS{"video_id"}}) {
				if ($events{$ev}) {
					$string .= ", " if $string;
					$string .= int($ev);
				}
			}
		}

		if ($string) {

			my $video_sth = $dbh->prepare("
				select school.id, school.chapter, school.name, school.state
					from school, entry
				where school.id = entry.school
					and school.tourn = ?
					and entry.active = 1
					and entry.event in (".$string.")
					and not exists (
						select video_link.id
							from entry_setting video_link
						where video_link.entry = entry.id
							and video_link.tag = 'video_link'
					)
			");

			$video_sth->execute($tourn->id);
			my $videos = $video_sth->fetchall_hash();
			push @schools, @{$videos};

			&outlog("<p>Adding all schools with entries lacking videos</p>");
			if ($videos) {
				&outlog("<p>".( scalar @{$videos} )." schools added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$videos}." schools with entries from selected events missing video links";
		}
	}

	foreach my $tag ("category_id", "demographic_category_id", "selfnom_category_id") {

		next unless $ARGS{$tag};
		my $string;

		if ($ARGS{$tag} eq int($ARGS{$tag})) {

			next unless $categories{$ARGS{$tag}};

			$sent_to .= "\n" if $sent_to;
			$sent_to .= " Judges in ".$categories{$ARGS{$tag}}{name};

			if ($tag eq "demographic_category_id") {
				$sent_to .= " without demographic information";
			}

			if ($tag eq "selfnom_category_id") {
				$sent_to .= " without self nomination";
			}

			$string .= $ARGS{$tag};

		} else {

			foreach my $cat (@{$ARGS{$tag}}) {

				next unless $categories{$cat};
				$sent_to .= "\n" if $sent_to;
				$sent_to .= " Judges in ".$categories{$cat}{name};

				if ($tag eq "demographic_category_id") {
					$sent_to .= " without demographic information";
				} elsif ($tag eq "selfnom_category_id") {
					$sent_to .= " without self nomination";
				}

				$string .= ", " if $string;
				$string .= int($cat);
			}
		}

		if ($string) {

			my $limit;

			if ($tag eq "demographic_category_id") {

				&outlog("<p>Judges from category without demographics forms</p>");

				$limit .= "and not exists (
					select pq.id
					from person_quiz pq
					where pq.person = judge.person
						and pq.quiz = 4
				)";

			} elsif ($tag eq "selfnom_category_id") {

				&outlog("<p>Judges from category without self nominations</p>");

				$limit .= "and not exists (
					select js.id
					from judge_setting js
					where js.tag = 'nomination'
						and js.judge = judge.id
				)";

			} else {
				&outlog("<p>Judges from category</p>");
			}

			my $judge_sth = $dbh->prepare("
				select person.id
				from person, judge, category
				where person.id = judge.person
					and judge.category in ($string)
					and judge.category = category.id
					and category.tourn = ?
					$limit
			");

			$judge_sth->execute($tourn->id);
			my $judges = $judge_sth->fetchall_hash();

			foreach my $judge (@{$judges}) {
				$ids{$judge->{id}} = 1;
			}

			if ($judges) {
				&outlog("<p>".( scalar @{$judges} )." judges added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$judges}." such judges found";
		}
	}

	if ($ARGS{"jpool_id"}) {

		my %jpools = $m->comp("/funclib/perms/jpools.mas",
			tourn => $tourn,
			perms => $perms
		);

		my $string;

		if ($ARGS{"jpool_id"} eq int($ARGS{"jpool_id"})) {
			if ($jpools{$ARGS{'jpool_id'}}) {
				$string .= $ARGS{'jpool_id'};
				$sent_to .= "\n" if $sent_to;
				$sent_to .= " Judges in pool ".$jpools{$ARGS{"jpool_id"}}{'name'};
				&outlog("<p>Judge in judge pool ".$jpools{$ARGS{"jpool_id"}}{name}."</p>");
			}
		} else {
			foreach my $jpool (@{$ARGS{"jpool_id"}}) {
				if ($jpools{$jpool}) {
					$string .= ", " if $string;
					$string .= int($jpool);
					$sent_to .= "\n" if $sent_to;
					$sent_to .= " Judges in pool ".$jpools{$jpool}{'name'};
					&outlog("<p>Judge in judge pool ".$jpools{$jpool}{name}."</p>");
				}
			}
		}

		if ($string) {

			my $jpool_sth = $dbh->prepare("
				select person.id
				from person, judge, jpool_judge
				where person.id = judge.person
					and judge.id = jpool_judge.judge
					and jpool_judge.jpool in ($string)
			");

			$jpool_sth->execute();
			my $jpools = $jpool_sth->fetchall_hash();

			foreach my $judge (@{$jpools}) {
				$ids{$judge->{id}} = 1;
			}

			if ($jpools) {
				&outlog("<p>".( scalar @{$jpools} )." judges added to list</p>");
			}

			$sent_to .= "\n" if $sent_to;
			$sent_to .= scalar @{$jpools}." such judges found";
		}
	}

	if ($ARGS{"paradigm_jpool_id"}) {

		my %jpools = $m->comp("/funclib/perms/jpools.mas",
			tourn => $tourn,
			perms => $perms
		);

		my @pools;
		my $tag = "paradigm_jpool_id";

		if ($ARGS{$tag} eq int($ARGS{$tag})) {
			if ($jpools{$ARGS{$tag}}) {
				push @pools, $ARGS{$tag};
				$sent_to .= "\n" if $sent_to;
				$sent_to .= " Judges in pool ".$jpools{$ARGS{$tag}}{'name'}." without required forms or paradigms";
				&outlog("<p>Judge in judge pool ".$jpools{$ARGS{$tag}}{name}."</p>");
			}
		} else {
			foreach my $jpool (@{$ARGS{$tag}}) {
				if ($jpools{$jpool}) {
					push @pools, int($jpool);
					$sent_to .= "\n" if $sent_to;
					$sent_to .= " Judges in pool ".$jpools{$jpool}{'name'}." without required forms or paradigms";
					&outlog("<p>Judge in judge pool ".$jpools{$jpool}{name}."</p>");
				}
			}
		}

		foreach my $pool (@pools) {

			my $forms_sth = $dbh->prepare('
				select
					paradigm_quiz.value paradigm,
					required_trainings.value_text quizzes

				from jpool
					left join jpool_setting paradigm_quiz
					on paradigm_quiz.jpool = jpool.id
					and paradigm_quiz.tag = "paradigm_quiz"

					left join jpool_setting required_quizzes
					on required_quizzes.jpool = jpool.id
					and required_quizzes.tag = "required_quizzes"
				where jpool.id  = ?
				group by jpool.id
			');

			$forms_sth->execute($pool);
			my $results = $forms_sth->fetchall_hash();
			my @tags;

			if ($results && @{$results} > 0) {
				my $result = shift @{$results};

				if ($result->{paradigm}) {
					push @tags, $result->{paradigm};
				}

				if ($result->{quizzes}) {
					push @tags, $result->{quizzes};
				}
			}

			if (@tags) {

				my $counter;

				foreach my $tag (@tags) {

					my $missing_sth = $dbh->prepare("
						select person.id
							from judge, jpool_judge, person
						where judge.id = jpool_judge.judge
							and judge.active = 1
							and jpool_judge.jpool = ?
							and not exists (
								select pq.id
									from person_quiz pq
								where pq.person = person.id
									and pq.completed = 1
									and pq.quiz = ?
							)
					");

					$missing_sth->execute($pool, $tag);
					my $judges = $missing_sth->fetchall_hash();

					foreach my $judge (@{$judges}) {
						$ids{$judge->{id}} = 1;
						$counter++;
					}
				}

				&outlog("<p>$counter judges missing a quiz added to list</p>");
				$sent_to .= "\n" if $sent_to;
				$sent_to .= $counter." judges missing required paradigms or trainings in pool ".$jpools{$pool};
			}
		}
	}

	if ($ARGS{'waitlist_only'}) {

		&outlog("<p>Adding all schools with only waitlisted entries</p>");

		my $waitlist_only = $dbh->prepare("
			select school.id, school.chapter, school.name, school.state
				from (school, entry)
			where school.tourn = ?
			and school.id = entry.school
			and entry.waitlist = 1
			and entry.unconfirmed = 0
			and entry.dropped = 0
			and not exists (
				select e2.id
				from entry e2
				where e2.school = school.id
				and e2.waitlist = 0
				and e2.dropped  = 0
				and e2.unconfirmed = 0
			)
		");

		$waitlist_only->execute($tourn->id);
		my $wl = $waitlist_only->fetchall_hash();

		$sent_to .= "\n" if $sent_to;
		$sent_to .= scalar @{$wl}." schools with only waitlisted entries ";

		if ($wl) {
			&outlog("<p>".( scalar @{$wl} )." schools added to list</p>");
		}

		push @schools, @{$wl};
	}

	# If we do not have recipients at this point we're done.
	unless (scalar @schools > 0 || scalar (keys %ids) > 0) {
		my $err = "The categories or checkboxes you have selected did not have any recipients. ";
		$err .= "It is possible you didn't select recipients categories, or that the categories you chose ";
		$err .= "have no matching schools or judges.";

		$m->comp("/funclib/abort.mas", message => $err);
	}

	# Now determine who the email should go out as

	my $from_string;
	my $reply_to;
	my $sender;

	if ($ARGS{"reply_to"} && (not defined $ARGS{"nosend"})) {

		my $epoch = $now->epoch;
		my $key = substr($epoch, -7);
		$from_string = $tourn->name." <".$tourn->webname.'_'.$key.'@www.tabroom.com>';

		if ($ARGS{"reply_to"} eq int($ARGS{"reply_to"})) {

			$sender = Tab::Person->retrieve($ARGS{"reply_to"});
			$reply_to = $sender->first." ".$sender->last." <".$sender->email.">";

			my $description = "Email subject $subject sent as ".$sender->email." to $sent_to";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);

		} else {

			if ($tourn_settings->{"senders"} && $tourn_settings->{"senders"}{$ARGS{"reply_to"}}) {

				$reply_to = $ARGS{"reply_to"};

				if ($sender->{"verified"}) {
					my $description = "Email subject $subject sent as ".$reply_to." to $sent_to";
					$m->comp("/funclib/log.mas",
						type        => 'tabbing',
						tourn       => $tourn->id,
						person      => $person->id,
						description => $description
					);
				}

				undef $sender;
			}
		}
	}

	&outlog("<h5>Saving Message for archive</h5>");

	# Create or update the database record
	my $email;

	if ($email_id) {

		$email = Tab::Email->retrieve($email_id);
		#If the mail has been sent already we clone instead of overwriting

		if ($email->sent_to && (not defined $ARGS{'nosend'}) ) {
			$email = $email->copy({
				sent_at => $now
			});

			if ($sender) {
				$email->sender($sender);
			}

			if ($reply_to) {
				$email->sender_raw($reply_to);
			}
		}

		$email->subject($subject);
		$email->hidden($hidden || 0);
		$email->content($content);
		$email->sender_raw($reply_to);
		$email->sender($sender || $person || 0);
		$email->update();

	} else {

		$email = Tab::Email->create({
			subject    => $subject,
			content    => $content,
			sent_at    => $now,
			tourn      => $tourn->id,
			sender     => int($sender) || int($person) || 0,
			sender_raw => $reply_to,
			hidden     => $hidden || 0,
		});

		my $person_sth = $dbh->prepare('
			update email set person = ? where id = ?
		');

		$person_sth->execute($person->id, $email->id);
	}

	my $balance_log;
	my %done;

	# Add in the admins

	my $admin_limit = "and permission.tag = 'owner'";

	if ($ARGS{"all_admins"}) {
		undef $admin_limit;
	}

	my $admin_sth = $dbh->prepare('
		select
			permission.person, person.email
		from permission, person
		where permission.tourn = ?
			and person.id = permission.person
			and person.no_email = 0
			'.$admin_limit.'
	');

	$admin_sth->execute($tourn);
	my $admins = $admin_sth->fetchall_hash();

	foreach my $admin (@{$admins}) {
		$ids{$admin->{person}} = 1;
	}

	$ids{$person->id} = 1;

	&outlog("<p>Sending to a total of ".scalar @schools." schools</p>");

	if (@schools) {

		my $counter;

		foreach my $school (sort {$a->{name} cmp $b->{name}} @schools) {

			next if $done{"school"}{$school->{id}}++;
			next if $empties{$school->{id}};

			my $school_message = "<p>School: ".$school->{name}."</p>".$content;

			if (%school_balances) {
				$balance_log .= "\n" if $balance_log;

				if ($ARGS{"uninvoice_short"} && $school_balances{$school->{id}}{"uninvoiced"} > 0) {

					$school_message .= "<p>Uninvoiced Balance: ";
					$school_message .= $tourn_settings->{currency} || '$';
					$school_message .= sprintf("%.2f", $school_balances{$school->{id}}{"uninvoiced"})."</p>";
					$balance_log .= "Sending email to ".$school->{name}." with uninvoiced balance ";
					$balance_log .= $school_balances{$school->{id}}{"balance"};

				} else {

					$school_message .= "<p>Unpaid Balance: ";
					$school_message .= $tourn_settings->{currency} || '$';
					$school_message .= sprintf("%.2f", $school_balances{$school->{id}}{"balance"})."</p>";

					if ($tourn_settings->{tmoney_enable}) {
						$school_message .= "<p>
							Pay your invoice at:
							<a href='".$tourn_settings->{tmoney_url}."/pay/tabroom/".$tourn->id."/".$school->id."'>
								".$tourn_settings->{tmoney_url}."/pay/tabroom/".$tourn->id."/".$school->id."
							</a>
						</p>";
					}

					$school_message .= sprintf("%.2f", $school_balances{$school->{id}}{"balance"})."</p>";
					$balance_log .= "Sending email to ".$school->{name}." with balance ";
					$balance_log .= $school_balances{$school->{id}}{"balance"};
				}

			} else {
				$balance_log .= "\n" if $balance_log;
				$balance_log .= "Sending email to ".$school->{name};
			}

			my @contacts = keys %{$tourn_contacts{$school->{id}}};
			next unless (scalar @contacts > 0);

			$balance_log .= " (".scalar @contacts." recipients)";

			unless ($ARGS{"nosend"}) {

				my $answer = $m->comp( "/funclib/send_notify.mas",
					from_string => $from_string,
					reply_to    => $reply_to,
					subject     => $subject,
					tourn       => $tourn,
					email       => int($email),
					sender      => $person,
					ids         => \@contacts,
					no_web      => 1,
					html        => $school_message,
				);
			}

			unless ($counter++ % 20) {
				&outlog("<p>".($counter - 1)." messages sent</p>");
			}
		}

		$email->metadata($balance_log);
		$email->update();
	}

	&outlog("<p>Sending to a total of ".scalar(keys %ids)." individuals</p>");

	if (scalar (keys %ids)) {

		foreach my $key (keys %{$done{person}}) {
			delete $ids{$key};
		}

		my @ids = keys %ids;
		unless ($ARGS{"nosend"}) {
			$m->comp( "/funclib/send_notify.mas",
				from_string => $from_string,
				reply_to    => $reply_to,
				subject     => $subject,
				tourn       => $tourn,
				email       => int($email),
				sender      => $person,
				ids         => \@ids,
				no_web      => 1,
				html        => $content,
			);
		}
	}

	&outlog("<p>Done</p>");

	unless ($ARGS{"nosend"}) {
		$msg = "This message has been sent.";
	} else {
		$msg = "This message has been saved but NOT sent.";
	}

	if ($sent_to) {
		$email->sent_to($sent_to);
		$email->update();
	}

	&outlog("<p>Done</p>");

	$m->print("</span>");

	&outlog("<h5 class='centeralign redtext'>Email Sent</h5>");
	&outlog('<a href="/register/emails/index.mhtml?email_id="'.$email->id.'" class="bluetext semibold">Return to Email</a>');

	$m->print("</div>");

	sub outlog {
		my $text = shift;
		$m->print($text);
		$m->flush_buffer();
	}

</%init>
