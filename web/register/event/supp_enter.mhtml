<%args>
	$person
	$tourn
	$tourn_settings
	$event_id
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);

	$m->abort unless $event;

	my %event_settings = $event->all_settings();

	my $school_id;
	my $set_code;
	my @students;

	foreach my $tick (1 .. $event_settings{"max_entry"}) {

		my $student_id = $ARGS{"student_$tick"};
		my $student = Tab::Student->retrieve($student_id);

		push @students, $student;

		my @alreadies = $m->comp(
			"/funclib/student_entries.mas",
				tourn   => $tourn,
				student => $student
		);

		foreach my $already (@alreadies) {

			$school_id = $already->school->id unless $school_id;
			$set_code = $already->code unless $set_code;

			if ($set_code) {

				if ($already->setting("max_entry") > 1) {

					my $letter = "A";

					foreach my $al_student ($already->students) {
						$set_code = $set_code.$letter
							if $al_student->id == $student->id;
						$letter++;
					}

				}

			}

		}

	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	my $entry = Tab::Entry->create({
		tourn      => $tourn->id,
		school     => $school_id,
		event      => $event->id,
		code       => $set_code,
		dropped    => 0,
		waitlist   => 0
	});

	foreach my $student (@students) {

		eval {
			Tab::EntryStudent->create({
				student => $student->id,
				entry   => $entry->id
			});
		};
	}

	my $description = "Entered ".$event->abbr." entry $set_code (".$entry->name.")";
	$description .= " in supp event ".$event->abbr;

	my $change = $m->comp("/funclib/log.mas",
		tourn       => $tourn->id,
		school      => $school_id,
		type        => "registration",
		description => $description,
		person      => $person
	);

    $entry->name(
		$m->comp("/funclib/entry_name.mas", entry => $entry)
	);

	$entry->update;

	my $msg = $entry->code." registered in ".$event->name;

	$m->redirect("/register/event/roster.mhtml?event_id=$event_id&msg=$msg");

</%init>
