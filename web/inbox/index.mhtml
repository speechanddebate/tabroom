<%args>
	$person
	$person_settings
</%args>
<%init>

	unless ($person > 0) {
		$m->comp("/funclib/abort.mas",
			message => "You must be logged in to access the inbox"
		);
	}

</%init>

	<div id="wrapper">
		<div id="content">
			<div class="main">

%				if ($person_settings->{"email_unconfirmed"}) {
					<div class='full borderredthin padmuchmore'>

						<h6 class="semibold redtext">
							You are not currently getting emails.
						</h6>

						<p class="padleft">
							As your email address, <% $person->email %>, has not
							been confirmed, your Tabroom.com messages cannot be
							emailed to you.
						</p>

						<p class="padleft">
							You are still responsible for tournament messages
							if you are judging or competing, whether or not
							your emails are working.
						</p>

						<p class="padleft">
							To get tournament messages in your email in addition to here, <a
								href="/user/login/confirm.mhtml"
								class="padless yellowhover bluetext semibold link-underline"
							>confirm your address.</a>
						</p>

					</div>
%				}

				<div class="full flexrow">
					<span
						class   = "threequarters"
						onClick = "hideMessages();"
					>
						<h5>Your Tabroom Message Inbox</h5>
					</span>
					<span class="eighth rightalign padrightmore">
						<a
							class   = "fa fa-envelope-open-o buttonwhite greentext"
							title   = "Mark All Messages as Read"
							onClick = "markAllRead();"
						></a>
					</span>

					<span class="eighth rightalign padleft padright">
						<a
							class   = "fa fa-refresh buttonwhite bluetext"
							title   = "Refresh Inbox"
							onClick = "checkMail();"
						></a>
					</span>
				</div>

				<& "/funclib/tablesorter.mas",
					table     => int($person)."_inbox",
					nosticky  => 1,
					nobuttons => "yaskween",
				&>

				<div
					id    = "welcome"
				>

%					unless ($person_settings->{"inbox_accessed"} > 3) {
						<p class='padleftmore padrightmore ltbordertop padbottom padtop marno'>
							<span class="inline semibold bluetext">Welcome to your Tabroom inbox!</span>
							As phone text delivery no longer works, and email delivery
							is fraught with spam and other filters, you can now access
							your Tabroom messages internally here. This feature is VERY
							new! We're releasing it as a beta now, because the need is
							there. But the interface still needs a little love, and not
							EVERY message Tabroom sends may end up here. It's very much
							a work in progress, but we hope it's useful!
						</p>
%					}

					<p>
						Note that messages won't live here forever; they'll be
						auto-deleted starting a week after the tournament that sent
						them is over, or a month after they're sent if they're not tied
						to a tournament.
					</p>

				</div>

				<div
					id    = "errorbox"
					class = "mono orangetext semibold italic ltredbordertop ltredborderbottom hidden"
				>
				</div>

				<div
					id       = "inboxbox"
					tabindex = 0
					class    = "full fullheight"
				>
					<table id="<% $person->id %>_inbox">
						<thead>
							<tr class="yellowrow graytext smaller padvertless">
								<th class="centeralign">
								</th>

								<th>
									Date
								</th>

								<th>
									Time
								</th>

								<th>
									Subject
								</th>

								<th>
									Tournament
								</th>
							</tr>
						</thead>

						<tbody id="inbox_list">

						</tbody>
					</table>
				</div>

				<div
					id    = "messagebox"
					class = "full odd ltborder padvert padleftmore padrightmore bluebordertop"
					style = "min-height : 75vh;"
				>
				</div>

	</div>

	<& "/user/menu.mas",
		person          => $person,
		person_settings => $person_settings,
		whoami          => "inbox",
	&>

	</div>
	</div>

% 	my $get_inbox_url   = $Tab::indexcards_url."/user/inbox/list";
% 	my $post_allread_url = $Tab::indexcards_url."/user/inbox/markAllRead";
% 	my $post_read_url   = $Tab::indexcards_url."/user/inbox/markRead";
% 	my $post_delete_url = $Tab::indexcards_url."/user/inbox/markDeleted";

	<script>

		$(document).ready( () => {
			checkMail();
			setInterval(checkMail, 30000);
		});

		function scrollTable() {
			const scrollTop = $(`#inboxbox`).prop('scrollHeight');
			$('#inboxbox').animate({ scrollTop }, 20);
		}

		function hideMessages() {
			$(`.contents`).addClass("hidden");
			$(`#inboxbox`).addClass("fullheight");
			$(`#inboxbox`).removeClass("quarterheight");
		}

		function markAllRead() {
			$.ajax({
				type                : 'POST',
				url                 : '<% $post_allread_url %>',
				crossDomain         : true,
				xhrFields           : {
					withCredentials : true
				},
				data				: { hello: true },
				error: (data, status, metadata) => {
					$(`#errorbox`).html(`
						<p class="semibold">Error encountered:</p>
						<code>
							${data}
						</code>
						<code>
							${metadata}
						</code>
					`);
					$(`#errorbox`).removeClass('hidden');
				},
				success : (data, status, metadata) => {
					// Passing true here prevents the rescroll to the bottom
					checkMail(true);

%					if ($person->id == 16454 || $person->id == 1 || $person->id == 2425 || $person->id == 1549) {
						const audio = new Audio('/lib/images/melting.mp3');
						audio.loop = false;
						try {
							audio.play();
						} catch (err) {
							console.log(err);
						}
%					}
				}
			});
		}

		function showMessage(message) {
			const messageId = $(message).attr('message_id');
			$(`.contents`).addClass("hidden");
			$(`#inboxbox`).addClass("quarterheight");
			$(`#inboxbox`).removeClass("fullheight");
			$(`#content_${messageId}`).removeClass("hidden");
			$(`#message_${message.id}`).focus();

			$.ajax({
				type                : 'POST',
				url                 : '<% $post_read_url %>',
				crossDomain         : true,
				xhrFields           : {
					withCredentials : true
				},
				data				: { messageId },
				error: (data, status, metadata) => {
					$(`#errorbox`).html(`
						<p class="semibold">Error encountered:</p>
						<code>
							${data}
						</code>
						<code>
							${metadata}
						</code>
					`);
					$(`#errorbox`).removeClass('hidden');
				},
				success : (data, status, metadata) => {
					$(`.messages`).removeClass('green');
					$(`#${message.id}`).addClass('green');
					$(`#${message.id}`).focus();
					// Passing true here prevents the rescroll to the bottom
					checkMail(true);
				}
			});
		}

		function deleteMessage(messageId) {
			$(`.contents`).addClass("hidden");
			$(`#content_${messageId}`).removeClass("hidden");

			$.ajax({
				type                : 'POST',
				url                 : '<% $post_delete_url %>',
				crossDomain         : true,
				xhrFields           : {
					withCredentials : true
				},
				data				: { messageId },
				error: (data, status, metadata) => {
					$(`#errorbox`).html(`
						<p class="semibold">Error encountered:</p>
						<code>
							${data}
						</code>
						<code>
							${metadata}
						</code>
					`);
					$(`#errorbox`).removeClass('hidden');
				},
				success : (data, status, metadata) => {
					checkMail();
				}
			});
		}

		function checkMail(noRescroll) {

			const existing = {};

			$("#inbox_list").children('tr').each( function(index, row) {
				const id = $(row).attr("message_id");
				existing[id] = row;
			});

			$.ajax({
				type                : 'GET',
				url                 : '<% $get_inbox_url %>',
				crossDomain         : true,
				xhrFields           : {
					withCredentials : true
				},
				error: (data, status, metadata) => {
					$(`#errorbox`).html(`
						<p class="semibold">Error encountered:</p>
						<code>
							${data}
						</code>
						<code>
							${metadata}
						</code>
					`);
					$(`#errorbox`).removeClass('hidden');
				},
				success: (data, status, metadata) => {

					let newCounter = 0;

					data.forEach( (message) => {

						if (existing[message.id]) {

							const row = existing[message.id];
							const elements = {};

							$(row).children('td').each( (index, child) => {
								const tag = $(child).attr('tag');
								elements[tag] = child;
							});

							if (message.subject !== $(elements.subject).text() ) {
								$(elements.subject).text(message.subject);
							}

							if (message.tournName !== $(elements.tourn).text() ) {
								$(elements.tourn).text(message.tournName);
							}

							if (message.readStatus !== $(elements.read).attr('data-text')) {
								const newCell = `<a class="nospace fa ${message.readAt ? 'fa-envelope-open-o graytext' : 'fa-envelope redtext' } "></a>`;
								$(elements.read).attr('data-text', message.readStatus);
								$(elements.read).html(newCell);

								if (message.readAt) {
									$(`#message_${message.id}`).removeClass('semibold');
								} else {
									$(`#message_${message.id}`).addClass('semibold');
								}
							}

							delete existing[message.id];

						} else {

							const sentAt = new Date(message.created_at);
							const dateString = sentAt.toLocaleDateString("en-US")
							const timeString = sentAt.toLocaleTimeString("en-US")

							newCounter++;

							const newRow = `
								<tr
									id         = "message_${message.id}"
									message_id = "${message.id}"
									class      = "smallish hover messages ${message.readAt ? '' : 'semibold' }"
									onClick    = "showMessage(this);"
									tabindex   = 0
								>
									<td
										tag       = "read"
										data-text = "${message.readAt ? 'Y' : 'N' }"
										class     = 'centeralign nospace'
									>
										<a class="nospace fa ${message.readAt ? 'fa-envelope-open-o graytext' : 'fa-envelope redtext' } "></a>
									</td>

									<td tag="date">
										${ dateString }
									</td>

									<td tag="time" class="nowrap">
										${ timeString }
									</td>

									<td tag="subject">
										${ message.subject || "" }
									</td>

									<td tag="tourn" class="nowrap limitthird">
										${ message.tournName || "" }
									</td>
								</tr>
							`;

							const senderString = message.sender_string.replace('<', '&lt;').replace('>', '&gt;');

							const newMessage = `
								<div class="full  hidden contents" id="content_${message.id}">

									<div class="full flexrow top">
										<span class="nineteen headers smallish flexkids">
											<div class="full ltborderbottom flexrow">
												<span class='quarter semibold graytext'>
													Sender
												</span>
												<span class='threeequarters smallish'>
													${ senderString
													 	|| message.first+' '+message+middle+' '+message.last+' &lt;'+message.sender_mail+'&gt;'
													}
												</span>
											</div>

											<div class="full ltborderbottom">
												<span class='quarter semibold graytext'>
													Sent
												</span>
												<span class='threeequarters smallish'>
													 ${ dateString } at ${ timeString } <% &Tab::tzname($person->tz || "America/New_York") %>
												</span>
											</div>
											<div class="full ltborderbottom">
												<span class='quarter semibold graytext'>
													Subject
												</span>
												<span class='threeequarters'>
													 ${ message.subject || "None" }
												</span>
											</div>

											<div class="full ltborderbottom">
												<span class='quarter semibold graytext'>
													Tournament
												</span>
												<span class='threeequarters'>
													 ${ message.tournName || "None" }
												</span>
											</div>

											${ message.url ? `
												<div class="full ltborderbottom">
													<span class='quarter semibold graytext'>
														URL
													</span>
													<span class='threeequarters'>
														<a
															class  = "plain bluetext link-underline"
															target = "_blank"
															href   = "${ message.url }">${ message.url }</a>
													</span>
												</div>
											` : "" }
										</span>
										<span class="twenty rightalign">
											<a
												class   = "fa fa-trash fa-sm graytext buttonwhite"
												onClick = "deleteMessage(${message.id});"
											></a>
										</span>
									</div>

									<div class="full bordertop padtopmore messagebody">
										${message.content}
										${message.content === message.body ? '' : message.body }
									</div>
								</div>
							`;

							$(`#inbox_list`).append(newRow);
							$(`#messagebox`).append(newMessage);
						}
					});

					Object.keys(existing).forEach( (key) => {
						$(`#message_${key}`).remove();
					});

					if (!noRescroll && newCounter > 0) {
						scrollTable();
					}
					fixVisual();
					youveGotMail();
				}
			});
		};

	</script>

%	unless ($person_settings->{inbox_accessed} > 5) {
%		eval { $person->setting("inbox_accessed", $person_settings->{inbox_accessed} + 1); };
%	}
