<%args>
    $category
	$round
	$event_settings => undef
	$event          => undef
	$tourn          => undef
	$tourn_settings => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	unless ($event) {
		$event = $round->event;
	}
	unless ($event_settings) {
		%{$event_settings} = $event->all_settings;
	}

	my %counts;
	my %entries;

	my $hires_conflict++ if $category->setting("auto_conflict_hires");

	my $sth = $dbh->prepare("
		select entry.id, entry.school, hybrid.school,
			ballot.side,
			region.id region_id, district.id district_id
		from (entry, school, ballot, panel)
			left join strike hybrid on hybrid.type = 'hybrid' and hybrid.entry = entry.id
			left join region on school.region = region.id
			left join district on school.district = district.id
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.school = school.id
			and entry.active = 1
	");

	$sth->execute($round->id);

	while (
		my (
			$entry_id, $school_id, $hybrid_id, $ballot_side,
			$region_id, $district_id
		) = $sth->fetchrow_array()
	) {

		$counts{"school"}{$school_id}{$entry_id}++;
		$counts{"school"}{$hybrid_id}{$entry_id}++;

		$counts{"region"}{$region_id}{$entry_id}++;
		$counts{"district"}{$district_id}{$entry_id}++;
		$entries{$entry_id}{side}{$ballot_side}++;
	}

	$sth->finish();

	$sth = $dbh->prepare("
        select judge.id, judge.school,
			region.id region_id, district.id district_id,
            strike.id, strike.entry, strike.school, strike.region, strike.district, strike.type,
			judge_hire.school, neutral.value

        from (judge, category)
			left join school on judge.school = school.id
			left join region on region.id = school.region
			left join district on district.id = school.district
			left join strike on judge.id = strike.judge
			left join judge_hire on judge.id = judge_hire.judge
			left join judge_setting neutral on neutral.judge = judge.id and neutral.tag = 'neutral'

        where category.tourn = ?
            and category.id = judge.category
            and judge.active = 1
	");

	my %judge_constraint;

	$sth->execute($category->tourn->id);

	while (
		my (
			$judge_id, $judge_school, $judge_region, $judge_district,
			$strike_id, $strike_entry, $strike_school, $strike_region, $strike_district, $strike_type,
			$hire_school, $neutral
		) = $sth->fetchrow_array()
	) {

		unless ($judge_constraint{$judge_id}) {

			unless ($event_settings->{"allow_judge_own"} || $neutral) {
				if ($counts{school}{$judge_school}) {
					foreach my $entry_id (keys %{$counts{school}{$judge_school}}) {
						$judge_constraint{$judge_id}{$entry_id}++;
					}
				}

				if ($event_settings->{region_judge_forbid} && $counts{region}{$judge_region}) {
					foreach my $entry_id (keys %{$counts{region}{$judge_region}}) {
						$judge_constraint{$judge_id}{$entry_id}++;
					}
				}

				if ($tourn_settings->{nsda_nats}) {
					if ($counts{district}{$judge_district}) {
						foreach my $entry_id (keys %{$counts{district}{$judge_district}}) {
							$judge_constraint{$judge_id}{$entry_id}++;
						}
					}
				}
			}
		}

		if ($hires_conflict && $hire_school > 0) {

			foreach my $entry_id (keys %{$counts{school}{$hire_school}}) {
				$judge_constraint{$judge_id}{$entry_id}++;
			}
		}

		if ($strike_school > 0) {
			foreach my $entry_id (keys %{$counts{school}{$strike_school}}) {
				$judge_constraint{$judge_id}{$entry_id}++;
			}
		}
		if ($strike_region > 0) {
			foreach my $entry_id (keys %{$counts{region}{$strike_region}}) {
				$judge_constraint{$judge_id}{$entry_id}++;
			}
		}

		if ($strike_district > 0) {
			foreach my $entry_id (keys %{$counts{district}{$strike_district}}) {
				$judge_constraint{$judge_id}{$entry_id}++;
			}
		}

		if ($strike_entry > 0) {
			$judge_constraint{$judge_id}{$strike_entry}++;
		}
	}

	$sth->finish();

	unless (
		$event_settings->{"allow_repeat_judging"}
		|| (
				$event_settings->{"allow_repeat_elims"}
				&& ($round->type eq "final" || $round->type eq "elim")
				&& (not defined $event_settings->{"disallow_repeat_drop"})
			)
	) {

		$sth = $dbh->prepare("
			select
				judge.id, round.type, ballot.entry, ballot.side, winloss.value
			from (category, judge, ballot, panel, round)
				left join score winloss
					on winloss.ballot = ballot.id
					and winloss.tag = 'winloss'

			where category.tourn = ?
				and category.id = judge.category
				and judge.active = 1
				and judge.id = ballot.judge
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.name < ?
		");

		$sth->execute($category->tourn->id, $round->name);

		while (
			my (
				$judge_id, $round_type, $entry_id, $ballot_side, $winloss_value
			) = $sth->fetchrow_array()
		) {

			if ($event_settings->{"allow_repeat_prelim_side"}
				&& $ballot_side != $entries{$entry_id}{side}{$ballot_side}
			) {
				next;
			}

			if ($event_settings->{"allow_repeat_elims"} && $event_settings->{"disallow_repeat_drop"}) {
				next if $winloss_value == 1;
			}

			$judge_constraint{$judge_id}{$entry_id}++;
		}
	}

	return %judge_constraint;

</%init>

