<%args>
	$round
	$protocol => undef
	$simple       => undef
	$delimiter    => undef
	$round_name   => undef
	$entries_ref  => undef
</%args>
<%init>

	unless ($round && $round->id) {
		return;
	}

	my $event = $round->event;
	my $type = $event->type;

	my $points = $event->setting("point_increments");
	my $team_points = $event->setting('team_points');
	my $sprintf;

	if ($points eq "fourths") {
		$sprintf = '%.2f';
	} elsif ( $points eq "half" || $points eq "tenths") {
		$sprintf = '%.1f';
	} else {
		$sprintf = '%3d';
	}

	unless ($round->protocol) {
		my $err = "That round does not have tiebreakers set.  ";
		$err .= "Please establish tiebreakers for all rounds";

		$m->redirect("/setup/schedule/event.mhtml?event_id=".$event->id."&err=$err");
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			score.id, score.tag, score.value, score.student,
			ballot.id ballot_id,
			ballot.entry entry_id, ballot.judge judge_id, ballot.tv,
			panel.bye pbye, ballot.bye, ballot.forfeit, ballot.chair,
			round.id round_id, round.name round_name
		from (ballot, panel, round)
			left join score on score.ballot = ballot.id
				and score.tag in ('winloss', 'rank', 'point', 'refute')
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.name <= ?
		and round.event =  ?
		and not exists (
			select round_setting.id
				from round_setting where round_setting.tag = 'ignore_results'
				and round_setting.round = round.id
			)
		order by round.name, ballot.entry, ballot.chair, ballot.judge, score.student
	");

	$round_name = int($round_name);
	$round_name = $round->name unless $round_name;
	$sth->execute($round_name, $event->id);

	my %rounds;
	my %entries;
	my %done;

	$sth->execute($round_name, $event->id);

	my $results = $sth->fetchall_hash();

	foreach my $ref (@{$results}) {

		next if $done{$ref->{ballot_id}."-".$ref->{id}}++;

		my $entry_ref;

		if ($entries{$ref->{entry_id}}{$ref->{round_id}}) {
			$entry_ref = $entries{$ref->{entry_id}}{$ref->{round_id}};
		} else {
			$entries{$ref->{entry_id}}{$ref->{round_id}} = $entry_ref;
		}

		unless ($ref->{tag}) {

			if ($ref->{pbye} || $ref->{bye}) {
				$entry_ref->{"full"} = "BYE ";
			} elsif ($ref->{fft}) {
				$entry_ref->{"full"} = "FORFEIT ";
			}

			$entries{$ref->{entry_id}}{$ref->{round_id}} = $entry_ref;
			next;
		}

		if ($ref->{tag} eq "point") {
			$ref->{value} = sprintf($sprintf, $ref->{value});
		}

		$entry_ref->{"judges"}{$ref->{judge_id}}{"chair"} = $ref->{chair};

		if ($entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}}) {
			$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= ",";
		}

		$rounds{$ref->{round_id}} = $ref->{round_name};

		if ($ref->{tag} eq "winloss") {
			if ($ref->{chair}) {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= " *";
			} else {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= " ";
			}
			if ($ref->{value} > 0) {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= "W";
			} else {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= "L";
			}
		} elsif ($ref->{tag} eq "point" && $team_points) {

			if ($entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}}) {
				undef $ref->{value};
				next;
			} else {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} = $ref->{value};
			}

		} else {

			$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= " "
				if $entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}};

			$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= $ref->{value};

			if ($ref->{tv} && $ref->{tag} eq "rank") {
				$entry_ref->{"judges"}{$ref->{judge_id}}{$ref->{tag}} .= '/VIOL'
			}
		}

		unless ($entry_ref->{"total"}{$ref->{tag}}) {
			$entry_ref->{"total"}{$ref->{tag}} = 0;
		}

		$entry_ref->{"total"}{$ref->{tag}} += sprintf("%.1f", $ref->{value});

		if ($ref->{tag} eq "refute") {
			$entry_ref->{"total"}{"point"} += sprintf("%.1f", $ref->{value});
		}

		$entry_ref->{"chair"} += $ref->{value} if $ref->{chair};
		$entry_ref->{"students"}{$ref->{student}}++ if $ref->{student};
		$entries{$ref->{entry_id}}{$ref->{round_id}} = $entry_ref;
	}

	if ($entries_ref) {
		foreach my $entry_id (keys %entries) {
			foreach my $round_id (keys %{$entries{$entry_id}}) {
				if ($entries_ref->{"used_composite"}{$entry_id}{$round_id}) {
					$entries{$entry_id}{$round_id}{"composite"}
						= $entries_ref->{"used_composite"}{$entry_id}{$round_id};
				}
			}
		}
	}

	my %entry_ballots;

	my @scores;

	if ($type eq 'speech' || $type eq "congress") {
		@scores = ("rank", "point");
	} elsif ($type eq "wudc") {
		@scores = ("winloss", "point", "refute", "rank");
	} else {
		@scores = ("winloss", "point", "rank");
	}

	foreach my $entry_id (keys %entries) {

		foreach my $round_id (
			sort {$rounds{$a} <=> $rounds{$b}}
			keys %{$entries{$entry_id}}
		) {


			$entry_ballots{$entry_id} .= "\n";
			$entry_ballots{$entry_id} .= "R".$rounds{$round_id};

			foreach (length($rounds{$round_id}) .. 2) {
				$entry_ballots{$entry_id} .= " ";
			}

			if ($entries{$entry_id}{$round_id}{"full"}) {
				$entry_ballots{$entry_id} .=  $entries{$entry_id}{$round_id}{"full"}." ";
			}

			foreach my $judge_id (sort {
					$entries{$entry_id}{$round_id}{"judges"}{$b}{"chair"} <=> $entries{$entry_id}{$round_id}{"judges"}{$a}{"chair"}
					|| $a cmp $b
				} keys %{$entries{$entry_id}{$round_id}{'judges'}}
			) {

				my $notfirst;

				foreach my $tag (@scores) {
					if ($entries{$entry_id}{$round_id}{"judges"}{$judge_id}{$tag}) {
						next unless $entries{$entry_id}{$round_id}{"judges"}{$judge_id}{$tag};
						$entry_ballots{$entry_id} .= " " if $notfirst++;
						$entry_ballots{$entry_id} .= $entries{$entry_id}{$round_id}{"judges"}{$judge_id}{$tag};
					}
				}

				$entry_ballots{$entry_id} .= " |";
			}

			if (defined $entries{$entry_id}{$round_id}{"total"}{"winloss"}) {
				if (scalar (keys %{$entries{$entry_id}{$round_id}{'judges'}}) > 1) {

					my $judges = scalar (keys %{$entries{$entry_id}{$round_id}{"judges"}});
					my $wins = $entries{$entry_id}{$round_id}{"total"}{"winloss"};
					my $remainder = $judges - $wins;

					$entry_ballots{$entry_id} .= " (";
					$entry_ballots{$entry_id} .= $wins."-";
					$entry_ballots{$entry_id} .= $remainder;
					$entry_ballots{$entry_id} .= ")";
				}
			}

			if (
				scalar (keys %{$entries{$entry_id}{$round_id}{"students"}}) > 1
				|| scalar (keys %{$entries{$entry_id}{$round_id}{'judges'}}) > 1
			) {

				my $notfirst;

				foreach my $tag (@scores) {
					next if $tag eq "refute";
					next if $tag eq "winloss";
					next unless $entries{$entry_id}{$round_id}{"total"}{$tag};

					my $value = $entries{$entry_id}{$round_id}{"total"}{$tag};
					$value = sprintf($sprintf, $value) if $tag eq "point";

					if ($notfirst++) {
						$entry_ballots{$entry_id} .= ",";
					} else {
						$entry_ballots{$entry_id} .= " (";
					}

					$entry_ballots{$entry_id} .= $value;
				}

				$entry_ballots{$entry_id} .= ") " if $notfirst;
			}

#			if ($entries{$entry_id}{$round_id}{"composite"}) {
#				$entry_ballots{$entry_id} .= " Comp: ".$entries{$entry_id}{$round_id}{"composite"};
#			}
		}
	}

	return %entry_ballots;

</%init>
