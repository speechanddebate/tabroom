<%args>
	$panel => undef
	$round
	$person
</%args>
<%init>

	return unless $round;
	my $now = DateTime->now();
	my $dbh = Tab::DBI->db_Main();

	my $judge_sth = $dbh->prepare("
		select
			ballot.audit, judge.id judge
		from judge, ballot, panel
		where panel.round = ?
			and panel.bye != 1
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and ballot.bye != 1
			and ballot.forfeit != 1
			and exists (
				select entry.id
				from entry
				where ballot.entry = entry.id
				and entry.active = 1
			)
		group by judge.id, panel.flight, ballot.entry
	");

	$judge_sth->execute($round);
	my $judges = $judge_sth->fetchall_hash();

	my %counts = (
		done  => 0,
		undone => 0
	);

	foreach my $ballot (@{$judges}) {
		if ($ballot->{audit}) {
			$counts{"done"}++;
		} else {
			$counts{"undone"}++;
		}
	}

	my $event = $round->event;
	my %event_settings = $event->all_settings();
	my $tourn = $event->tourn;
	my $follower_ids = $event_settings{"followers"};

	my $from_string = $tourn->name."<".$tourn->webname.'_'.$round->id.'_done@www.tabroom.com>';

	unless ($ARGS{"admin_zone"}) {

		my $not_first = $round->setting("first_ballot");

		unless ($not_first) {
			$round->setting("first_ballot", "date", $now);
		}

		unless ($not_first || (not defined $follower_ids)) {

			my $subject = "First ballot in ".$event->abbr;

			my $html = "<p>First ballot has been confirmed!</p>";
			$html .= "<p>".$round->realname." of ".$event->name."</p>";
			$html .= "<p>".$counts{"undone"}." left.</p>";
			$html .= "<p>Tournament: ".$tourn->name."</p>";

			my $body = "First ballot has been confirmed!\n".$round->realname." of ".$event->name."\n".$counts{"undone"}." left.\n\n";
			$body .= "Tournament: ".$tourn->name."\n\n";

			$m->comp( "/funclib/send_notify.mas",
				tourn   => $tourn,
				from    => $from_string,
				ids     => $follower_ids,
				subject => $subject,
				html    => $html,
				body    => $body
			);
		}
	}

	return if $counts{"undone"} > 0;
	my $last_ballot = $round->setting("last_ballot");

	if ($last_ballot) {

		$round->setting("last_ballot", "date", $now);

		if ($follower_ids) {

			my $subject = $event->abbr." alert: Changed Ballot";
			my $body = "BALLOT CHANGED AFTER ROUND COMPLETE\nIn ".$round->realname." of ".$event->name."\n\n";
			$body .= $tourn->name."\n";
			$body .= "Changed by ".$person->first." ".$person->last." (".$person->email.")\n";

			my $html = "<p>BALLOT CHANGED AFTER ROUND WAS COMPLETE.</p>";
			$html .= "<p>Tournament: ".$tourn->name."</p>";
			$html .= "<p>".$round->realname." of ".$event->name."</p>\n";
			$html .= "<p>Changed by ".$person->first." ".$person->last." (".$person->email.")</p>\n";

			if ($ARGS{"change"}) {
				$body .= $ARGS{"change"}."\n";
				$html .= "<p>".$ARGS{"change"}."</p>";
			}

			if ($panel) {
				$html .= "<p> Section ".$panel->letter;
				$body .= "Section ".$panel->letter;
				if ($panel->room > 0) {
					$html .= " in room ".$panel->room->name;
					$body .= " in room ".$panel->room->name;
				}

				if ($round->flighted > 1) {
					$html .= " flight ".$panel->flight;
					$body .= " flight ".$panel->flight;
				}
				$html .= "</p>";
				$body .= "\n";
			}

			$m->comp( "/funclib/send_notify.mas",
				from    => $from_string,
				ids     => $follower_ids,
				tourn   => $tourn,
				subject => $subject,
				body    => $body,
				html    => $html
			);

			$m->comp("/funclib/auto_backups.mas",
				subject => $subject,
				round   => $round,
				person  => $person,
			);
		}

	} else {

		$round->setting("last_ballot", "date", $now);

		# Last ballot in notification
		if ($follower_ids) {

			my $subject = "Last ballot in ".$event->abbr;

			my $body = "Last Ballot entered!\n".$round->realname." of ".$event->name."\n\n";
			$body .= "Tournament: ".$tourn->name."\n\n";

			my $html = "<p>Last ballot has been confirmed!</p>";
			$html .= "<p>".$round->realname." of ".$event->name."</p>";
			$html .= "<p>Tournament: ".$tourn->name."</p>";

			$m->comp( "/funclib/send_notify.mas",
				from    => $from_string,
				ids     => $follower_ids,
				tourn   => $tourn,
				subject => $subject,
				body    => $body,
				html    => $html,
			);
		}

		$m->comp("/funclib/auto_backups.mas",
			subject => "Last Ballot Entered",
			round   => $round,
			person  => $person,
		);

		my $breakout;

		if ($round->setting("use_for_breakout")) {
			$breakout = " and exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = 'use_for_breakout'
				and round_setting.value = ".int($round->setting("use_for_breakout"))."
				and round_setting.round = round.id
			) ";
		} else {
			$breakout = " and not exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = 'use_for_breakout'
				and round_setting.round = round.id
			) ";
		}

		Tab::Round->columns(TEMP => "panelcount");

		Tab::Round->set_sql( next_round => "
			select round.*, count(panel.id) as panelcount
			from (round)
				left join panel on panel.round = round.id
			where round.name > ?
				and round.event = ?
				$breakout
			group by round.id
			order by round.name
		");

		unless ($event_settings{"no_autopair"} || $tourn->setting("nsda_district")) {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if ( $next && $next->panelcount < 1) {

				if ($next
					&& $next->type ne "final"
					&& $next->type ne "elim"
					&& $next->type ne "runoff"
				) {

					Tab::Autoqueue->create({
						round      => $next->id,
						tag        => "pair_prelim",
						created_by => 0,
					});

				} elsif (
					($next->type eq "elim" || $next->type eq "final")
					&& $round->type eq "elim"
				) {

					Tab::Autoqueue->create({
						round      => $next->id,
						tag        => "pair_elim",
						created_by => 0,
					});
				}
			}
		}

		unless ($tourn->setting("nsda_district")) {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if ($next
				&& $next->type eq "elim"
				&& $round->type ne "elim"
			) {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "prelim_results",
					created_by => 0,
				});

			} elsif ($round->type eq "final") {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "final_results",
					created_by => 0,
				});
			}

			if ($round->type eq "elim" && $round->id == $event_settings{"bid_round"}) {
				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "toc_bids",
					created_by => 0,
				});
			}

		} else {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if (
				$round->type eq "final"
				|| ( $event->setting("round_robin") && (not defined $next))
			) {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "final_results",
					created_by => 0,
				});
			}
		}
	}
</%init>
