<%args>
	$round_id   => undef
	$round      => undef
	$event      => undef
	$limit_past => undef
</%args>
<%perl>

	use Time::HiRes qw( time );
	my $start = time();
	my $debug=0;

</%perl>
<%doc>

	 Returns a hash with 6 fields:

	 prelim rounds obligated to hear
		 $judge_hash{$judge.id}{"oblig"}

	 rounds judged so far
		 $judge_hash{$judge.id}{"judged_already"}

	 rounds scheduled to judge after this one
		 $judge_hash{$judge.id}{"will_judge"}

	rounds available for this event in future rounds, excluding current round
		 $judge_hash{$judge.id}{"future_possible"}

	 rounds lost, including current round
		 $judge_hash{$judge.id}{"lost"}

	 boolean; did you lose a round from the judge in THIS round
		 $judge_hash{$judge.id}{"lost_current"}

	 boolean; is judge avail this round
		 $judge_hash{$judge.id}{"avail_current"}

	 assigned to judge in the current round
		 $judge_hash{$judge.id}{"in_round"}

	 obligated-judged_already-will_judge
		 $judge_hash{$judge.id}{"left"}

	future percentage either obligated or timeblocked:
		$judge_hash{$judge_id}{"percentage"}

</%doc>
<%perl>

	$round = Tab::Round->retrieve($round_id) unless $round;
	$event = $round->event unless $event;

	my $category    = $event->category;
	my $category_id = $category->id;
	my $event_id    = $event->id;
	my $tourn       = $category->tourn;

	my $round_start = eval {
		return $round->timeslot->start;
	};
	my $round_end   = eval {
		return $round->timeslot->end;
	};

	my $debates_per++ if $category->setting('sections_per');
	$debates_per++ if $event->setting('online_mode') eq "async";

	unless ($category) {
		$m->abort("No category found for event ".$event->name);
	}

	unless ($tourn) {
		$m->abort("No tournament found for category ".$category->name);
	}

	my %judge_hash;
	my $dbh = Tab::DBI->db_Main();

	my $j_sth = $dbh->prepare("
		select judge.id, (judge.obligation + COALESCE(judge.hired, 0)) as obligation
		from judge, category, category cat2
			where
				judge.category = category.id
				and cat2.tourn = category.tourn
				and cat2.id = ?
			and (
				judge.category = cat2.id
				or judge.alt_category  = cat2.id
                or exists (
                    select jpj.id
                    from jpool_judge jpj, jpool_round jpr
                    where jpj.judge = judge.id
                    and jpj.jpool = jpr.jpool
                    and jpr.round = ?
                )
			)
		order by judge.id
	");

	$j_sth->execute($category_id, $round->id);

	my $results = $j_sth->fetchall_hash();

	foreach my $result (@{$results}) {
		$judge_hash{$result->{id}}{"oblig"} = $result->{obligation};
		$judge_hash{$result->{id}}{"avail_current"} = 1;
	}

	my $limit;
	my $current_name = $round->name;
	my $now = DateTime->now();

	if ($limit_past) {
		$limit = ' and timeslot.start < "'.DateTime::Format::MySQL->format_datetime($now).'"';
	}

	my $count_elims;
	$count_elims = $category->setting('count_elims');

	my $jpool;
	my $jpool_ts_limit;

	if ($round->setting('usage_by_jpool')) {

		my $jpool = eval {
			return Tab::JPool->retrieve($round->setting("usage_by_jpool"));
		};

		if ( (not defined $jpool) || $jpool->category != $category) {
			$round->setting('usage_by_jpool', 0);
			undef $jpool;
		}

		if ($jpool) {
			$limit .= "and exists (
				select jpr.id
					from jpool_round jpr
				where jpr.jpool = ".$jpool->id." and jpr.round = round.id) ";

			$jpool_ts_limit .= "and exists (
				select round.id
				from round, jpool_round jpr
				where round.timeslot = timeslot.id
				and round.id = jpr.round
				and jpr.jpool = ".$jpool->id.") ";
		}
	}

	my $sth = $dbh->prepare("
		select judge.id,
			round.id round_id, round.name round_name,
			panel.id panel_id, panel.flight panel_flight,
			round.type round_type, round.timeslot timeslot_id
		from (ballot, panel, round, judge, timeslot)
			where round.timeslot   = timeslot.id
				and round.id       = panel.round
				and panel.id       = ballot.panel
				and ballot.judge   = judge.id
				and timeslot.tourn = ?
				$limit

		and (
			judge.category = ?
			or judge.alt_category = ?
			or exists (
				select jpool_judge.id
				from jpool_judge, jpool_round
				where jpool_judge.judge = judge.id
					and jpool_judge.jpool = jpool_round.jpool
					and jpool_round.round = ?
			)
		)

		group by panel.id, ballot.judge
	");

	$sth->execute(int($tourn), $category_id, $category_id, $round->id);

	my %used;
	my $this_round_id = $round->id;
	my $this_round_timeslot = $round->timeslot;
	my $this_round_ts_id = int($this_round_timeslot);

	while (
		my ($judge,
			$round_id, $roundname,
			$panel_id, $flight,
			$type, $timeslot
		)  = $sth->fetchrow_array()
	) {

		unless ($ARGS{"count_elims"} || $count_elims) {
			next if $type eq "elim";
			next if $type eq "final";
			next if $type eq "runoff";
		}

		if ($debates_per) {
			next if $used{$judge}{$panel_id}++;
		} else {
			next if $used{$judge}{$round_id}++;
		}


		$judge_hash{$judge}{"everything"}++;
		$judge_hash{$judge}{"judged_all"}++ 	if $roundname < $current_name;

		if ($judge == 2551664) {
			Tab::debuglog("Judge $judge is in round $roundname with panel $panel_id.  Judged all is ".$judge_hash{$judge}{judged_all});
		}

		$judge_hash{$judge}{"in_round"}++ 		if $round_id == $this_round_id;
		$judge_hash{$judge}{"in_timeslot"}++ 	if $timeslot == $this_round_ts_id;

		$judge_hash{$judge}{"judged_already"}++ if $roundname <= $current_name;
		$judge_hash{$judge}{"will_judge"}++ 	if $roundname > $current_name;
	}

	# 2nd Tiebreaker if usage

	if ($limit) {

		my $sth = $dbh->prepare("
			select judge.id,
				round.id round_id, round.name round_name,
				panel.id panel_id, panel.flight panel_flight,
				round.type round_type, round.timeslot timeslot_id
			from (ballot, panel, round, judge, timeslot)
				where round.timeslot   = timeslot.id
					and round.id       = panel.round
					and panel.id       = ballot.panel
					and ballot.judge   = judge.id
					and timeslot.tourn = ?

			and (
				judge.category = ?
				or judge.alt_category = ?
				or exists (
					select jpool_judge.id
					from jpool_judge, jpool_round
					where jpool_judge.judge = judge.id
						and jpool_judge.jpool = jpool_round.jpool
						and jpool_round.round = ?
				)
			)

			group by panel.id, ballot.judge
		");

		$sth->execute(int($tourn), $category_id, $category_id, $round->id);

		my %used;

		while (
			my ($judge,
				$round_id, $roundname,
				$panel_id, $flight,
				$type, $timeslot
			)  = $sth->fetchrow_array()
		) {

			unless ($ARGS{"count_elims"} || $count_elims) {
				next if $type eq "elim";
				next if $type eq "final";
				next if $type eq "runoff";
			}

			if ($debates_per) {
				next if $used{$judge}{$panel_id}++;
			} else {
				next if $used{$judge}{$round_id}++;
			}

			$judge_hash{$judge}{"judged_secondary"}++ 	if $roundname < $current_name;

			if ($judge == 2560973) {
				Tab::debuglog("Judge is here round $roundname secondary score is ".$judge_hash{$judge}{"judged_secondary"});
			}
		}
	}

	# Standby assignments count as rounds

	my $standby_sth = $dbh->prepare("
		select jpj.id jpool, jpj.judge, timeslot.start, timeslot.id timeslot, jpool.name
			from jpool_judge jpj,
				jpool_setting jps,
				jpool_setting ts,
				judge, category,
				timeslot,
				jpool

		where category.tourn = ?
			and category.id  = judge.category
			and judge.id     = jpj.judge
			and jpj.jpool    = jps.jpool
			and jps.tag      = 'standby'
			and jpj.jpool    = ts.jpool
			and jpj.jpool    = jpool.id
			and ts.tag       = 'standby_timeslot'
			and ts.value     = timeslot.id
			and timeslot.tourn = category.tourn
			and not exists (
				select ballot.id
					from (ballot, panel, round)
				where round.timeslot = ts.value
					and round.id = panel.round
					and panel.id = ballot.panel
					and ballot.judge = jpj.judge
			)

			$jpool_ts_limit
	");

	$standby_sth->execute(int($tourn));
	my $standbys = $standby_sth->fetchall_hash();

	my $ts_start = eval {
		my $ts = $this_round_timeslot->start;
		$ts =~ s/[\D_]//g;
		return $ts;
	};

	if ($ts_start) {

		foreach my $standby (@${standbys}) {

			my $standby_start = $standby->{'start'};
			$standby_start =~ s/[\D_]//g;

			my $judge = $standby->{"judge"};
			$judge_hash{$judge}{"everything"}++;

			if ($standby->{start} == $ts_start) {
				$judge_hash{$judge}{"judged_already"}++;
				$judge_hash{$judge}{"in_timeslot"}++;
			} elsif ($standby_start < $ts_start) {
				$judge_hash{$judge}{"judged_already"}++;
				$judge_hash{$judge}{"judged_all"}++;

				if ($judge == 2551664) {
					Tab::debuglog("Judge $judge is in standby starting $standby_start.  Judged all is ".$judge_hash{$judge}{judged_all});
					Tab::debuglog("Judge pool is ".$standby->{name});
				}

			} elsif ($standby_start > $ts_start) {
				$judge_hash{$judge}{"will_judge"}++;
			}
		}
	}

	my $time_sth = $dbh->prepare("
		select distinct(judge.id)
			from judge, ballot, panel, round, timeslot
		where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = timeslot.id
			and timeslot.tourn = ?
			and timeslot.start < ?
			and timeslot.end > ?
	");

	if ($round_start && $round_end) {
		$time_sth->execute(
			int($tourn),
			DateTime::Format::MySQL->format_datetime($round_end),
			DateTime::Format::MySQL->format_datetime($round_start)
		);

		while ( my ($judge) = $time_sth->fetchrow_array() ) {
			$judge_hash{$judge}{"in_timeslot"}++;
		}
	}

	my $future_count;
	my @future;


	my $per = $category->setting('rounds_per');
	$per++ if $debates_per;

	my $round_sth = $dbh->prepare("
		select round.id, round.flighted, round.name, round.type, round.timeslot
		from round
		where round.event = ?
		order by round.name
	");

	$round_sth->execute($event_id);
	my $rounds = $round_sth->fetchall_hash();

	foreach my $round (@{$rounds}) {

		my $flights = 1;
		$flights = $round->{flighted} if $debates_per;

		next unless $round->{name} > $current_name;

		unless ($count_elims) {
			next if $round->{type} eq "elim";
			next if $round->{type} eq "runoff";
			next if $round->{type} eq "final";
		}

		$future_count += $flights;
		push @future, $round;
	}

	foreach my $judge (keys %judge_hash) {
		$judge_hash{$judge}{"future_possible"} = $future_count;
	}

	#future round availability

	if ($per) {

		foreach my $future (@future) {

			next unless $future->{timeslot};

			my $flights = 1;
			$flights = $future->{flighted} if $debates_per;

			my $future_strikes_sth = $dbh->prepare("
				select distinct strike.id, strike.judge
					from strike, judge, timeslot, category
				where category.tourn = ?
					and judge.category = category.id
					and timeslot.id = ?
					and strike.judge = judge.id
					and strike.start <= timeslot.end
					and strike.end >= timeslot.start
			");

			$future_strikes_sth->execute(int($tourn), $future->{timeslot});

			my $strikes = $future_strikes_sth->fetchall_hash();

			foreach my $strike (@{$strikes}) {
				if ($judge_hash{$strike->{judge}}{"future_possible"} > 1) {
					$judge_hash{$strike->{judge}}{"future_possible"} -= $flights;
				}
			}
		}

		my $event_strikes_sth = $dbh->prepare("
			select distinct strike.id, strike.judge
				from strike, judge, category
			where category.tourn = ?
				and judge.category = category.id
				and strike.judge = judge.id
				and strike.event = ?
			order by judge.id
		");

		$event_strikes_sth->execute(int($tourn), $event_id);
		my $strikes = $event_strikes_sth->fetchall_hash();

		foreach my $strike (@{$strikes}) {
			$judge_hash{$strike->{judge}}{"future_possible"} = 0;
			$judge_hash{$strike->{judge}}{"avail_current"} = 0;
		}

		#current round availability
		if ($this_round_ts_id) {

			my $current_strikes_sth = $dbh->prepare("
				select distinct strike.id, strike.judge
					from strike, judge, timeslot, category
				where category.tourn = ?
					and judge.category = category.id
				and timeslot.id = ?
					and strike.judge = judge.id
					and strike.start <= timeslot.end
					and strike.end >= timeslot.start
			");

			$current_strikes_sth->execute(int($tourn), $this_round_ts_id);

			my $strikes = $current_strikes_sth->fetchall_hash();
			foreach my $strike (@{$strikes}) {
				$judge_hash{$strike->{judge}}{"avail_current"} = 0;
			}
		}

		#calculate rounds lost

		my $flights = 1;
		$flights = $round->flighted if $debates_per;

		foreach my $key (keys %judge_hash) {

			$judge_hash{$key}{"lost"} =
				$judge_hash{$key}{"oblig"}
				- $judge_hash{$key}{"judged_already"}
				- $judge_hash{$key}{"future_possible"};

			$judge_hash{$key}{"left"} =
				$judge_hash{$key}{"oblig"}
				- $judge_hash{$key}{"judged_already"};

			if ($judge_hash{$key}{"in_round"} == 0
				and $judge_hash{$key}{"avail_current"} == 1
				and (
					$judge_hash{$key}{"left"} > $judge_hash{$key}{"future_possible"}
					|| $judge_hash{$key}{"lost"} > 0
				)
			) {
				$judge_hash{$key}{"lost_current"} = 1;
				#print $key." will lose a round if not placed; left = $judge_hash{$key}{"left"}
				#and future possible is $judge_hash{$key}{"future_possible"} <br>";
			}

			$judge_hash{$key}{"left"} = 0 if $judge_hash{$key}{"left"} < 1;
			$judge_hash{$key}{"lost"} = 0 if $judge_hash{$key}{"lost"} < 1;

			if ($judge_hash{$key}{"future_possible"} > 0) {
				$judge_hash{$key}{"percentage"} =
					int( (
						($judge_hash{$key}{"left"} + $judge_hash{$key}{"in_round"}) /
							($judge_hash{$key}{"future_possible"} + 1)
						) * 100
					);
			} else {
				$judge_hash{$key}{"percentage"} = 100;
			}
			$judge_hash{$key}{"percentage"} = 100 if $judge_hash{$key}{"percentage"} > 100;
		}
	}

	if ($debug) {
		my $end = time();
		print "<br>judge_use.mas processing time: ";
		printf("%.2f\n", $end - $start);
	}

	return \%judge_hash;

</%perl>
