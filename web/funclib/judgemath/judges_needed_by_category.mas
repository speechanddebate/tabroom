<%args>
	$category
	$category_settings => undef
	$event_settings    => undef
	$school            => undef
	$region            => undef
	$school_settings   => undef
	$tourn_settings    => undef
	$confirmed         => undef
	$waitlist          => undef
	$bulk              => undef
</%args>
<%init>

	use POSIX;

	%{$category_settings} = $category->all_settings() unless $category_settings;

	return if $category_settings->{"nsda_category"};

	my $drop_limit = "and entry.dropped != 1"
		if $category_settings->{"drops_no_burden"};

	my $waitlist_limit;

	if ($tourn_settings) {
		$waitlist_limit .= " and entry.waitlist != 1 "
			unless $tourn_settings->{"judges_waitlist"};
	} elsif ($category->tourn->setting("judges_waitlist")) {
		$waitlist_limit .= " and entry.waitlist != 1 ";
		$tourn_settings->{"judges_waitlist"}++;
	}

	my @entries;

	if ($region) {

		Tab::Entry->columns(TEMP => 'eventid');

		Tab::Entry->set_sql(entry_categories => "
			select distinct entry.id, event.id as eventid
				from entry,event,category,chapter
			where 1=1
				and entry.event       = event.id
				and event.category    = category.id
				and entry.school      = chapter.school
				and entry.unconfirmed = 0
				".$drop_limit."
				".$waitlist_limit."

				and chapter.region = ?
				and not exists (
					select id from event_setting
					where event_setting.event = event.id
					and event_setting.tag = 'no_judge_burden'
					and event_setting.value = 1
				)
				and category.id = ? ");

		@entries = Tab::Entry->search_entry_categories( $region->id, $category->id );

	} elsif ($bulk) {

		@entries = @{$confirmed} if $confirmed;

		if ($tourn_settings->{"judges_waitlist"} && $waitlist) {
			push @entries, @{$waitlist};
		}

	} else {

		Tab::Entry->columns(TEMP => 'eventid');

		Tab::Entry->set_sql(by_category_school=> "
			select distinct entry.id, event.id as eventid
				from entry,event
			where 1=1
				and entry.school = ?
				and entry.event = event.id
				and entry.unconfirmed = 0
				and event.category = ?
				and not exists (
					select id from event_setting
					where event_setting.event = event.id
					and event_setting.tag = 'no_judge_burden'
					and event_setting.value = 1
				)
				".$drop_limit."
				".$waitlist_limit."
			order by entry.code
		");

		@entries = Tab::Entry->search_by_category_school($school->id, $category->id);
	}

	my $judge_burden;

	if ($category_settings->{"rounds_per"}
		&& $category_settings->{"custom_rounds_per"}
	) {

		my %customs = eval {
			return %{$category_settings->{'custom_rounds_per'}};
		};

		if ($customs{scalar @entries}) {
			$judge_burden = $customs{scalar @entries};
		}
	}

	unless (defined $judge_burden) {

		my %entries_in_event;
		my %used;

		foreach my $entry (@entries) {
			next if $used{$entry->id}++;
			$entries_in_event{$entry->eventid}++;
		}

		EVENT:
		foreach my $event_id (keys %entries_in_event) {

			# Event specific event adjustments
			unless ($event_settings->{$event_id}) {
				my $event = Tab::Event->retrieve($event_id);
				next EVENT unless $event;
				%{$event_settings->{$event_id}} = $event->all_settings();
			}

			next if $event_settings->{$event_id}{"no_judge_burden"};

			if ($category_settings->{"rounds_per"}) {

				$event_settings->{$event_id}{"adjust_judge_rounds_owed"} = 100
					unless $event_settings->{$event_id}{"adjust_judge_rounds_owed"} > 0;

				$judge_burden += (($event_settings->{$event_id}{"adjust_judge_rounds_owed"} / 100)
					* $entries_in_event{$event_id}
					* $category_settings->{"rounds_per"});


				# "Large school" tax for large entries:
				if ($category_settings->{"commitment_bump_after"}) {
					my $bump_after = $category_settings->{"commitment_bump_after"};
					#add to commitment if entry numbers are past threshold
					if ( $bump_after && $entries_in_event{$event_id} > $bump_after) {
						$judge_burden += (
							($entries_in_event{$event_id} - $bump_after)
							* $category_settings->{"commitment_bump_unit"}
						);
					}
				}

			} elsif ($category_settings->{"judge_per"} > 0) {

				$event_settings->{$event_id}{"adjust_judges_owed"} = 100
					unless $event_settings->{$event_id}{"adjust_judges_owed"};

				$judge_burden += ($event_settings->{$event_id}{"adjust_judges_owed"} / 100)
					* ($entries_in_event{$event_id} / $category_settings->{"judge_per"});
			}
		}
	}

	$judge_burden = $judge_burden - $category_settings->{"free"} if @entries;

	$judge_burden = $category_settings->{"min_burden"}
		if $category_settings->{"min_burden"}
		&& $category_settings->{"min_burden"} > $judge_burden
		&& @entries;

	$judge_burden = $category_settings->{"max_burden"}
		if $category_settings->{"max_burden"}
		&& $category_settings->{"max_burden"} < $judge_burden
		&& @entries;

	$judge_burden = ceil($judge_burden);
	$judge_burden = 0 if $judge_burden < 0;

	if ($school_settings) {
		if (defined $school_settings->{"judge_surcharge"}) {
			$judge_burden = $judge_burden * ($school_settings->{"judge_surcharge"} / 100);
		}

	} elsif ($school->setting("judge_surcharge")) {
		$judge_burden = $judge_burden * ($school->setting("judge_surcharge") / 100);
	}

	return $judge_burden;

</%init>
