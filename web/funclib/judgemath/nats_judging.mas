<%args>
	$category
	$school
</%args>
<%init>

	my %burden = $m->comp(
		"nats_burden.mas",
		category => $category,
		school   => $school
	);

	my %judges    = ();
	my %provided  = ();
	my %potential = ();
	my $limit;

	my %jpools;

	foreach my $jpool_id (sort keys %{$burden{"jpools"}}) {
		$jpools{$jpool_id}++;
	}

	foreach my $key (keys %burden) {
		next unless $key eq int($key);
		$provided{$key} = 0;
		$provided{"hire"}{$key} = 0;
		$provided{"hire_price"}{$key} = 0;
	}

	$provided{"total"} = 0;

    my $dbh = Tab::DBI->db_Main();

    my $sth = $dbh->prepare("

		select judge.id, judge.last, jpool.id, judge.obligation, hire.value, jpool.name

		from (judge, jpool, jpool_judge)

		left join jpool_setting hire
			on hire.jpool = jpool.id
			and hire.tag = 'hire'

		where judge.school = ?
			and judge.category = ?
			and judge.id = jpool_judge.judge
			and jpool.id = jpool_judge.jpool

			and exists (
				select jps.id
				from jpool_setting jps
				where jps.jpool = jpool.id
				and jps.tag = 'registrant'
			)

		order by hire.id, judge.id, jpool.id

	");

	$sth->execute($school->id, $category->id);

	my %used;

	while(
		my ($judge_id, $last, $jpool_id, $judge_obligation, $hire_value, $name)
		= $sth->fetchrow_array()
	) {

		$provided{"count"}++;
		$provided{"total"} += $judge_obligation unless $used{$judge_id}++;

		$judges{$judge_id}{"jpool"}{$jpool_id}++;
		$judges{$judge_id}{"obligation"} = $judge_obligation;
		$judges{$judge_id}{"name"}       = $last;

		if ($hire_value > 0) {
			$provided{"canhire"}{"total"} += $judge_obligation;
			$provided{"hire"}{$jpool_id} += $judge_obligation;
		}

		$jpools{$jpool_id} = $name;
	}

	my $other_sth = $dbh->prepare("
		select judge.*, category.abbr
		from judge, category
		where judge.school = ?
			and judge.category != ?
			and judge.category = category.id
			and not exists (
				select cs.id
				from category_setting cs
				where cs.category = judge.category
				and cs.tag = 'observers'
			)
	");

	my $district_sth = $dbh->prepare("
		select judge.*, category.abbr
		from judge, judge_setting, category
		where judge.id = judge_setting.judge
			and judge_setting.tag   = 'original_school'
			and judge_setting.value = ?
			and judge.category != ?
			and judge.category = category.id
			and not exists (
				select cs.id
				from category_setting cs
				where cs.category = judge.category
				and cs.tag = 'observers'
			)
	");

	Tab::Entry->set_sql( trigger_minimum => "
		select entry.*
			from entry, event, category

		where entry.school = ?
			and entry.event = event.id
			and event.category = category.id
			and entry.unconfirmed != 1

		and not exists (
			select es.id
			from event_setting es, jpool_setting js
			where es.event = event.id
			and es.tag = 'nats_jpool'
			and es.value = js.jpool
			and js.tag = 'supp'
		)
	");

	my $trigger = Tab::Entry->search_trigger_minimum($school->id)->first;
	my $minimum = $category->setting('minimum_supplied');

	if (
		$minimum
		&& $burden{"total"} > 0
		&& (not defined $school->setting("no_judge_warnings"))
		&& $trigger
	) {

		$other_sth->execute($school->id, $category->id);
		my $other_js = $other_sth->fetchall_hash();
		my @others;

		if ($other_js && @{$other_js}) {
			push @others, @{$other_js};
		}

		$district_sth->execute($school->id, $category->id);
		my $districts = $district_sth->fetchall_hash();

		if ($districts && @{$districts}) {
			push @others, @{$districts};
		}

		if (scalar @others > 0) {
			$provided{'minimum_reason'} = $others[0]->{abbr};
		} elsif ($provided{"total"} < $minimum) {
			$provided{'minimum_unmet'} = ($minimum - $provided{"total"});
		} elsif (not defined $provided{"count"}) {
			$provided{'minimum_unmet'} = $minimum;
		}

		if ($provided{"canhire"}{"total"} == $burden{"total"}) {
			$provided{"canhire"}{"total"} -= $minimum;
		}
	}

	# Sorting is essential so the first categories counted are the ones where
	# hiring is not allowed.

	my %taken;

	foreach my $jpool_id (keys %jpools) {
		$burden{"left"}{$jpool_id} = $burden{$jpool_id};
	}

	# Account first for judges signed up to judge in pools where judges may not
	# be hired out.  This will be limited by the requirement.

	if (%judges) {

		JPOOL:
		foreach my $jpool_id (sort {
			$burden{"left"}{$b} <=> $burden{"left"}{$a} 
			} keys %jpools
		) {

			next if $burden{"jpools"}{$jpool_id}{"hire"};
			next if $burden{"left"}{$jpool_id} < 1;

			foreach my $judge_id (sort keys %judges) {

				if ($judges{$judge_id}{"jpool"}{$jpool_id}) {

					$potential{$jpool_id} += $judges{$judge_id}{"obligation"};

					my $available = $judges{$judge_id}{"obligation"} - $taken{$judge_id};
					my $provide_me;

					if ($burden{"left"}{$jpool_id} >= $available) {
						$provide_me = $available;
					} else {
						$provide_me = $burden{"left"}{$jpool_id};
					}

					$burden{"left"}{$jpool_id} -= $provide_me;

					$provided{$jpool_id} += $provide_me;
					$taken{$judge_id} += $provide_me;

					$burden{"subtotal"} -= $provide_me;
					$provided{"subtotal"} += $provide_me;

					next JPOOL if $burden{"left"}{$jpool_id} < 1;
				}
			}

			if ($burden{"left"}{$jpool_id} > 0) {
				$burden{"amt"}{$jpool_id} += $burden{"left"}{$jpool_id} ;
			}
		}

		# This allows judges who are registered for the limited non hirable pools
		# to count in addition to the required rounds.

		my $over_credit;

		foreach my $jpool_id (sort keys %jpools) {

			next if $burden{"jpools"}{$jpool_id}{"hire"};

			foreach my $judge_id (sort keys %judges) {

				if ($judges{$judge_id}{"jpool"}{$jpool_id}) {

					my $available = $judges{$judge_id}{"obligation"} - $taken{$judge_id};
					my $provide_me = $available;

					$provided{$jpool_id} += $provide_me;
					$taken{$judge_id} += $provide_me;

					$over_credit += $provide_me;

					$burden{"subtotal"} -= $provide_me;
					$provided{"subtotal"} += $provide_me;
				}
			}

			if ($burden{"left"}{$jpool_id} > 0) {
				$burden{"amt"}{$jpool_id} += $burden{"left"}{$jpool_id} ;
			}

		}

		# Now check the categories where I can hire things out, once all the other
		# judges are taken up elsewhere

		foreach my $jpool_id (
			sort {
				$burden{"jpools"}{$a}{"hire"} <=> $burden{"jpools"}{$b}{"hire"}
				|| $a <=> $b
			}
			keys %jpools
		) {

			next if $burden{"left"}{$jpool_id} < 0;
			next unless $burden{"jpools"}{$jpool_id}{"hire"} > 0;

			# First check if there are judges in these categories themselves which
			# have available rounds.

			foreach my $judge_id (keys %judges) {

				if ($judges{$judge_id}{"jpool"}{$jpool_id}) {

					$potential{$jpool_id} += $judges{$judge_id}{"obligation"};

					my $available = $judges{$judge_id}{"obligation"} - $taken{$judge_id};
					my $provide_me = $available;

					if ($provide_me > $burden{"left"}{$jpool_id}) {
						$over_credit += $provide_me - $burden{"left"}{$jpool_id};
						$provide_me = $burden{"left"}{$jpool_id};
					}

					$burden{"left"}{$jpool_id} -= $provide_me;
					$provided{$jpool_id} += $provide_me;

					$burden{"subtotal"} -= $provide_me;
					$provided{"subtotal"} += $provide_me;
					$taken{$judge_id} += $provide_me;

				}
			}

			# This takes overages in other categories and then applies them here if
			# available and still needed

			if ($over_credit > 0 && $burden{"left"}{$jpool_id} > 0) {

				my $provide_me;

				if ($over_credit > $burden{"left"}{$jpool_id}) {
					$provide_me = $burden{"left"}{$jpool_id};
					$over_credit -= $burden{"left"}{$jpool_id};
				} else {
					$provide_me = $over_credit;
					$over_credit = 0;
				}

				$burden{"left"}{$jpool_id} -= $provide_me;
				#$provided{$jpool_id} += $provide_me;

				$burden{"subtotal"} -= $provide_me;
				#$provided{"subtotal"} += $provide_me;

			}
		}
	}

	foreach my $jpool_id (
		sort {
			$burden{"jpools"}{$a}{"hire"} <=> $burden{"jpools"}{$b}{"hire"}
			|| $a <=> $b
		}
		keys %jpools
	) {

		next unless $jpool_id eq int($jpool_id);

		$provided{"hire"}{"total"} = 0 unless $provided{"hire"}{"total"};

		if ($burden{"left"}{$jpool_id} > 0) {

			unless ($burden{"hire"}{$jpool_id}) {
				$provided{"hire"}{$jpool_id} = "X";
			} else {

				$provided{"hire"}{$jpool_id} = $burden{"left"}{$jpool_id};
				$provided{"hire"}{"total"} += $burden{"left"}{$jpool_id};

				$provided{"hire_cost"}{$jpool_id}
					= $burden{"left"}{$jpool_id} * $burden{"hire_price"}{$jpool_id}
					if $burden{"hire_price"}{$jpool_id};

				$provided{"hire_cost"}{"total"}
					+= $provided{"hire_cost"}{$jpool_id} ;
			}
		}
	}

	$provided{"hire"}{"total"} -= $provided{'minimum_unmet'};

	return \%provided, \%burden, \%potential;

</%init>
