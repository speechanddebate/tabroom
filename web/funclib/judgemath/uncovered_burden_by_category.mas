<%args>
	$category
	$category_settings => undef
	$event_settings    => undef
	$tourn_settings    => undef
	$school_settings   => undef
	$school            => undef
	$region            => undef
	$confirmed         => undef
	$waitlist          => undef
	$bulk              => undef
	$judges            => undef
	$hires             => undef
</%args>
<%perl>

	use POSIX;

	%{$category_settings} = $category->all_settings() unless $category_settings;

	my $no_free = $category_settings->{"free_strikes_dont_count"};

	my %response;

	if ($category_settings->{"rounds_per"}) {

		# Function to tell whether a school has met its judging obligation in a
		# given judge category.  Returns the number of rounds owed

		my @judges;
		my @requests;

		if ($bulk) {

			@judges = @{$judges} if $judges;
			@requests = @{$hires} if $hires;

		} else {

			@judges = $m->comp("judges_by_category.mas",
				category          => $category,
				category_settings => $category_settings,
				school            => $school,
				region            => $region,
			);

			if ($school) {
				@requests = Tab::JudgeHire->search(
					school   => $school->id,
					category => $category->id
				);

			} elsif ($region) {

				@requests = Tab::JudgeHire->search(
					region   => $region->id,
					category => $category->id
				);

			}
		}

		my $rounds;

		foreach my $judge (@judges) {
			$rounds += $judge->obligation
				unless ($no_free && $judge->setting('free_strike'));
		}

		my $rounds_to_cover = $m->comp(
			"judges_needed_by_category.mas",
			category_settings => $category_settings,
			event_settings    => $event_settings,
			school_settings   => $school_settings,
			tourn_settings    => $tourn_settings,
			category          => $category,
			school            => $school,
			region            => $region,
			confirmed         => $confirmed,
			waitlist          => $waitlist,
			no_surcharge      => 1,
			bulk              => $bulk,
			judges            => \@judges,
		);

		$response{"burden"} = $rounds_to_cover;
		$response{"provided"} += $rounds;

		$rounds_to_cover -= $rounds;

		foreach my $request (@requests) {
			$rounds_to_cover -= $request->rounds_accepted;
			$response{"provided"} += $request->rounds_accepted;
		}

		my $overage;

		if ($rounds_to_cover < 0) {
			$overage = abs($rounds_to_cover);
			$rounds_to_cover = 0;
		}

		$response{"burden"} = 0 if $response{"burden"} < 0;

		unless ($ARGS{"no_surcharge"}) {
			if ($school_settings) {
				if (defined $school_settings->{"judge_surcharge"}) {
					$rounds_to_cover = $rounds_to_cover * ($school_settings->{"judge_surcharge"} / 100);
					$response{"burden"} = $response{"burden"} * ($school_settings->{"judge_surcharge"} / 100);
				}

			} elsif ($school && $school->setting("judge_surcharge")) {
				$rounds_to_cover = $rounds_to_cover * ($school->setting("judge_surcharge") / 100);
				$response{"burden"} = $response{"burden"} * ($school->setting("judge_surcharge") / 100);
			}
		}

		return $rounds_to_cover, $overage, \%response;

	} elsif ($category_settings->{"judge_per"}) {

		my @judges;
		my @requests;
		my $slots_to_cover;

		if ($school) {

			if ($bulk) {

				@judges = @{$judges} if $judges;
				@requests = @{$hires} if $hires;

			} else {

				@judges = $m->comp(
					"judges_by_category.mas",
					category          => $category,
					category_settings => $category_settings,
					school            => $school
				);

				@requests = Tab::JudgeHire->search(
					school   => $school->id,
					category => $category->id
				);

			}

			$slots_to_cover = $m->comp(
				"slots_needed_by_category.mas",
				category_settings => $category_settings,
				event_settings    => $event_settings,
				tourn_settings    => $tourn_settings,
				school_settings   => $school_settings,
				category          => $category,
				school            => $school,
				region            => $region,
				confirmed         => $confirmed,
				waitlist          => $waitlist,
				bulk              => $bulk,
				no_surcharge      => 1,
				judges            => \@judges,
			);

		} elsif ($region) {

			@judges = $m->comp(
				"judges_by_category.mas",
				category_settings => $category_settings,
				category          => $category,
				region            => $region
			);

			@requests = Tab::JudgeHire->search(
				region   => $region->id,
				category => $category->id
			);

			$slots_to_cover = $m->comp(
				"slots_needed_by_category.mas",
				category_settings => $category_settings,
				event_settings    => $event_settings,
				tourn_settings    => $tourn_settings,
				school_settings   => $school_settings,
				category          => $category,
				school            => $school,
				region            => $region,
				confirmed         => $confirmed,
				waitlist          => $waitlist,
				bulk              => $bulk,
				judges            => \@judges,
			);

		}

		$slots_to_cover = 0 if $slots_to_cover < 0;
		$response{"burden"} = $slots_to_cover;

		unless ($ARGS{"no_surcharge"}) {

			my $judge_now = ceil($slots_to_cover / $category_settings->{"judge_per"});

			if ($school_settings) {
				if (defined $school_settings->{"judge_surcharge"}) {
					$slots_to_cover = $judge_now
						* ($school_settings->{"judge_surcharge"} / 100)
						* $category_settings->{"judge_per"};
				}

			} elsif ($school && $school->setting("judge_surcharge")) {
				$slots_to_cover = $judge_now
					* ($school->setting("judge_surcharge") / 100)
					* $category_settings->{"judge_per"};
			}

			if ($tourn_settings->{regions} && $category_settings->{"regional_judge_adjustments"}) {
				my $adjustment = $category_settings->{regional_judge_adjustments}{$school->region->id};

				if ($adjustment) {
					$slots_to_cover = $slots_to_cover * ($adjustment / 100);
				}
			}

		}

		my $count;
		if ($no_free) {
			foreach my $judge (@judges) {
				$count++ unless $judge->setting('free_strike');
			}
		} else {
			$count = scalar @judges;
		}

		my $judges_provided += $count * $category_settings->{"judge_per"};

		my $hires_provided;

		foreach my $request (@requests) {
			$hires_provided += $request->entries_accepted;
		}

		$response{"provided"} = $judges_provided + $hires_provided;

		my $overage;

		$slots_to_cover -= $judges_provided;
		$slots_to_cover -= $hires_provided;

		if ($slots_to_cover < 0) {
			$overage = $slots_to_cover * -1;
			$slots_to_cover = 0;

			if ($overage < $category_settings->{"judge_per"}) {
				# Rounding errors don't count
				undef $overage
			}
		}

		$overage = 0 if $overage < $category_settings->{"judge_per"}
			&& $category_settings->{"hired_fee"};

		return $slots_to_cover, $overage, \%response;

	}

	return 0;

</%perl>
