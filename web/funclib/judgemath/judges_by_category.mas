<%args>
	$school => undef
	$region => undef
	$category
	$category_settings
</%args>
<%init>

	my @judges;

	Tab::Judge->columns(TEMP => qw/free_strike first_year incomplete/);

	Tab::Judge->set_sql(school_judges => "

		select distinct judge.*,
			free_strike.value as free_strike,
			incomplete.value_text as incomplete,
			first_year.value as first_year

		from (judge, category)

		left join judge_setting incomplete
			on incomplete.judge = judge.id
			and incomplete.tag = 'incomplete'

		left join judge_setting free_strike
			on free_strike.judge = judge.id
			and free_strike.tag = 'free_strike'

		left join judge_setting first_year
			on first_year.judge = judge.id
			and first_year.tag = 'first_year'

		where judge.school = ?
		and category.id = ?
		and
			(
				(judge.category = category.id and
					(judge.covers = 0 or judge.covers is NULL)
				)
			 	OR judge.covers = category.id

				OR (judge.alt_category = category.id and
					(judge.covers = 0 or judge.covers is NULL))
			)
	");

	Tab::Judge->set_sql(region_judges => "
		select distinct judge.*,
			free_strike.value as free_strike,
			incomplete.value_text as incomplete,
			first_year.value as first_year
		from (judge, category, school)

		left join judge_setting incomplete
			on incomplete.judge = judge.id
			and incomplete.tag = 'incomplete'

		left join judge_setting free_strike
			on free_strike.judge = judge.id
			and free_strike.tag = 'free_strike'

		left join judge_setting first_year
			on first_year.judge = judge.id
			and first_year.tag = 'first_year'

		where judge.school = school.id
		and school.region = ?
		and category.id = ?
		and
			(
				(judge.category = category.id and
					(judge.covers = 0 or judge.covers is NULL)
				)
			 	OR judge.covers = category.id

				OR (judge.alt_category = category.id and
					(judge.covers = 0 or judge.covers is NULL)
				)
			)
	");

	Tab::Judge->set_sql(worlds_nationals => "

		select judge.*,
			incomplete.value_text incomplete

		from (judge, judge_setting)

			left join judge_setting incomplete
				on incomplete.judge = judge.id
				and incomplete.tag = 'incomplete'


		where 1=1
			and judge.id = judge_setting.judge
			and judge_setting.tag = 'original_school'
			and judge_setting.value = ?
			and judge.category = ?
		group by judge.id
		order by judge.category, judge.last
	");

	if ($school) {

		@judges = Tab::Judge->search_school_judges( $school->id, $category->id);
		push @judges, Tab::Judge->search_worlds_nationals($school->id, $category->id);

	} elsif ($region) {

		@judges = Tab::Judge->search_region_judges( $region->id, $category->id);

	} else {

		$m->comp("/funclib/abort.mas",
			warning => "No school sent, so no fees generated."
		);
	}

	my @useme;
	my @dontcount;
	my $count;

	my $no_free = $category_settings->{"free_strikes_dont_count"};
	my $alt_max = $category_settings->{"alt_max"};

	foreach my $judge (@judges) {

		if ($alt_max) {
			if ($count > $alt_max) {
				if ($judge->alt_category == $category->id) {
					push @dontcount, $judge;
					$count++;
					next JUDGE;
				}
			}
		}
		push @useme, $judge;
	}

	if ($category_settings->{"fyo_free_strikes"}) {
		@useme = sort {$a->first_year <=> $b->first_year} @useme;
	}

	return @useme, @dontcount;

</%init>
