<%args>
	$text            => undef
	$body            => undef
	$html            => undef
	$ids             => undef
	$to              => undef
	$array           => undef
	$from            => undef
	$subject         => undef
	$debug           => undef
	$attachment_type => undef
	$attachment_path => undef
	$attachment_name => undef
	$tourn           => undef
	$email           => undef
	$person          => undef
	$sender          => undef
</%args>
<%init>

    use REST::Client;
	use MIME::Base64;

    my $strip = HTML::Strip->new();

	if ($text && (not defined $body)) {
		$body = $text;
	}

	if ($body) {
		$body = $strip->parse($body);
		$body =~ s/[^[:ascii:]]//g;
		$body =~ s/^\s+//;
		$body =~ s/\s+$//;

		use Text::Wrap
		$Text::Wrap::columns = 72;

		eval{
			$body =  wrap('', '', $body);
		};
	}

	if ($ids) {

		my @ids = eval {
			return @{$ids};
		};

		my @clean;

		#Fixes problems with blessed objects
		foreach my $id (@ids) {
			push @clean, int($id);
		}

		my $client = REST::Client->new(
			host => $Tab::url_prefix
		);

		my %send_message = (
			from          => $ARGS{"from_string"} || $ARGS{'from'},
			to            => $ARGS{"to_string"} || "noreply\@www.tabroom.com",
			replyTo       => $ARGS{'reply_to'},
			sender        => int($ARGS{'sender'}),
			url           => $ARGS{"url"},
			noWeb         => $ARGS{"no_web"} || $ARGS{"noWeb"},
			noEmail       => $ARGS{"no_email"} || $ARGS{"noEmail"},
			noInbox       => $ARGS{"no_inbox"} || $ARGS{'noInbox'},
			ignoreNoEmail => $ARGS{"ignore_no_email"} || $ARGS{"ignoreNoEmail"},
			subject       => $subject,
			ids           => \@clean,
			tourn         => int($tourn),
			emailId       => int($email),
		);

		if ($ARGS{'cc'}) {
			$send_message{cc} = $ARGS{'cc'};
		}

		if ($html) {
			$send_message{html} = $html;
		}

		if ($body) {
			$send_message{text} = $body;
		}

		unless ($send_message{'from'}) {
			return "No sender defined.  Be sure to set a tournament webname under Settings: Tourn";
		}

		my @attachments;

		if ($attachment_path && $attachment_type eq "application/json") {
			open(FILE, $attachment_path) or die "$!";
			my $filedata = <FILE>;
			push @attachments, $filedata;
		}

		if (scalar @attachments) {
			$send_message{"attachments"} = \@attachments;
		}

		my $post = JSON::encode_json(\%send_message);
		my $auth_header = encode_base64($Tab::indexcards_user.":".$Tab::indexcards_key);

		$client->POST(
			$Tab::indexcards_url.'/ext/mason/blast',
			$post,
			{
				'Authorization' => "Basic $auth_header",
				'Accept'        => 'application/json',
				'Content-Type'  => 'application/json'
			}
		);

		my $response = eval {
			return JSON::decode_json($client->responseContent());
		};

		unless ($response) {
			$response = $client->responseContent();
			return $response;
		}

		if (
			(int($person) == 1)
			|| (int($sender) == 1)
		) {
			eval {
				Tab::debuglog($response->{message});
			};
		}

		my $message = eval {
			return $response->{message};
		};

		return $message || $response;

	} else {

		my $now = DateTime->now();

		$from = $now->epoch."\@www.tabroom.com\n" unless $from;
		$subject = "Tabroom Update\n" unless $subject;

		my @send_to = @{$array} if $array;
		my @tos;
		my $count;

		foreach my $send (@send_to) {
			$to .= "," if $to;
			$to .= $send;

			if ($count++ > 14) {
				push @tos, $to;
				undef $to;
			}
		}

		push @tos, $to if $to;

		foreach my $to (@tos) {

			if (
				( $Tab::hostname eq "www.tabroom.com"
				  || $Tab::hostname eq "profiler.tabroom.com"
				) && (not defined $debug)
			) {

				my $msg = MIME::Lite->new(
					From    => $from,
					To      => "noreply\@www.tabroom.com",
					Bcc     => $to,
					Subject => $subject,
					Type    => "TEXT",
					Data    => $body."\n\n"
				);

				if ($attachment_name && $attachment_path) {
					$msg->attach (
						Type        => $attachment_type || 'application/pdf',
						Path        => $attachment_path,
						Filename    => $attachment_name,
						Disposition => 'attachment'
					);
				}

				eval {
					$msg->send("smtp", $Tab::smtp_server);
				};

				if ($@) {
					Tab::debuglog("Error on sending email: ".$@);
				}


			} elsif ($ARGS{"no_log"}) {

			} elsif ($body) {
				Tab::debuglog("Test sending $subject to $to.  No log is ".$ARGS{"no_log"});
				Tab::debuglog("Body: $body");
			}
		}

		Tab::eventlog("Sending ".scalar @tos." messages");
	}

	return;

</%init>
