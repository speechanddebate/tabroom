<%args>
	$person
	$victim_id => undef
	$target_id => undef
	$victim    => undef
	$target    => undef
	$force     => undef
</%args>
<%init>

	$target = Tab::Student->retrieve($target_id)
		if $target_id
		&& not defined $target;

	$victim = Tab::Student->retrieve($victim_id)
		if $victim_id
		&& not defined $victim;

	return unless $victim && $target;
	return if $victim == $target;

	unless ($force) {
		if ($victim->nsda > 0 && $target->nsda > 0) {
			unless ($victim->nsda == $target->nsda) {
				my $err = "Both students with name ".$victim->first." ".$victim->last;
				$err .= " are NSDA members with different IDs.  Not merging";
				return $err;
			}
		}
	}

	unless ($force) {

		if (
			$target->grad_year > 2000
			&& $victim->grad_year > 2000
			&& abs($target->grad_year - $victim->grad_year) > 5
		) {

			#Do not merge students whose grad years differ by more than four years.
			$victim->chapter($target->chapter->id);
			$victim->update;
			return "Students with name ".$victim->first." ".$victim->last." have grad years too far apart to merge.";
		}
	}

	$target->retired(0);

	if ($victim->grad_year && ($target->grad_year > 2000) && ($target->grad_year < 2050)) {
		$target->grad_year($victim->grad_year);
	} else {
		$target->grad_year(Tab::school_year()->year + 1);
	}

	if ($victim->nsda > 1 && ($target->nsda < 1)) {
		$target->nsda($victim->nsda);
	}

	if ($victim->middle && (not defined $target->middle)) {
		$target->middle($victim->middle);
	}

	if ($victim->person && (not defined $target->person)) {
		$target->person($victim->person);
	}

	if ($victim->gender && (not defined $target->gender)) {
		$target->gender($victim->gender);
	}

	$target->update();

    Tab::EntryStudent->set_sql( steal => "
        update ignore entry_student
        set student = ?
        where student = ?
    ");

	Tab::EntryStudent->sql_steal->execute($target->id, $victim->id);

    Tab::Score->set_sql( steal => "
        update ignore score
        set student = ?
        where student = ?
    ");

	Tab::Score->sql_steal->execute($target->id, $victim->id);

    Tab::Result->set_sql( steal => "
        update ignore result
        set student = ?
        where student = ?
    ");

	Tab::Result->sql_steal->execute($target->id, $victim->id);

	Tab::StudentSetting->set_sql( steal => "
		update student_setting ss
		set ss.student = ?
		where ss.student = ?
		and not exists (
			select 1
			from (select * from student_setting where student = ?) as ss2
			where ss2.tag = ss.tag
		)
	");

	eval {
		Tab::StudentSetting->sql_steal->execute($target->id, $victim->id, $target->id);
	};

	Tab::StudentSetting->set_sql( rm_dupes => "
		delete from student_setting where student = ?
	");

	Tab::StudentSetting->sql_rm_dupes->execute($victim->id);

	eval {
		Tab::log($person->id." ".$person->email." merged student ID ".$victim." with student ".$target);
	};

  	Tab::Student->set_sql(wipe => "delete from student where id = ?");
	Tab::Student->sql_wipe->execute($victim->id);

	undef $victim;
	return;

</%init>
