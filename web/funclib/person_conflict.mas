<%args>
	$tourn
	$person
	$entered   => undef
	$test_mode => undef
</%args>
<%init>

	return unless $person > 0;

	my $now = DateTime->now();
	my $dbh = Tab::DBI->db_Main();

	my %done;

	my $already_sth = $dbh->prepare("
		select
			strike.id, strike.school, strike.judge
		from strike, judge, category
		where category.tourn = ?
			and category.id       = judge.category
			and judge.person      = ?
			and judge.id          = strike.judge
			and strike.conflict   = 1
			and strike.registrant = 1
	");

	$already_sth->execute($tourn, $person);
	my $refs = $already_sth->fetchall_hash();
	my %already;

	foreach my $ref (@{$refs}) {
		$already{$ref->{judge}}{$ref->{school}}++;
	}

	my $sth = $dbh->prepare("
		select
			school.id school, judge.id judge, school.name, school.chapter
		from (school, conflict, tourn, judge, category)
		where school.tourn = ?
			and school.chapter = conflict.chapter
			and school.tourn = tourn.id
			and tourn.id = category.tourn
			and category.id = judge.category
			and judge.person = ?
			and judge.person IN (conflict.person, conflict.conflicted)
	");

	$sth->execute($tourn, $person);
	my $schools = $sth->fetchall_hash();

	foreach my $strike (@{$schools}) {

		next if $already{$strike->{judge}}{$strike->{school}}++;

		Tab::Strike->create({
			tourn      => int($tourn),
			judge      => $strike->{judge},
			type       => "school",
			school     => $strike->{school},
			entered_by => $entered || $person,
			conflictee => 1,
			registrant => 1,
			conflict   => 1
		});
	}

	my $entry_sth = $dbh->prepare("
		select
			entry.id entry, entry.code, judge.id judge, judge.last
		from (entry, event, entry_student es, student, conflict, tourn, judge, category, person)
		where event.tourn = ?
			and event.id = entry.event
			and entry.id = es.entry
			and es.student = student.id
			and event.tourn = tourn.id
			and person.id = ?
			and student.person = person.id
			and (conflict.person = person.id OR conflict.conflicted = person.id)
			and tourn.end > NOW()
			and tourn.id = category.tourn
			and category.id = judge.category
			and (conflict.conflicted = judge.person OR conflict.person = judge.person)
			and not exists (
				select strike.id
				from strike
					where strike.tourn = tourn.id
					and strike.judge = judge.id
					and strike.entry = entry.id
					and registrant = 1
					and conflict = 1
			)
	");

	$entry_sth->execute($tourn, $person);
	my $entries = $entry_sth->fetchall_hash();

	foreach my $strike (@{$entries}) {
		next if $done{$strike->{judge}}{$strike->{entry}}++;
		Tab::Strike->create({
			tourn      => int($tourn),
			judge      => $strike->{judge},
			type       => "entry",
			entry      => $strike->{entry},
			entered_by => $entered || $person,
			conflictee => 1,
			registrant => 1,
			conflict   => 1
		});
	}

	my $judge_sth = $dbh->prepare("
		select
			entry.id entry, entry.code, student.last, student.person, judge.id judge, judge.last
		from (entry, event, entry_student es, student, tourn, judge, category, person)
		where tourn.id = ?
			and tourn.end > NOW()
			and tourn.id = category.tourn
			and category.id = judge.category
			and judge.person = person.id
			and person.id = ?

			and event.tourn = tourn.id
			and event.id    = entry.event
			and entry.id    = es.entry
			and es.student  = student.id

			and (
				EXISTS  (
					select conflict.id
					from conflict
					where conflict.person = judge.person
					and conflict.conflicted = student.person
				) OR EXISTS (
					select conflict.id
					from conflict
					where conflict.conflicted = judge.person
					and conflict.person = student.person
				)
			)

			and not exists (
				select strike.id
				from strike
					where strike.tourn = tourn.id
					and strike.judge = judge.id
					and strike.entry = entry.id
					and strike.tourn = tourn.id
					and registrant = 1
					and conflict = 1
			)
	");

	$judge_sth->execute($tourn, $person);
	my $judges = $judge_sth->fetchall_hash();

	foreach my $strike (@{$judges}) {
		next if $done{$strike->{judge}}{$strike->{entry}}++;
		Tab::Strike->create({
			tourn      => int($tourn),
			judge      => $strike->{judge},
			type       => "entry",
			entry      => $strike->{entry},
			entered_by => $entered || $person,
			conflictee => 1,
			registrant => 1,
			conflict   => 1
		});
	}

	return;

</%init>
