<%args>
	$event    => undef
	$event_id => undef
	$round    => undef
	$last     => undef
	$public   => undef
	$all      => undef
	$first_tb => undef
	$type     => undef
	$chair    => "all"
	$exclude  => undef
</%args>
<%init>

	unless ($event) {

		if ($event_id) {
			$event = Tab::Event->retrieve($event_id);
		} elsif ($round) {
			$event = $round->event;
		} else {
			$m->comp("/funclib/abort.mas", message => "No event or round was sent to the win calculator");
		}
	}

	my $dbh = Tab::DBI->db_Main();
	my $limit;

	my $round_name = eval {
		return $round->name();
	};

	unless ($round_name) {
		$round = eval {
			return Tab::Round->retrieve($round);
		};

		if ($round) {
			$round_name = $round->name;
		}

	}

	if ($ARGS{"notme"}) {
		$round_name--;
	}

	if ($last && $round_name > 0) {
		$limit  = " and round.name = ".$round_name;
	} elsif ($round_name > 0) {
		$limit .= " and round.name <= ".$round_name." ";
	}

	if ($all) {

	} elsif ($last) {

	} elsif ($type eq "prelim") {
		$limit .= " and round.type in ('prelim', 'highlow', 'highhigh') ";
	} elsif ($type) {
		$limit  .= " and round.type = '$type'";
	} else {
		$limit .= ' and round.type != "elim" and round.type != "runoff" and round.type != "final" ' unless $all;
	}

	if (int($exclude)) {
		$limit .= " and round.id != ".int($exclude);
	}

	my $winner_limit;
	my $loser_limit;

	if ($event->type eq "mock_trial") {

		my $setting_sth = $dbh->prepare("
			select
				tb.id, tb.chair
			from tiebreak tb, round
			where round.event = ?
				$limit
				and round.protocol = tb.protocol
				and tb.name = 'winloss'
		");

		$setting_sth->execute($event);
		my $results = $setting_sth->fetchall_hash();
		my $only;
		undef $chair;

		foreach my $res (@{$results}) {

			if ($res->{'chair'} eq "all") {
				$only++;
			} elsif ($chair && $res->{'chair'} && $chair ne $res->{'chair'}) {
				$only++;
			} else {
				$chair = $res->{'chair'};
			}
		}

		if ($only) {
			$chair = "all";
		}
	}

	if ($chair eq "chair") {
		$winner_limit .= ' and winner.chair = 1 ';
		$loser_limit .= ' and loser.chair = 1 ';
	} elsif ($chair eq "nonchair") {
		$winner_limit .= ' and winner.chair != 1 ';
		$loser_limit .= ' and loser.chair != 1 ';
	}

	$limit .= " and round.post_primary >= ".int($public) if int($public) > 0;

	my $bye_limit .= " and panel.bye = 0"
		if $round
		&& $round->type ne "elim"
		&& $round->type ne "runoff"
		&& $round->type ne "final";

	my %entry_wins = ();
	my %entry_byes = ();

	my $sth = $dbh->prepare("
		select entry.id
			from entry
			where event =?
			and active = 1
	");

	if ($event) {
		$sth->execute($event->id);
		while (
			my ($entry_id) = $sth->fetchrow_array()
		) {
			$entry_wins{$entry_id} = 0;
		}
	}

	$sth->finish();

	if ($first_tb) {

		my ($entries_ref, $tbs_ref, $desc_ref, @whatever) = $m->comp(
			"/tabbing/results/order_entries.mas",
			round => $round,
		);

		my @keys = sort {$a <=> $b} keys %{$desc_ref};
		my $key = shift @keys if @keys;

		if ($key) {

			foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$seed}}) {
					$entry_wins{$entry_id} = ${$tbs_ref}{$entry_id}{$key};
				}
			}

			return %entry_wins;
		}
	}

	$sth = $dbh->prepare('

	    select entry.id, count(distinct panel.id) as wins
			from (round, panel, entry, ballot exist)
        where entry.event = ?
			and entry.id = exist.entry
			and panel.id = exist.panel
			and panel.round = round.id

			and not exists (
				select round_setting.id from round_setting
					where round_setting.tag = "ignore_results"
					and round_setting.round = round.id
			)

		'.$limit .'
		'.$bye_limit .'

        and (
			select count(distinct winner.id) as winner
            from ballot as winner, score
            where winner.entry = entry.id
				and winner.panel = panel.id
				and winner.forfeit = 0
				and winner.bye = 0
				'.$winner_limit.'
				and score.ballot = winner.id
				and score.tag = "winloss"
				and score.value = 1
		)
        > (
		 	select count(distinct loser.id) as loser
            from ballot as loser, score
            where loser.entry = entry.id
				and loser.panel = panel.id
				and loser.forfeit = 0
				and loser.bye = 0
				'.$loser_limit.'
				and score.ballot = loser.id
				and score.tag = "winloss"
				and (score.value = 0 or score.value is null)
		)
        group by entry.id
        order by entry.code
	');

	$sth->execute($event->id);

	while( my ($entry_id, $wins) = $sth->fetchrow_array() ) {
		$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
		$entry_wins{$entry_id} += $wins;
	}

	my $wsdc_byes = $event->setting("wsdc_bye_win_average");

	my %wsdc_bye_add = ();

	if ($wsdc_byes) {

		my $round_count;

		foreach my $other ($event->rounds) {
			next if $round && $round->name && $other->name > $round->name;
			next if $other->type eq "elim";
			next if $other->type eq "runoff";
			next if $other->type eq "final";
			$round_count++;
		}

		foreach my $entry_id ( keys %entry_wins ) {
			$wsdc_bye_add{$entry_id} = 0;
			$wsdc_bye_add{$entry_id} = 1
				if $entry_wins{$entry_id} >= ($round_count / 2);
		}

	}

	my $bye_sth = $dbh->prepare('

		select entry.id, count(distinct panel.id) as byes

        from round, panel, entry, ballot exist
        where entry.event = ?
			and entry.id = exist.entry
			and panel.id = exist.panel
			and panel.round = round.id

			and not exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = "ignore_results"
				and round_setting.round = round.id
			)

			and (panel.bye = 1 or exist.bye = 1)
			and exist.forfeit != 1
			'.$limit .'
			and not exists (
				select score.id
					from score, ballot bany
				where score.tag = "winloss"
					and score.ballot = bany.id
					and score.value = 1
					and bany.panel = panel.id
			)
        group by entry.id
        order by entry.code
	');

	$bye_sth->execute($event->id);

	while( my ($entry_id, $byes) = $bye_sth->fetchrow_array() ) {

		if ($wsdc_byes) {

			$entry_wins{$entry_id} += $wsdc_bye_add{$entry_id} * $byes;
			$entry_byes{$entry_id} += $byes;

		} else {

			$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
			$entry_wins{$entry_id} += $byes;
			$entry_byes{$entry_id} += $byes;

		}
	}

	# If this is a round robin and EVERYONE has had a certain number of byes,
	# just eliminate them.

	my $bye_min;

	if ($event->setting("round_robin")) {

		foreach my $entry_key (keys %entry_wins) {

			$bye_min = $entry_byes{$entry_key}
				if $entry_byes{$entry_key} && not defined $bye_min;

			$bye_min =  $entry_byes{$entry_key}
				if  $entry_byes{$entry_key} < $bye_min;

		}
	}

	foreach my $entry_key (keys %entry_wins) {
		$entry_wins{$entry_key} -= $bye_min;
	}

	return %entry_wins;

</%init>
