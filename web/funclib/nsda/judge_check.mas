<%args>
	$judge => undef
</%args>
<%init>

	return unless $judge;

	my $category = $judge->category;
	my $tourn = $category->tourn;

	my $reasons;

	unless ($judge->person) {
		$reasons = "Judge ".$judge->first." ".$judge->last." is not linked to a Tabroom account";
		$judge->setting("incomplete", "text", $reasons);
		return;
	}

	my $jperson = $judge->person;

#	if ($tourn && $tourn->setting('vaccines')) {
#		my $vax = $jperson->setting('vaccine_'.$tourn->id);
#		unless ($vax eq "confirmed") {
#			$reasons .= "Vaccine check pending for ".$judge->first." ".$judge->last;
#		}
#	}

	my $nats_category = $category->setting("nats_category");

	my $ok;
	my $dbh = Tab::DBI->db_Main();
	my %quiz_answers;

	if ($jperson > 0) {

		my $sth = $dbh->prepare('
			select
				pq.id, pq.quiz, pq.completed, pq.approved_by,
				quiz.approval

			from person_quiz pq, quiz, person
			where person.id = ?
				and person.id = pq.person
				and pq.quiz = quiz.id
		');

		$sth->execute($jperson->id);
		my $answers = $sth->fetchall_hash();

		%quiz_answers = map {$_->{quiz} => $_} @{$answers};
	}

	my @all_quizzes = Tab::Quiz->search(hidden => 0);
	my %circuits = map {$_->id => $_} $tourn->circuits;
	my @quizzes;

	foreach my $quiz (@all_quizzes) {
		if ($quiz->circuit > 0 && (not defined $circuits{$quiz->circuit})) {
			next;
		}
		push @quizzes, $quiz;
	}

	my %quiz_by_id = map {$_->id => $_} @quizzes;

	my $quizref = $category->setting("required_quizzes");

	if ($quizref && $judge->active) {
		foreach my $quiz_id (@{$quizref}) {

			next unless $quiz_by_id{$quiz_id};
			my $answers = $quiz_answers{$quiz_id};


			my $bad = &check_answers($answers);

			Tab::debuglog("Judge $judge quiz $quiz_id answers $answers.  Result $bad");

			if ($bad) {
				my $quiz = $quiz_by_id{$quiz_id};
				$reasons .= "<br />" if $reasons;
				$reasons .= $quiz->label." ".$bad;
			}
		}
	}


	unless ($nats_category) {

		if ($reasons) {
			$judge->setting("incomplete", "text", $reasons);
		} else {
			$judge->setting("incomplete", 0);
		}
		return;
	}

	if ($judge->setting('tab_room')) {
		if ($reasons) {
			$judge->setting("incomplete", "text", $reasons);
		} else {
			$judge->setting("incomplete", 0);
		}
		return;
	}

	if ($judge->setting('exempt_warnings')) {

		if ($reasons) {
			$judge->setting("incomplete", "text", $reasons);
		} else {
			$judge->setting("incomplete", 0);
		}
		return;
	}

	if ($judge->active) {
		$reasons .= "Judge has no day obligation" unless $judge->obligation;
	}


	my $sth = $dbh->prepare('
		select
			jpool.id, jpool.name,
			required_quizzes.value_text quizzes,
			paradigm_quiz.value paradigm
		from (jpool, jpool_judge jpj, jpool_setting registrant)

			left join jpool_setting required_quizzes
				on jpool.id = required_quizzes.jpool
				and required_quizzes.tag = "required_quizzes"

			left join jpool_setting paradigm_quiz
				on jpool.id = paradigm_quiz.jpool
				and paradigm_quiz.tag = "paradigm_quiz"

		where jpj.judge = ?
			and jpj.jpool = jpool.id
			and jpool.id = registrant.jpool
			and registrant.tag = "registrant"
	');

	$sth->execute($judge->id);
	my $jpools = $sth->fetchall_hash();

	my $main;

	if ($judge->active) {
		foreach my $jpool (@{$jpools}) {

			$main++;

			if ($jpool->{paradigm}) {

				my $quiz_id = $jpool->{paradigm};
				next unless $quiz_by_id{$quiz_id};
				my $answers = $quiz_answers{$quiz_id};

				my $bad = &check_answers($answers);
				if ($bad) {
					my $quiz = $quiz_by_id{$quiz_id};
					$reasons .= "<br />" if $reasons;
					$reasons .= uc($jpool->{name}).": ".$quiz->label." ".$bad;
				}
			}

			if ($jpool->{quizzes}) {

				my @quizzes = eval {
					return @{JSON::decode_json($jpool->{quizzes})};
				};

				foreach my $quiz_id (@quizzes) {
					next unless $quiz_by_id{$quiz_id};
					my $answers = $quiz_answers{$quiz_id};
					my $bad = &check_answers($answers);
					if ($bad) {
						my $quiz = $quiz_by_id{$quiz_id};
						$reasons .= "<br />" if $reasons;

						my $label = $quiz->label;
						$reasons .= uc($jpool->{name}).": ".$quiz->label." ".$bad;
					}
				}
			}
		}
	}

	unless ($main) {
		$reasons .= "<br />" if $reasons;
		$reasons .= "No main events pool selected";
	}

	if ($jperson > 0) {

		my $fyo = $m->comp("/funclib/nsda/check_fyo.mas",
			person => $jperson->id,
			nsda   => $jperson->nsda,
			tourn  => $category->tourn
		);

		if ($fyo) {
			$reasons .= "<br />" if $reasons;
			$reasons .= "Ineligible first year out: ".$fyo;
		}

		unless ($jperson->phone > 0) {
			$reasons .= "<br />" if $reasons;
			$reasons .= "Cell phone number required";
		}

	} else {

		$reasons .= "<br />" if $reasons;
		$reasons .= "No Tabroom account linked";
	}

	if ($reasons) {
		$judge->setting("incomplete", "text", $reasons);
	} else {
		$judge->setting("incomplete", 0);
	}

	return $reasons;

	sub check_answers {

		my $answers = shift;
		my $bad;

		if ($answers->{approval}) {
			if ($answers->{approved_by}) {
				return;
			} elsif ($answers->{completed}) {
				$bad = "not confirmed";
			} elsif ($answers->{id}) {
				$bad = "not complete";
			}
		} else {
			if ($answers->{completed}) {
				return;
			} elsif ($answers->{id}) {
				$bad = "not complete";
			}
		}
		return $bad || "not begun";
	}

</%init>
