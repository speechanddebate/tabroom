<%args>
	$person
	$person_settings
	$perms
	$event_id     => undef
	$other_value   => undef
	$setting_name  => undef
	$setting_value => undef
</%args>
<%init>

	use Tab::NSDACategory;

	unless ($ARGS{"related_thing"} eq "download") {
		$m->clear_buffer();
		$r->content_type('application/json');
	}

	unless ($event_id) {
		$m->print('{ "error": true, "message": "No event ID sent"}');
		$m->abort();
	}

	unless ($other_value || ($ARGS{"related_thing"} eq "download")) {
		$m->print('{ "error": true, "message": "No category code sent"}');
		$m->abort();
	}

	my $event = Tab::Event->retrieve($event_id);

	unless ($event) {
		$m->print('{ "error": true, "message": "No event found for ID '.$event_id.'"}');
		$m->abort();
	}

	my $nsda_code = Tab::NSDACategory->retrieve($other_value);

	if ($ARGS{"related_thing"} eq "download") {
		if ($event->type eq "congress") {
			$nsda_code = Tab::NSDACategory->retrieve("301");
		} else {
			my $nsda_id = $event->setting("nsda_event_category");
			$nsda_code = Tab::NSDACategory->retrieve($nsda_id);
		}
	}


	unless ($nsda_code) {
		$m->print('{ "error": true, "message": "No NSDA code found for '.$event_id.'"}');
		$m->abort();
	}

	if ($ARGS{"related_thing"} eq "repost") {

		unless ($person) {
			my %response = (
				error   => "true",
				message => "No login credentials sent",
			);
			$m->print(JSON::encode_json(\%response));
			$m->abort();
		}

		if ($person->site_admin || $person_settings->{"nsda_admin"}) {
			$event->setting("nsda_points_posted", 0);
		}
	}

	unless ($event->type) {

		$event->setting("nsda_points_posted", 1);
		$event->setting("nsda_point_codefail", 0);

		my %response = (
			destroy => $event->id,
			message => "Event does not have a tabulation type.  Marked but not posted"
		);

		$m->print(JSON::encode_json(\%response));
		$m->abort();
	}

	if ($nsda_code->code < 200) {

		unless ($event->type eq "debate" || $event->type eq "wsdc") {
			$m->print('{ "error": true, "message": "Non Debate code '.$nsda_code->code.' attempted with a debate event"}');
			$m->abort();
		}

	} elsif ($nsda_code->code < 300) {

		unless ($event->type eq "speech") {
			$m->print('{ "error": true, "message": "Non-Speech code '.$nsda_code->code.' attempted with a speech event"}');
			$m->abort();
		}

	} else {

		unless ($event->type eq "congress") {
			$m->print('{ "error": true, "message": "Non-Congress code attempted with a speech event"}');
			$m->abort();
		}
	}

	$event->setting("nsda_event_category", $nsda_code->id);
	$event->setting("nsda_point_codefail", 0);

	my $download;
	$download++ if $ARGS{"related_thing"} eq "download";

	my $return = $m->comp("/funclib/nsda/post_points.mas",
		event => $event,
		debug => $download
	);

	chomp $return;

	my $error_status = 0;
	my $destroy = 0;

	if ($return eq $event->name." points posted successfully.") {
		$error_status = 0;
		$destroy      = $event->id;
	} elsif ($return eq $event->name ." had no entries or results.  Marked and skipped ") {
		$destroy      = $event->id;
		$error_status = 0;
	} elsif ($return eq $event->name ." was already posted.  Skipped ") {
		$destroy      = $event->id;
		$error_status = 0;
	}

	my $replace;

	if ($setting_name) {
		my $now = DateTime->now();
		my @replace = (
			{id => $setting_name, content => "<div class='nospace smallish'>Posted on <br />".$now->month."/".$now->day."/".$now->year."</span>"}
		);
		$replace = \@replace;
		undef $destroy;
	}

    my %response = (
		destroy => $destroy,
		message => $return,
		replace => $replace
    );

	$response{"error"} = "true" if $error_status > 0;
    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
