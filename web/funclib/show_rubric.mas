<%args>
	$panel_id  => undef
	$judge_id  => undef
	$entry_id  => undef
	$school_id => undef
	$no_opp    => undef
</%args>
<%init>

	my $limit;
	$limit = "and ballot.judge = ".int($judge_id) if $judge_id;
	$limit = "and ballot.entry = ".int($entry_id) if $entry_id;

	if ($no_opp && $school_id) {
		$limit .= " and entry.school = ".int($school_id);
	}

	my $dbh = Tab::DBI->db_Main();

	my $student_sth = $dbh->prepare("
		select
			student.id, student.first, student.last
			from student, entry_student es, ballot
		where ballot.panel = ?
			and ballot.entry = es.entry
			and es.student = student.id
	");

	$student_sth->execute($panel_id);

	my $student_ref = $student_sth->fetchall_hash();
	my %students = map {$_->{"id"} => $_} @{$student_ref};

	my $sth = $dbh->prepare("
		select
			ballot.id, ballot.side, ballot.chair,
			entry.id entry, entry.code, entry.name,
			judge.id judge, judge.first, judge.last,
			score.tag, score.value, score.content,
			event.type,
			ballot_rubric.value_text rubric,
			aff_label.value aff,
			neg_label.value neg,
			no_opponent_results.value opp_results,
			show_totals.value show_totals,
			show_chair.value show_chair,
			exclude_scoresheets.value exclude_scoresheets

		from (panel, ballot, event, entry, score, event_setting ballot_rubric)

			left join judge on ballot.judge = judge.id
			left join event_setting aff_label on aff_label.event = entry.event and aff_label.tag = 'aff_label'
			left join event_setting neg_label on neg_label.event = entry.event and neg_label.tag = 'neg_label'
			left join event_setting show_totals on show_totals.event = entry.event and show_totals.tag = 'show_totals'
			left join round_setting show_chair on show_chair.tag = 'show_chair' and show_chair.round = panel.round
			left join round_setting exclude_scoresheets on exclude_scoresheets.tag = 'exclude_scoresheets' and exclude_scoresheets.round = panel.round

			left join event_setting no_opponent_results
				on no_opponent_results.event = entry.event
				and no_opponent_results.tag = 'no_opponent_results'

		where panel.id = ?
			and ballot.panel      = panel.id
			and ballot.entry      = entry.id
			and entry.event       = ballot_rubric.event
			and ballot_rubric.tag = 'ballot_rubric'
			and ballot.id         = score.ballot
			and score.tag         = 'rubric'
			and entry.event       = event.id
			$limit

			and exists (
				select s2.id
				from score s2
				where s2.ballot = ballot.id
				and s2.tag IN ('rank', 'winloss')
			)

		group by ballot.id
		order by ballot.judge, ballot.side
	");

	$sth->execute($panel_id);
	my $results_ref = $sth->fetchall_hash();
	return unless $results_ref;

	if ($ARGS{"aggregate"}) {

		my %new_results;

		foreach my $result (@{$results_ref}) {

			next if $result->{'exclude_scoresheets'};

			if (
				$result->{'type'} eq "mock_trial"
				&& $result->{'chair'}
				&& (not defined $result->{'show_chair'})
			) {
				next;
			}

			my $score = eval {
				return JSON::decode_json($result->{"content"});
			};

			my $rubric = eval {
				return JSON::decode_json($result->{"rubric"});
			};

			my $new_score;

			unless ($new_results{$result->{"entry"}}{"side"}) {
				$new_results{$result->{"entry"}}{"side"}        = $result->{"side"};
				$new_results{$result->{"entry"}}{"code"}        = $result->{"code"};
				$new_results{$result->{"entry"}}{"aff"}         = $result->{"aff"} || "Aff";
				$new_results{$result->{"entry"}}{"show_totals"} = $result->{"show_totals"};
				$new_results{$result->{"entry"}}{"neg"}         = $result->{"neg"} || "Neg";
				$new_results{$result->{"entry"}}{"rubric"}      = $result->{"rubric"};
			} else {
				$new_score = eval {
					return JSON::decode_json($new_results{$result->{"entry"}}{"content"});
				};
			}

			foreach my $order (sort {$a <=> $b} keys %{$rubric->{$result->{"side"}}}) {
				if ($score->{$order}{"speaker"} && (not defined $new_score->{$order}{"speaker"})) {
					$new_score->{$order}{"speaker"} = $score->{$order}{'speaker'};
				}

				my $row = $rubric->{$result->{'side'}}{$order};
				my $point = $score->{$order}{points};

				if ($row->{"mult"}) {
					$point = $point * $row->{mult};
				}

				$new_score->{$order}{"points"} .= ', ' if $new_score->{$order}{"points"};
				$new_score->{$order}{"points"} .= $point;
				$new_score->{$order}{"total"} += $point;
				$new_score->{$order}{"count"}++;
			}
			$new_results{$result->{"entry"}}{"content"} = JSON::encode_json($new_score);
		}

		undef $results_ref;
		foreach my $entry (keys %new_results) {
			push @{$results_ref}, $new_results{$entry};
		}
	}

	my $counter = 1;

	foreach my $result (@{$results_ref}) {

		next if $result->{'exclude_scoresheets'};

		my $score = eval {
			return JSON::decode_json($result->{"content"});
		};

		my $rubric = eval {
			return JSON::decode_json($result->{"rubric"});
		};

</%init>
		<span class="<% $no_opp ? "pagefull" : "pagehalf" %>">

			<h6 class="blueborderbottom">
				Scorer <% $counter %>:
				<% $result->{"code"} %> <% $result->{'side'} == 1 ? $result->{'aff'} : $result->{'neg'} %>
			</h6>

%			foreach my $order (sort {$a <=> $b} keys %{$rubric->{$result->{"side"}}}) {

%				my $row = $rubric->{$result->{'side'}}{$order};
%				$row->{"label"} =~ s/Defense\'s//g;
%				$row->{"label"} =~ s/Prosecution\'s//g;
%				$row->{"label"} =~ s/Plaintiff\'s//g;
%				$row->{"label"} =~ s/Plaintiff's//g;
%				$row->{"label"} =~ s/Defense//g;
%				$row->{"label"} =~ s/Prosecution//g;
%				$row->{"label"} =~ s/Plaintiff//g;
%				$row->{"label"} =~ s/Cross-Exam/CX/g;

				<div class="ltborderbottom odd flexrow">
					<span class='fifteenth semibold'>
						<% $order %>.
					</span>
					<span class="foursevenths marno grow">
						<% $row->{"label"} %>
					</span>

					<span class="threetenths marno grow">
%						if ($score->{$order}{'speaker'} > 0) {
							<% $students{$score->{$order}{"speaker"}}{"first"}." ".$students{$score->{$order}{"speaker"}}{"last"} %>
%						}
					</span>

					<span class="eighth centeralign">
%						unless ($result->{"show_totals"}) {
							<% $score->{$order}{'points'} %>
%						}
						<% $score->{$order}{'total'}
							? "/".$score->{$order}{'total'}
							: ""
						%>
					</span>
				</div>
%			}
		</span>

%		$counter++ if $result->{side} > 1;

%	}

