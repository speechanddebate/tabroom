<%args>
	$string => undef
	$dt     => undef
	$tz     => undef
	$length => undef
	$format => undef
	$offset => undef
	$now    => undef
</%args>
<%init>


	#After I messed this up 93,341 times
	if ($format && (not defined $length)) {
		$length = $format;
	}

	if (not defined $length) {
		$length = "short";
	}

	if ($dt) {
		my $month = eval {
			return $dt->month;
		};

		if ($month) {
			#Prevent time zone backscatter
			$dt = $dt->clone();
		}
	}

	unless ($dt) {

		if ($now) {

			$dt = DateTime->now();
			$dt->set_time_zone("UTC");

		} elsif (not defined $string) {

			my ($month, $day, $year) = eval{ return split('/', $ARGS{"date"}); };
			my ($hour, $rest) = eval{ return split(':', $ARGS{"time"}); };

			my $minute = $rest;
			my $ampm = uc($rest);
			$minute =~ s/\D//g;
			$minute = "00" unless $minute;
			$ampm =~ s/\d//g;
			$ampm =~ s/\s//g;
			$ampm = "PM" if $ampm eq "P";
			$ampm = "AM" unless $ampm eq "PM";

			$hour = '00' if $hour == 12;
			$hour = $hour +12 if $ampm eq "PM";

			$dt = eval {
				my $dt = DateTime->new(
						year      => $year,
						month     => $month,
						day       => $day,
						hour      => $hour,
						minute    => $minute,
					);

				if ($tz) {
					$dt->set_time_zone($tz);
				}

				return $dt;
			};

		} else {

			$dt = eval {
				return DateTime::Format::MySQL->parse_datetime($string);
			};

			if ($dt) {
				$dt->set_time_zone("UTC");
			}
		}
	}

	my $output;

	if ($dt) {

		if ($ARGS{"offset"}) {
			$dt->add(minutes => $ARGS{"offset"});
		}

		$dt->set_time_zone($tz) if $tz;

		if ($ARGS{"day_abbr"}) {
			$output .= $dt->day_abbr." ";
		}

		if ($length eq "rawsort") {

			$output .= $dt->year.sprintf("%02d",$dt->month).sprintf("%02d",$dt->day);
			$output .= sprintf("%02d",$dt->hour).sprintf("%02d",$dt->strftime('%M'));

		} elsif ($length eq "sortable") {

			$output .= $dt->ymd."-".$dt->hms('-');

		} elsif ($length eq "csv") {

			$output .= $dt->year."-".sprintf("%02d",$dt->month)."-".sprintf("%02d",$dt->day);
			$output .= " ".sprintf("%02d",$dt->hour).":".sprintf("%02d",$dt->strftime('%M'));

		} elsif ($length eq "casual") {

			$output .= $dt->day_abbr." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "medcasual") {

			$output .= $dt->month_abbr." ".Lingua::EN::Numbers::Ordinate::ordinate($dt->day);
			$output .= ", ".$dt->year." ";
			$output .= " at ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "longcasual") {

			$output .= $dt->day_abbr." the ".Lingua::EN::Numbers::Ordinate::ordinate($dt->day);
			$output .= " at ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "shortest") {

			$output .= $dt->month."/".$dt->day." ".$dt->hour.":".$dt->strftime("%M");

		} elsif ($length eq "shorter") {

			$output .= $dt->month."/".$dt->day." ".$dt->hour_12.":".$dt->strftime("%M").substr($dt->strftime('%p'),0,1);

		} elsif ($length eq "seconds") {

			$output .= $dt->month_abbr." ".$dt->day." ".$dt->hour_12.":";
			$output .= $dt->strftime("%M").":".$dt->strftime("%S")." ".$dt->strftime('%p');

		} elsif ($length eq "short") {

			$output .= $dt->month_abbr." ".$dt->day." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "medium" || (not defined $length)) {

			$output .= $dt->day." ".$dt->month_abbr." ".$dt->year." ";
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "long") {

			$output .= $dt->day." ".$dt->month_name." ".$dt->year." ";
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "longer") {

			$output .= $dt->day_abbr." ".$dt->day." ".$dt->month_name." ".$dt->year." ";
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_noyear") {

			$output .= $dt->day_abbr." ".$dt->month_name." ".$dt->day;
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_shortest") {

			$output .= $dt->month."/".$dt->day." ";
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_shorter") {

			$output .= $dt->month."/".$dt->day."/".substr($dt->year, 2, 2)." &nbsp; ";
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_short") {

			$output .= $dt->day_abbr." ".$dt->month_abbr." ".$dt->day." ";
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_shortish") {

			$output .= $dt->month_abbr." ".$dt->day." ".$dt->year;
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_weekday") {

			$output .= $dt->day_name;
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica_noday") {

			$output .= $dt->month_name." ".$dt->day.", ".$dt->year." ";
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "murica") {

			$output .= $dt->day_abbr." ".$dt->month_name." ".$dt->day.", ".$dt->year." ";
			$output .= " <br /> " if $ARGS{"atbr"};
			$output .= " at " if $ARGS{"at"};
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "longest") {

			$output .= $dt->day_name." ".$dt->day." ".$dt->month_name." ".$dt->year." at ";
			$output .= $dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p');

		} elsif ($length eq "xml") {

			$output = $dt->month."/".$dt->day."/".$dt->year." ";
			$output .= $dt->hour.":".$dt->strftime('%M')." ".$dt->strftime('%p');

		} elsif ($length eq "json" || $length eq "iso") {

			$output = $dt->iso8601()."Z";

		} elsif ($length eq "csv") {

			$output = $dt->year."-".$dt->month."-".$dt->day." ".$dt->hour.":".$dt->strftime('%M');
		}

		if ($ARGS{"tzname"} && $tz) {
			$output .= " ".Tab::tzname($tz);
		}

	} elsif ($ARGS{"never"}) {
		$output = "Never";
	}

	if ($ARGS{"return"}) {
		return $output if $ARGS{return};
	}

	return $dt if $ARGS{'object'};

	$m->print($output);
	return;

</%init>
