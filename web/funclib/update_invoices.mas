<%args>
	$school    => undef
	$school_id => undef
	$invoice   => undef
</%args>
<%init>

    use MIME::Base64;
    use REST::Client;

	my @invoices;

	if ($invoice) {

		$school = $invoice->school;
		push @invoices, $invoice;

	} elsif ($school) {

		@invoices = Tab::Invoice->search(
			school => $school->id
		);

	} elsif ($school_id) {

		$school = Tab::School->retrieve($school_id);

		@invoices = Tab::Invoice->search(
			school => $school->id
		);

	} else {

		@invoices = Tab::Invoice->search(
			paid => 0
		);
	}

	my $counter;
	my $changes;
	my $canceled;

    my $auth_header = encode_base64($Tab::nsda_api_user.":".$Tab::nsda_api_key);

	my $client = REST::Client->new(
		host => $Tab::nsda_api_endpoint
	);

	foreach my $invoice (@invoices) {

		if ($invoice
			&& $invoice->school
			&& $invoice->school->chapter
			&& $invoice->school->chapter->nsda
		) {

			$client->GET(
				$Tab::nsda_api_version."/invoices/".$invoice->blusynergy,
				{
					'Authorization' => "Basic $auth_header",
					'Content-Type'  => 'application/json',
					'Accept'        => 'application/json'
				}
			);

			my $response_json = $client->responseContent();
	        my %answered_invoices = eval {
				return %{JSON::decode_json($response_json)};
			};

			next unless $answered_invoices{"invoiceId"} == $invoice->blusynergy;

			if ($answered_invoices{"number"} != $invoice->blu_number) {
				$invoice->blu_number($answered_invoices{'number'});
				$changes++;
				$invoice->update();
			}

			if ($answered_invoices{"status"} eq "paid") {

				unless ($invoice->paid) {
					$invoice->paid(1);
					$invoice->update();
					$counter++;
				}

				unless ($invoice->payments) {

					my $string = "NSDA Invoice #".$invoice->blusynergy." paid";

					unless (
						Tab::Fine->search(
							school => $school_id,
							reason => $string
						)
					) {
						my $amount = $answered_invoices{"total"} * -1;
						my $payment = Tab::Fine->create({
							school  => $invoice->school->id,
							reason  => $string,
							payment => 1,
							amount  => $amount,
							deleted => 0,
							invoice => $invoice->id,
							tourn   => $invoice->school->tourn->id
						});
					}
				}
			}

			if ($answered_invoices{"status"} eq "cancelled"
				|| $answered_invoices{"status"} eq "canceled"
			) {

				foreach my $payment ($invoice->payments) {
					$payment->delete();
				}

				my $string = "NSDA Invoice #".$invoice->blusynergy." paid";

				foreach my $payment (
					Tab::Fine->search(
						school => $school_id,
						reason => $string
					)
				) {
					$payment->delete();
				}

				$invoice->delete();
				$canceled++;
			}
		}
	}

	if ($ARGS{"property_name"} eq "admin") {

		$m->clear_buffer();
		$r->content_type('application/json');

		my $msg = $school->name." invoice paid status has been updated";

		$m->print('{ "error": false, "message": "'.$msg.'"}');
		$m->abort();

	} else {

		return "Invoice status updated.  $counter marked paid.  $changes changed new. $canceled deleted.";

	}

</%init>
