<%args>
	$tourn
	$person
</%args>
<%init>

	my $district_id = $tourn->setting("nsda_district");
	my $district = Tab::District->retrieve($district_id) if $district_id;

	my $permission;
	$permission++ if $person->site_admin;
	$permission++ if $person->setting("nsda_admin");

	unless ($permission) {

		unless ($district) {
			$m->comp("/funclib/abort.mas",
			message => "Not a district tournament: district id: $district_id");
		}

		$permission = Tab::Permission->search(
			district => $district->id,
			person   => $person->id
		)->first;
	}

	unless ($permission) {
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to District ".$district_id);
		$m->print('</h4></div>');
		$m->abort();
	}

	my $tz = $tourn->tz;
	$tz = "America/Chicago" unless $tz;

	# Yeah you're so doing this
	$tourn->setting('require_disaster_check', 1);

	# Backups go to the chair and to us
	my $office = Tab::Person->search( email => 'districtsupport@speechanddebate.org')->first;
	my $chair = Tab::Permission->search( tag => 'chair', district => $district->id)->first;

	my @followers = ($office->id);

	if ($chair->person > 0) {
		push @followers, $chair->person->id;
	}

	$tourn->setting('backup_followers', 'json', \@followers);

	# CONGRESS only has one ruleset now

	my $con_prelim_set = find_protocol($tourn, "Congress Prelim");
	$con_prelim_set->setting('equal_elims', 1);
	$con_prelim_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 6
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_prelim_set->id,
		count         => "prelim",
		chair         => "chair",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	});

	my $con_elim_set = find_protocol($tourn, "Congress Elim");
	$con_elim_set->setting('equal_elims', 1);
	$con_elim_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name          => "student_ranks",
		protocol      => $con_elim_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		truncate      => 9,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $con_elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $con_elim_set->id,
		count         => "previous",
		chair         => "chair",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	});

	# DEBATE

	foreach my $event ($tourn->events(type => "debate")) {
		$event->setting("powermatch", "sop");
		$event->setting("pullup_method", "sop");
		$event->setting("pullup_repeat", 1);

		my $district_mode = $event->setting("district_mode");

		if ($district_mode eq "single") {
			$event->setting("round_robin", 0);
			$event->setting("double_elimination", 0);
		} elsif ($district_mode eq "double") {
			$event->setting("round_robin", 0);
			$event->setting("double_elimination", 1);
		} elsif ($district_mode eq "robin") {
			$event->setting("round_robin", 1);
			$event->setting("double_elimination", 0);
		}
	}

	my $deb_prelim_set = find_protocol($tourn, "Debate");

	Tab::Tiebreak->create({
		name       => "winloss",
		protocol   => $deb_prelim_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 1
	});

	Tab::Tiebreak->create({
		name       => "ballots",
		protocol   => $deb_prelim_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol      => $deb_prelim_set->id,
		highlow       => 1,
		highlow_count => 1,
		count         => "prelim",
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name       => "points",
		protocol   => $deb_prelim_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 4
	});

	Tab::Tiebreak->create({
		name       => "opp_seed",
		protocol   => $deb_prelim_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 5
	});

	Tab::Tiebreak->create({
		name       => "coinflip",
		protocol   => $deb_prelim_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 6
	});

	my $robin_set = find_protocol($tourn, "Round Robin");

	Tab::Tiebreak->create({
		name       => "ballots",
		protocol   => $robin_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 1
	});

	Tab::Tiebreak->create({
		name       => "headtohead",
		protocol   => $robin_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol      => $robin_set->id,
		count         => "prelim",
		multiplier    => 1,
		highlow       => 1,
		highlow_count => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol      => $robin_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name       => "coinflip",
		protocol   => $robin_set->id,
		count      => "prelim",
		multiplier => 1,
		priority   => 5
	});

	my $deb_elim_set = find_protocol($tourn, "Debate Elim");

	Tab::Tiebreak->create({
		name       => "winloss",
		protocol   => $deb_elim_set->id,
		count      => "previous",
		multiplier => 1,
		priority   => 1
	});

	my $deb_double_elim_set = find_protocol($tourn, "Debate Double Elimination");

	Tab::Tiebreak->create({
		name       => "losses",
		protocol   => $deb_double_elim_set->id,
		count      => "elim",
		multiplier => 1,
		priority   => 1
	});

	my $deb_final_set = find_protocol($tourn, "Debate Final");

	Tab::Tiebreak->create({
		name       => "winloss",
		protocol   => $deb_final_set->id,
		count      => "final",
		multiplier => 1,
		priority   => 1
	});

	Tab::Tiebreak->create({
		name       => "rounds",
		protocol   => $deb_final_set->id,
		count      => "all",
		multiplier => 1,
		priority   => 2
	});

	Tab::Tiebreak->create({
		name       => "winloss",
		protocol   => $deb_final_set->id,
		count      => "elim",
		multiplier => 1,
		priority   => 3
	});

	Tab::Tiebreak->create({
		name       => 'seed',
		protocol   => $deb_final_set->id,
		count      => "all",
		multiplier => 1,
		priority   => 4
	});

	foreach my $event ($tourn->events( type => "speech")) {
		$event->setting("elim_method", "snake_school");
		$event->setting("min_panel_size", 4);
		$event->setting("max_panel_size", 7);
	}

	foreach my $event ($tourn->events( type => "congress")) {

		my $online_mode = $event->setting("online_mode");

		if ($online_mode eq "none" || (not defined $online_mode)) {
			$event->setting("min_panel_size", 8);
			$event->setting("max_panel_size", 29);
		} else {
			$event->setting("min_panel_size", 8);
			$event->setting("max_panel_size", 16);
		}

		$event->setting("min_points", 1);
		$event->setting("max_points", 8);
		$event->setting("parli_ballot", 1);
		$event->setting("parli_noautofill", 1);
		$event->setting("allow_rank_ties", 0);
		$event->setting("truncate_fill", 9);
		$event->setting("sort_precedence", 1);
	}

	rm_protocol($tourn, "IE Semi");
	rm_protocol($tourn, "IE Break To Elims");
	rm_protocol($tourn, "IE Prelim Composite");
	rm_protocol($tourn, "IE Prelim Seeding");

	my $ie_prelim_set = find_protocol($tourn, "IE Prelim");
	$ie_prelim_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name              => "ranks",
		protocol          => $ie_prelim_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 1,
		highlow_threshold => 4,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	my $no_elim_set = find_protocol($tourn, "IE No Elims");
	$no_elim_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name              => "ranks",
		protocol          => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name              => "reciprocals",
		protocol          => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 2,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name              => "judgepref",
		protocol          => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		priority          => 3,
		truncate          => 0,
		truncate_smallest => 0
	});

	my $ie_elim_set = find_protocol($tourn, "IE Elim");
	$ie_elim_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name              => "ranks",
		protocol          => $ie_elim_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 1,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $ie_elim_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1,
		truncate      => 0
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $ie_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2,
		truncate      => 0
	});

	my $ie_final_set = find_protocol($tourn, "IE Final");
	$ie_final_set->setting('forfeits_rank_last', 1);

	Tab::Tiebreak->create({
		name          => "rounds",
		protocol      => $ie_final_set->id,
		count         => "all",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name              => "ranks",
		protocol          => $ie_final_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 1,
		multiplier        => 1,
		priority          => 2,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $ie_final_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2,
		truncate      => 0
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2,
		truncate      => 0
	});

	my $counter = 3;

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $ie_final_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name              => "judgepref",
		protocol          => $ie_final_set->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		priority          => $counter++,
		truncate_smallest => 1
	});

	my $runoff_set = find_protocol($tourn, "IE Runoff");

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $runoff_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $runoff_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});


	return;

	sub find_protocol {

		my ($tourn, $tag) = @_;

		my @protocols = Tab::Protocol->search(
			tourn => $tourn->id,
			name  => $tag
		);

		my $protocol;
		$protocol = shift @protocols if @protocols;

		foreach my $left (@protocols) {
			$left->delete();
		}

		Tab::Tiebreak->set_sql("delete" => "delete from tiebreak where protocol = ? ");
		Tab::ProtocolSetting->set_sql("delete" => "delete from protocol_setting where protocol = ? ");

		if ($protocol) {
			Tab::Tiebreak->sql_delete->execute($protocol->id);
			Tab::ProtocolSetting->sql_delete->execute($protocol->id);
		} else {

			$protocol = Tab::Protocol->create({
				tourn => $tourn->id,
				name  => $tag
			});
		}

		return $protocol;

	}

	sub rm_protocol {

		my ($tourn, $tag) = @_;

		my @protocols = Tab::Protocol->search(
			tourn => $tourn->id,
			name  => $tag
		);

		foreach my $protocol (@protocols) {
			$protocol->delete();
		}

		return;
	}

</%init>
