<%args>
	$tourn
	$person
	$perms
	$dbh
</%args>
<%init>

	if ($person->site_admin == 1) {
		return 1;
	}

	if ($ARGS{round_id}) {
		my $check_sth = $dbh->prepare("
			select event.tourn tourn, event.id event
				from (round, event)
			where 1=1
				and round.id = ?
				and round.event = event.id
		");

		$check_sth->execute(int($ARGS{"round_id"}));

		my ($sent_tourn, $sent_event) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a round that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{event}{$sent_event} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{event_id}) {

		my $check_sth = $dbh->prepare("
			select event.tourn tourn
				from (event)
			where 1=1
				and event.id = ?
		");

		$check_sth->execute(int($ARGS{"event_id"}));
		my ($sent_tourn) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit an event that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{event}{$ARGS{event_id}} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{panel_id}) {

		my $check_sth = $dbh->prepare("
			select event.tourn tourn, event.id event
				from (panel, round, event)
			where 1=1
				and panel.id = ?
				and panel.round = round.id
				and round.event = event.id
		");

		$check_sth->execute(int($ARGS{"panel_id"}));
		my ($sent_tourn, $sent_event) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a section that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{event}{$sent_event} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{ballot_id}) {

		my $check_sth = $dbh->prepare("
			select event.tourn, event.id
				from (ballot, panel, round, event)
			where 1=1
				and ballot.id = ?
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
		");

		$check_sth->execute(int($ARGS{"ballot_id"}));
		my ($sent_tourn, $sent_event) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a ballot that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{event}{$sent_event} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{entry_id}) {

		my $check_sth = $dbh->prepare("
			select event.tourn tourn, event.id event
				from (entry, event)
			where 1=1
				and entry.id = ?
				and entry.event = event.id
		");

		$check_sth->execute(int($ARGS{"entry_id"}));
		my ($sent_tourn, $sent_event) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit an entry that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{event}{$sent_event} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{judge_id}) {

		my $check_sth = $dbh->prepare("
			select category.tourn tourn, category.id category
				from (judge, category)
			where 1=1
				and judge.id = ?
				and judge.category = category.id
		");

		$check_sth->execute(int($ARGS{"judge_id"}));
		my ($sent_tourn, $sent_category) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit an judge that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{category}{$sent_category} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{jpool_id}) {

		my $check_sth = $dbh->prepare("
			select category.tourn tourn, category.id category
				from (jpool, category)
			where 1=1
				and jpool.id = ?
				and jpool.category = category.id
		");

		$check_sth->execute(int($ARGS{"jpool_id"}));
		my ($sent_tourn, $sent_category) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit an judge pool that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{category}{$sent_category} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{school_id}) {
		my $check_sth = $dbh->prepare("
			select school.tourn tourn
				from (school)
			where 1=1
				and school.id = ?
		");

		$check_sth->execute(int($ARGS{"school_id"}));
		my ($sent_tourn) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a school that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{fine_id}) {

		my $check_sth = $dbh->prepare("
			select fine.id, school.tourn tourn
				from (school, fine)
			where 1=1
				and fine.id = ?
				and school.id = fine.school
		");

		$check_sth->execute(int($ARGS{"fine_id"}));

		my ($db_id, $sent_tourn) = $check_sth->fetch();

		unless ($db_id) {
			$m->comp("/funclib/abort.mas",
				message => "No fine with ID ".$ARGS{fine_id}." was found"
			);
		}

		if ($sent_tourn != $tourn) {
			$m->comp("/funclib/abort.mas",
				message => "You are attempting to edit a fee that is not in your current tournament: ".$tourn->name
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
		) {
			return 1;
		}

		return;
	}

	if ($ARGS{concession_id}) {

		my $check_sth = $dbh->prepare("
			select concession.tourn tourn
				from (concession)
			where 1=1
				and concession.id = ?
		");

		$check_sth->execute(int($ARGS{"concession_id"}));
		my ($sent_tourn) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a concession that is not in your current tournament: ".$tourn->name,
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
		) {
			return 1;
		}
		return;
	}

	if ($ARGS{rpool_id}) {
		my $check_sth = $dbh->prepare("
			select rpool.tourn tourn
				from (rpool)
			where 1=1
				and rpool.id = ?
		");

		$check_sth->execute(int($ARGS{"rpool_id"}));
		my ($sent_tourn) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a room pool that is not in your current tournament: ".$tourn->name,
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
		) {
			return 1;
		}
		return;
	}

	if ($ARGS{category_id}) {
		my $check_sth = $dbh->prepare("
			select category.tourn tourn
				from (category)
			where 1=1
				and category.id = ?
		");

		$check_sth->execute(int($ARGS{"category_id"}));
		my ($sent_tourn) = $check_sth->fetch();

		if ($sent_tourn != $tourn) {
			$m->abort("/funclib/abort.mas",
				message => "You are attempting to edit a room pool that is not in your current tournament: ".$tourn->name,
			);
		}

		if (
			$perms->{tourn}{$sent_tourn} eq "owner"
			|| $perms->{tourn}{$sent_tourn} eq "tabber"
			|| $perms->{category}{$ARGS{category_id}} eq "tabber"
		) {
			return 1;
		}
		return;
	}

</%init>
