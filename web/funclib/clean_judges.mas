<%args>
	$panel               => undef
	$panel_id            => undef
	$event               => undef
	$round               => undef
	$event_settings      => undef
	$tourn_settings      => undef
	$category_settings   => undef
	$round_data          => undef
	$event_data          => undef
	$last_entryful_round => undef
	$pre_paneled         => undef
	$jpools              => undef
</%args>
<%init>

	return unless ($panel || $panel_id);
	$panel_id = $panel->id if $panel;

	my $dbh = Tab::DBI->db_Main();
	my $prep_sth = $dbh->prepare("SET optimizer_switch='semijoin=off'");
	$prep_sth->execute();
	$prep_sth = $dbh->prepare("SET optimizer_switch='materialization=off'");
	$prep_sth->execute();

	my $round_id;
	my $event_id;

	if ($round_data) {
		$round_id = $round_data->{"id"};
	} else {
		$panel = Tab::Panel->retrieve($panel_id) unless $panel;
		$round = $panel->round unless $round;
		$round_id = $round->id unless $round_id;

		$round_data = ({
			id   => $round->id,
			name => $round->name,
			type => $round->type,
		});
	}

	if ($event_settings && $event_data) {
		$event_id = $event_data->{"id"};
	} else {
		$panel = Tab::Panel->retrieve($panel_id) unless $panel;
		$round = $panel->round unless $round;
		$event = $round->event unless $event;
		$event_id = $event->id;

		unless ($event_settings) {
			%{$event_settings} = $event->all_settings();
		}
		unless ($event_data) {
			$event_data = ({
				id   => $event->id,
				name => $event->name,
				type => $event->type,
			});
		}
	}

	unless ($event) {
		$event = Tab::Event->retrieve($event_id);
	}

	unless ($category_settings) {
		$panel = Tab::Panel->retrieve($panel_id) unless $panel;
		$round = $panel->round unless $round;
		$event = $round->event unless $event;
		my $category = $event->category;
		%{$category_settings} = $category->all_settings();
	}

	unless ($tourn_settings) {
		$panel = Tab::Panel->retrieve($panel_id) unless $panel;
		$round = $panel->round unless $round;
		$event = $round->event unless $event;
		my $tourn = $event->tourn;
		%{$tourn_settings} = $tourn->all_settings();
	}

	# If this is a round without entries, then I'm pre-paneling judges.
	unless ($ARGS{"not_preset"}) {
		unless ($last_entryful_round) {
			$last_entryful_round = $m->comp("/funclib/last_round_entries.mas", event => $event);
		}
		$pre_paneled++ if $last_entryful_round
			&& $last_entryful_round->name < $round_data->{"name"};
	}

	# Score the sections based on how many kids are from the judge's school in
	# this event.  This means that the first judge who comes up as clean is the
	# judge whose school does this event the most, but is still clean to judge
	# it.

	my %judges;

	if ($ARGS{"raw_judges"}) {
		%judges = %{$ARGS{'raw_judges'}};
	} else {
		%judges = $m->comp(
			"/funclib/judge_priority.mas",
			event => $event,
			nsda  => $tourn_settings->{"nsda_nats"},
			ncfl  => $tourn_settings->{"ncfl"}
		);
	}

	my $diocese_region;

	if ($tourn_settings->{"ncfl"}) {
		$diocese_region = $event_settings->{"diocese_regions"};
	}

	if (not defined $ARGS{"standby"}) {
		%{$ARGS{"standby"}} = $m->comp("/funclib/judge_standby.mas", round => $round_id);
	}

	if ($ARGS{"standby"}) {
		foreach my $standby_id  (keys %{$ARGS{"standby"}}) {
			$judges{$standby_id}{"standby"} = 1;
		}
	}

	# This setting when applied does not let people in a jpool judge cross
	# category.

	my $jpool_limit;
	my $jpool_select;
	my @jpools;

	if ($jpools) {
		@jpools = @{$jpools};
	} elsif ($round) {
		@jpools = $round->jpools;
	}

	if ($category_settings->{"override_jpools"}
		&& ($ARGS{"jpool"} || $round && @jpools)
	) {

		$jpool_select .= ", jpool_round, jpool_judge ";

		$jpool_limit .= "and (
				judge.category = event.category
				or judge.alt_category = event.category
			)

			and jpool_judge.judge = judge.id
			and jpool_judge.jpool = jpool_round.jpool
			and jpool_round.round = round.id
		";

	} elsif ($ARGS{"jpool"} || $round && @jpools) {

		$jpool_select .= ", jpool_round, jpool_judge ";

		$jpool_limit = "
			and jpool_judge.judge = judge.id
			and jpool_judge.jpool = jpool_round.jpool
			and jpool_round.round = round.id
		";

	} else {

		$jpool_limit .= "and (
				judge.category = event.category
				or judge.alt_category = event.category
		)";

	}

	# $sql_from_hell is the variable that contains the text of the SQL
	# transaction that gets us what we want.  We add SQL code to it as we go
	# along, depending on the rules of our tournament.

	my $sql_from_hell = "
		select judge.id,
			judge.code, judge.first, judge.middle, judge.last,
			judge.person, judge.obligation, judge.hired,
			school.id, school.name, school.code,
			region.id, region.name, region.code,
			area.value area,
			district.id, district.name, district.code,
			tab_rating.value, parli.value, diverse.value, online_hybrid.value

		from (judge, panel, event, round, timeslot, tourn $jpool_select)

		left join judge_setting as online_hybrid
			on online_hybrid.judge = judge.id
			and online_hybrid.tag = 'online_hybrid'

		left join judge_setting as tab_rating
			on tab_rating.judge = judge.id
			and tab_rating.tag = 'tab_rating'

		left join judge_setting as diverse
			on diverse.judge = judge.id
			and diverse.tag = 'diverse'

		left join judge_setting parli
			on parli.judge = judge.id
			and parli.tag = 'parli'

		left join school on school.id                = judge.school
		left join chapter on chapter.id              = school.chapter
		left join region on region.id                = school.region
		left join region_setting area on area.region = region.id and area.tag = 'area'
		left join district on school.district        = district.id

		where panel.id = ?
			and round.id = panel.round
			and event.id = round.event
			and timeslot.id = round.timeslot
			and judge.active = 1
			and event.tourn = tourn.id

			$jpool_limit

		and not exists (
			select strike.id from strike, ballot
			where strike.judge = judge.id
			and strike.entry > 0
			and strike.entry = ballot.entry
			and ballot.panel = panel.id
		)

		and not exists (
			select hybrid.id
			from strike hybrid, ballot
			where judge.school = hybrid.school
			and hybrid.type = 'hybrid'
			and hybrid.entry = ballot.entry
			and ballot.panel = panel.id
		)

		and not exists(
			select hybrid.id
			from strike hybrid, strike schstrike, ballot
			where hybrid.judge = judge.id
			and hybrid.school = schstrike.school
			and schstrike.type = 'hybrid'
			and schstrike.entry > 0
			and schstrike.entry = ballot.entry
			and ballot.panel = panel.id
		)

		and not exists(
			select strike.id from strike, ballot, entry
			where strike.judge = judge.id
			and strike.school > 0
			and strike.school = entry.school
			and entry.id = ballot.entry
			and ballot.panel = panel.id
		)

		and not exists(
			select strike.id from strike
			where strike.judge = judge.id
			and strike.event = round.event
			and strike.type = 'event'
		)

		and not exists(
			select strike.id from strike
			where strike.judge = judge.id
			and strike.event = round.event
			and strike.type = 'elim'
			and (round.type = 'prelim'
				or round.type = 'highhigh'
				or round.type = 'highlow'
			)
		)

		and not exists(
			select strike.id
			from strike
			where strike.judge = judge.id
			and (strike.type = 'time' or strike.type = 'departure')
			and strike.start <= timeslot.end
			and strike.end >= timeslot.start
		)

		and not exists (
			select strike.id from strike, school, entry, ballot
			where strike.judge = judge.id
			and strike.type    = 'region'
			and strike.region  = school.region
			and school.id      = entry.school
			and entry.id       = ballot.entry
			and ballot.panel   = panel.id
		)

		and not exists (
			select strike.id from strike, school, entry, ballot
			where strike.judge  = judge.id
			and strike.type     = 'district'
			and strike.district = school.district
			and school.id       = entry.school
			and entry.id        = ballot.entry
			and ballot.panel    = panel.id
		)
	";

	unless ($ARGS{'include_standby'}) {
		$sql_from_hell .= "
			and not exists (
				select jpj.id
				from jpool_judge jpj, jpool_setting jps
				where jps.value = round.timeslot
				and jps.tag = 'standby_timeslot'
				and jps.jpool = jpj.jpool
				and jpj.judge = judge.id
			)
		";
	}

	if ($ARGS{"parlis"} == 1 && ($event->type eq "congress")) {

		unless ($event_settings->{"allow_repeat_judging"}) {

			unless ($event_settings->{"allow_repeat_elims"}
				&& ($round_data->{"type"} eq "elim" || $round_data->{"type"} eq "final")
			) {

				$sql_from_hell .= "
					and not exists (
						select parliballot.id
						from ballot parliballot, panel parlipanel, round parliround
						where parliround.event = event.id
						and parliround.type = 'prelim'
						and parliround.id = parlipanel.round
						and parlipanel.id = parliballot.panel
						and parliballot.judge = judge.id
				)";
			}
		}
	}

	if ($category_settings->{"auto_conflict_hires"}) {

		$sql_from_hell .= "
			and not exists(
				select judge_hire.id from judge_hire, entry, ballot
				where judge_hire.judge = judge.id
				and judge_hire.school = entry.school
				and entry.id = ballot.entry
				and ballot.panel = panel.id
			)";
	}

	if ($event_settings->{"no_first_years"}) {
		$sql_from_hell .= " and not exists(
			select judge_setting.id
			from judge_setting
			where judge_setting.judge = judge.id
			and judge_setting.tag = 'first_year'
			and judge_setting.value = 1
		)";
	}

	if ($pre_paneled && $last_entryful_round->type ne "prelim") {

		# In a preset round, check that the judge is not struck against any
		# elim students who are still alive

		$sql_from_hell .= "
			and not exists(
				select strike.id from strike
				where strike.judge = judge.id
				and strike.type = 'entry'
				and strike.entry in (
					select entry.id
					from entry,ballot as bcpc,panel
					where bcpc.entry = entry.id
					and bcpc.panel = panel.id
					and panel.round = ".$last_entryful_round->id."
				)
			)

			and not exists(
				select strike.id from strike
				where strike.judge = judge.id
				and strike.type = 'school'
				and strike.school in (
					select entry.school
					from entry,ballot as bcps,panel
					where bcps.entry = entry.id
					and bcps.panel = panel.id
					and panel.round = ".$last_entryful_round->id."
				)
			) ";

		if ($tourn_settings->{"ncfl"}
			|| $tourn_settings->{"regions"}
			|| $tourn_settings->{"nsda_nats"}
		) {

			$sql_from_hell .= "
				and not exists(
					select strike.id from strike
					where strike.judge = judge.id
					and strike.type = 'region'
					and strike.region in (
						select school.region
						from entry,ballot as bcpr,panel,school
						where bcpr.entry = entry.id
						and entry.school = school.id
						and bcpr.panel = panel.id
						and panel.round = ".$last_entryful_round->id."
					)
				) ";

		}

		if ($tourn_settings->{"nsda_nats"}) {

			$sql_from_hell .= "
				and not exists(
					select strike.id from strike
					where strike.judge = judge.id
					and strike.type = 'district'
					and strike.district in (
						select school.district
						from entry,ballot as bcpr,panel,school
						where bcpr.entry = entry.id
						and entry.school = school.id
						and bcpr.panel = panel.id
						and panel.round = ".$last_entryful_round->id."
					)
				) ";
		}
	}

	unless ($event_settings->{"allow_judge_own"}) {

		if ($pre_paneled) {

			if ( (not defined $last_entryful_round)
				|| ($last_entryful_round && $last_entryful_round->type eq "prelim")
				&& (not defined $tourn_settings->{"ncfl"})
			) {

				# If we're dealing with preset rounds for the first break out
				# of prelims, or placing judges for any elimination before
				# prelim judges have been panelled, then no judge is allowed to
				# judge an event in which they have kids.

				# Note that this makes no sense to do at NCFL Nationals, so we
				# skip that condition altogether for NCFL; few dioceses have no
				# kids in a given speech event anyway.

				$sql_from_hell = $sql_from_hell ."
					and judge.school NOT IN (
						select entry.school from entry
						where entry.event = event.id
					)
				";

			} else {

				# If we're dealing instead with preset elims that have
				# an elim behind them, we only need check the kids
				# still alive in that

				if ($tourn_settings->{"nsda_nats"}) {

					# At NCFLs check against the region (diocese) of kids still alive

					$sql_from_hell = $sql_from_hell ."

					and judge.school NOT IN (
						select school.id from entry,school,district,
						school as entryschool,
						ballot as brp, panel as prp
						where entry.id = brp.entry
						and brp.panel = prp.id
						and prp.round = ".$last_entryful_round->id."
						and entryschool.id = entry.school
						and entryschool.district = region.id
						and school.region = region.id
					)";

				} elsif ($tourn_settings->{"ncfl"} || $event_settings->{"region_judge_forbid"}) {

					# At NCFLs check against the region (diocese) of kids still alive

					$sql_from_hell = $sql_from_hell ."

					and judge.school NOT IN (
						select school.id from entry,school,region,
						school as entrieschool,
						ballot as brp, panel as prp
						where entry.id = brp.entry
						and brp.panel = prp.id
						and prp.round = ".$last_entryful_round->id."
						and entrieschool.id = entry.school
						and entrieschool.region = region.id
						and school.region = region.id
					)";

				} else {

					# Check the alive kids in a non NCFL tournament (By school, not region here)

					$sql_from_hell = $sql_from_hell ."

						and judge.school NOT IN (
							select  entry.school
							from entry,ballot as brp,panel as prp
							where entry.id = brp.entry
							and brp.panel = prp.id
							and prp.round = ".$last_entryful_round->id."
						)";

				} # end of if circuit is diocese based

			} #End of if we're dealing with a preset round (eliminations)

		} else {

			# This is what we do if we're not dealing with a preset
			# round.  Then we just check the judge against the kids
			# actually in the round.

			if ($tourn_settings->{"ncfl"}
				|| $event_settings->{"region_judge_forbid"}
				|| $tourn_settings->{"nsda_nats"}
			) {

				# Do not allow a judge to judge anyone from their own
				# region in the NCFL (region == diocese)

				$sql_from_hell .= "
					and
						( judge.school NOT IN (
							select school2.id
							from entry, ballot as brc, school, school school2
							where brc.panel = panel.id
								and brc.entry = entry.id
								and entry.active = 1
								and entry.school = school.id
								and school.region = school2.region
								and school2.tourn = school.tourn
						)
					";

				if ($category_settings->{"neutrals"}) {
					$sql_from_hell .= "
						or exists (
							select judge_setting.id from judge_setting
							where judge_setting.judge = judge.id
								and judge_setting.tag = 'neutral'
								and judge_setting.value = 1
					)";
				}

				$sql_from_hell .= ")";

			} elsif ($event_settings->{"conflict_state_judges"}) {

				if ($event_settings->{"usa_wsdc"}) {

					$sql_from_hell .= " and state.value not in ( ";

				} else {

					$sql_from_hell .= " and chapter.state not in ( ";
				}

				$sql_from_hell .= "
					select state_chapter.state
					from ballot as state_ballot,
						entry as state_entry,
						school as state_school,
						chapter as state_chapter

					where state_ballot.panel = panel.id
						and state_ballot.entry = state_entry.id
						and state_entry.school = state_school.id
						and state_school.chapter = state_chapter.id
						and state_chapter.state is not null
						and state_chapter.state != '0'
				)";
			}

			# Either way, do not allow a judge to judge anyone from their own
			# school

			$sql_from_hell = $sql_from_hell ."
				and
					( judge.school NOT IN (
						select cc.school
						from entry as cc,ballot as bc
						where bc.panel = panel.id
							and bc.entry = cc.id
					)
			";

			if ($category_settings->{"neutrals"}) {
				$sql_from_hell .= "
					or exists (
						select judge_setting.id from judge_setting
						where judge_setting.judge = judge.id
							and judge_setting.tag = 'neutral'
							and judge_setting.value = 1
				)";
			}

			$sql_from_hell .= ")";

		} # end of if this isn't a preset round

	} # end of unless allowed to judge our own

	# Check strikes against the whole event if this is a preset round and the
	# latest paneled round is a prelim.

	if ($pre_paneled && $last_entryful_round->type ne "prelim") {

		if (not defined $last_entryful_round
			|| ($last_entryful_round && $last_entryful_round->type eq "prelim")
			&! $tourn_settings->{"ncfl"}
		) {

			$sql_from_hell = $sql_from_hell . "

				 and not exists(
					select strike.id from strike,entry as entry
					where strike.judge = judge.id
					and strike.type = 'entry'
					and strike.entry = entry.id
					and entry.event = event.id
				)

				and not exists(
					select strike.id from strike,entry as entry
					where strike.judge = judge.id
					and strike.type = 'school'
					and entry.school = strike.school
					and entry.event = event.id
				)

				and not exists(
					select strike.id from strike,entry as entry, school as school
					where strike.judge = judge.id
					and strike.type = 'region'
					and school.region = strike.region
					and entry.school = school.id
					and entry.event = event.id
				)
			";
		}
	}

	if ($ARGS{"autopair"}) {
		$sql_from_hell = $sql_from_hell . "
			 and not exists(
				select js.id
				from judge_setting js
				where js.judge = judge.id
				and js.tag = 'sub_only'
			)
		";
	}

	# ALLOWING OR DISALLOWING JUDGES TO JUDGE THE SAME EVENT TWICE.

	if ( $event_data->{"type"} eq "speech"
			&& (not defined $category_settings->{"judge_event_twice"}
			|| ($pre_paneled && $last_entryful_round && $last_entryful_round->type eq "prelim")
		)
	) {

		# Do not allow judges to judge an event they've judged before if we're
		# not allowing that, or if this is a preset round and there are no
		# elims with kids assigned to them yet.  (so we have to assume anyone
		# can break)

		$sql_from_hell .= "
			and not exists(
				select btwice.id from
				ballot as btwice, panel as ptwice, round as rtwice
				where btwice.panel = ptwice.id
				and rtwice.id = ptwice.round
				and rtwice.event = event.id
				and btwice.judge = judge.id
			)
		";

	} elsif ($event_data->{"type"} eq "speech") {

		# If there are pre-assigned judges in this event, the judge cannot
		# judge it now if they're assigned to it

		$sql_from_hell .= "
		and not exists(
			select ballot.id
			from ballot, panel, round
			where ballot.judge = judge.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and (ballot.entry is null
					or ballot.entry = 0
				)
			)
		";

		# Next if this is a preset round, and there are other elims with kids
		# in them, then the judge cannot have judged any kids in that previous
		# elim

		if ($pre_paneled) {

			$sql_from_hell .= "
			and not exists(
				select pbentry.id from entry as pbentry,
				panel as pbpanel,
				ballot as pbballot,
				ballot as pbballot2

				where pbentry.id = pbballot.entry
				and pbballot.panel = pbpanel.id
				and pbpanel.round = ".$last_entryful_round->id."

				and pbballot2.entry = pbentry.id
				and pbballot2.judge = judge.id
			)";

		} else {

			# Finally, if the round is not preset (and therefore has kids
			# assigned to it), we just check to see if the kids have been
			# judged by the judge.

			$sql_from_hell .= "
				and not exists(
					select ballot2.id
					from ballot, ballot ballot2

					where ballot.panel = panel.id
					and ballot2.judge = judge.id
					and ballot.entry = ballot2.entry
					and ballot.panel != ballot2.panel
				)";
		}

	} elsif (
		$event_settings->{"allow_repeat_judging"}
		|| ($event_settings->{"allow_repeat_elims"}
			&& ($round_data->{"type"} eq "elim" || $round_data->{"type"} eq "final")
		)
	) {

	} elsif ($event_settings->{"allow_repeat_prelim_side"}
		&& $round_data->{"type"} ne "elim"
		&& $round_data->{"type"} ne "final"
	) {

		$sql_from_hell .= "
			and not exists (
				select aff_ballot.id
				from ballot, ballot as aff_ballot, panel aff_panel, round aff_round
				where aff_ballot.judge = judge.id
					and aff_ballot.panel = aff_panel.id
					and aff_panel.round = aff_round.id
					and aff_round.type != 'elim'
					and aff_round.type != 'final'
					and aff_ballot.entry = ballot.entry
					and aff_ballot.side = ballot.side
					and aff_ballot.panel != ballot.panel
					and ballot.panel = panel.id
			)";

	} else {

		# Don't let the judge see the same entry twice in prelims.  In elims
		# it's fair game.

		$sql_from_hell .= "
		and not exists(
			select bpreset.id from
			ballot as bpreset,
			panel as ppreset,
			round as rpreset
			where bpreset.judge = judge.id
			and bpreset.entry is null
			and bpreset.panel = ppreset.id
			and ppreset.round = rpreset.id
			and rpreset.event = event.id
			and bpreset.entry > 0
		)";

		# Next if this is a preset round, and there are other elims with kids
		# in them, then the judge cannot have judged any kids in that previous
		# elim

		if ($pre_paneled && $last_entryful_round) {
			$sql_from_hell .= "
			and not exists(
				select pbentry.id from entry as pbentry,
				panel as pbpanel,
				ballot as pbballot,
				ballot as pbballot2

				where pbentry.id = pbballot.entry
				and pbballot.panel = pbpanel.id
				and pbpanel.round = ".$last_entryful_round->id."

				and pbballot2.entry = pbentry.id
				and pbballot2.judge = judge.id
			)";
		}

		# Finally, if the round is not preset (and therefore has kids assigned
		# to it), we just check to see if the kids have been judged by the
		# judge.

		unless ($pre_paneled) {
			$sql_from_hell .= "
				and not exists(
					select ballot2.id
					from (ballot, ballot ballot2)
					where ballot2.judge = judge.id
						and ballot.panel  = panel.id
						and ballot.entry  = ballot2.entry
						and ballot2.panel != panel.id
				)";
		}
	}

	# end of if judges can judge the same event twice.

	if ($event_settings->{"disallow_repeat_drop"}) {
		$sql_from_hell .= "
			and not exists (
				select loss.id
				from ballot as loss, score as loss_score, ballot
				where loss.judge = judge.id
					and loss_score.ballot = loss.id
					and loss_score.tag = 'winloss'
					and loss_score.value != 1
					and loss.bye = 0
					and loss.forfeit = 0
					and loss.entry = ballot.entry
					and ballot.panel = panel.id
			)";
	}

	# This either prevents judges from judging a round when the previous round
	# ended, or not, as the user defines

	my $lt_symbol = '<';
	my $gt_symbol = '>';

	if ($category_settings->{"no_back_to_back"}) {
		$lt_symbol = '<=';
		$gt_symbol = '>=';
	}

	unless ($ARGS{"stealable"}
		|| ($event_settings->{"online_mode"} eq "async"
			 && (not defined $event_settings->{"dumb_half_async_thing"})
			)
	) {

		my $flight_limit;
		my $pa_flight_limit;

		if ($event->type eq "debate") {
			$flight_limit = " and pt.flight = panel.flight ";
			$pa_flight_limit = " and pa.flight = panel.flight ";
		}

		$sql_from_hell .= "
			and not exists (
				select bt.id
					from panel as pt,ballot as bt,timeslot as tt, round as rt
				where tt.start $lt_symbol timeslot.end
					and tt.end $gt_symbol timeslot.start
					and tt.id     = rt.timeslot
					and tt.tourn  = tourn.id
					and rt.id     = pt.round
					and pt.id     = bt.panel
					$flight_limit
					and bt.judge  = judge.id
					and bt.judge  > 0
			)

			and not exists (
				select bt.id
					from panel as pt,ballot as bt
				where pt.round = panel.round
					$flight_limit
					and pt.id      = bt.panel
					and bt.judge   = judge.id
			)

			and not exists (
				select ba.id
					from (panel pa, ballot as ba, timeslot as ta,
						round as ra, judge as ja, person as persa, category ca
					)
				where persa.id = judge.person
					and persa.id  = ja.person
					and ja.person > 0
					and ja.category = ca.id
					and ca.tourn = tourn.id
					and ba.judge  = ja.id
					and ba.panel  = pa.id
					$pa_flight_limit
					and pa.round  = ra.id
					and ra.timeslot = ta.id
					and ta.start $lt_symbol timeslot.end
					and ta.end $gt_symbol timeslot.start
					and ta.tourn = tourn.id
					and not exists (
						select esa.id
						from event_setting esa
						where esa.tag = 'online_mode'
						and esa.event = ra.event
						and esa.value = 'async'
					)
			)
		";

	} else {

		$sql_from_hell .= "
			and not exists (
				select thisbt.id
				from ballot as thisbt
				where thisbt.panel = panel.id
				and thisbt.judge = judge.id
			)
		";
	}

	unless ($category_settings->{"allow_school_panels"}) {

		# Do not allow more than one judge from a given school on panel if
		# they're not hired judges

		$sql_from_hell .= "
		and not exists(
			select bj.id from ballot as bj,judge as j2
			where bj.panel = panel.id
			and bj.judge = j2.id
			and j2.school = judge.school
			and judge.school != 0
		)";

		# If this is NCFL Nationals, similarly do not allow more than one judge
		# from a given diocese on the same panel

		if ($tourn_settings->{"ncfl"} || $event_settings->{"region_judge_forbid"}) {

			$sql_from_hell .= "
			and not exists(
				select bjr.id from ballot as bjr,judge as j2,school as sr1, school as sr2
				where bjr.panel = panel.id
				and bjr.judge = j2.id
				and j2.school = sr1.id
				and sr2.id = judge.school
				and sr2.region = sr1.region)
			";
		}

		if ($tourn_settings->{"nsda_nats"}) {

			$sql_from_hell .= "
				and not exists(
					select bjr.id from ballot as bjr,judge as j2,school as sr1, school as sr2
					where bjr.panel = panel.id
					and bjr.judge = j2.id
					and j2.school = sr1.id
					and sr2.id = judge.school
					and sr2.district = sr1.district
				)

				and not exists(
					select bjr.id from ballot as bjr,judge as j2,school as sr1, school as sr2
					where bjr.panel = panel.id
					and bjr.judge = j2.id
					and j2.school = sr1.id
					and sr2.id = judge.school
					and sr2.region = sr1.region
				)
			";
		}
	}

	if ($ARGS{"wudc"}) {
		$sql_from_hell .= " order by tab_rating.value DESC, rand () ";
	} elsif ($ARGS{"parlis"}) {
		$sql_from_hell .= " order by parli.value DESC ";
	} elsif ($category_settings->{"tab_ratings"}) {
		$sql_from_hell .= " order by tab_rating.value DESC ";
	}

	my $sth = $dbh->prepare($sql_from_hell);

	$sth->execute($panel_id);

	foreach my $jid (keys %judges) {
		undef $judges{$jid}{"clean"};
		undef $judges{$jid}{"busy"};
	}

	while (
		my ( $judge_id,
			$judge_code, $judge_first, $judge_middle, $judge_last,
			$judge_person, $judge_obligation, $judge_hired,
			$school_id, $school_name, $school_code,
			$region_id, $region_name, $region_code,
			$area,
			$district_id, $district_name, $district_code,
			$tab_rating_value, $parli_value, $diverse_value, $online_hybrid
		) = $sth->fetchrow_array()
	) {

		$judges{$judge_id}{"code"}       = $judge_code;
		$judges{$judge_id}{"first"}      = $judge_first;
		$judges{$judge_id}{"middle"}     = $judge_middle;
		$judges{$judge_id}{"last"}       = $judge_last;
		$judges{$judge_id}{"person"}     = $judge_person;
		$judges{$judge_id}{"obligation"} = $judge_obligation + $judge_hired;

		$judges{$judge_id}{"school"}      = $school_id;
		$judges{$judge_id}{"school_id"}   = $school_id;
		$judges{$judge_id}{"school_name"} = $school_name;
		$judges{$judge_id}{"school_code"} = $school_code;

		$judges{$judge_id}{"area"}        = $area;
		$judges{$judge_id}{"region"}      = $region_id;
		$judges{$judge_id}{"region_id"}   = $region_id;
		$judges{$judge_id}{"region_name"} = $region_name;
		$judges{$judge_id}{"region_code"} = $region_code;
		$judges{$judge_id}{"dioregion"}   = $diocese_region->{$region_id};

		$judges{$judge_id}{"district"}      = $district_id;
		$judges{$judge_id}{"district_name"} = $district_name;
		$judges{$judge_id}{"district_code"} = $district_code;

		$judges{$judge_id}{"tab_rating"} = $tab_rating_value;
		$judges{$judge_id}{"parli"} = $parli_value;
		$judges{$judge_id}{"diverse"} = $diverse_value;
		$judges{$judge_id}{"online_hybrid"} = $online_hybrid;

		$judges{$judge_id}{"clean"}++;
		$judges{$judge_id}{"busy"}++ if $ARGS{"stealable"};

	}

	foreach my $jid (keys %judges) {
		next if $judges{$jid}{"clean"};
		delete $judges{$jid};
	}

	$prep_sth = $dbh->prepare("SET optimizer_switch='semijoin=on'");
	$prep_sth->execute();
	$prep_sth = $dbh->prepare("SET optimizer_switch='materialization=on'");
	$prep_sth->execute();

	$prep_sth->finish();

	return %judges;

</%init>
