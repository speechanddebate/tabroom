<%args>

</%args>
<%init>

	my $tourn = $m->comp("/funclib/current_nationals.mas");
	my $count;

	$m->print("<p>Updating all judges in nationals</p>");
	$m->flush_buffer();

	my $dbh = Tab::DBI->db_Main();

	if ($tourn) {

		my $sth = $dbh->prepare("
			select
				judge.id, judge.first, judge.last, judge.active,
				judge.hired, judge.obligation,
				person.id person_id, person.phone person_phone, person.nsda nsda,
				incomplete.value_text incomplete,
				category.id category_id, category.abbr category_abbr,
				nats_category.value nats_category,
				required_quizzes.value_text required_quizzes,
				tourn.id tourn_id, tourn.start start

			from (judge, category, tourn)

				left join person on judge.person = person.id

				left join judge_setting incomplete
					on incomplete.judge = judge.id
					and incomplete.tag = 'incomplete'

				left join category_setting observers
					on observers.category = category.id
					and observers.tag = 'observers'

				left join category_setting nats_category
					on nats_category.category = category.id
					and nats_category.tag = 'nats_category'

				left join category_setting required_quizzes
					on required_quizzes.category = category.id
					and required_quizzes.tag = 'required_quizzes'

			where 1=1

				and tourn.id = ?
				and tourn.id = category.tourn
				and category.id = judge.category

			group by judge.id
			order by judge.category, judge.last
		");

		$sth->execute($tourn->id);
		my $judges = $sth->fetchall_hash();

		return unless $judges && @{$judges};

		my $quiz_sth = $dbh->prepare('
			select quiz.id, quiz.label, quiz.approval
				from quiz
			where quiz.hidden != 1
		');

		$quiz_sth->execute();
		my $quizzes = $quiz_sth->fetchall_hash();
		my %quiz_by_id = map {$_->{id} => $_ } @{$quizzes};

		my $lastcat;

		foreach my $judge (@{$judges}) {

			next if $judge->{observers};

			unless ($lastcat == $judge->{category_id}) {
				$lastcat = $judge->{category_id};
				$m->print("<p>Checking judges in ".$judge->{category_abbr}."</p>");
				$m->flush_buffer();
			}

			$m->comp("/funclib/nsda/judge_check.mas",
				judge      => $judge,
				dbh        => $dbh,
				quiz_by_id => \%quiz_by_id
			);

			$count++;

			unless ($count % 100) {
				$m->print("<p>Did $count judges</p>");
				Tab::debuglog("<p>Did $count judges</p>");
				$m->flush_buffer();
			}
		}

		undef $count;

		$m->print("<p>Checking school judge burdens</p>");
		$m->flush_buffer();

		foreach my $school ($tourn->schools) {
			$m->comp("/funclib/judgemath/nats_check_judging.mas", school => $school);
			$count++;

			unless ($count % 100) {
				$m->print("<p>Did $count schools</p>");
				$m->flush_buffer();
			}
		}

		Tab::Student->columns(TEMP => "schoolid");
		Tab::Student->set_sql(fn_everyone => "
			select
				student.*, school.id as schoolid
			from student, entry_student es, entry, event, school
				where event.tourn = ?
				and event.id = entry.event
				and entry.id = es.entry
				and es.student = student.id
				and entry.school = school.id
		");

		undef $count;
		my %cache;

		$m->print("<p>Checking student requirements</p>");
		$m->flush_buffer();

		foreach my $student (Tab::Student->search_fn_everyone($tourn->id)) {

			unless ($cache{$student->schoolid}) {
				$cache{$student->schoolid} = Tab::School->retrieve($student->schoolid);
			}

			$m->comp("/funclib/nsda/status_check.mas",
				student => $student,
				school  => $cache{$student->schoolid}
			);
			$count++;

			unless ($count % 100) {
				$m->print("<p>Did $count students</p>");
				$m->flush_buffer();
			}
		}

	}

</%init>
