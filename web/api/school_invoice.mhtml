<%args>
	$api_key        => undef
	$api_id         => undef
	$school_id      => undef
	$tourn_id       => undef
	$payment_memo   => undef
	$payment_amount => undef
</%args>
<%init>

    $m->clear_buffer();
    $r->content_type('application/json');

	my $json = JSON->new->allow_nonref->convert_blessed->utf8->pretty;

	my $person;
	my $tourn;
	my $school;

	$school_id = int($school_id);

	unless ($school_id) {
		my %output = (
			error => "true",
			message => 'No valid School ID was sent'
		);

		$m->print($json->pretty->encode(\%output));
		$m->abort();
	}

	unless ($r->hostname eq "mason.dev.tabroom.com") {

		($person, $tourn) = $m->comp("login_api.mas",
			method    => "api_key",
			person_id => $api_id,
			api_key   => $api_key,
			tourn_id  => $tourn_id,
		);

		unless ($person && $tourn) {
			my %output = (
				error => "true",
				message => 'No valid API user or key sent'
			);

			$m->print($json->pretty->encode(\%output));
			$m->abort();
		}

		$school = Tab::School->retrieve($school_id);

	} else {

		$person = Tab::Person->retrieve(1);
		$school = Tab::School->retrieve($school_id);
		$tourn = $school->tourn;
		$tourn_id = $tourn->id;
	}

	unless ($school > 0) {
		my %output = (
			error => "true",
			message => 'School ID '.$school_id.' does not exist '
		);

		$m->print($json->pretty->encode(\%output));
		$m->abort();
	}

	unless ($school->tourn == $tourn_id) {

		my %output = (
			error => "true",
			message => 'School ID '.$school_id.' is not part of tournament ID '.$tourn_id
		);

		$m->print($json->pretty->encode(\%output));
		$m->abort();
	}

	if ($payment_memo && $payment_amount) {

		$payment_amount = int(100 * $payment_amount);
		$payment_amount = Math::Round::nearest(1, $payment_amount);
		$payment_amount = $payment_amount / 100;

		my $now = DateTime->now();

		my $payment_flag = 0;

		if ($payment_amount < 0) {
			$payment_flag++;
		}

		my $fine = Tab::Fine->create({
			school    => $school->id,
			amount    => $payment_amount,
			tourn     => $tourn_id,
			reason    => $payment_memo,
			levied_at => $now,
			levied_by => $person,
			deleted   => 0,
			payment   => 1
		});

		$payment_amount = $payment_amount * -1;

		my %output = (
			error   => "false",
			message => 'Payment ID '.$fine->id.' registered',
			amount  => $payment_amount,
			memo    => $payment_memo
		);

		$output{"school_id"}   = $school->id;
		$output{"school_name"} = $school->name;
		$output{"tourn_id"}    = $tourn->id;
		$output{"tourn_name"}  = $tourn->name;

		$output{"tourn_start"} = $m->comp('/funclib/showdt.mas',
			dt     => $tourn->start,
			length => "json",
			return => "yep"
		);

		$output{"tourn_end"} = $m->comp('/funclib/showdt.mas',
			dt     => $tourn->end,
			length => "json",
			return => "yep"
		);


		$m->print($json->pretty->encode(\%output));
		$m->abort();

	} else {

		my %output;

		my ($total, $feline_ref) = $m->comp(
			"/funclib/school_fees.mas",
				all    => 1,
				school => $school,
				tourn  => $tourn,
		);

		foreach my $line (@{$feline_ref}) {
			foreach my $key (keys %{$line}) {
				if ($key eq "levied_at") {
					$line->{$key} = $m->comp('/funclib/showdt.mas',
						dt     => $line->{$key},
						length => "json",
						return => 1
					);
				}
			}
		}

		if ($feline_ref) {

			$output{"line_items"}  = $feline_ref;
			$output{"total"}       = $total;
			$output{"school_id"}   = $school->id;
			$output{"school_name"} = $school->name;
			$output{"school_state"} = $school->state;
			$output{"tourn_id"}    = $tourn->id;
			$output{"tourn_name"}  = $tourn->name;

			$output{"tourn_start"} = $m->comp('/funclib/showdt.mas',
				dt     => $tourn->start,
				length => "json",
				return => "yep"
			);

			$output{"tourn_end"} = $m->comp('/funclib/showdt.mas',
				dt     => $tourn->end,
				length => "json",
				return => "yep"
			);
		}

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select
				person.id, person.first, person.middle, person.last, person.email, person.phone
			from (person, contact)
			where contact.school = ?
				and contact.official = 1
				and contact.person = person.id
				and person.no_email != 1
		");

		$sth->execute($school->id);
		$output{"contacts"} = $sth->fetchall_hash();

		$m->print($json->convert_blessed->utf8->encode(\%output));
	}

</%init>

