<%args>
	$person
	$now
	$entry_id   => undef
	$event_id   => undef
	$school_id  => undef
	$student_id => undef
</%args>
<%init>

	my ($school, $student, $school_settings) =
		$m->comp(
			"signup_check.mas",
			person     => $person,
			school_id  => $school_id,
			student_id => $student_id
	);

	my $return_string = "?student_id=$student_id&school_id=$school_id&event_id=$event_id&entry_id=$entry_id";

	my $tourn = $school->tourn;
	my %tourn_settings = $tourn->all_settings();

	my $event = Tab::Event->retrieve($event_id);
	my %event_settings = $event->all_settings();

	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my %entry_settings = $entry->all_settings() if $entry;

	# INDIVIDUALS PART OF THE ENTRY:

	my %clear_student =
		map {$_->id => $_} $m->comp(
			"/funclib/students_evententer.mas",
				event       => $event,
				school      => $school,
				unconfirmed => 1
		);

	my @students = ($student_id);

	my $err;

	unless ($clear_student{$student_id}) {
		my $bad = Tab::Student->retrieve($student_id);
		$err .= $bad->first." ".$bad->last." is not eligile to enter ".$event->name;
	}

	foreach my $count (2 .. $event_settings{"max_entry"}) {

		next unless $ARGS{"student_".$count};

		unless ($clear_student{$ARGS{"student_".$count}}) {
			my $bad = Tab::Student->retrieve($student_id);
			$err .= $bad->first." ".$bad->last." is not eligile to enter ".$event->name;
		}

		push @students, $ARGS{"student_".$count};
	}

	if (scalar @students < ($event_settings{"min_entry"} || 1)) {
		$err .= "You must have a minimum of ".($event_settings{"min_entry"} || 1)." competitors per entry.";
	}

	undef $err if $entry;

	#
	# POSSIBLY REQUIRED DATA:
	#

	my %settings;

	$settings{"signup_by"} = $person->id;

	my $seed = $ARGS{"seed"};

    unless ($seed eq $entry_settings{"registered_seed"}) {
		$settings{"registered_seed"} = $seed;
    }

    if ($seed eq "full") {
		$settings{"pairing_seed"} = 1;
    } elsif ($seed eq "half") {
		$settings{"pairing_seed"} = 2;
    } elsif ($seed eq "free") {
		$settings{"pairing_seed"} = 3;
    } elsif ($event->setting("apda")) {
		$settings{"pairing_seed"} = 4;
    }

	if ($event_settings{"ask_for_titles"}) {
		$settings{"title"} = $ARGS{"title"};
		$err .= "No piece title supplied" unless $ARGS{"title"};
	}

	if ($event_settings{"ask_for_authors"}) {

		$settings{"author"} = $ARGS{"author"};
		$err .= "No piece author supplied" unless $ARGS{"author"};

		if ($tourn_settings{"nsda_nats"} || $tourn_settings{"nsda_ms_nats"}) {

			$settings{"publisher"} = $ARGS{"publisher"};
			$settings{"publish_date"} = $ARGS{"publish_date"};
			$settings{"publish_isbn"} = $ARGS{"publish_isbn"};

			$settings{"publish_print_date"} = $ARGS{"publish_print_date"};
			$settings{"publish_url"} = $ARGS{"publish_url"};

			unless (
					( 	$settings{"publisher"}
						&& $settings{"publish_date"}
						&& $settings{"publish_isbn"}
					)
				||
					(
						$settings{"publish_print_date"}
						&& $settings{"publish_url"}
					)
			) {

				$err .= "Complete publication details missing.  Either the print ";
				$err .= "or the online section must be filled out completely";

			}
		}
	}

	my %quals;

	$settings{"atlarge"} = $ARGS{"atlarge"};
	$settings{"atlarge"} = 0 unless $ARGS{"atlarge"};

    my $at_large_allowed++ if $event_settings{'at_larges'};

	my $required = $event_settings{"ask_quals"};
	my $ask = $required;
	$ask = 15 if $event_settings{"more_quals"};

	my %qualifiers = eval { return %{$entry->setting("qualifiers")}; };

	if (scalar (keys %qualifiers) > $ask) {
		$ask = (scalar (keys %qualifiers));
	}

	TICK:
    foreach my $tick (1 .. $ask) {

        if ($ARGS{"qual_".$tick}) {

			$required--;
            $qualifiers{$tick}{"name"} = $ARGS{"qual_".$tick};
            $qualifiers{$tick}{"result"} = $ARGS{"qualpts_".$tick};

        } elsif ($required > 0 && (not defined $ARGS{"atlarge"})) {
            $err .= " Please supply the required number of qualifiers ";
            $err .= "or mark the entry as at-large." if $at_large_allowed;
			last TICK;
        } else {
			delete $qualifiers{$tick};
		}
    }

	$m->redirect("signup_edit.mhtml".$return_string."&err=$err") if $err;

    my $waitlist = $m->comp(
        "/funclib/waitlist_status.mas",
            event  => $event,
            school => $school
	);

	if ($waitlist) {
		$waitlist = 1
	} else {
		$waitlist = 0;
	}

	my $existed;

	unless ($entry) {

		$entry = Tab::Entry->create({
			event       => $event->id,
			school      => $school->id,
			tourn       => $tourn->id,
			unconfirmed => 1,
			created_at  => $now,
			waitlist    => $waitlist,
			ada         => $ARGS{"ada"},
		});

	} else {

		$entry->ada($ARGS{"ada"});
		$entry->created_at($now);
		$existed++;
	}

	if (keys %qualifiers) {
		$entry->setting('qualifiers', 'json', \%qualifiers);
	} else {
		$entry->setting('qualifiers', '0');
	}

	foreach my $student_id (@students) {

		unless (
			Tab::EntryStudent->search(
				student => $student_id,
				entry   => $entry->id
			)->first
		) {

			Tab::EntryStudent->create({
				student => $student_id,
				entry   => $entry->id
			});
		}
	}

	# Name

	$entry->name(
		$m->comp(
			"/funclib/entry_name.mas",
			entry => $entry
		)
	);

	$entry->update();

	# Settings!
	foreach my $tag (keys %settings) {
		$entry->setting($tag, $settings{$tag});
	}

	# Notifications!
	my $msg;

	unless ($existed) {

		my $subject = $student->first." ".$student->last." tournament signup";
		my $body = "\n".$student->first." ".$student->last." has signed up for ".$tourn->name."\n";

		my $tz = $tourn->tz;
		$tz = $person->tz unless $tz;
		$tz = "UTC" unless $tz;
		my $start = $tourn->start->set_time_zone($tz);
		my $end = $tourn->end->set_time_zone($tz);

		$body .= "\tEvent: ".$event->name."\n";
		$body .= "\tTournament Dates: ".Tab::nicefulldate($start);
		$body .= " to ".Tab::nicefulldate($end) if $end->day != $start->day;
		$body .= "\n";

		$body .= "\nLocation: ".$tourn->city;
		$body .= ", " if $tourn->city;
		$body .= $tourn->state if $tourn->state;
		$body .= $tourn->country unless $tourn->country;
		$body .= "\n";

		if ($school_settings->{"signup_show_fees"}) {

			my $currency = $tourn_settings{"currency"};
			$currency = '$' unless $currency;

			$body .= "Entry fee: ".$event->fee if $event->fee;

			if ($tourn_settings{"per_student_fee"}) {
				$body .= "Per-competitor fee: ".$tourn_settings{"per_student_fee"};
			}

			if ($tourn_settings{"per_person_fee"}) {
				$body .= "Per-person fee: ".$tourn_settings{"per_person_fee"};
			}

			$body .= "\n\n";
		}

		my $counter;

		foreach my $student_id (@students) {

			$counter++;

			$body .= "Competitor ".$counter.": \t";
			$body .= $clear_student{$student_id}->first." ";
			$body .= $clear_student{$student_id}->middle." ";
			$body .= $clear_student{$student_id}->last."\n";

		}

		my $signup_memo = $school->files(tag => "signup")->first;

		if ($signup_memo) {
			$body .= "Info document:\t ".$Tab::s3_url."/".$tourn->id."/signups/".$school->id."/".$signup_memo->filename;
			$body .= "\n\n";
		}

		if ($school_settings->{"signup_notice"}) {

			my $hs = HTML::Strip->new();
			my $clean_text = $hs->parse($school_settings->{"signup_notice"});

			$body .= "\n";
			$body .= $school->name." specific information:";
			$body .= "\n";
			$body .= $clean_text;
			$body .= "\n";

		}

		$body .= "\nIf this is a problem or mistake, please delete the entry on Tabroom.com or contact your coach or team administrator.\n";
		$body .= "\n";

		my @sendtos;

		foreach my $student_id (@students) {

			my $student = $clear_student{$student_id};

			push @sendtos, $student->person if $student->person && $student->person->id;

			if ($school_settings->{"signup_inform_parents"}) {
				foreach my $follower ($student->followers) {
					if ($follower->person && $follower->person->id) {
						push @sendtos, $follower->person;
					}
				}
			}
		}

		my $numberwang = substr($now->epoch, -6, 6);
		my $from_string = $person->first." ".$person->last." via Tabroom <signups".$person->id.'@www.tabroom.com>';
		my $reply_to = $person->first." ".$person->last." <".$person->email.">";

		$m->comp("/funclib/send_notify.mas",
			from     => $from_string,
			reply_to => $reply_to,
			ids      => \@sendtos,
			subject  => $subject,
			body     => $body
		);

		$msg = "Signed up for ".$tourn->name." in ".$event->name."!";
		$msg .= scalar @sendtos." people were notified.";

	} else {

		$msg = " Entry details changed ";
	}

	$m->redirect("signup.mhtml?student_id=$student_id&school_id=$school_id");

</%init>
