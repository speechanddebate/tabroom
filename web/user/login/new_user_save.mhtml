<%args>
	$err        => undef
	$first      => undef
	$last       => undef
	$email      => undef
	$pass1      => undef
	$pass2      => undef
	$phone      => undef
	$state      => undef
	$country    => undef
	$timezone   => undef
	$chapter_id => undef
	$circuit_id => undef
</%args>
<%init>

	unless ($first && $last && $email && $pass1 && $pass2) {
		$err = "A required field was missing.  Please make sure all the required fields, marked with a *, are filled in";
		$m->redirect("/user/login/new_user.mhtml?first=$first&last=$last&email=$email&phone=$phone&err=$err");
	}

	$first = $m->comp("/funclib/save_editor.mas", text => $first);
	$last = $m->comp("/funclib/save_editor.mas", text => $last);

	my $ip .= "Requestor IP is ".$ENV{REMOTE_ADDR}.". ";
	$ip .= "Proxied IP is ".$ENV{"HTTP_X_FORWARDED_FOR"};

	my $sha_check = crypt($Tab::string.$ENV{HTTP_X_FORWARDED_FOR}, '$6$' . $ARGS{salt});

	unless ($sha_check eq $ARGS{sha}) {
		Tab::log("KEYLESS ACCOUNT CREATION ATTEMPT: ".$email." from ".$ip);
		sleep 5;
		$m->comp("/funclib/abort.mas",
			message => "Your account creation request did not originate from Tabroom, <br />and therefore is not permitted."
		);
	}

	use Email::Valid;

    my $salt = $m->comp("/funclib/generate_randomstring.mas");
	my $sha_crypt = crypt($pass1, '$6$' . $salt);
	my $now = DateTime->now;

	#Only you can prevent nitwit kids

	if (index($email, "mrvpt.com") != -1) {
		$m->comp("/funclib/abort.mas",
		message => "mrvpt.com is a throwaway email service that's been used to deface Tabroom and the wiki in the past.  Therefore, you may not use it to create a Tabroom account.");
	}

	$timezone = "UTC" unless $timezone;

	$phone =~ s/[\D_]//g;
	$phone =~ s/^1+(?=[0-9])//;

	$email =~tr/[A-Z]/[a-z]/;
	$email =~ s/\s*//g;
	$email = lc($email);

	my $existing_person = Tab::Person->search( email => $email )->first;

	if ($existing_person) {
		$err = "An account with that email address already exists on this system.  Please have the system email you your password if you have forgotten it.";
		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone");
	}

	if ($phone) {

		my $existing_phone = Tab::Person->search( phone => $phone)->first;

		if ($existing_phone) {
			$err = "An account with that phone number already exists on this system.  Please have the system email you your password if you have forgotten it.  You can also change your email address instead of creating a new account by clicking Profile at top right when you log in.";
			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone");
		}
	}

	unless ($pass1 eq $pass2) {
		$err = "The two passwords supplied did not match.";
		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone");
	}

	my $emailok = eval {
		return Email::Valid->address(
			-address => $email,
			-mxcheck => 1
		) ? 'yes' : 'no';
	};

	if ($emailok ne 'yes') {
		$err = "That email address is not valid.  Please enter a valid address. $emailok";
		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone");
	}

	my $person = Tab::Person->search( email => $email)->first;

	unless ($person) {

		$person = eval {
			return Tab::Person->create({
				first    => $first,
				last     => $last,
				email    => $email,
				state    => $state,
				country  => $country || "US",
				tz       => $timezone || 'America/New_York',
				phone    => $phone || 0,
				password => $sha_crypt
			});
		};

		if ($person) {

			Tab::log("NEW ACCOUNT: $email was created with id ".$person->id.". ".$ip);
			$person->setting("creation", "text", "NEW ACCOUNT: $email was created with id ".$person->id.". ".$ip." at ".$now);

			$m->comp("/funclib/email_confirm.mas",
				person => $person,
				send   => 1,
				return => 1
			);

			if ($chapter_id || $circuit_id) {

				my $chapter = Tab::Chapter->retrieve($chapter_id);

				my $chapter_judge = Tab::ChapterJudge->create({
					first           => $first,
					last            => $last,
					chapter         => $chapter->id,
					retired         => 0,
					person          => $person->id
				});
			}

			$m->comp("login_save.mhtml",
				username => $email,
				password => $pass1,
				sha      => $ARGS{sha},
				salt     => $ARGS{salt},
				return   => "yaskween",
			);

			if ($ARGS{"return"} eq "signups") {
				$m->redirect("/index/tourn/judge_signups.mhtml?category_id=".$ARGS{"category_id"}."&tourn_id=".$ARGS{"tourn_id"});
			}

			$m->redirect("/user/home.mhtml");

		} else {

			$err = "Account creation failed. This error can happen if you already have a Tabroom account, or if you hit submit twice on the account creation form. Please try logging in, or have the system email you your password if you have forgotten it.";
			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone");
		}
	}

</%init>
