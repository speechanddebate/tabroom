<%args>
	$person
	$session_id => undef
</%args>
<%init>

    use REST::Client;
	use MIME::Base64;

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($person) {
		$m->print('{ "error": true, "message": "You are no longer logged in"}');
		$m->abort();
	}

	unless ($session_id) {
		$m->print('{ "error": true, "message": "No Session ID sent"}');
		$m->abort();
	}

	my $session = Tab::Session->retrieve($session_id);

	unless ($session > 0 && $session->id) {
		$m->print('{ "error": true, "message": "No session found for ID '.$session_id.'"}');
		$m->abort();
	}

	unless ($session->person == $person->id || $person->site_admin) {
		$m->print('{ "error": true, "message": "Session ID '.$session_id.' does not belong to you"}');
		$m->abort();
	}

    my %response = (
		error   => 0,
		destroy => $session->id,
		message => "Session from ".$session->timestamp." ended"
    );

	if ($session->push_notify) {
		my $auth_header = encode_base64($Tab::indexcards_user.":".$Tab::indexcards_key);

		my $client = REST::Client->new(
			host => $Tab::indexcards_url
		);

		$client->POST(
			$Tab::indexcards_url.'/user/push/'.$session->push_notify.'/false',
			"{}",
			{
				'Authorization' => "Basic $auth_header",
				'Accept'        => 'application/json',
				'Content-Type'  => 'application/json'
			}
		);
	}

	eval {
		$session->delete();
	};

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
