<%args>
	$person
	$session
	$defaults
	$now
	$first      => undef
	$middle     => undef
	$last       => undef
	$email      => undef
	$phone      => undef
	$street     => undef
	$city       => undef
	$state      => undef
	$country    => undef
	$no_email   => 0
	$zip        => undef
	$postal     => undef
	$pronoun    => undef
	$timezone   => undef
	$please_stop_screaming => 0
</%args>
<%init>

	$m->abort unless $person;
	$m->abort unless $first;
	$m->abort unless $last;
	$m->abort unless $email;

	$email =~ s/\s+//g;
	$email = lc($email);

	my $err;

	my $then = $now->clone();
	$then->subtract( hours => 2 );

	my $token_setting = Tab::PersonSetting->search( person => $person->id, tag => 'pw_token')->first;

	if (not defined $token_setting) {
		my $err = "The password change page key was not found. Please re-do your change request.";
		$m->redirect("profile.mhtml?err=$err");
	}

	if ($token_setting->timestamp < $then) {
		my $err = "The password change page has expired after 2 hours open.  Please re-change your password";
		$m->redirect("profile.mhtml?err=$err");
	}

	unless ($token_setting && $ARGS{'token'}) {
		my $err = "No authentication token sent. Please use only the password change form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");

	} elsif ($token_setting->value_text ne $ARGS{"token"}) {
		my $err = "Authentication token mismatch. Please use only the password change form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");
	}

	$token_setting->delete();

	# Make sure the email is actually an email
	unless (Email::Valid->address( -address => $email, -mxcheck => 0 )) {
		my $err = "$email is not a validly formatted email";
		$m->redirect("/user/login/profile.mhtml?err=$err");
	}

	my $diff;

	if ($email ne lc($person->email)) {

		my $existing = Tab::Person->search(
			email => $email
		)->first;

		if ($existing) {
			my $err = "Email address $email already has an account belonging to: ";
			$err   .= $existing->first." ".$existing->last;
			$m->redirect("/user/login/profile.mhtml?err=$err");
		}

		Tab::log("EMAIL CHANGE: Account ID ".$person->id." changing to ($email) from ".$person->email);
		$diff++;
	}

	my $msg = "\n\tHello! \n";
	my $subject = "Your Tabroom.com email address has been changed";
	my @raw;

	if ($diff) {

		# Notify the old account so they can raise hell if this is wrong.

		$msg .= " Your Tabroom.com email address has been changed from ".$person->email." to ".$email." ";
		$msg .= "on your Tabroom profile.  If you did not attempt to make this change, presumably someone ";
		$msg .= "else has done so while logged into your Tabroom account.  Please notify us at ";
		$msg .= 'help@tabroom.com immediately if you did not authorize or want this change. ';

		$msg .= "\n\n";
		$msg .= "Otherwise, all Tabroom notifications will now go to $email, and you must log into the site ";
		$msg .= "using that address as your login.\n";

		$msg .= "Thank you!\n";
		$msg .= "Tabroom.com, a project of the National Speech & Debate Assocation\n";
		$msg .= "https://www.tabroom.com\n";
		$msg .= "https://www.speechanddebate.org\n";

		push @raw, $person->id;

		my $now = DateTime->now();
		my $numberwang = substr($now->epoch, -6, 6);
		my $from_string = "Tabroom.com Account <accounts_".$numberwang.'@www.tabroom.com>';

		$m->comp("/funclib/send_notify.mas",
			from    => $from_string,
			ids     => \@raw,
			subject => $subject,
			body    => $msg
		);
	}

	$phone =~ s/[\D_]//g;
	$phone =~ s/^1+(?=[0-9])//;

	if ($phone && $phone ne $person->phone) {

		my @others = Tab::Person->search( phone => $phone);

		foreach my $other (@others) {
			next if $other == $person;
			$err .= "<br />" if $err;
			$err .= "Phone number $phone is already in use by another account ".$other->email." and may not be re-used.";
			undef $phone;
		}
	}

	my $name_change;

	if (
		$first ne $person->first
		|| $middle ne $person->middle
		|| $last ne $person->last
	) {
		$name_change++;
	}

	$first = $m->comp("/funclib/save_editor.mas", text => $first);
	$middle = $m->comp("/funclib/save_editor.mas", text => $middle);
	$last = $m->comp("/funclib/save_editor.mas", text => $last);

	$person->first($first);
	$person->middle($middle);
	$person->last($last);

	$person->street($street);
	$person->city($city);
	$person->email($email);
	$person->state($state);
	$person->country($country);
	$person->no_email($no_email);
	$person->zip($zip);
	$person->postal($postal);
	$person->pronoun($pronoun);
	$person->phone($phone);
	$person->tz($timezone);
	$person->update();

	# Let the new email address also know about the change
	if ($diff) {

		my $now = DateTime->now();
		my $numberwang = substr($now->epoch, -6, 6);
		my $from_string = "Tabroom.com Account <accounts_".$numberwang.'@www.tabroom.com>';

		$m->comp("/funclib/send_notify.mas",
			from    => $from_string,
			ids     => \@raw,
			subject => $subject,
			no_web  => 1,
			body    => $msg
		);
	}

	#lulz
	$person->setting("please_stop_screaming", $please_stop_screaming);

	delete $defaults->{"token"};
	$session->default($defaults);

	Tab::log("PROFILE CHANGE: Account ID ".$person->id." ($email) was modified from IP address ".$ENV{HTTP_X_FORWARDED_FOR});

	$msg = "Changes saved";

	if ($diff) {
		$m->comp("/funclib/email_confirm.mas",
			person => $person,
			send   => 1
		);
	}

	if ($name_change) {
		$msg .= " Your name has changed.  Do you want to change competitor and judge records to match?";
		$m->redirect("/user/login/name_check.mhtml?msg=$msg&err=$err");
	}

	$m->redirect("/user/login/profile.mhtml?msg=$msg&err=$err");

</%init>
