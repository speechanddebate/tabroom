<%args>
	$username   => undef
	$password   => undef
	$tourn_id   => undef
	$session_id => undef
	$url        => undef
	$salt       => undef
	$sha        => undef
</%args>
<%flags>
	inherit => undef
</%flags>
<%init>

	my $now = DateTime->now;

	my $session;
	my $person;
	my $sha_user;

	my $log = $now->mdy('/')." ".$now->hms;
	my $ip = $ENV{"HTTP_X_FORWARDED_FOR"};

	unless ($ip) {
		$ip = $ENV{"REMOTE_ADDR"};
	}

	my $sha_check = crypt($Tab::string, '$6$' . $salt);

	unless ($sha_check eq $sha) {
		Tab::log("KEYLESS LOGIN ATTEMPT: ".$username." from ".$ip);
		sleep 5;
		$m->comp("/funclib/abort.mas", message => "Your request did not originate from Tabroom.");
	}

	if ($session_id) {

		$session = Tab::Session->retrieve($session_id);
		$person = $session->person;
		$log .= " Login attempt via cookie by ".$person->email." from ".$ip." ...." if $session->person;

	} else {

		$log .= " Login attempt by ".$username." from ".$ip." ....";

		$username =~ tr/[A-Z]/[a-z]/;
		$username =~ s/\s+//g;
		$password =~ s/\s+$//g;  #only you can prevent trailing whitespace.

		unless ($username) {
			my $err = "You must enter an email address or username.  Please try again.";
			Tab::log("Failed: no username entered. $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		unless ($password) {
			my $err = "You must enter a password.  Please try again.";
			Tab::log("Failed: blank password.  $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		$person = Tab::Person->search(email => $username)->first;

		unless ($person) {
			my $err = "Your email and/or password was not correct.  Please try again, ";
			$err .= "or use the Forgot Password link to refresh your password";

			Tab::log("Failed: no such person. $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		if ($person->setting("banned")) {
			my $err = "You are not permitted access to Tabroom";
			Tab::log("REVOKED USER LOGIN: $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		my $db_sha_crypt = $person->password;
		my $sha_crypt = crypt($password, $db_sha_crypt) if $db_sha_crypt;

		my $pass_ok;

		if ($sha_crypt && ($sha_crypt eq $db_sha_crypt)) {
			$pass_ok++;
		}

		if ($pass_ok) {

			# To maintain state, the cookie sha keys are encoded using a random
			# string set by the site.

			$session = Tab::Session->create( {
				person     => $person->id,
				ip         => $ip,
			});

			$salt = $m->comp("/funclib/generate_randomstring.mas");
			$sha_user = crypt($session->id.$Tab::string, '$6$'.$salt);
			$session->userkey($sha_user);
			$session->update();

			eval {
				$person->setting("last_login_ip", $ip);
			};

			# I'm getting tired of random lock condition emails that Perl does
			# not handle so this is me pressing the "fuck it make it work and
			# shut up" button.

			eval {
				$person->setting("last_login_ip", $ip);
			};

		} else {

			sleep 5;

			my $err = "Your login and/or password was not correct.  Please try again, or use the Forgot Password link to refresh your password";

			eval {
				$person->setting("last_attempt", "date", $now);
				$person->setting("last_attempt_ip", $ip);
				$person->setting("last_attempt_agent", $ENV{HTTP_USER_AGENT});
			};

			Tab::log("Failed: wrong password. $log.  Attempt from $ip");
			$m->redirect("/user/login/login.mhtml?err=$err");

		}
	}

	# let ppl use their computer & phone, but not share with the world...
	my $allowed_sessions = 3;

	# Admins need more:
	$allowed_sessions = 6 if $person->site_admin;

	# If you know enough to change this code go ahead and add yourself for more
	# login sessions.

	$allowed_sessions = 10 if $person->id == 1;
	$allowed_sessions = 5 if $person->id == 509488;
	$allowed_sessions = 5 if $person->id == 489476;

	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
		$sess->delete() unless $allowed_sessions;
		$allowed_sessions--;
	}

	my $result;
	my $method = substr($Tab::url_prefix, 0, 5);

	my $secure = 0;
	if ($method eq "https") {
		$secure = 1;
	}

	#Clear out some older stuff that may interfere

	my $tokencookie = Apache2::Cookie->new(
		$r,
		-name     => $Tab::cookie_name || 'TabroomToken',
		-value    => $sha_user,
		-expires  => '+1024h',
		-domain   => $Tab::cookie_domain,
		-secure   => $secure,
		-httponly => 1,
		-path     => '/'
	);

	$tokencookie->bake($r);

	$log .= " ...Succeeded!";
	Tab::log("$log");

	$person->accesses($person->accesses + 1);
	$person->last_access($now);
	$person->update();

	if ($ARGS{"return"} eq "singups" || $ARGS{"return"} eq "judgesign") {
		$m->redirect("/index/tourn/judge_signups.mhtml?category_id=".$ARGS{"category_id"}."&tourn_id=".$ARGS{"tourn_id"}."&key=".$ARGS{'key'});
	}

	if ($ARGS{"return"}) {
		return 1;
	}


    $m->redirect("https://$url") if $url;
    $m->redirect("/index/register.mhtml?tourn_id=$tourn_id") if $tourn_id;
    $m->redirect("/user/home.mhtml");

</%init>

