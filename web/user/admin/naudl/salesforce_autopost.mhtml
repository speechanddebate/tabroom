<%args>
	$person          => undef
	$person_settings => undef
	$tourn_id        => undef
	$testing         => undef
	$download        => undef
	$now
	$dbh
</%args>
<%init>

	use MIME::Base64;
	use REST::Client;
	use Data::Dumper;

	$m->clear_buffer();
	$r->content_type('application/json');

	if ($download) {
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=NAUDLData.json";
	}

	my $data_sample;

	if ($tourn_id) {
		unless (
			$person
			&& $person_settings
			&& (
				$person_settings->{"naudl_admin"}
				|| $person_settings->{"nsda_admin"}
				|| $person->site_admin
			)
		) {
			$m->comp("/funclib/abort.mas",
				warning => "You do not have access to perform that function."
			);
		}
	}

	my $nowstring = $now->ymd('-');
	my $date_limit = "2024-07-01 00:00:00";
	my $result_text;

	Tab::Tourn->columns(TEMP => "naudl_league");

	Tab::Tourn->set_sql( naudl_oneoff => "
		select
			tourn.*, naudl.value as naudl_league
		from (tourn, tourn_circuit, circuit)
			left join circuit_setting naudl
				on circuit.id = naudl.circuit
				and naudl.tag = 'naudl_league_code'
		where tourn.id = ?
			and tourn.id = tourn_circuit.tourn
			and circuit.id = tourn_circuit.circuit
		group by tourn.id
	");

	Tab::Tourn->set_sql( naudl_attendance => "
		select
			tourn.*, naudl.value as naudl_league
		from (tourn, tourn_circuit, circuit)
			left join circuit_setting naudl
				on circuit.id = naudl.circuit
				and naudl.tag = 'naudl_league_code'

		where tourn.start > ?
			and tourn.end < NOW()
			and tourn.hidden != 1
			and tourn.id = tourn_circuit.tourn
			and circuit.id = tourn_circuit.circuit

			and not exists (
				select tourn_setting.id
				from tourn_setting
				where tourn_setting.tourn = tourn.id
				and tourn_setting.tag = 'naudl_processed'
			)

			and exists (
				select school.id
				from school, chapter, chapter_circuit, region, circuit_setting
				where school.tourn = tourn.id
				and school.chapter = chapter.id
				and chapter.naudl = 1
				and chapter_circuit.chapter = chapter.id
				and chapter_circuit.region = region.id
				and chapter_circuit.circuit = circuit_setting.circuit
				and circuit_setting.tag = 'naudl'
			)

		group by tourn.id
		order by tourn.id desc
	");

	my @tourns;

	if ($tourn_id) {

		@tourns = Tab::Tourn->search_naudl_oneoff($tourn_id);
		Tab::log("Posting NAUDL results for ".$tourns[0]->id." ".$tourns[0]->name);

	} else {
		@tourns = Tab::Tourn->search_naudl_attendance($date_limit);
	}

	my %json_tourns = ();

	my $password = $Tab::naudl_password;
#	Not needed where the IP ranges are permitted
#	$password .= $Tab::naudl_token;

	my $query = "curl https://login.salesforce.com/services/oauth2/token";
	$query .= " -d 'grant_type=password' -d 'client_id=$Tab::naudl_client_id' ";
	$query .= " -d 'client_secret=$Tab::naudl_client_secret' ";
	$query .= " -d 'username=$Tab::naudl_username' -d 'password=$password' ";

	my $response = `$query`;
	my $response_data = JSON::decode_json($response);

	if ($testing) {
		foreach my $key (keys %{$response_data}) {
			$m->print("<p> Key $key value ".$response_data->{$key}."</p>");
		}
		$m->flush_buffer();
	}

	my $client = REST::Client->new(
		host => $response_data->{"instance_url"}
	);

	foreach my $tourn (@tourns) {

		my %posted_tournaments;
		my $league = $tourn->naudl_league;
		$league = "a0IE0000004hec4" unless $league;

		my $location = $tourn->city.", " if $tourn->city;
		$location .= $tourn->state;

		my $tourn_name = $tourn->name;
		$tourn_name =~ s/[^\w\s]//g;
		$location =~ s/[^\w\s]//g;

		my %tourn_info = (
			TournID         => "TR".$tourn->id,
			Name            => $tourn_name,
			Location        => $location,
			Tournament_Date => DateTime::Format::MySQL->format_datetime($tourn->start),
			League          => $league
		);

		push @{$posted_tournaments{"posted_tournaments"}}, \%tourn_info;

		unless ($testing) {

			if ($download) {
				$data_sample->{$Tab::naudl_tourn_endpoint}{$tourn} = \%posted_tournaments;
			} else {
				$client->POST(
					$Tab::naudl_tourn_endpoint,
					JSON::encode_json(\%posted_tournaments),
					{
						'Authorization' => "OAuth ".$response_data->{"access_token"},
						'Content-Type'  => 'application/json',
						'Accept'        => 'application/json'
					}
				);

				my $response = eval {
					return JSON::decode_json($client->responseContent());
				};

				if ($response->{"success"} eq "true") {
					$result_text .= "\nTournaments posting SUCCEEDED for $tourn ".$tourn_name."\n";
				} elsif ($response->{"message"} =~ /DUPLICATE_VALUE/) {
					$result_text .= "\nTournaments posting DUPLICATED for $tourn ".$tourn_name."\n";
					$tourn->setting("naudl_processed", "date", $now);
				} else {
					$result_text .= "\nTournaments posting FAILED for $tourn ".$tourn_name.":\n";
					$tourn->setting("naudl_processed", "date", $now);
				}

				if ($response) {
					foreach my $key (keys %{$response}) {
						$result_text .= "\t$key: ".$response->{$key}."\n";
					}
				} else {
					$result_text .= "Salesforce reply malformed: ".$client->responseContent();
				}

				$result_text .= "\n";
			}

		} else {

			$result_text .= "Tournament data:\n";
			$result_text .= JSON::encode_json(\%posted_tournaments);

		}

		my ($new, $updated, $sta) = $m->comp(
			"salesforce_tournament.mhtml",
				tourn   => $tourn,
				testing => $testing
		);

		my @done_student_ids;

		unless ($testing) {

			if ($new) {
				foreach my $student (@{$new->{"students_from_tabroom"}}) {

					if ($download) {
						$data_sample->{$Tab::naudl_student_endpoint}{$student->{"tabroomid"}}
							= &post_student($student, $client, $response_data, $download);
					} else {
						$result_text = &post_student($student, $client, $response_data, $download);
					}
				}
			}

			if ($updated) {

				$client->PUT( $Tab::naudl_student_endpoint,
					JSON::encode_json($updated),
					{
						'Authorization' => "OAuth ".$response_data->{"access_token"},
						'Content-Type'  => 'application/json',
						'Accept'        => 'application/json'
					}
				);

				my $response = eval {
					return JSON::decode_json($client->responseContent());
				};

				if ($@) {
					Tab::debuglog("Update $updated not posted.  Reply was");
					Tab::debuglog($client->responseContent());
					Tab::debuglog($@);
				} elsif ($response->{"success"} eq "true") {

					$result_text .= "\nStudent update posting SUCCEEDED!\n";

					foreach my $student (@{$updated->{"students_from_tabroom"}}) {

						my $student_id = $student->{"tabroomid"};
						$student_id =~ s/TR//g;

						my $already = Tab::StudentSetting->search(
							student => $student_id,
							tag     => "naudl_updated"
						)->first;

						if ($already) {

							$already->value_date($now);
							$already->update();

						} else {

							Tab::StudentSetting->create({
								student    => $student_id,
								tag        => "naudl_updated",
								value      => "date",
								value_date => $now
							});
						}
					}

				} else {
					$result_text .= "\nStudent update posting FAILED:\n";
				}

				foreach my $key (keys %{$response}) {
					$result_text .= "\t$key: ".$response->{$key}."\n";
				}

			}

			if ($sta) {

				if ($download) {
					$data_sample->{$Tab::naudl_sta_endpoint}{$tourn} = $sta;
				} else {

					$client->POST(
						$Tab::naudl_sta_endpoint,
						JSON::encode_json($sta),
						{
							'Authorization' => "OAuth ".$response_data->{"access_token"},
							'Content-Type'  => 'application/json',
							'Accept'        => 'application/json'
						}
					);

					my $answer = $client->responseContent();

					my $response = eval {
						return JSON::decode_json($answer);
					};

					unless ($response) {
						$result_text .= "\nErrors encountered: $answer";

						my %err = eval {
							return %{$answer};
						};

						if (keys %err) {
							foreach my $key (keys %err) {
								$result_text .= "\n $key value ".$err{$key};
							}
						}
					}

					my %response_hash = eval {
						return %{$response};
					};

					my @response_array = eval {
						return @{$response};
					};

					$result_text .= "\n\nSTA Update post:\n";

					if (@response_array) {

						$result_text .= "\nErrors encountered:";
						foreach my $line (@{$response}) {
							$result_text .= "\n".$line;
						}

					} elsif (%response_hash && $response_hash{"success"} eq "true") {
						$result_text .= "\nStudent Tournament Records posting SUCCEEDED!\n";
						$tourn->setting("naudl_processed", "date", $now);
					} else {
						$result_text .= "\nStudent Tournament Records FAILED:\n";
					}

					if (%response_hash) {
						foreach my $key (keys %response_hash) {
							$result_text .= "\t$key: ".$response->{$key}."\n";
						}
					}
				}
			}

		} else {

			if ($new) {
				$result_text .= "\n\n$tourn New students:\n";
				$result_text .= JSON::encode_json($new);
			}

			if ($updated) {
				$result_text .= "\n\n$tourn Updated students:\n";
				$result_text .= JSON::encode_json($updated);
			}

			if ($sta) {
				$result_text .= "\n\n$tourn Student attendance:\n";
				$result_text .= JSON::encode_json($sta);
			}
		}
	}

	if ($Tab::naudl_practice_endpoint && $now->year > 2024 && $now->month > 6) {

		my ($practices, $more_newbies) = $m->comp("practice.mas");
		my $sth = $dbh->prepare("update practice set processed = 1 where id = ?");

		unless ($testing) {

			if ($more_newbies) {
				foreach my $student (@{$more_newbies->{"students_from_tabroom"}}) {
					if ($download) {
						$data_sample->{$Tab::naudl_student_endpoint}{$student->{"tabroomid"}}
							= &post_student($student, $client, $response_data, $download);
					} else {
						$result_text = &post_student($student, $client, $response_data, $download);
					}
				}
			}

			if ($practices) {

				foreach my $practice (@{$practices}) {

					if ($download) {

						$data_sample->{$Tab::naudl_practice_endpoint}{$practice->{practiceid}} = $practice;

					} else {

						$client->POST(
							$Tab::naudl_practice_endpoint,
							JSON::encode_json($practice),
							{
								'Authorization' => "OAuth ".$response_data->{"access_token"},
								'Content-Type'  => 'application/json',
								'Accept'        => 'application/json'
							}
						);

						my $answer = $client->responseContent();
						my $response = JSON::decode_json($answer);

						my %response_hash = eval {
							return %{$response};
						};

						my @response_array = eval {
							return @{$response};
						};

						$result_text .= "\n\nPractice Update post:\n";

						if (@response_array) {

							$result_text .= "\nErrors encountered:";
							foreach my $line (@{$response}) {
								$result_text .= "\n".$line;
							}

						} elsif (%response_hash && $response_hash{"success"} eq "true") {
							$result_text .= "\nPractice Records posting SUCCEEDED!\n";
							$sth->execute($practice->{"practiceid"});
						} else {
							$result_text .= "\nStudent Tournament Records FAILED:\n";
						}

						if (%response_hash) {
							foreach my $key (keys %response_hash) {
								$result_text .= "\t$key: ".$response->{$key}."\n";
							}
						}
					}
				}
			}

		} else {

			$result_text .= "\n\nPractices data:\n";
			$result_text .= JSON::encode_json($practices);
		}
	}

	if ($download) {

		my $response = {
			error   => \0,
			message => "Data Sample Downloading",
			json    => $data_sample,
		};

		$m->print(JSON::encode_json($response));
		$m->abort();

	} elsif ($testing) {

		$m->print($result_text);
		$m->abort();

	} elsif (@tourns) {

		my $subject = "Tabroom NAUDL data post";
		my $numberwang = substr($now->epoch, -6, 6);
		my $from = "Tabroom NAUDL Data <naudldata\@www.tabroom.com>";

		Tab::Person->set_sql( naudl_admins => "
			select person.id
				from person, person_setting
			where person.id = person_setting.person
				and person_setting.tag = 'naudl_admin'
		");

		my @admins = Tab::Person->search_naudl_admins();

		$m->comp("/funclib/send_notify.mas",
			from    => $from,
			tourn   => $tourn_id,
			sender  => $person,
			ids     => \@admins,
			subject => $subject,
			body    => $result_text
		);

		if ($tourn_id) {

			my @replacements;
			push @replacements,  { id => $tourn_id."_date", content => $nowstring };

			my %response = (
				error   => \0,
				message => $tourns[0]->name." re-posted at $nowstring",
				replace => \@replacements
			);

			$m->print(JSON::encode_json(\%response));
			$m->abort();

		} else {

			my %response = (
				error   => \0,
				message => $result_text
			);
			$m->print(JSON::encode_json(\%response));
			$m->abort();
		}

	} else {

		my %response = (
			error   => \1,
			message => "No tournament found with that ID"
		);
		$m->print(JSON::encode_json(\%response));
		$m->abort();

	}

	sub post_student {

		my ($student, $client, $response_data, $download) = @_;

		return unless $student;
		return unless $client;
		my %student_record = ();

		push @{$student_record{"students_from_tabroom"}}, $student;

		if ($download) {

			return \%student_record;

		} else {

			$client->POST(
				$Tab::naudl_student_endpoint,
				JSON::encode_json(\%student_record),
				{
					'Authorization' => "OAuth ".$response_data->{"access_token"},
					'Content-Type'  => 'application/json',
					'Accept'        => 'application/json'
				}
			);

			my $response = eval {
				return JSON::decode_json($client->responseContent());
			};

			if ($@) {
				eval {
					Tab::debuglog($@);
					Tab::debuglog(JSON::encode_json(\%student_record));
					Tab::debuglog($client->responseContent());
				};
				return;
			}

			my $result_text;

			if ($response->{"success"} eq "true") {

				$result_text .= "\nNew students posting SUCCEEDED!\n";

				my $student_id = $student->{"tabroomid"};
				$student_id =~ s/TR//g;

				my $already = Tab::StudentSetting->search(
					student => $student_id,
					tag     => "naudl_updated"
				)->first;

				if ($already) {

					$already->value_date(DateTime->now());
					$already->update();

				} else {

					Tab::StudentSetting->create({
						student    => $student_id,
						tag        => "naudl_updated",
						value      => "date",
						value_date => DateTime->now()
					});
				}

			} elsif ($response->{"message"} =~ /DUPLICATE_VALUE/) {

				$result_text .= "Record exists for ".$student->{"tabroomid"}."\n";

			} else {

				$result_text .= "\nNew students posting FAILED:\n";
				$result_text .= "\nInput:\n";
				$result_text .= JSON::encode_json(\%student_record);
			}

			foreach my $key (keys %{$response}) {
				$result_text .= "\t$key: ".$response->{$key}."\n";
			}

			return $result_text;

		}
	}

</%init>
