<%args>
	$person
	$session
	$person_settings
	$date => undef
	$dbh
	$now
</%args>
<%init>

	if ($session->su > 0) {
		$m->comp("/funclib/abort.mas",
			message => "You may not log into the cloud server admin while logged in as another user"
		);
	}

	my $blank_setting_sth = $dbh->prepare("
		delete setting.*
			from tabroom_setting setting
		where setting.tag IN ('min_servers', 'max_servers')
			and setting.value_date < CURRENT_TIMESTAMP
	");

	$blank_setting_sth->execute();

	my $setting_sth = $dbh->prepare("
		select
			person.id person_id, person.first, person.last, person.email,
			setting.id, setting.tag, setting.value, setting.value_date,
			setting.timestamp

		from tabroom_setting setting
			left join person on person.id = setting.person
		where 1=1
			and setting.tag IN ('min_servers', 'max_servers')
	");

	$setting_sth->execute();

	my $all_settings = $setting_sth->fetchall_hash();

	my %settings = map {$_->{tag} => $_} @{$all_settings};

	foreach my $key (keys %settings) {

		if ($settings{$key}{value_date}) {
			$settings{$key}{date} = DateTime::Format::MySQL->parse_datetime($settings{$key}{value_date});
			$settings{$key}{date}->set_time_zone('UTC');
			$settings{$key}{date}->set_time_zone('America/Chicago');
		}

		if ($settings{$key}{timestamp}) {
			$settings{$key}{stamp} = DateTime::Format::MySQL->parse_datetime($settings{$key}{timestamp});
			$settings{$key}{stamp}->set_time_zone('UTC');
			$settings{$key}{stamp}->set_time_zone('America/Chicago');
		}
	}

	my $default = $now->clone();
	$default->add(hours => 8);
	$default->set_time_zone('America/Chicago');
	my $default_string = $default->mdy('/');

</%init>

	<& menu.mas,
		person          => $person,
		person_settings => $person_settings,
		whoami          => "servers"
	&>

	<div class="main">

		<div class="full flexrow ltborderbottom padvert">
			<span class="half nospace">
				<h4 class="nospace">
					Current Tabroom Server Status
				</h4>
			</span>
			<span class="half rightalign">
				<p class="semibold purpletext"
					style="color: var(--medium-purple);"
				>The Burdt Button&trade;</p>
				<p>Used by <% $person->last %></p>
			</span>
		</div>

		<div class="full flexrow ltborderbottom martopmore">
			<span class="third">
				<h6>
					User Numbers
				</h6>
			</span>
			<span class="twothirds italic rightalign">
				For tournaments running now or starting over the next 24 hours
			</span>
		</div>

		<div class='flexrow row'>
			<span class="third semibold padvert padleft">
				Total Tournaments
			</span>

			<span
				class = "sixth rightalign padrightmore"
				id    = "total_tournaments"
			>
			</span>

			<span class="third semibold padleft">
				Active Users, Last 24 Hours
			</span>

			<span
				class = "sixth rightalign padrightmore"
				id    = "active_users"
			>
			</span>
		</div>

		<div class='flexrow row'>
			<span class="third semibold padvert padleft">
				Tournament Competitors
			</span>

			<span
				class = "sixth"
			>
				<div class="full flexrow padbottomless">
					<span
						class = "half rightalign padrightmore"
						id    = "active_students"
					></span>
					<span
						class = "half padleft smaller"
					>live</span>
				</div>
				<div class="full flexrow">
					<span
						class = "half rightalign padrightmore"
						id    = "online_students"
					></span>
					<span
						class = "half padleft smaller"
					>online (x2)</span>
				</div>
			</span>

			<span class="third semibold padleft">
				Tournament Judges
			</span>

			<span
				class = "sixth rightalign padrightmore"
				id    = "active_judges"
			>
			</span>
		</div>

		<div class='flexrow row'>
			<span class="third semibold padvert padleft">
				Total Potential Users
			</span>

			<span
				class = "sixth rightalign padrightmore"
				id    = "total_users"
			>
			</span>

			<span class="third semibold padleft">
				Server Count Target
			</span>

			<span
				class = "sixth rightalign padrightmore"
				id    = "server_target"
			>
			</span>
		</div>

		<div class="full flexrow ltborderbottom padvert padtopmore">
			<span class="half">
				<h6 class="nospace">
					Current Server Status
				</h6>
			</span>
			<span class="quarter rightalign">
				Total CPU:
				<span id="total_cpu" class="inline padleft"></span>%
			</span>

			<span class="quarter rightalign">
				Total Memory:
				<span id="total_memory" class="inline padleft"></span>%
			</span>

		</div>

		<div class='flexrow full semibold ltyellow'>

			<span class="sixth padleft">
				Server
			</span>

			<span class="tenth centeralign smallish">
				State
			</span>

			<span class="tenth centeralign smallish" title="In Days">
				Up
			</span>

			<span class="sixth centeralign smallish">
				<div class="full ltborderbottom padvertless">
					CPU %
				</div>
				<div class="full nospace flexrow">
					<span class="third">
						1m
					</span>
					<span class="third">
						5m
					</span>
					<span class="third">
						15m
					</span>
				</div>
			</span>

			<span class="eighth centeralign smallish">
				<div class="full ltborderbottom padvertless">
					Memory %
				</div>

				<div class="full nospace flexrow">
					<span class="half">
						RAM
					</span>

					<span class="half">
						Swap
					</span>
				</div>
			</span>

			<span class="seventh centeralign smallish">
				Mason
			</span>

			<span class="seventh centeralign smallish">
				API
			</span>

			<span class="fifteenth centeralign smallish" title="Reboot Machine">
				REB
			</span>
		</div>

		<div id="server_status">

		</div>

		<div class="full flexrow martopmore padvertless ltborderbottom">
			<span class="half">
				<h6 class="nospace">
					Change Server Count
				</h6>
			</span>
			<span class="half rightalign italic">
				Minimum total is 2. Maximum is <% $Tab::tabweb_cap %>.
			</span>
		</div>

		<div class="row flexrow">
			<span class="quarter padleftmore">
				Manually Increase tabwebs by
			</span>

			<span class="tenth">
				<input
					type = "number"
					id   = "increase_count"
					min  = 0
				>
			</span>

			<span class="twentieth">
			</span>

			<span class="tenth">
				<button
					class   = "buttonwhite bluetext invert semibold smallish padvertless full"
					onClick = "increaseCount();"
				>Launch</button>
			</span>

			<span class="quarter padleftmore">
				Manually Decrease tabwebs by
			</span>

			<span class="tenth">
				<input
					type = "number"
					id   = "decrease_count"
					min  = 0
				>
			</span>

			<span class="twentieth">
			</span>

			<span class="tenth rightalign">
				<button
					class   = "buttonwhite bluetext invert semibold smallish padvertless full"
					onClick = "decreaseCount();"
				>Destroy</button>
			</span>
		</div>

		<div class="full flexrow martopmore padvertless ltborderbottom">
			<span class="third">
				<h6 class="nospace">
					Adjust autoscaler limits
				</h6>
			</span>

			<span class="third centeralign italic">
				Times are in US Central Time
			</span>

			<span class="third rightalign italic">
				Use this to force more than current server count
			</span>
		</div>

		<form action="server_save.mhtml" method="post">

		<div class="row flexrow">
			<span class="quarter padleftmore">
				Set autoscale minimum to
			</span>

			<span class="twenty">
				<input
					type  = "number"
					id    = "min_servers"
					name  = "min_servers"
					value = "<% $settings{min_servers} ? $settings{min_servers}{value} : 2 %>"
					min   = '2'
				>
			</span>

			<span class="tenth padleft centeralign">
				Until
			</span>

			<span class="eighth">
				<& "/funclib/datepicker.mas",
					id => "min_servers_date"
				&>

				<input
					type        = "text"
					class       = "dateinput"
					name        = "min_servers_date"
					id          = "min_servers_date"
					size        = "7"
					value       = "<% $settings{min_servers} ? $settings{min_servers}{date}->mdy('/') : "" %>"
					placeholder = "<% $default_string %>"
				>
			</span>

			<span class="eighth">
				<&
					"/funclib/timepicker.mas",
					name        => "min_servers_time",
					time        => ($settings{min_servers} ? $settings{min_servers}{date} : "" ),
					size        => 10,
					placeholder => $default
				&>
			</span>

			<span class="quarter smaller italic">
				<% $settings{min_servers} ? "Set by ".$settings{min_servers}{email} : "" %>
				<br />on <& "/funclib/showdt.mas",
					format => "murica_short",
					dt     => $settings{min_servers}{stamp},
					tz     => "America/Chicago",
					at     => 1,
				&>
			</span>

			<span class="eighth rightalign padrightmore">
				<input
					type  = "submit"
					class = "thin semibold"
					value = "Save Min"
				>
			</span>
		</div>

		</form>

		<div class="full flexrow martopmore padvert ltborderbottom">
			<span class="half">
				<h5 class="nospace">
					Some Notes
				</h5>
			</span>
			<span class="half rightalign semibold">
				The Nerd to English Dictionary
			</span>
		</div>

		<h6>CPU</h6>

		<p>
			CPU Load figures reflect the number of processes actively running,
			or those waiting to be executed.  The time windows cover the last
			minute, the last 5, or the last 15 minutes.  If these figures get
			much above 150%, that server has more jobs than it can handle
			presently. If only one machine is running at 200% or more for a
			while, consider rebooting just that machine; it probably just has a
			stuck job on it. If ALL machines are running beyond capacity, then
			we likely have more traffic than our present machines can handle,
			and you should consider spinning up more.
		</p>

		<p>
			The three figures are given so you can see the trendline of load on
			the machine. If you find the 1m figures are low, 5m is higher, and
			15m is very high then the machine WAS under load, but it's getting
			better. The opposite pattern means our doom is growing.
		</p>

		<h6>Memory</h6>

		<p>
			Memory usage can often stay at or near 100%, because machines that
			have been up for a long time will release memory only when another
			job asks for it. The tab-db machine in particular will almost
			always use 100% of its available memory; the system keeps the
			results of queries in memory in case someone runs the exact same
			query, unless some other query needs that memory.
		</p>

		<p>
			The real test of memory usage is the Swap Used figure. Swap is used
			when the machine actually needs more memory than it has to run its
			present jobs. It responds by writing some of what it needs to disk
			instead. Disk is many times slower than memory, so that hurts
			performance a lot.
		</p>

		<p>
			Some swap usage is typical for rarely-accessed data, but a machine
			using 50% or more of its swap, is likely overloaded and under
			strain, especially if load is also going up. Again, if one tabweb
			machine is doing that, a reboot can help. If all of them are, then
			launch more machines.
		<p>

		<h6>What are those square icons</h6>

		<p>
			Actual Tabroom services are served by four separate services per
			machine, called containers.  The four containers for each tabweb
			instance are listed under "Mason" for legacy Frontend code, and
			"API" for the newly written backend code. Both are essential for
			Tabroom operations.  Each square will be gray without data, green
			if they are in active service, orange if they are failing and red
			if they are confirmed failed.
		<p>

		<p>
			If you have a couple of these that have failed on one machine you
			can reboot that machine to restore them.  If these are periodically
			failing, then that indicates some sort of bug that will require
			surgery from Palmer or Hardy.
		<p>

		<h6>Which hosts do what?</h6>

		<p>
			haproxy is the border gateway that governs network connections
			between the outside world and all NSDA services. We've actually
			never seen it be the weak point before, but in theory it could be.
			If it is overwhelmed and everything else is fine, then Palmer or
			Hardy need to fix it; automatic reboots of that service are too
			risky.
		</p>

		<p>
			The tab-db machine is the central database server for all
			Tabroom. Its workload cannot be spread among multiple hosts for
			various reasons, though this will be more possible after the
			rewrite. If tab-db is under heavy CPU strain, and the tabweb
			machines are not, then that usually means some badly written
			queries are causing the issue and it has to be fixed by Palmer or
			Hardy. If this machine is swapping a lot and the tabweb servers are
			fine, then the database itself needs a restart (not the machine,
			just the service) which is a scary enough process that I haven't
			automated it yet.
		</p>

		<p>
			tabroom-replica is a running backup replica of the database. It is
			a much less powerful machine, and will often show heavy load numbers
			because backups are taken from this machine. But until we deploy
			the rewrite, the tabroom-replica machine's slow performance cannot
			affect the Tabroom site itself.
		</p>

		<p>
			And the tabwebs are the worker bees that do the heavy lifting to
			serve Tabroom pages. These instances are the ones that are most
			likely to be overloaded by a lot of traffic and can be scaled up
			(to handle more traffic) and back down when the weekend is over to
			save on costs.
		</p>

	</div>

	<script>

		$(document).ready( () => {
			checkTabroomUsage();
			serverList(serverLoad);
			setInterval(serverList, 20000);
			setInterval(checkTabroomUsage, 100000);
			setInterval(serverLoad, 10000);
		});

		function checkTabroomUsage() {

			$.ajax({
				url         : '<% $Tab::indexcards_url %>/glp/servers/usage',
				type        : 'GET',
				crossDomain : true,
				xhrFields   : {
					withCredentials : true
				},
				success : (usage) => {
					$(`#active_judges`).text(usage.judges);
					$(`#active_students`).text(usage.students - usage.onlineStudents);
					$(`#online_students`).text(usage.onlineStudents);
					$(`#total_tournaments`).text(usage.tournaments);
					$(`#active_users`).text(usage.activeUsers);
					$(`#total_users`).text(usage.totalUsers);
					$(`#server_target`).text(usage.serverTarget);
				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});
		};

		function serverList(callback) {

			$.ajax({
				type        : 'GET',
				url         : '<% $Tab::indexcards_url %>/glp/servers/show',
				crossDomain : true,
				xhrFields : {
					withCredentials : true
				},
				success : (rawservers) => {

					// some very verbose code that surely can be made tighter I
					// expect.  Sort by string then by digit so that a2 < a10.

					const servers = rawservers.sort( (a,b) => {

						const aString = a.label.replace(/[0-9]/g, '');
						const bString = b.label.replace(/[0-9]/g, '');

						const aInt = parseInt(a.label.replace(/[a-z]/g, ''));
						const bInt = parseInt(b.label.replace(/[a-z]/g, ''));

						if (aString === bString) {
							if (aInt > bInt) {
								return 1;
							}
							return -1;
						} else if (aString > bString) {
							return 1;
						} else {
							return -1;
						}
					});
					const liveHostnames = servers.map( server => server.label );

					$(`.servers`).each( (index, row) => {
						const hostname = $(row).attr("id");
						if (liveHostnames.includes(hostname) === false) {
							$(row).remove();
						}
					});

					for ( const server of servers) {

						let serverNumber = server.label.replace(/\D/g,'');

						if (!serverNumber && server.label.includes('tab-admin')) {
							serverNumber = '-admin';
						}

						if ($(`#${ server.label }`).attr('server_type')) {
							$(`#${ server.label }_status`).text( server.status );
						} else {

							const row = `
								<div
									class       = "row flexrow servers"
									id          = "${ server.label }"
									server_type = "${ server.type }"
								>
									<span
										class = "sixth semibold padleft padvert hostnames"
										title = "LINODE ID ${ server.linode_id }"
										id    = "${ server.linode_id }_label"
									>
										${server.label}
									</span>

									<span class="tenth smaller semibold centeralign">
										<div class="full nospace padvertless" id="${ server.label }_status">
											${server.status}
										</div>
									</span>

									<span class="tenth smallish semibold centeralign" id="${ server.label }_uptime">
									</span>

									<span class="sixth smallish">
										<div class="full nospace flexrow">
											<span class="rightalign padright third" id="${ server.label }_1m_cpu_load">
											</span>
											<span class="rightalign padright third" id="${ server.label }_5m_cpu_load">
											</span>
											<span class="rightalign padright third" id="${ server.label }_15m_cpu_load">
											</span>
										</div>
									</span>

									<span class="eighth smallish">
										<div class="full nospace flexrow">
											<span class="half rightalign padright smallish" id="${ server.label }_memory_total">
											</span>

											<span class="half rightalign padright smallish" id="${ server.label }_swap_total">
											</span>
										</div>
									</span>

									<span class="seventh">
										<div class="full flexrow nospace centeralign hidden" id="${ server.label }_mason">
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="mason${serverNumber}1"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="mason${serverNumber}2"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="mason${serverNumber}3"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="mason${serverNumber}4"
												></i>
											</span>
										</div>
									</span>

									<span class="seventh">
										<div class="full flexrow nospace centeralign hidden" id="${ server.label }_indexcards">
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="indexcards${serverNumber}1"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="indexcards${serverNumber}2"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="indexcards${serverNumber}3"
												></i>
											</span>
											<span class='fifth yellowhover'>
												<i class="fa fa-square fa-tiny lightgraytext"
												   id="indexcards${serverNumber}4"
												></i>
											</span>
										</div>
									</span>

									<span class="fifteenth centeralign smallish">
										<button
											id      = "${server.label}_reboot"
											class   = "buttonwhite orangetext invert fa fa-lg fa-refresh hidden"
											onClick = "rebootLinode('${ server.linode_id }');"
											disabled
										></button>
									</span>
								</div>
							`;

							$('#server_status').append(row);

							if (server.tags.includes('tabweb')) {
								$(`#${server.label}_reboot`).removeClass('hidden');
								$(`#${server.label}_mason`).removeClass('hidden');
								$(`#${server.label}_indexcards`).removeClass('hidden');
								$(`#${server.label}_reboot`).prop('disabled', false);
							}
						}
					}

					fixVisual();

					if (callback) {
						console.log(`Invoke callback`);
						callback();
					}
				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});

		};

		function serverLoad() {

			const machines = [];

			$(`.hostnames`).each( (index, element) => {
				const hostname = $(element).text().replace(/(\s+)/g, '');
				machines.push({ label : hostname });
			});

			if (machines.length < 1) {
				return;
			}

			$.ajax({
				type        : 'POST',
				url         : '<% $Tab::indexcards_url %>/glp/servers/status',
				crossDomain : true,
				data        : { existingMachines: machines },
				xhrFields : {
					withCredentials : true
				},
				success : (servers) => {

					if (servers.tabwebCount) {

						$(`.tabweb_count`).text(servers.tabwebCount);
						const currentCount = parseInt(servers.tabwebCount);

						$(`#increase_count`).attr('max', (<% $Tab::tabweb_cap %> - currentCount));
						$(`#decrease_count`).attr('max', (currentCount - 2));

						$(`#increase_max`).text(`Up to ${<% $Tab::tabweb_cap %> - currentCount}`);
						$(`#decrease_max`).text(`Up to ${currentCount - 2}`);

						delete servers.tabwebCount;
					}

					const liveHosts = Object.keys(servers);

					const totalLoad = {
						count    : 0,
						load     : 0.0,
						memUse   : 0.0,
						memTotal : 0.0,
					};

					liveHosts.forEach( (hostname) => {

						const server = servers[hostname];
						const serverType = $(`#${hostname}`).attr('server_type');

						if (!serverType) {
							return;
						}

						const [style, dedicated, cpuCountString] = serverType.split('-');
						const cpuCount = parseFloat(cpuCountString);

						if (hostname.includes('tabweb')) {
							totalLoad.count += cpuCount;
							totalLoad.load += parseFloat(server['1m_cpu_load']);
							totalLoad.memUse += (server['memory_total'] - server['memory_available']);
							totalLoad.memTotal += server['memory_total'];
						}

						for (const load of ['1m_cpu_load', '5m_cpu_load', '15m_cpu_load']) {

							$(`#${hostname}_${load}`).removeClass('orangetext');
							$(`#${hostname}_${load}`).removeClass('greentext');
							$(`#${hostname}_${load}`).removeClass('redtext');
							$(`#${hostname}_${load}`).removeClass('semibold');

							const cpuLoad = parseFloat(server[load]);

							$(`#${hostname}_${load}`).attr('title', `Raw value: ${cpuLoad}`);
							const loadPercentage = ( cpuLoad / cpuCount ) * 100;

							$(`#${hostname}_${load}`).text(`${loadPercentage.toFixed(1)}`);

							if (loadPercentage > 300) {
								$(`#${hostname}_${load}`).addClass('redtext');
								$(`#${hostname}_${load}`).addClass('semibold');
							} else if (loadPercentage > 100) {
								$(`#${hostname}_${load}`).addClass('orangetext');
								$(`#${hostname}_${load}`).addClass('semibold');
							} else if (loadPercentage > 50) {
								$(`#${hostname}_${load}`).addClass('orangetext');
							} else {
								$(`#${hostname}_${load}`).addClass('greentext');
							}
						}

						const memoryPercentage = ( ((server['memory_total'] - server['memory_available'])/server['memory_total']) * 100);

						$(`#${hostname}_memory_total`).attr('title', `${server.memory_available.toFixed(1)}`);
						$(`#${hostname}_memory_total`).text(`${memoryPercentage.toFixed(1)}`);

						const swapPercentage = ( ((server['swap_total'] - server['swap_available'])/server['swap_total'] ) * 100);

						$(`#${hostname}_swap_total`).attr('title', `${server.swap_available.toFixed(1)}`);
						$(`#${hostname}_swap_total`).text(`${swapPercentage.toFixed(1)}`);

						$(`#${hostname}_uptime`).text(`${server.uptime.toFixed(1) }`);

						const serverNumber = hostname.replace(/\D/g,'');

						['mason', 'indexcards'].forEach( (tag) => {

							if (server[tag]) {

								Object.keys(server[tag]).forEach( (key) => {

									const serviceStatus = server[tag][key];

									if (serviceStatus) {

										$(`#${tag}${serverNumber}${key}`).removeClass('yellowtext');
										$(`#${tag}${serverNumber}${key}`).removeClass('redtext');
										$(`#${tag}${serverNumber}${key}`).removeClass('lightgreentext');
										$(`#${tag}${serverNumber}${key}`).removeClass('lightgraytext');

										const downTime = (parseInt(serviceStatus.downtime) / 60) || 0;

										$(`#${tag}${serverNumber}${key}`).parent().attr('title', `
Status       : ${serviceStatus.status}
Check Code   : ${serviceStatus.checkCode}
Check Status : ${serviceStatus.checkStatus}
Downtime     : ${downTime} min
										`);

										if (serviceStatus.status === 'UP') {
											$(`#${tag}${serverNumber}${key}`).addClass('lightgreentext');
										} else if (serviceStatus.status === 'DOWN') {
											$(`#${tag}${serverNumber}${key}`).addClass('redtext');
										} else {
											$(`#${tag}${serverNumber}${key}`).addClass('yellowtext');
										}
									} else {
										$(`#${tag}${serverNumber}${key}`).addClass('lightgraytext');
									}

								});
							}
						});
					});

					totalLoad.cpu = (totalLoad.load / totalLoad.count ) * 100 || 0;
					totalLoad.memory = (totalLoad.memUse / totalLoad.memTotal) * 100 || 0;

					console.log(totalLoad);

					['cpu', 'memory'].forEach( (tag) => {

						$(`#total_${tag}`).attr('title', `${totalLoad[tag]}`);
						$(`#total_${tag}`).text(`${totalLoad[tag].toFixed(1)}`);

						if (totalLoad[tag] > 300) {
							$(`#total_${tag}`).addClass('redtext');
							$(`#total_${tag}`).addClass('semibold');
						} else if (totalLoad[tag] > 100) {
							$(`#total_${tag}`).addClass('orangetext');
							$(`#total_${tag}`).addClass('semibold');
						} else if (totalLoad[tag] > 50) {
							$(`#total_${tag}`).addClass('orangetext');
							$(`#total_${tag}`).removeClass('semibold');
						} else {
							$(`#total_${tag}`).addClass('greentext');
							$(`#total_${tag}`).removeClass('orangetext');
							$(`#total_${tag}`).removeClass('redtext');
							$(`#total_${tag}`).removeClass('semibold');
						}
					});

					console.log(`Refreshed server load stats for ${machines.length} machines at ${new Date()}`);

				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});
		};

		function rebootLinode(linodeId) {

			$.ajax({
				type        : 'GET',
				url         : `<% $Tab::indexcards_url %>/glp/servers/show/${linodeId}`,
				crossDomain : true,
				xhrFields : {
					withCredentials : true
				},
				success : (machine) => {

					const alertMessage = `You are about to reboot the server ${machine.label}.  This action will be logged.  It will take about 4-5 minutes before the machine is operational again.  If the problem is the result of a misconfiguration, there is a chance this operation fails and the machine does not come back up.  Are you sure?`;

					alertify.confirm("Please confirm", alertMessage, function(eventListener) {
						if (eventListener) {
							$.ajax({
								type        : 'POST',
								url         : `<% $Tab::indexcards_url %>/glp/servers/reboot/${machine.id}`,
								crossDomain : true,
								xhrFields : {
									withCredentials : true
								},
								success : (response) => {
									const message = response.message.replace('\n', '<br />');
									alertify.alert('Linode response:', message);
								},
								failure : (err) => {
									alertify.alert(`Error: ${err}`);
								},
							});
						} else {
							return;
						}
					}, function(no) { return; } );
				},

				failure : (err) => {
					alertify.alert(`Error: ${err}`);
				},
			});
		}

		function increaseCount() {

			const target = parseInt($(`#increase_count`).val());
			$(`#increase_count`).val('');

			const max = parseInt($(`#increase_count`).attr('max'));

			if (target > max) {
				alertify.alert('Action Forbidden', `You cannot raise the server count past <% $Tab::tabweb_cap %> machines`);
				$(`#increase_count`).val('');
				return;
			}

			const alertMessage = `You are about to add ${target} to the tabweb lineup.  This will take about 10 minutes before the machines are online.  This action also puts us on the hook for hosting fees for those machines.  And you can bet your ass we log who did this. Are you sure you want to proceed, <% $person->last %>?`;

			alertify.confirm("Please confirm", alertMessage, function(eventListener) {
				if (eventListener) {

					$.ajax({
						type        : 'POST',
						url         : '<% $Tab::indexcards_url %>/glp/servers/changeCount',
						crossDomain : true,
						data	    : { target },
						xhrFields : {
							withCredentials : true
						},
						success : (response) => {
							const message = response.message.replace('\n', '<br />');
							alertify.alert('Linode response:', message);
							if (response.destroyMe) {
								for (const hostname of response.destroyMe) {
									$(`#${hostname}`).remove();
								}
							}
						},
						failure : (err) => {
							alertify.alert(`Error: ${err}`);
						},
					});
				} else {
					return;
				}
			}, function(no) { return; } );
		}

		function decreaseCount() {

			const target = parseInt($(`#decrease_count`).val());
			$(`#decrease_count`).val('');
			const max = $(`#decrease_count`).attr('max');

			if (target > max) {
				alertify.alert('Action Forbidden', `You cannot lower the server count below 2 machines`);
				const target = $(`#decrease_count`).val('');
				return;
			}

			const alertMessage = `You are about to delete ${target} from the tabweb lineup.  This process will be very quick, but it will take about 10 minutes before new machines can be spun back up if you overshoot. Please do not cause Tabroom downtime by being overly aggressive here. And you can bet your ass we log who did this. Are you sure you want to proceed, <% $person->last %>?`;

			alertify.confirm("Please confirm", alertMessage, function(eventListener) {

				if (eventListener) {
					$.ajax({
						type        : 'DELETE',
						url         : `<% $Tab::indexcards_url %>/glp/servers/changeCount/${target}`,
						crossDomain : true,
						xhrFields : {
							withCredentials : true
						},
						success : (response) => {
							const message = response.message.replace('\n', '<br />');
							alertify.alert('Linode response:', message);
							if (response.destroyMe) {
								for (const hostname of response.destroyMe) {
									$(`#${hostname}`).remove();
								}
							}
						},
						failure : (err) => {
							alertify.alert(`Error: ${err}`);
						},
					});
				} else {
					return;
				}
			}, function(no) { return; } );
		}

	</script>
