<%args>
	$dbh
	$school
	$person
	$event_id => undef
	$format   => undef
</%args>
<%init>

	my $tourn = $school->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    my $now = DateTime->now;

	my $sth = $dbh->prepare("

		select entry_student.id, entry.id, entry.code, entry.name, entry.waitlist, entry.dropped, entry.school,
				student.id, student.chapter, student.first, student.middle, student.last, student.nsda, chapter.name,
				event.name, event.abbr, event.id, hybrid.name, partner.first, partner.last,
				fine_deadline.value_date, drop_fine.value

		from (entry_student, entry, student, event, school)

		left join chapter on chapter.id = student.chapter

		left join school hybrid on entry.school = hybrid.id

		left join entry_student pes
			on pes.entry = entry.id
			and pes.student != student.id

		left join event_setting drop_fine on drop_fine.event = event.id and drop_fine.tag = 'drop_fine'
		left join event_setting fine_deadline on fine_deadline.event = event.id and fine_deadline.tag = 'fine_deadline'

		left join student partner on partner.id  = pes.student

		where school.id = ?
			and school.chapter = student.chapter
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and entry.event = event.id
			and event.tourn = school.tourn
			and entry.unconfirmed = 0

			group by entry_student.id
			order by student.last, student.first

	");

	$sth->execute($school->id);

	my %students = ();
	my %entries = ();

	my %settings = $m->comp("/funclib/school_entry_settings.mas", school => $school);

	while (my (
		$entry_student_id,
			$entry_id, $entry_code, $entry_name, $entry_waitlist, $entry_dropped, $entry_ada, $entry_school,
			$student_id, $student_chapter, $student_first, $student_last, $student_nsda, $student_chapter_name,
			$event_name, $event_abbr, $event_id, $hybrid_name, $partner_first, $partner_last
		)  = $sth->fetchrow_array() ) {


		unless ($students{$student_id}{"name"}) {
			$students{$student_id}{"name"} = $student_first." ".$student_last;
			$students{$student_id}{"last"} = $student_last;
			$students{$student_id}{"first"} = $student_first;
			$students{$student_id}{"nsda"} = $student_nsda;
			$students{$student_id}{"chapter"} = $student_chapter;

			$students{$student_id}{"hybrid"} = $student_chapter_name
				if $student_chapter != $school->chapter;

		}

		unless ($entries{$entry_id}{"code"}) {

			$entries{$entry_id}{"code"} = $entry_code;
			$entries{$entry_id}{"name"} = $entry_name;
			$entries{$entry_id}{"dropped"} = $entry_dropped;
			$entries{$entry_id}{"waitlist"} = $entry_waitlist;
			$entries{$entry_id}{"ada"} = $entry_ada;

			$entries{$entry_id}{"event_id"} = $event_id;
			$entries{$entry_id}{"event_name"} = $event_name;
			$entries{$entry_id}{"event_abbr"} = $event_abbr;

			if ($entry_school != $school->id) {
				$students{$student_id}{"hybrid_name"} = $hybrid_name." ";
				$students{$student_id}{"hybrid_name"} .= $partner_first." ".$partner_last;
			}

		}

		push @{$entries{$entry_id}{"students"}}, $student_id;
		push @{$students{$student_id}{"entries"}}, $entry_id;

	}

	my $tourn_name = $tourn->name;
	my $school_name = $school->short_name;

	$tourn_name =~ s/Debate and Speech//g;
	$tourn_name =~ s/Speech and Debate//g;
	$tourn_name =~ s/The//g;
	$tourn_name =~ s/Tournament//g;
	$tourn_name =~ s/Invitational//g;
	$tourn_name =~ s/Classic//g;

	$tourn_name =~ s/[\W_]//g;
	$school_name =~ s/[\W_]//g;

	my $filename = $tourn_name."-".$school_name."-RosterByCompetitor";
	my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1
	);

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	my $hide_codes = $tourn->setting("hide_codes");

	print TEXOUT "\\noindent\n";
	print TEXOUT "\\hfill ";
	print TEXOUT "{\\huge \\bf ". Tab::texify($tourn->name)." }\n";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "{\\bf \\Large ".Tab::texify($school->name);
	print TEXOUT "(".Tab::texify($school->code).")"
		if $school->code && $school->code ne $school->name;

	print TEXOUT "\\hfill Competitor Registration } \\\\ \n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";

	my $tabular = "\\begin{tabular}{p{.75in}p{.75in}p{5in}}\n";
	my $intabular = "\\begin{tabular}{p{.45in}p{1.55in}p{1.5in}p{.75in}}\n";

	my $switch;

	foreach my $student_id (
		sort {$students{$a}{"last"} cmp $students{$b}{"last"} }
		keys %students
	) {

		next if $students{$student_id}{"hybrid"};

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{.9,.9,.9}\[5.5pt\]\[5.5pt\]\n" unless ($switch++ % 2);

		print TEXOUT Tab::texify($students{$student_id}{"last"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($students{$student_id}{"first"});
		print TEXOUT " & ";

		print TEXOUT "\\begin{minipage}{\\textwidth}\n";

		foreach my $entry_id (@{$students{$student_id}{"entries"}}) {

			print TEXOUT "   ".$intabular;

			print TEXOUT Tab::texify($entries{$entry_id}{"event_abbr"});

			print TEXOUT " & ";
			print TEXOUT Tab::texify($entries{$entry_id}{"code"}) unless $hide_codes;
			print TEXOUT " & ";

			my $teamstring;

			foreach my $other_id (@{$entries{$entry_id}{"students"}}) {

				next if $other_id == $student_id;

				$teamstring .= ", " if $teamstring;
				$teamstring .= $students{$other_id}{"name"};
				$teamstring .= "\n\n Hybrid: ".substr($students{$other_id}{"hybrid"},0,12)
					if $students{$other_id}{"hybrid"};
			}

			if ($students{$student_id}{"hybrid_name"}) {
				$teamstring .= "Hybrid w/".$students{$student_id}{"hybrid_name"};
			}

			print TEXOUT "{\\scriptsize ".Tab::texify($teamstring);
			print TEXOUT "}  & ";

			my $status;

			if ($entries{$entry_id}{"dropped"}) {
				$status = "Dropped";
			} elsif ($entries{$entry_id}{"waitlist"}) {
				$status = "Waitlisted";
			}

			print TEXOUT Tab::texify($status);

			print TEXOUT "\n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";

		}

		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>
