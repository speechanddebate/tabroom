<%args>
	$person
	$perms
	$target_id      => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
	$related_thing  => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": 1, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": 1, "message": "No entry or school ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($target_id);
	my $entry;
	my $school;

	my $now = DateTime->now();

	$entry = Tab::Entry->retrieve($property_name) if $setting_name eq "entry";
	$school = Tab::School->retrieve($property_name) if $setting_name eq "school";

	unless ($judge) {
		$m->print('{ "error": 1, "message": "No judge found for ID '.$target_id.'"}');
		$m->abort();
	}

	unless ($entry || $school) {
		$m->print('{ "error": 1, "message": "No school or entry found for ID '.$property_name.'"}');
		$m->abort();
	}

	unless ($school) {
		$school = $entry->school;
	}

	unless ($person->site_admin
		|| $perms->{"chapter"}{$school->chapter->id}
		|| $perms->{"prefs"}{$school->chapter->id}
	) {

		my $dbh = Tab::DBI->db_Main();
		my $sth = $dbh->prepare("

			select
				es.id
			from entry, entry_student es, student, chapter

			where student.person = ?
				and student.chapter = chapter.id
				and chapter.self_prefs = 1
				and student.id = es.student
				and es.entry = ?
			limit 1;
		");

		$sth->execute($person->id, $entry->id);
		my $self_perm = $sth->fetch();

		unless ($self_perm) {
			$m->print('{
				"error": 1,
				"message": "You do not have permission to change strikes for '.$school->short_name.'"
			}');
			$m->abort();
		}
	}

	my $category;
	my $event;

	if ($related_thing) {
		$category = Tab::Category->retrieve($related_thing);
	} elsif ($entry) {
		$event = $entry->event;
		$category = $event->category;
	} else {
		$category = $judge->category;
	}

	my %category_settings = $category->all_settings();
	my $by_round;

	if ( $category_settings{"rounds_per"} && $category_settings{"strikes_by_round"} ) {
		$by_round = 1;
	}



	my ($judgeref, $metaref) = $m->comp("/funclib/strike_judges.mas",
		entry    => $entry,
		by_round => $by_round,
		jpool    => $category_settings{"pref_jpool"}
	);

	$metaref->{"by_round"} = $by_round;

	if ( $metaref->{"by_round"}) {
		$metaref->{"limit"} = POSIX::ceil($category_settings{"entry_strikes"} * $metaref->{"round_total"} / 100);
	} else {
		$metaref->{"limit"} = $category_settings{"entry_strikes"};
		if ($event) {
			$metaref->{"limit"} += $event->setting("adjust_strikes");
		}
	}

	if ($judgeref) {
		foreach my $judge (keys %{$judgeref}) {
			if ($judgeref->{$judge}{"strike"}) {
				$metaref->{"already"} += $judgeref->{$judge}{"count"}
			}
		}
	}

	my $message;

	if ($property_value == 1) {

		if ($judgeref->{$judge->id}{"free_strike"} || ($metaref->{"limit"} >= $metaref->{"already"})) {

			unless ($judgeref->{$judge->id}{"strike"}) {

				if (
					($judgeref->{$judge->id}{"count"} + $metaref->{"already"}) > $metaref->{"limit"}
				) {

					$message = "You have reached your strike limit! ";
					$message .= " You have struck ".$metaref->{"already"}." of ".$metaref->{"limit"};
					$message .= " Unstrike another judge if you dislike ".$judge->first." ".$judge->last;
					$message .= " sufficiently to strike them instead";
					$m->print('{ "error": 1, "message": "'.$message.'"}');
					$m->abort();

				} else {

					my $strike = Tab::Strike->create({
						tourn      => $category->tourn->id,
						entry      => $entry,
						type       => "entry",
						entered_by => $person,
						registrant => 1,
						judge      => $judge->id
					});

					$message = "You have struck ".$judge->first." ".$judge->last." like a gong.";
				}
			}

		} else {

			$message = "You already have reached your overall strike limit! ";
			$message .= " You have struck ".$metaref->{"already"}." of ".$metaref->{"limit"};
			$message .= " Unstrike another judge if you hate ".$judge->first." ".$judge->last;
			$message .= " sufficiently to strike them instead";
			$m->print('{ "error": 1, "message": "'.$message.'"}');
			$m->abort();
		}

	} elsif ($judgeref->{$judge->id}{"strike"}) {

		my $id = $judgeref->{$judge->id}{"strike"};
		my $strike = Tab::Strike->retrieve($id);
		$strike->delete();

		$message = "You have un-struck ".$judge->first." ".$judge->last;

	} else {
		$message = "No changes made";
	}

	$m->print('{ "error": false, "message": "'.$message.'"}');
	$m->abort();

</%init>
