<%args>
	$person
	$perms
	$target_id      => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($target_id);
	my $entry = Tab::Entry->retrieve($property_name) if $setting_name eq "entry";
	my $school = Tab::School->retrieve($property_name) if $setting_name eq "school";

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$target_id.'"}');
		$m->abort();
	}

	unless ($entry || $school) {
		$m->print('{ "error": true, "message": "No school or entry found for ID '.$property_name.'"}');
		$m->abort();
	}

	unless ($school) {
		$school = $entry->school;
	}

	unless ($person->site_admin || $perms->{"chapter"}{$school->chapter->id}) {
		$m->print('{
			"error": true,
			"message": "You do not have permission to change conflicts for '.$school->short_name.'}'
		);
		$m->abort();
	}

	my $now = DateTime->now();
	my $message;

	if ($setting_name eq "school") {

		my $conflict = Tab::Strike->search(
			type       => "school",
			judge      => $judge->id,
			school     => $school->id,
			registrant => 1,
			conflict   => 1
		)->first;

		if ($property_value == 1) {

			if ($conflict) {

				$message = "That conflict already existed.  Please refresh the page.";

			} else {

				Tab::Strike->create({
					judge      => $judge->id,
					type       => "school",
					school     => $school->id,
					tourn      => $school->tourn->id,
					entered_by => $person,
					registrant => 1,
					conflict   => 1
				});

				$message = "Conflicted against ".$judge->first." ".$judge->last." by ".$person->email;
			}

		} else {

			if ($conflict) {
				$conflict->delete();
				$message = "Conflict against ".$judge->first." ".$judge->last." removed by ".$person->email;
			}
		}

		$m->comp("/funclib/log.mas",
			tourn       => $school->tourn->id,
			school      => $school->id,
			type        => "registration",
			description => $message,
			person      => $person->id
		);


	} else {

		my $conflict = Tab::Strike->search(
			type       => "entry",
			judge      => $judge->id,
			entry      => $entry->id,
			conflict   => 1,
			registrant => 1
		)->first;

		if ($property_value == 1) {

			unless ($conflict) {

				Tab::Strike->create({
					judge      => $judge->id,
					type       => "entry",
					entry      => $entry->id,
					tourn      => $entry->school->tourn->id,
					entered_by => $person,
					conflict   => 1,
					registrant => 1
				});

				$message = "Conflicted against ".$judge->first." ".$judge->last." by ".$person->email;

			} else {

				$message = "That conflict already existed.  Please refresh the page.";

			}

		} else {

			$conflict->delete if $conflict;
			$message = "Conflict against ".$judge->first." ".$judge->last." removed by ".$person->email;
		}

		$m->comp("/funclib/log.mas",
			tourn       => $entry->school->tourn->id,
			entry       => $entry->id,
			type        => "registration",
			description => $message,
			person      => $person->id
		);

	}

	$m->print('{ "error": false, "message": "'.$message.'"}');

	$m->abort();

</%init>

