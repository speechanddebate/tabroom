<%args>
	$now
	$person
	$perms
	$entry_id      => undef
	$property_name => undef
	$other_value   => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{
			"error": true,
			"message": "No entry ID sent"
		}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($entry_id);

	return unless $entry;
	return unless $entry->school;

	if ($now > $entry->school->tourn->reg_end) {
		$m->print('{
			"error": true,
			"message": "The tournament registration deadline has passed"
		}');
		$m->abort();
	}

	my $msg = "No action specified so none performed";

	unless ($entry) {
		$m->print('{
			"error": true,
			"message": "No entry found for ID '.$entry_id.'"
		}');
		$m->abort();
	}

	my $ok;

	$ok++ if $person->site_admin;
	$ok++ if $perms->{chapter}{$entry->school->chapter} eq 'chapter';

	my @students = $entry->students;

	unless ($ok) {
		foreach my $student (@students) {
			$ok++ if $student && $student->person && $student->person == 1;
		}
	}

	unless ($ok) {
		$m->print('{
			"error"   : true,
			"message" : "You are not a part of this entry"
		}');
		$m->abort();
	}

	# Check if the students are eligible without double entry constraints

	unless ($property_name eq "reject") {

		my $student_err;

		foreach my $student (@students) {

			my %ok_events = $m->comp(
				"/funclib/student_clear_events.mas",
					student => $student,
					school  => $entry->school
			);

			unless ($ok_events{$entry->event->id}) {
				$student_err .=  $student->first." ".$student->last." is not eligible ";
				$student_err .= "to enter in ".$entry->event->name." due to double ";
				$student_err .= "entry restrictions ";
			}

		}

		if ($student_err) {

			$m->print('{
				"error": true,
				"message": "'.$student_err.'"
			}');

			$m->abort();
		}
	}

	my $created_at = DateTime->now();
	my $transfer_id;

	my @replace;
	my @destroy;

	if ($property_name eq "transfer") {

		my $transfer_target = Tab::Entry->retrieve($other_value);
		$transfer_id = $other_value if $transfer_target;

		unless ($transfer_target) {
			$m->print('{
				"error"   : true,
				"message" : "No entry found for transfer ID '.$other_value.'"
			}');
			$m->abort();
		}

		unless ($transfer_target->event == $entry->event) {
			$m->print('{
				"error"   : true,
				"message" : "Transfer target is in a different event"}'
			);
			$m->abort();

		}

		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		$entry->unconfirmed(0);
		$entry->waitlist($transfer_target->waitlist);
		$entry->created_at($transfer_target->created_at);
		$entry->registered_by($person->id);
		$created_at = $transfer_target->created_at;
		$entry->update();

		$msg = $entry->code." given ".$transfer_target->code." slot";

		$transfer_target->delete();

	}  elsif ($property_name eq "register") {

		# Check if the event is in waitlist land
		my $waitlist_status = $m->comp(
			"/funclib/waitlist_status.mas",
				event  => $entry->event,
				school => $entry->school
		);

		# If this is districts, check those limits

		my $event = $entry->event;
		my $school = $entry->school;
		my $chapter = $school->chapter;
		my $tourn = $school->tourn;

		my $is_house;
		my $is_senate;
		my $district_limit;
		my %district_entry;

		if ($tourn->setting("nsda_district")) {

			$is_house++ if $event->abbr eq "HSE";
			$is_senate++ if $event->abbr eq "SEN";

			$district_limit = $m->comp(
				"/funclib/nsda/entry_limits.mas",
				chapter => $chapter,
				house   => $is_house,
				senate  => $is_senate
			);

			%district_entry = $m->comp(
				"/funclib/district_entry.mas",
				chapter  => $chapter
			);

		}

		if ($event->setting("nsda_event_category") == 108) {
			undef $district_limit;
		}


		if ($district_limit) {

			if ($event->type ne "congress" && $district_entry{"entry_bonus"}) {
				$district_limit += 2;
			}

			my $district_count;

			if ($is_house) {
				$district_count = $district_entry{"house_total"};
			} elsif ($is_senate) {
				$district_count = $district_entry{"senate_total"};
			} elsif ($event->abbr ne "BQ") {
				$district_count = $district_entry{"entry_total"}
			}

			if ($district_count >= $district_limit) {
				my %response = (
					error   => \1,
					message => "You have already reached your Districts entry limit of $district_limit for ".$event->abbr,
					destroy => $event->id."_confirms",
				);

				$m->print(JSON::encode_json(\%response));
				$m->abort();
			} elsif ( ($district_count + 1) >= $district_limit) {
				push @destroy, $event->id."_confirms";
			}
		}

		$entry->code($m->comp(
			"/funclib/entry_code.mas",
				entry => $entry
			));

		$entry->unconfirmed(0);

		if ($waitlist_status) {
			$entry->waitlist(1);
		} else {
			$entry->waitlist(0);
		}

		$entry->created_at($created_at);
		$entry->registered_by($person->id);
		$entry->update();

		$msg = $entry->code." registered into this tournament";

	} elsif ($property_name eq "reject") {

		$entry->unconfirmed(2);
		$entry->registered_by($person->id);
		$entry->update();

		$msg = $entry->name."'s entry rejected";

	} elsif ($property_name eq "unreject") {

		$entry->unconfirmed(1);
		$entry->registered_by(0);
		$entry->update();

		$msg = $entry->code."'s entry unrejected";
	}

	my $status = "<span class='full centeralign inline semibold greentext'>REGISTERED</span>";

	$status = "<span class='full centeralign inline semibold orangetext'>WAITLIST</span>"
		if $entry->waitlist;

	@replace = (
		{
			id      => $entry->id."_signup_at",
			content => $created_at->month."/".$created_at->day." ".Tab::nicetime($created_at)
		}
	);

	if ($property_name eq "reject") {

		my $undo_button = "
			<a
				class         = 'orangetext buttonwhite fa fa-sm fa-arrow-up'
				value         = '1'
				id            = '".$entry->id."'
				entry_id      = '".$entry->id."'
				setting_name  = 'signup_active'
				property_name = 'unreject'
				on_success    = 'refresh'
				onClick       = 'postSwitch( this, \"signup_switch.mhtml\");'
			></a>
		";

		$undo_button =~ s/\R/ /g;
		$undo_button =~ s/\t/ /g;

		push @replace, (
			{
				id      => $entry->id."_status",
				content => $person->first." ".$person->last
			}, {
				id      => $entry->id."_checkbox",
				content => $undo_button
			}, {
				id      => $entry->id."_rejectbox",
				destroy => 1
			}
		);

	} else {

		push @replace, (
			{
				id      => $entry->id."_signup_by",
				content => $person->first." ".$person->last
			}, {
				id      => $entry->id."_checkbox",
				destroy => 1
			}, {
				id      => $entry->id."_status",
				content => $status
			}, {
				id      => $entry->id."_rejectbox",
				destroy => 1
			}, {
				id      => $transfer_id,
				destroy => 1
			}
		);
	}

	foreach my $destroy (@destroy) {
		push @replace, {
			id      => $destroy,
			destroy => 1
		};
	}

	my %response = (
		error   => 0,
		message => $msg,
		replace => \@replace
	);

	$m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
