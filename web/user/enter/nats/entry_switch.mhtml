<%args>
	$person
	$perms
	$entry_id      => undef
	$property_name  => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{ "error": \1, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": \1, "message": "No property to change sent"}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($entry_id);

	unless ($entry) {
		$m->print('{ "error": \1, "message": "No such entry found", "refresh" : \1}');
		$m->abort();
	}

	my $message;
	my $error;
	my @replace;
	my $destroy;
	my %response;

	my $event = $entry->event;
	my $supp  = $event->setting("supp");
	my $tourn = $event->tourn;

	my $now = DateTime->now();

	if ($setting_name) {

		if ($setting_name eq "reregistered") {

			my $deadline = $event->setting("rereg_end");
			$deadline->set_time_zone("UTC");

			if ($deadline < $now) {
				$m->print('{ "error": \1, refresh : \1, "message": "The registration deadline has passed"}');
				$m->abort();
			}

			#Check Double Entry Limits
			my $entries_ref = $m->comp("supp_api.mhtml", school => $entry->school, return => 1);

			my %ok = map {$_ => 1} @{$entries_ref};

			unless ($ok{$entry->id}) {
				$message = "You have exceeded the double entry limits for that student";
				my %response = (
					error   => 1,
					message => $message,
					replace => \@replace
				);

				$m->print(JSON::encode_json(\%response));
				$m->abort();
			}

			$message = " re-registered for ".$entry->event->abbr;

			my $replace;
			my $supp_log = $entry->setting("supp_log");

			if ($property_value == 1) {

				$entry->dropped(0);
				$entry->update();

				my $response = '
					<span class="italic greentext explain">
						Confirmed on ';

				$response .= $m->comp("/funclib/showdt.mas",
					dt     => $now,
					tz     => $tourn->tz,
					format => "murica_weekday",
					at     => 1,
					return => 1,
				);

				$response .= " <br /> by ".$person->email."</span";
				$property_value = $person->id;
				$replace = {
					id      => $entry->id,
					content => $response
				};

				$destroy = $entry->id."_deadline";
				$supp_log .= " Confirmed active by ".$person->email." at ".$now;

			} else {

				$message = "NOT " . $message;
				$error = \1;
				$entry->dropped(1);
				$entry->update();
				$replace = {
					id      => $entry->id,
					content => "<div class='biggish redtext semibold'>Not Confirmed</div>"
				};

				$supp_log .= " Marked NOT ACTIVE by ".$person->email." at ".$now;
			}

			$entry->setting("supp_log", "text", $supp_log);

			push @replace, $replace;
			$entry->setting($setting_name, $property_value);

		} elsif ($setting_name eq "online_hybrid") {

			my $message;
			my $error = \0;

			foreach my $student ($entry->students) {

				my $reply = $m->comp("/funclib/nsda/online_suppswitch.mas", student => $student, tourn => $tourn);

				$message .= $reply->{"msg"};

				if ($reply->{"success"} eq "false") {
					$error = \1;
				}
			}

			my %response = (
				error   => \1,
				message => $message,
				destroy => $destroy
			);

			$m->print(JSON::encode_json(\%response));
			$m->abort();

		} elsif ($setting_name eq "video_link_tested") {

			$entry->setting($setting_name, $person->id);
			$response{"hideAll"} = "test_pls";
			$response{"showAll"} = "tested_thx";

		} else {

			$entry->setting($setting_name, $property_value);
			$message .= " not " unless $property_value;
			$message .= $setting_name;
		}
	}

	my $msg = $entry->name.' marked as '.$message;

	foreach my $student ($entry->students) {
		$m->comp("/funclib/nsda/status_check.mas",
			student => $student,
			school  => $entry->school
		);
	}

	$response{"error"}   = $error || \0;
	$response{"destroy"} = $destroy;
	$response{"message"} = $msg;
	$response{"replace"} = \@replace;

    $m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
