<%args>
	$person
	$school
	$student_id => undef
</%args>
<%init>

	my $now = DateTime->now();

	my $student = Tab::Student->retrieve($student_id) if $student_id;

	unless ($student) {
		$m->comp('/funclib/abort.mas',
			message => "No student record found for ID number $student_id"
		);
	}

	unless ($student->chapter->id == $school->chapter->id) {
		$m->comp('/funclib/abort.mas',
			message => "Student ".$student->first." ".$student->last." does not belong to your school."
		);
	}

	my $tourn = $school->tourn();

	my %entries = $m->comp(
		"/funclib/nsda/nats_student_entries.mas",
		student => $student,
		tourn => $tourn
	);

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.abbr, event.name,
			pattern.id, pattern.name, pattern.type, pattern.max, pattern.exclude,
			supp.value, conn.value, stefan.value
		from event
			left join pattern on event.pattern = pattern.id
			left join event_setting supp on supp.event = event.id and supp.tag = 'supp'
			left join event_setting conn on conn.event = event.id and conn.tag = 'conn'
			left join event_setting stefan on stefan.event = event.id and stefan.tag = 'stefan'
		where event.tourn = ?
	");

	$sth->execute($tourn->id);

	my %events;
	my %patterns;
	my %types;

	while (
		my (
			$event_id, $event_abbr, $event_name,
			$pattern_id, $pattern_name, $pattern_type, $pattern_max, $pattern_exclude,
			$supp_value, $conn_value, $stefan_value
		) = $sth->fetchrow_array()
	) {

		if ($stefan_value) {
			$events{$event_id}{"type"} = "stefan";
			$events{"by_pattern"}{"stefan"}{$event_id}++;
			$types{"stefan"}++;
		} elsif ($conn_value) {
			$events{$event_id}{"type"} = "conn";
			$events{"by_pattern"}{"conn"}{$event_id}++;
			$types{"conn"}++;
		} elsif ($supp_value) {
			$events{$event_id}{"type"} = "supp";
			$events{"by_pattern"}{"supp"}{$event_id}++;
			$types{"supp"}++;
		} else {
            next;
		}

		$events{$event_id}{"abbr"} = $event_abbr;
		$events{$event_id}{"name"} = $event_name;

		if ($pattern_id) {

			$events{$event_id}{"pattern"} = $pattern_id;
			$events{"by_pattern"}{$pattern_id}{$event_id}++;

			unless ($patterns{$pattern_id}) {
				$patterns{$pattern_id}{"name"} = $pattern_name;
				$patterns{$pattern_id}{"max"} = $pattern_max;
				$patterns{$pattern_id}{"type"} = $pattern_type;

				if ($pattern_exclude) {
					$patterns{$pattern_id}{"exclude"} = eval {
						return JSON::decode_json($pattern_exclude);
					};
				}
			}
		}
	}

	my %counter;
	my $err;

	foreach my $event_id (sort {$events{$a}{"abbr"} cmp $events{$b}{"abbr"}} keys %events) {

		my $in = $ARGS{$event_id};

		if ($in) {

			# The following code is a solution in search of a problem.

			my $pattern_id = $events{$event_id}{"pattern"};

			# Maximum per pattern
			if ($patterns{$pattern_id}{"type"} > 0) {
				if ($counter{"pattern"}{$pattern_id} >= $patterns{$pattern_id}{"max"}) {
					undef $in;
					$err = "You may only select ".$patterns{$pattern_id}{"max"}." events in Pattern ".$patterns{$pattern_id}{"name"}." Not registered in ".$events{$event_id}{"abbr"}.".";
				}
			}

			if ($in) {
				$counter{"total"}++;
				if ($patterns{$pattern_id}{"max"}) {
					$counter{"pattern"}{$pattern_id}++;
				}
			}
		}

		if ($entries{$event_id}) {

			unless ($in) {
				my $msg = "Entry ".$entries{$event_id}->name." deleted in ".$events{$event_id}{"abbr"};
				$m->comp("/funclib/log.mas",
					tourn       => $tourn->id,
					event       => $event_id,
					school      => $school->id,
					type        => "registration",
					person      => $person->id,
					description => $msg
				);

				$entries{$event_id}->delete();
			}

		} elsif ($in) {

			my $entry = Tab::Entry->create({
				event         => $event_id,
				school        => $school->id,
				tourn         => $tourn->id,
				name          => $student->first." ".$student->last,
				dropped       => 0,
				registered_by => $person->id,
			});


			my $es = Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $student->id
			});

			my $msg = "Entry ".$entry->name." created in ".$entry->event->abbr;

			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				event       => $event_id,
				entry       => $entry->id,
				school      => $school->id,
				type        => "registration",
				person      => $person->id,
				description => $msg
			);

		}
	}

	#Clear the objects because otherwise they persist and mess everything up
	foreach my $event_id (keys %events) {
		undef $entries{$event_id};
	}

	my %used;

	foreach my $entry (
		$m->comp(
			"/funclib/student_entries.mas",
			student     => $student,
			tourn       => $tourn,
			entry_check => 1
		)
	) {

		my $event = $entry->event;
		next unless $events{$event->id}{"type"};

		if ($used{$event->id}++) {
			$entry->delete();
		} else {
			$entry->unconfirmed(0);
			$entry->update();
		}

	}

	my $msg;

	unless ($err) {
		$msg = $student->first." ".$student->last." has been pre-registered into ".$counter{"total"}." supplementals";
	}

	$m->redirect("details.mhtml?student_id=".$student->id."&school_id=".$school->id."&err=$err&msg=$msg");

</%init>
