<%args>
	$person
	$school
	$student_id => undef
</%args>
<%init>

	my $msg;
	my $err;

	my $now = DateTime->now();
	my $student = Tab::Student->retrieve($student_id) if $student_id;

	unless ($student > 0) {
		$m->comp('/funclib/abort.mas',
			message => "No student record found for ID number $student_id"
		);
	}

	unless ($student->chapter && $student->chapter->id == $school->chapter->id) {
		$m->comp('/funclib/abort.mas',
			message => "Student ".$student->first." ".$student->last." does not belong to your school."
		);
	}

	my $tourn = $school->tourn();
	my %tourn_settings = $tourn->all_settings();
	my $drop_deadline = $tourn_settings{"drop_deadline"};
	$drop_deadline = $tourn->reg_end unless $drop_deadline;

	my $script_deadline = $tourn_settings{"script_deadline"};
	$script_deadline = $drop_deadline unless $script_deadline;

	my $release_deadline = $tourn_settings{"release_deadline"};
	$release_deadline = $drop_deadline unless $release_deadline;

	my %incomplete;

	#2 Entry Release Form

	my %release_forms = eval {
		return %{JSON::decode_json($school->setting("release_forms"))};
	};

	my $req = Apache2::Request->new($r);

	unless ($now == $release_deadline) {

		if ($req) {

			my $upload = $req->upload("entry_release_".$student->id);

            if ($upload && $upload->filename) {

				my $filename = $m->comp("/funclib/upload_test.mas", upload => $upload);
				my $filetemp = $upload->tempname;

				if ($Tab::hostname eq "www.tabroom.com") {
					system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$school->id."/entry_release/".$student->id."/$filename";
				}

				$release_forms{$student->id} = $filename;

				$school->setting(
					"release_forms",
					"text",
					JSON::encode_json(\%release_forms)
				);
			}
		}
	}

	$incomplete{"No release forms uploaded"}++
		unless $release_forms{$student->id};

	# Tabroom account
	if ($ARGS{"tabroom_email"}) {

		$ARGS{"tabroom_email"} =~ s/\s+//g;

		my $student_person = Tab::Person->search(
			email => $ARGS{"tabroom_email"}
		)->first;

		if ($student_person) {

			$err .= $m->comp("/funclib/student_link.mas",
				student => $student,
				target  => $student_person,
				person  => $person
			);

			unless ($err) {
				$msg .= "Student record linked to Tabroom account ".$ARGS{"tabroom_email"};
			}

		} else {
			$err .= " No Tabroom account found for email ".$ARGS{"tabroom_email"};
		}
	}

	#3 Pronuncation Guide
	$student->phonetic($ARGS{"phonetic"});
	$student->update();

	unless ($now > $script_deadline) {

		#4-6 Entry Details

		my %entries = $m->comp(
			"/funclib/nsda/nats_student_entries.mas",
			student => $student,
			tourn   => $tourn
		);

		my @settings = (
			"coach_points",
			"coach_script",
			"author",
			"title",
			"topic",
			"publisher",
			"publish_isbn",
			"publish_url",
			"publish_date"
		);

		my @date_settings = ("publish_print_date");

		my %used_events;

		foreach my $type ("main", "supp", "conn") {

			next unless $entries{$type};

			foreach my $entry (@{$entries{$type}}) {

				my $event = $entry->event;
				my %event_settings = $event->all_settings();

				next if $event_settings{"usa_wsdc"};
				my $abbr = $event->abbr;

				if ($used_events{$event->id}++) {
					$event->update();
				}

				my %local_incomplete = ();

				$ARGS{$entry->id."_po"} = int($ARGS{$entry->id."_po"});
				$entry->setting("po_nominee", $ARGS{$entry->id."_po"});

				if ($ARGS{$entry->id."_coach_points"}) {

					unless ($ARGS{$entry->id."_coach_script"}) {

						my $coach_ref = $m->comp(
							"/funclib/nsda/api_client.mas",
							path => "/members/".$ARGS{$entry->id."_coach_points"}
						);

						if ($coach_ref) {
							$ARGS{$entry->id."_coach_script"} = $coach_ref->{first}." ".$coach_ref->{last};
						}
					}

					$ARGS{$entry->id."_coach_points"} = int($ARGS{$entry->id."_coach_points"});

					my $coach_person = Tab::Person->search(
						nsda => $ARGS{$entry->id."_coach_points"}
					)->first;

					unless ($coach_person) {
						$coach_person = $m->comp(
							"/funclib/nsda/user_import.mas",
							nsda_id => $ARGS{$entry->id."_coach_points"}
						);
					}
				}

				foreach my $setting (@settings) {
					$entry->setting($setting, $ARGS{$entry->id."_$setting"});
				}

				if (
					(($event_settings{'online_mode'} eq "async")
					|| $event_settings{'ask_for_videos'})
					&& (not defined $event_settings{"disable_video_link"})
				) {
					my $url = $ARGS{$entry->id."_video_link"};
					$url =~ s/\s+//g;

					if (not defined $url) {
						$entry->setting("video_link", 0);
						$entry->setting("video_link_tested", 0);
					} elsif ($entry->setting("video_link") ne $url) {
						$entry->setting("video_link", "text", $url);
						$entry->setting("video_link_tested", 0);
					}
				}

				if ($event_settings{'ask_for_bibliography'}) {

					my $text = $m->comp('/funclib/save_editor.mas',
						text => $ARGS{$entry->id."_bibliography"}
					);

					$entry->setting("bibliography", "text", $text);
				}

				foreach my $setting (@date_settings) {

					my $date = eval {
						return Tab::dateme( $ARGS{$entry->id."_".$setting} );
					};

					if ($date) {
						$entry->setting($setting, "date", $ARGS{$entry->id."_$setting"});
					} else {
						undef $ARGS{$entry->id."_".$setting};
					}

				}

				if ($req) {

					my $upload = $req->upload($entry->id."_script");

					if ($upload && $upload->filename) {

						my $filename = $m->comp("/funclib/upload_test.mas", upload => $upload);
						my $filetemp = $upload->tempname;

						my $history = $entry->setting("script_history");

						my $max_id;

						if ($history) {
							my @ids = sort {$b <=> $a} keys %{$history};
							$max_id = shift @ids;
						}

						$max_id++;

						$history->{$max_id}{"script"} = $filename;
						$history->{$max_id}{"uploaded"} = DateTime::Format::MySQL->format_datetime($now);
						$history->{$max_id}{"person"} = $person->id;

						$entry->setting("script_history", "json", $history);

						if ($Tab::hostname eq "www.tabroom.com") {
							system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$school->id."/scripts/".$entry->id."/".$filename;
							system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$school->id."/scripts/".$entry->id."/$max_id/".$filename;
						}

						$entry->setting('script_file', $filename);
						$entry->setting('script_timestamp', "date", $now);
						$ARGS{$entry->id."_script_file"} = $filename;

					} else {

						$ARGS{$entry->id."_script_file"} = $entry->setting('script_file');
					}

				} else {
					$ARGS{$entry->id."_script_file"} = $entry->setting('script_file');
				}
			}
		}
	}

 	$err .= $m->comp("/funclib/nsda/status_check.mas",
		student => $student,
		school  => $school
	);

	$err =~ s/-/<br \/>/g;

	$msg .= " All entry information is complete!" unless $err;

	$m->redirect("details.mhtml?student_id=".$student->id."&school_id=".$school->id."&err=$err&msg=$msg");
	$m->redirect("entries.mhtml?school_id=".$school->id."&msg=$msg");

</%init>
