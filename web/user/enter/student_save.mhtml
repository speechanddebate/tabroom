<%args>
	$person
	$session
	$event_id
	$school_id  => undef
	$student_id => undef
	$partner_id => undef
	$waitlist   => "0"
	$title      => undef
	$code       => undef
	$seed       => undef
	$hybrid     => undef
</%args>
<%init>

	my $now = DateTime->now;

	my $event = Tab::Event->retrieve($event_id);
	my $school = Tab::School->retrieve($school_id);

	my $err;

	unless ($event) {
		$err = "Event ID $event_id was not found.";
	}

	unless ($school) {
		$err = "School ID $school_id was not found.";
	}

	if ($err) {
		$m->comp("/funclib/abort.mas", message => $err);
	}

	my $tourn = $event->tourn;

	my %event_settings = $event->all_settings;
	my %tourn_settings = $tourn->all_settings;

	my $enter_me_twice = $event_settings{"enter_me_twice"};

	my $min = $event_settings{"min_entry"} || 1;
	my $max = $event_settings{"max_entry"} || 1;

	my @students;
	my $msg;
	my $name;

	unless ($waitlist > 0) {
		$waitlist = $m->comp("/funclib/waitlist_status.mas",
			event  => $event,
			school => $school
		);
	}

	if ($waitlist && $event_settings{"no_waitlist"}) {
		$err = $waitlist." and tournament does not permit a waitlist";
		$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
	}

	my $student = Tab::Student->retrieve($student_id) if $student_id;
	my $partner = Tab::Student->retrieve($partner_id) if $partner_id;

	if ($max > 2) {

		$name = "Team ".$school->short_name;

	} elsif ($max == 2) {

		unless ( ($student && $partner) || ($min == 1 && ($student || $partner)) ) {
			$err = "You did not enter enough students for that entry.  Try again";
			$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		if ($student_id == $partner_id) {
			$err = "You have tried to enter the same person twice in a team event.  Try again.";
    	   	$m->redirect("/user/enter/students.mhtml?err=$err&event_id=$event_id&school_id=$school_id");
		}

		unless ($enter_me_twice) {
			samecheck($school,$student, $event);
			samecheck($school,$partner, $event);
		}

		push (@students, $student);
		push (@students, $partner) if $partner;

		$name = $student->last." & ".$partner->last if $student > 0 && $partner > 0;
		$name = $student->first." ".$student->last if $student > 0 && $partner < 1;
		$name = $partner->first." ".$partner->last if $partner > 0 && $student < 1;

	} else {

		unless ($student) {
			$err = "You did not enter a student for that entry.  Try again";
			$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		samecheck($school,$student, $event) unless ($enter_me_twice);
		push (@students, $student);
		$name = $student->first." ".$student->last;

	}

	sub samecheck {

		my ($school, $student, $event) = @_;
		my $tourn = $event->tourn;

		my @entries = $m->comp(
			'/funclib/student_entries.mas',
			student => $student,
			tourn   => $tourn
		);

		if (grep $event->id == $_->event->id, @entries) {
			my $err = $student->first." ".$student->last." is already entered";
			$m->redirect("/user/enter/students.mhtml?school_id=".$school->id."&event_id=".$event->id."&err=$err")
		}
	}

	if ($tourn_settings{"nsda_district"}
		&& ($event_settings{"nsda_event_category"} != "108")
	) {

		my $is_house++ if $event->abbr eq "HSE";
		my $is_senate++ if $event->abbr eq "SEN";

		my $district_limit = $m->comp(
			"/funclib/nsda/entry_limits.mas",
				chapter => $school->chapter,
				house   => $is_house,
				senate  => $is_senate
		);

	    my %district_entry = $m->comp(
			"/funclib/district_entry.mas",
			chapter => $school->chapter
		);

		my $nsda_err;

		if ($event->abbr eq "HSE") {

			if ($district_entry{"house_total"} >= $district_limit) {
				$nsda_err .= "You have reached the entry limit in the House given your chapter's degree strength.";
			}

		} elsif ($event->abbr eq "SEN") {

			if ($district_entry{"senate_total"} >= $district_limit) {
				$nsda_err .= "You have reached the entry limit in the Senate given your chapter's degree strength.";
			}

		} elsif ($event->abbr eq "BQ") {

		} else {

			$district_limit += 2 if $district_entry{"entry_bonus"};

			if ($district_entry{"entry_total"} >= $district_limit) {
				$nsda_err .= "You have reached the Districts entry limit given your chapter's degree strength.";
			}
		}


		unless ($nsda_err) {

			foreach my $student (@students) {

				if ($district_entry{"student_count"}{$student->id} >= 3) {
					$nsda_err .= "<br />" if $nsda_err;
					$nsda_err .= $student->first." ".$student->last." is already registered in 3 district categories";
				}

				unless ($event->type eq "congress") {

					if ($district_entry{"student_count"}{$student->id} == 2) {

						my $is_congress;

						my $event_string;

						foreach my $other (@{$district_entry{"entries"}{$student->id}}) {
							$is_congress++
								if $district_entry{"entry_event_type"}{$other}
								eq "congress";

							$event_string .= "&amp; " if $event_string;
							$event_string .= $district_entry{"entry_event_abbr"}{$other};
						}

						unless ($is_congress) {
							$nsda_err .= "<br />" if $nsda_err;
							$nsda_err .= "No entry may enter three events without one of them being Congress";
							$nsda_err .= "<br />" if $nsda_err;
							$nsda_err .= $student->first." ".$student->last." is in ".$event_string;
						}

					}

				}

				if (scalar @students > 1) {

					# Check for the various limits

					my $other_partner;
					my $other_partner_entry;

					foreach my $other (@{$district_entry{"entries"}{$student->id}}) {

						foreach my $possible (@{$district_entry{"entry_students"}{$other}}) {

							next if $possible == $student->id;
							$other_partner = $possible;
							$other_partner_entry = $other if $other_partner;
						}
					}

					if ($other_partner
						&& ($other_partner != $partner_id)
						&& ($other_partner != $student_id)
					) {

						# Must be on different weekends and one must be DUO.

						unless (
							$event->abbr eq "DUO"
							|| $district_entry{"entry_event_abbr"}{$other_partner_entry} eq "DUO"
						) {

							$nsda_err .= "<br />" if $nsda_err;
							$nsda_err .= "No contestant may enter in both CX and PF";

						} else {

							if ($district_entry{"entry_weekend"}{$other_partner_entry} == $event_settings{"weekend"}) {
								$nsda_err .= "<br />" if $nsda_err;
								$nsda_err .= "You may only enter students into Duo and a team debate event ";
								$nsda_err .= "if the competitions are on different dates.";
								$nsda_err .= "<br />";
								$nsda_err .= $student->first." ".$student->last." is therefore ineligible to enter ".$event->abbr."." ;
							}
						}
					}
				}
			}
		}

		if ($nsda_err) {
			$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$nsda_err");
		}

	}

	my $waitlist_rank;

	if ($waitlist && $event_settings{"waitlist_rank"}) {

		Tab::Entry->set_sql( already => "
			select
				entry.id
				from entry
				where entry.waitlist = 1
				and entry.school = ?
				and entry.event = ?
				and not exists (
					select tba.id
					from entry_setting tba
					where tba.tag = 'tba'
					and tba.entry = entry.id
				)
		");
		my @already = Tab::Entry->search_already($school->id, $event->id);
		$waitlist_rank = scalar @already + 1;
	}

	my $is_waitlist = 0;
	$is_waitlist++ if $waitlist;

	my $entry = Tab::Entry->create({
		tourn         => $tourn->id,
		school        => $school_id,
		waitlist      => $is_waitlist,
		event         => $event_id,
		name          => $name,
		registered_by => $person->id,
		dropped       => 0
	});

	$entry->setting("waitlist_rank", $waitlist_rank) if $waitlist_rank;

	foreach my $student (@students) {

		next unless $entry;
		next unless $student;

		my $es = Tab::EntryStudent->create({
			entry   => $entry->id,
			student => $student->id
		});

		$m->comp("/funclib/person_conflict.mas",
			tourn   => $tourn,
			entered => $person,
			person  => $student->person
		) if $student->person;

	}

	if (@students) {
		$entry->setting("tba", 0);
	}

	my $other_school;

	if ($hybrid && $partner) {

		$other_school = Tab::School->search(
			chapter => $partner->chapter->id,
			tourn   => $tourn->id
		)->first if $partner;

		unless ($other_school) {
			$other_school = $m->comp(
				"/funclib/school_create.mas",
				person         => $person,
				chapter        => $partner->chapter,
				tourn          => $tourn,
				tourn_settings => \%tourn_settings,
			);
		}
	}

	if ($other_school) {
		Tab::Strike->create({
			entry  => $entry->id,
			type   => "hybrid",
			tourn  => $tourn->id,
			school => $other_school->id
		});
	}

	if ($tourn_settings{"track_reg_changes"}) {

		my $description = $person->first." ".$person->last." entered ".$event->abbr." entry $code (".$name.")";

		my $change = $m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			school      => $school_id,
			type        => "registration",
			description => $description,
			person      => $person
		);

	}

	$code = $m->comp("/funclib/entry_code.mas", entry => $entry);

	$entry->code($code);
	$entry->update;

	$name =~ s/\&/and/g;

	$msg = $name." has been entered in ". $event->name;
	$msg = $name." was placed on the waitlist " if $waitlist;

	if ( $event_settings{"ask_for_titles"}
			|| $event_settings{"ask_for_bibliography"}
			|| $event_settings{"code_style"} eq "register"
			|| $event_settings{"ask_quals"}
			|| ($waitlist && $event_settings{"waitlist_rank"} )
			|| $max > 2
			|| $event_settings{"apda"}
			|| $err
		) {

		$m->redirect("/user/enter/details.mhtml?entry_id=".$entry->id."&school_id=$school_id&first=1&err=$err");

	}

	$m->redirect("/user/enter/students.mhtml?event_id=$event_id&school_id=$school_id&first=1&msg=$msg");

</%init>

