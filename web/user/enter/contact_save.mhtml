<%args>
	$person
	$school_id
	$school_code           => undef
	$refund_payable        => undef
	$individuals           => undef
	$coaches               => undef
	$onsite                => undef
	$region_id             => undef
</%args>
<%perl>

	my $school = Tab::School->retrieve($school_id);
	my $tourn = $school->tourn;
	my $other = Tab::School->search( tourn => $tourn->id, code => $school_code)->first;

	my %{$tourn_settings} = $tourn->all_settings;

	undef ($other) if $other && $other->id == $school_id;

	if ($ARGS{"school_name"} && $ARGS{'school_name'} ne $school->name) {
		$ARGS{"school_name"} =~ s/[^\w\s]//g;
		$school->name($ARGS{"school_name"});
		$school->update();

		my $description = $person->first." ".$person->last." changed school ".$school->id." name to ".$ARGS{"school_name"};
		my $change = $m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			school      => $school->id,
			type        => "registration",
			description => $description,
			person      => $person
		);
	}

	my %school_settings = $school->all_settings();

	foreach my $tag (
		"individuals",
		"contact_hotel",
		"contact_hotel_rooms",
		"hotel",
		"hotel_confirmation",
		"refund_method",
		"refund_judge_bond",
	) {

		my $value = $ARGS{$tag};
		if ($value ne $school_settings{$tag}) {
			$school->setting($tag, ($value || 0 ), $person->id);
		}
	}

	$school->chapter->setting("coaches", $coaches);
	my $address;

	if ($ARGS{"mail_contact_name"}) {
		$address = $m->comp("/funclib/address.mas",
			saveme => "yasqueen",
			tag    => "mail",
			input  => \%ARGS
		);
	}

	if ($address) {
		$school->setting("mail_address", "json", $address);
	} else {
		$school->setting("mail_address", 0);
	}

	my $warn;

	if ($tourn_settings->{"per_person_fee"} ) {

		my $bodies = $m->comp("/funclib/school_bodies.mas",
			school => $school
		);

		if ($individuals < $bodies) {
			$warn = "Your individual count is $individuals, which is lower than the $bodies people you have ";
			$warn .= "registered to judge and compete.  Please be sure your count is correct."
		}
	}

	unless ($tourn_settings->{'account_contacts'}) {

		foreach my $tag (
			"contact_name",
			"second_contact_name",
		) {
			my $value = $ARGS{$tag};

			if ($value ne $school_settings{$tag}) {
				$school->setting($tag, ($value || 0 ));
			}
		}

		foreach my $tag (
			"contact_email",
			"second_contact_email",
		) {
			my $value = lc($ARGS{$tag});

			if ($value ne $school_settings{$tag}) {
				$school->setting($tag, ($value || 0 ));
			}
		}

		foreach my $tag (
			"contact_number",
			"second_contact_number"
		) {
			my $value = $ARGS{$tag};
			$value =~ s/[\D_]//g;

			if ($value ne $school_settings{$tag}) {
				$school->setting($tag, ($value || 0 ));
			}
		}

		my %contacts;
		my $count;

		foreach my $category ($m->comp("/funclib/school_categories.mas", school => $school)) {
			if ($ARGS{$category->id."_name"}) {
				$count++;
				$contacts{$category->id}{"name"}  = $ARGS{$category->id."_name"};
				$contacts{$category->id}{"email"} = lc($ARGS{$category->id."_email"});
				$contacts{$category->id}{"phone"} = $ARGS{$category->id."_phone"};
				$contacts{$category->id}{"phone"} =~ s/[\D_]//g;
			}
		}

		if ($count) {
			my $encoded = eval{
				return JSON::encode_json(\%contacts);
			};

			if ($encoded) {
				$school->setting('category_contacts', "text", $encoded);
			} else {
				$school->setting('category_contacts', 0);
			}
		} else {
			$school->setting('category_contacts', 0);
		}
	}

	my $err;

	if ($ARGS{"refund_method"} eq "check") {

		if ($refund_payable ne $school_settings{'refund_payable'}) {

			if ($refund_payable) {
				$school->setting("refund_payable", "text", $refund_payable, $person->id);
			} else {
				$school->setting("refund_payable", 0);
			}
		}

		my $address;

		if ($ARGS{"refund_street"}) {

			$address = $m->comp("/funclib/address.mas",
				saveme => "yasqueen",
				tag    => "refund",
				input  => \%ARGS
			);

			if ($address) {
				$school->setting("refund_address", "json", $address, $person->id);
			} else {
				$school->setting("refund_address", 0);
			}
		}

		unless ($address) {
			$err =  "You must enter a mailing address  for your refund if you select a check";
		}
	} else {
		$school->setting("refund_address", 0);
		$school->setting("refund_payable", 0);
	}

	if ($tourn_settings->{"school_codes"} eq "registrant" && $school_code) {
		$school->code(substr($school_code, 0, 6)) unless $other;
		$err = "School code $school_code taken; please choose a unique code" if $other;
	}

	my $msg = "Contact and name information saved. ";

	if ($tourn_settings->{"regions"} && $tourn_settings->{"ask_regions"}) {

		my $region_circuit = $tourn_settings->{"region_circuit"};
		$region_circuit = 0 unless $region_circuit;

		REGION:
		foreach my $region (
			$m->comp("/funclib/tourn_regions.mas",
				tourn   => $school->tourn,
				circuit => $region_circuit
			)
		) {

			if ($region->id == $region_id) {

				$school->region($region_id);
				$school->update;
				$msg .= $school->name." region updated to ".$school->region->name;

				if ($tourn_settings->{"region_circuit"}) {
					my $membership = Tab::ChapterCircuit->search(
						chapter => $school->chapter,
						circuit => $tourn_settings->{"region_circuit"}
					)->first;

					if ($membership) {
						$membership->region($region_id);
						$membership->update();
					}
				}

				last REGION;
			}
		}

		unless ($region_id) {
			$school->region(0);
			$school->update();
		}
	}

	$school->update();

	my $req     = Apache2::Request->new($r);
	my @handles = $r->upload;

	if (@handles) {
		my $upload = $req->upload($handles[0]);
		my $filename = $upload->filename;
		$filename =~ s/[^\w.]//g;
		$filename =~ s/\.(?=.*\.)//g;
		$filename =~ s/\s//g;

		my $filetemp = $upload->tempname;

		system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/school_upload/".$school->id."/$filename";

		$school->setting("upload_file", "text", $filename);
		$school->setting("upload_file_timestamp", "date", DateTime->now());
	}

	$m->redirect("/user/enter/onsite.mhtml?school_id=".$school->id."&err=$err&warn=$warn") if $onsite;
	$m->redirect("/user/enter/entry.mhtml?school_id=".$school->id."&err=$err&warn=$warn");

</%perl>
