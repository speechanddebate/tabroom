<%args>
	$person
	$school
	$student_id => undef
	$event_id   => undef
	$attempt    => undef
	$hybrid_id  => undef
</%args>
<%init>

	my $tourn = $school->tourn;

	my $student = Tab::Student->retrieve($student_id);
	my $event = Tab::Event->retrieve($event_id);

	$m->abort unless $student;
	$m->abort unless $event;
	$m->abort unless $event->tourn->id == $tourn->id;

	my %event_settings = $event->all_settings();

	my %ok_events = $m->comp(
		"/funclib/student_clear_events.mas",
			student => $student,
			school  => $school
		);

	unless ($ok_events{$event->id}) {
		my $msg = $student->first." ".$student->last." is not eligible to enter in ".$event->name;
		$m->redirect("by_person.mhtml?student_id=".$student->id."&school_id=".$school->id."&msg=$msg");
	}


	if ($event_settings{"no_waitlist"}) {
		my @already = Tab::Entry->search(
			event       => $event->id,
			school      => $school->id,
			unconfirmed => 0
		);

		if (scalar @already >= $event_settings{"school_cap"}) {
			my $err = "Your entry and waitlist limit in ".$event->abbr." have been reached";
			$m->redirect("/user/enter/by_person_edit.mhtml?school_id=".$school->id."&student_id=".$student->id."&err=$err");
		}
	}

	my $edit_needed;
	my %students;
	my $hybrid_yes;

	my $now = DateTime->now();

	if ($now > $tourn->reg_end) {
		my $err = "Tournament registration deadline has passed.  Please contact the tournament if you need further help";
		$m->redirect("/user/enter/by_person_edit.mhtml?school_id=".$school->id."&student_id=".$student->id."&err=$err");
	}

	if ($event_settings{"deadline"}) {
		if ($now > $event_settings{"deadline"}) {
			my $err = "Event registration deadline has passed in ".$event->abbr.". Please contact the tournament if you need further help";
			$m->redirect("/user/enter/by_person_edit.mhtml?school_id=".$school->id."&student_id=".$student->id."&err=$err");
		}
	}

	my $min = $event_settings{"min_entry"} || 1;

	foreach my $tick (1 .. $min) {

		if ($tick == 1 && $student) {
			$students{$student->id}++;
		} elsif ($ARGS{"student_".$tick}) {
			$students{$ARGS{"student_".$tick}}++;
		} elsif ($ARGS{"hybrid_".$tick}) {
			$students{$ARGS{"hybrid_".$tick}}++;
			$hybrid_yes++;
		} else {
			$edit_needed .= "Insufficent number of competitors entered <br />";
		}

	}

	my $hybrid = Tab::School->retrieve($hybrid_id) if $hybrid_id;

	# This takes care of additional extra team members

	my $max = $event_settings{"max_entry"} || 1;

	foreach my $tick (1 .. $max) {
		if ($ARGS{"students_".$tick}) {
			$students{$ARGS{"students_".$tick}}++;
		}
	}

	if ($event_settings{"code_style"} eq "register") {
		$edit_needed .= "Please supply an entry code <br />"
			unless $ARGS{"entry_code"};
	}

	if ($event_settings{"ask_for_titles"}) {
		$edit_needed .= "Piece title/ISBN is required. <br />"
			unless $ARGS{"title"};
	}

	if ($event_settings{"apda"}) {
		$edit_needed .= "APDA Registration seeding not provided <br />"
			unless $ARGS{"registered_seed"};
	}

	my $waitlist = $m->comp("/funclib/waitlist_status.mas",
			event  => $event,
			school => $school
		);

	Tab::Entry->set_sql( tbas => "
		select entry.*
			from entry
		where school = ?
			and event = ?
			and exists (
				select es.id
					from entry_setting es
				where es.tag = 'tba'
					and es.entry = entry.id
			)
	");

	my @existing_tbas = Tab::Entry->search_tbas($school->id, $event->id);

	$edit_needed .= "Please let us know whether to use TBA slots or not"
		if @existing_tbas
		&& (not defined $ARGS{"use_tba"});

	unless ($edit_needed) {

		# I appear to have all the required information so save away!

		my $entry;

		if (@existing_tbas && ($ARGS{"use_tba"} eq "yes") ) {

			$entry = shift @existing_tbas;
			$entry->setting("tba", 0);

		} else {

			$entry = Tab::Entry->create({
				code          => "PENDING!",
				name          => "PENDING!",
				event         => $event->id,
				school        => $school->id,
				registered_by => $person->id,
			});


			if ($tourn->setting("track_reg_changes")) {

				my $description = $person->first." ".$person->last." entered ".$event->abbr." entry ".$entry->name." in ".$event->abbr;

				my $change = $m->comp("/funclib/log.mas",
					tourn       => $tourn->id,
					school      => $school->id,
					type        => "registration",
					description => $description,
					person      => $person
				);

			}
		}

		$entry->waitlist(1) if defined $waitlist;

		# Students

		foreach my $student_id (keys %students) {
			Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $student_id
			});
		}

		if ($hybrid && $hybrid_yes) {
			Tab::Strike->create({
				entry  => $entry->id,
				type   => "hybrid",
				tourn  => $tourn->id,
				school => $hybrid->id
			});
		}

		# Code and name

		if ($ARGS{"entry_code"}) {
			$entry->code($ARGS{"entry_code"});
		}

		if ($entry->code eq "PENDING!") {
			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		}

		$entry->name($m->comp( "/funclib/entry_name.mas", entry => $entry));
		$entry->update();

		$entry->setting('atlarge', $ARGS{"atlarge"});
		$entry->setting('title', $ARGS{"title"});
		$entry->setting('author', $ARGS{"author"});
		$entry->setting('registered_seed', $ARGS{"registered_seed"});

		my $seed = $ARGS{"registered_seed"};

		if ($seed eq "full") {
			$entry->setting("pairing_seed", 1);
		} elsif ($seed eq "half") {
			$entry->setting("pairing_seed", 2);
		} elsif ($seed eq "free") {
			$entry->setting("pairing_seed", 3);
		} elsif ($event_settings{"apda"}) {
			$entry->setting("pairing_seed", 4);
		}

		my $name = $entry->name;
		$name =~ s/&/and/g;

		my %qualifiers;
		my $err;

		if ($event_settings{"ask_quals"}) {

			my $counter;

			foreach my $tick (1 .. $event_settings{"ask_quals"}) {
				if ($ARGS{$entry->id."_qual_name_".$tick}) {
					$counter++;
					$qualifiers{$tick}{"name"} = $ARGS{$entry->id."_qual_name_".$tick};
					$qualifiers{$tick}{"result"} = $ARGS{$entry->id."_qual_result_".$tick};
				}
			}

			if ($counter < $event_settings{"ask_quals"} && (not defined $ARGS{$entry->id."_atlarge"}) ) {
				$err .= "Please supply the required number of qualifiers";

				if ($event_settings{"at_larges"}) {
					$err .= ", or mark the entry as at-large. <br />";
				}
			}

			if (scalar (keys %qualifiers)) {
				$entry->setting('qualifiers', 'json', \%qualifiers);
			} else {
				$entry->setting('qualifiers', 0);
			}
		}

		my $msg = "Entry ".$name." has been registered in ".$event->abbr;

		if ($event_settings{"fine_deadline"}) {
			$msg .= "<br /> Reminder: a drop fee applies if you drop this entry after admission to the waitlist.";
		}

		$m->redirect("by_person_edit.mhtml?student_id=".$student->id."&school_id=".$school->id."&err=$err&msg=$msg");

	}

	# If we're this far, I HAVE NEEDS

</%init>

	<div class="main">

		<& tabbar.mas,
			school => $school,
			whoami => "by_person" &>

		<div class="full nospace">

			<span>
				<a
					title = "Return to full roster"
					class = "fa fa-arrow-left fa-2x bluetext"
					href  = "by_person.mhtml?school_id=<% $school->id %>"
				></a>

			</span>

			<span class="half">
				<h4><% $student->first." ".$student->middle." ".$student->last %></h4>
			</span>


			<span class="third rightalign">
				<h4>
					Adding to <% $event->abbr %>
				</h4>
			</span>

		</div>

%		if ($edit_needed && $attempt && (not defined $hybrid_id)) {

			<div class="warnbox">

				<h5>There's something missing:</h5>

				<p class="redtext bigger">
					<% $edit_needed %>
				</p>
			</div>
%		}

		<form
			action = "by_person_add.mhtml"
			method = "post"
		>

			<input
				type  = "hidden"
				name  = "student_id"
				value = "<% $student->id %>"
			>

			<input
				type  = "hidden"
				name  = "school_id"
				value = "<% $school->id %>"
			>

			<input
				type  = "hidden"
				name  = "event_id"
				value = "<% $event->id %>"
			>

			<input
				type  = "hidden"
				name  = "attempt"
				value = "1"
			>

			<hr >

			<h5>Additional info required:</h5>
<%perl>

			unless ($event_settings{"fine_deadline"}) {
				$event_settings{"fine_deadline"} = $tourn->setting("fine_deadline");
			}

			if ($event_settings{"fine_deadline"}) {
				my $drop_fine = $tourn->setting("drop_fine");
				$drop_fine = $event_settings{'drop_fine'} if $event_settings{'drop_fine'};
				if ($drop_fine) {
</%perl>
					<div class="centeralign redtext semibold padvertmore">
						A fee of <% $tourn->setting("currency") %><% $drop_fine %>
						is applied to any entry admitted off the waitlist which is
						then dropped
%						if ($event_settings{"fine_deadine"} > $now) {
							after <& "/funclib/showdt.mas", dt => $event_settings{'fine_deadline'}, tz => $tourn->tz, length => "long" &>
%						}
					</div>
%				}
%			}

%			if (@existing_tbas) {

				<div class="row">

					<span class="twofifths rightalign">
						Assign to one of your <% scalar @existing_tbas." ".$event->abbr %> TBA slots:
					</span>

					<label for="use_tba_yes">

						<span class="sixth centeralign hover">
							<input
								type  = "radio"
								name  = "use_tba"
								id    = "use_tba_yes"
								value = "yes"
								<% $ARGS{"use_tba"} ? 'checked="checked"' : "" %>
							>
							Yes!
						</span>
					</label>

					<label for="use_tba_no">

						<span class="sixth centeralign hover">
							<input
								type  = "radio"
								name  = "use_tba"
								id    = "use_tba_no"
								value = "no"

								<% $ARGS{"use_tba"} ? "" : 'checked="checked"' %>
							>
							No!
						</span>
					</label>

				</div>

%			}

			<&
				"entry_edit.mas",
					school  => $school,
					student => $student,
					event   => $event,
					add     => 1,
					hybrid  => $hybrid
			&>

			<div class="libl pagefull padvertless rightalign marno">
				<span class="centeralign third">
					<input type="submit" value="Save Entry">
				</span>
			</div>

		</form>

	</div>
