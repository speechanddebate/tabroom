<%args>
	$person
	$target_id     => undef
	$property_name => undef
	$other_value   => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{
			"error": true,
			"message": "No school ID sent"
		}');
		$m->abort();
	}

	my $school = Tab::School->retrieve($target_id);

	unless ($school) {
		$m->print('{
			"error": true,
			"message": "No school found for ID '.$target_id.'"
		}');
		$m->abort();
	}

	my $now = DateTime->now();

	if ($now > $school->tourn->reg_end) {
		$m->print('{
			"error": true,
			"message": "The tournament registration deadline has passed"
		}');
		$m->abort();
	}


	my $errs;
	my $msg;
	my $counter;

	ENTRY:
	foreach my $entry ($school->entries( unconfirmed => 1)) {

		# If this is districts, check those limits

		my $event = $entry->event;
		my $school = $entry->school;
		my $chapter = $school->chapter;
		my $tourn = $school->tourn;

		my $is_house;
		my $is_senate;
		my $district_limit;
		my %district_entry;

		if ($tourn->setting("nsda_district")) {

			$is_house++ if $event->abbr eq "HSE";
			$is_senate++ if $event->abbr eq "SEN";

			$district_limit = $m->comp(
				"/funclib/nsda/entry_limits.mas",
				chapter => $chapter,
				house   => $is_house,
				senate  => $is_senate
			);

			%district_entry = $m->comp(
				"/funclib/district_entry.mas",
				chapter  => $chapter
			);

		}

		if ($event->setting("nsda_event_category") == 108) {
			undef $district_limit;
		}

		if ($district_limit) {

			if ($event->type ne "congress" && $district_entry{"entry_bonus"}) {
				$district_limit += 2;
			}

			my $district_count;

			if ($is_house) {
				$district_count = $district_entry{"house_total"};
			} elsif ($is_senate) {
				$district_count = $district_entry{"senate_total"};
			} elsif ($event->abbr ne "BQ") {
				$district_count = $district_entry{"entry_total"}
			}

			if ($district_count >= $district_limit) {
				next ENTRY;
			}
		}

		foreach my $student ($entry->students) {

			my %ok_events = $m->comp(
				"/funclib/student_clear_events.mas",
					student => $student,
					school  => $entry->school
			);

			unless ($ok_events{$entry->event->id}) {

				$errs .=  $student->first." ".$student->last." is not eligible ";
				$errs .= "to enter in ".$entry->event->name." due to double ";
				$errs .= "entry restrictions ";

			}

		}

		next if $errs;

		# Check if the event is in waitlist land
		my $waitlist_status = $m->comp(
			"/funclib/waitlist_status.mas",
				event  => $entry->event,
				school => $entry->school
		);

		$entry->unconfirmed(0);

		if ($waitlist_status) {
			$entry->waitlist(1);
		} else {
			$entry->waitlist(0);
		}

		$entry->registered_by($person->id);
		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		$entry->update();

		$counter++;
	}

	$msg = $counter." entries registered into the tournament. ";
	$msg .= $errs if $errs;

	my %response = (
		error   => 0,
		message => $msg
	);

	$m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
