<%args>
	$category_id
	$region
	$tourn
	$person
	$cj_id        => undef
	$first        => undef
	$last         => undef
	$judge_id     => undef
	$school_id    => undef
	$alt_category => 0
	$email        => undef
	$parli        => undef
	$jpool_id     => undef
	$notes        => undef
	$save         => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);

	my $msg;
	my $err;
	my $missing;

	my $category = Tab::Category->retrieve($category_id);
	my $school = Tab::School->retrieve($school_id);
	my $judge;

	if ($judge_id) {

		$judge = Tab::Judge->retrieve($judge_id);

		$judge->last($last);
		$judge->first($first);
		$judge->school($school->id);
		$judge->alt_category($alt_category);
		$judge->setting("parli", $parli);
		$judge->setting('notes', 'text', $notes);

		$judge->update;

		my $cj = $judge->chapter_judge;
		$cj->first($first);
		$cj->last($last);
		$cj->update;

		$msg = "Changes to Judge $first $last saved ";

	} elsif ($cj_id) {

		my $cj = Tab::ChapterJudge->retrieve($cj_id);

		if (not defined $cj) {
			$err = "Invalid judge record $cj_id";
		} elsif (not defined $cj->person) {
			$err = "Judge ".$cj->last." has no Tabroom account linked";
		} elsif (not defined $cj->person->phone) {
			$err = "Judge ".$cj->last." has no phone listed in their Tabroom account";
		} else {

			my $chapter = $cj->chapter;
			my $school = $chapter->schools(tourn => $tourn->id)->first;

			Tab::Judge->set_sql( cj_dupes => "
				select
					judge.id
				from judge, category
				where category.tourn = ?
					and category.id = judge.category
					and judge.chapter_judge = ?
			");

			my @cj_dupes = Tab::Judge->search_cj_dupes($tourn->id, $cj->id);

			Tab::Judge->set_sql( person_dupes => "
				select
					judge.id
				from judge, category
				where category.tourn = ?
					and category.id = judge.category
					and judge.person = ?
					and judge.id != ?
			");

			my @person_dupes = Tab::Judge->search_person_dupes($tourn->id, $cj->person, $judge_id);

			if (@cj_dupes) {

				$err = "That school roster judge is already entered in the tournament in ".$cj_dupes[0]->category->abbr;

			} elsif (@person_dupes) {

				$err = "A judge with the tabroom account ".$cj->person->email." is already entered in the tournament in ".$person_dupes[0]->category->abbr;

			} else {

				unless ($school) {
					$school = Tab::School->create({
						tourn   => $tourn->id,
						chapter => $chapter->id,
						name    => $chapter->name,
						region  => $region->id,
					}) unless $school;

					$school->setting("entered_on", "date", $now);
					$school->setting("contact", $person->id);
				}

				$judge = Tab::Judge->create({
					first         => $cj->first,
					last          => $cj->last,
					tourn         => $tourn->id,
					school        => $school->id,
					category      => $category_id,
					alt_category  => $alt_category,
					active        => 1,
					chapter_judge => $cj->id,
					person        => $cj->person,
					hired         => 0,
					obligation    => 0
				});

				$judge->setting("parli", $parli);
				$judge->setting('notes', 'text', $notes);

				$msg = "Judge ".$judge->first." ".$judge->last." has been added to ".$category->abbr;

			}
		}


	} else {

		if ($first && $last && $school) {

			my $cj = $school->chapter->chapter_judges(
				first   => $first,
				last    => $last,
				retired => 0
			)->first;

			unless ($cj) {
				$cj = Tab::ChapterJudge->create({
					first   => $first,
					last    => $last,
					chapter => $school->chapter->id
				});
			}

			$judge = Tab::Judge->create({
				first         => $first,
				last          => $last,
				tourn         => $tourn->id,
				school        => $school->id,
				category      => $category_id,
				alt_category  => $alt_category,
				active        => 1,
				chapter_judge => $cj->id,
				hired         => 0,
				obligation    => 0
			});

			$judge->setting("parli", $parli);
			$judge->setting('notes', 'text', $notes);

			$msg = "Judge $first $last added to the tournament";

		} else {

			$missing .= "first " unless $first;
			$missing .= "last " unless $last;
			$missing .= "school " unless $school;

			$err = "You did not fill in all required info.  All fields except for Notes ";
			$err .= "are needed.  Missing $missing. Try again. <br />";
			$m->redirect("/user/diocese/tourn_judge_edit.mhtml?category_id=".$category->id."&tourn_id=".$tourn->id."&region_id=".$region->id."&err=$err");

		}
	}

	if ($category->setting("ask_alts") &! $alt_category) {
		$missing .= "alt_category" unless $alt_category;
		$err .= "Please specify an alternative judging category.<br />";
	}

	if ($category->setting("ask_parli") &! $parli) {

		$missing .= "parli" unless $parli;
		$err .= "Please specify whether the judge can be a parliamentarian.<br />";

	} elsif (
		$category->setting("ask_parli")
		&& $region->setting('quota') > 4
		&& $parli ne "Y"
	) {

		Tab::Judge->set_sql(parli => "
			select judge.id
			from judge, school, judge_setting parli

			where judge.category = ?
				and judge.school = school.id
				and school.region = ?
				and school.tourn = ?
				and judge.id = parli.judge
				and parli.tag = 'parli'
		");

		my @parlis = Tab::Judge->search_parli($category->id, $region->id, $tourn->id);

		unless (@parlis) {
			$err .= "Your Congress judges so far do not not include a qualified parliamentarian. ";
			$err .= "Dioceses with quotas of 5 or 6 must bring at least one parliamentarian.  ";
			$err .= "Add another or substitute a parliamentarian for this judge. <br />";
		}
	}

	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas",
		category => $category,
		limit       => "ncfl_prelims"
	);

	if (@prelim_jpools) {

		unless ($jpool_id) {
			$missing .= "jpool";
			$err .= "You did not specify a prelim pool.  Please fix. <br />";
		} else {

			my $jpool = Tab::JPool->retrieve($jpool_id);

			unless ( (not defined $judge) || ($jpool->id == $judge->setting("prelim_jpool")) ) {

				my @already = $m->comp("/funclib/judge_jpools.mas",
					judge => $judge,
					limit => "ncfl_prelims");

				foreach (@already) {
					my @jpool_memberships = Tab::JPoolJudge->search(
						jpool => $_->id,
						judge => $judge->id);

					foreach my $jpm (@jpool_memberships) {
						$jpm->delete;
					}
				}

				$judge->setting("prelim_jpool", $jpool_id);
				$judge->setting("prelim_jpool_name", $jpool->name);
				Tab::JPoolJudge->create({ judge => $judge->id, jpool => $jpool->id});

			}
		}

	}

    my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;

    my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;

	if (@subsets) {

		SUBSET:
		foreach my $subset (@subsets) {

			unless ($ARGS{$subset->id}) {
				$missing .= "rating";
				$err .= "You did not rate the judge's experience.  Please try again<br /.>";
				next SUBSET;
			}

			my $rating = Tab::Rating->search(
				judge         => $judge->id,
				type          => "coach",
				rating_subset => $subset->id
			)->first;

			if ($rating) {

				$rating->rating_tier($ARGS{$subset->id});
				$rating->update;

			} else {

				$rating = Tab::Rating->create({
					judge         => $judge->id,
					rating_subset => $subset->id,
					rating_tier   => $ARGS{$subset->id},
					type          => "coach",
					entered       => $now
				});

			}
		}

	} elsif (@tiers) {

		unless ($ARGS{"rating_tier"}) {

			$err .= "You did not rate the judge's experience.  Please try again.<br />";
			$missing .= "rating";

		} elsif ($judge) {

			my @ratings = Tab::Rating->search( judge => $judge->id, type => "coach" );

			my $rating = shift @ratings if @ratings;
			foreach (@ratings) { $_->delete; }

			if ($rating) {

				$rating->rating_tier($ARGS{"rating_tier"});
				$rating->update;

			} else {

				$rating = Tab::Rating->create({
					judge       => $judge->id,
					rating_tier => $ARGS{"rating_tier"},
					type        => "coach",
					entered     => $now
				});
			}
		}
	}

	if ($email) {

		my $person = Tab::Person->search( email => $email)->first;

		if ($person) {

			Tab::Judge->set_sql( person_dupes => "
				select
					judge.id
				from judge, category
				where category.tourn = ?
					and category.id = judge.category
					and judge.person = ?
					and judge.id != ?
			");

			my @person_dupes = Tab::Judge->search_person_dupes($tourn->id, $person, $judge);

			if (@person_dupes) {
				$err .= "A judge with the tabroom account ".$person->email." is already entered ";
				$err .= "in the tournament in ".$person_dupes[0]->category->abbr.", so you may ";
				$err .= "not link this judge to that account";

			} else {

				unless ($person->phone > 0) {
					$err .= "The Tabroom account $email is missing a phone number.  Ask the ";
					$err .= "user to enter a valid phone number in their account to continue.";
				} else {
					$judge->person($person->id);
					$judge->update();
				}
			}
		} else {
			$err .= "No Tabroom account was found for $email.  Please enter a valid Tabroom ";
			$err .= "account to continue.";
		}
	}


	if ($err) {

		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?judge_id=".$judge."&category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&missing=$missing&err=$err");

	} elsif ($save eq "Save and Return To Roster") {

		$m->redirect("/user/diocese/tourn_judges.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");

	} else {

		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");

	}

</%init>

