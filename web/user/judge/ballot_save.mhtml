<%args>
	$person
	$dbh
	$panel_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);

	unless ($panel_id && $judge_id) {
		my $err = "I didn't get both a judge and a ballot record. ";
		$err .= "Hit back and refresh and try again.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($panel && $judge) {
		my $err = "No ballots found for that judge and that panel.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	unless ($person->site_admin || $judge->person->id == $person->id) {
		my $err = "You are not authorized to enter ballots for that judge.";
		$m->redirect("/user/home.mhtml?err=$err")
	}

	my @ballots = Tab::Ballot->search(
		judge => $judge->id,
		panel => $panel->id,
		audit => 0
	);

	my %ballot_by_id = map {$_->id => $_} @ballots;

	my @clean;
	my $chair;

	foreach my $ballot (@ballots) {

		unless ($ballot->entry > 0) {
			$ballot->delete();
			next;
		}

		unless ($ballot->entry->active) {
			$ballot->audit(1);
			$ballot->update();
			next;
		}

		unless ($chair) {
			$chair++ if $ballot->chair;
		}

		push @clean, $ballot;
	}

	@ballots = @clean;

	unless (@ballots) {
		my $err = "No unfinished ballots were found for that judge.  ";
		$err .= "Either you were not judging in that room or you are ";
		$err .= "trying to enter already-entered ballots.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $unconfirmed;
	foreach my $ballot (@ballots) {
		$unconfirmed++ unless $ballot->audit > 0;
	}

	unless ($unconfirmed) {
		my $err = "Those ballots were already confirmed.  ";
		$err .= "Please contact tab if you believe there was an error";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $round = $panel->round;
	my $event = $round->event;
	my $category = $event->category;

	my %event_settings = $event->all_settings;
	my %category_settings = $category->all_settings;

	my $tourn = $category->tourn;
	my $type = $event->type;

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_lpw++ if $event_settings{"no_lpw"};
	$no_lpw++ if $type eq 'speech' || $type eq 'congress';
	undef $no_lpw if $event_settings{"allow_lowpoints"};

	my $tiebreaks               = $round->protocol;
	my $ballot_entry_name       = $category_settings{"ballot_entry_names"};
	my $ballot_entry_first_name = $category_settings{"ballot_entry_first_names"};
	my $ballot_school_code      = $category_settings{"ballot_school_codes"};
	my $ballot_school_name      = $category_settings{"ballot_school_names"};

	my %tb_types = $m->comp("/funclib/tiebreak_types.mas", round => $round);

	my $team_points;
	my $team_ranks;
	my @entries;
	my %entry;
	my %student;
	my %already;
	my %drop_ballot;
	my %comments_left;

	my $rfd_left;
	my $max_headcount;
	my $round_type = $round->type;

	foreach my $ballot (@ballots) {

		my $entry = $ballot->entry;
		next unless $entry;

		$entry{$entry->id}{"ballot"} = $ballot;
		$drop_ballot{$ballot->id}++ if $entry->dropped;

		unless ($already{$entry->id}++) {

			$entry->speaks($ballot->speakerorder);
			$entry->side($ballot->side);

			push @entries, $entry;
			my @students = $entry->students;

			@{$entry{$entry->id}{"students"}} = @students;

			foreach my $student (@students) {
				$student{$student->id}{"entry"}  = $entry;
				$student{$student->id}{"ballot"} = $ballot;
				$student{$student->id}{"obj"} = $student;
			}

			$entry{$entry->id}{"headcount"} = scalar @students;

			$max_headcount = $entry{$entry->id}{"headcount"}
				if $max_headcount < $entry{$entry->id}{"headcount"};
		}

		if ($category_settings{"ballot_times"}) {

			my $time = $ARGS{$ballot->id."_time"};

			my $time_score = Tab::Score->search(
				tag    => "time",
				ballot => $ballot->id
			)->first;

			if ($time && $time ne "" && $time ne "0" && $time ne "0:00") {

				if ($time_score) {
					$time_score->content($time);
					$time_score->update();

				} elsif ($time > 0) {

					$time_score = Tab::Score->create({
						tag     => "time",
						ballot  => $ballot->id,
						content => $time
					});
				}

			} elsif ($time_score) {
				$time_score->delete();
			}
		}

		my $rfd = Tab::Score->search(
			tag    => "rfd",
			ballot => $ballot->id
		)->first;

		my $text = $m->comp(
			"/funclib/save_editor.mas",
			text => $ARGS{"rfd"}
		);

		my $test_length = $text;
		unless ($rfd_left) {
			$test_length =~ s|<.+?>||g;
			$test_length =~ s/^\s+//;
			$test_length =~ s/\s+$//;

			my @words = split (/\ /, $test_length);
			$rfd_left += scalar @words;
		}

		if ($text) {

			if (not defined $rfd) {
				$rfd = eval {
					return Tab::Score->create({
						tag     => "rfd",
						ballot  => $ballot->id
					});
				};
			}

			if ($rfd) {
				$rfd->text($text);
				$rfd->update();
			}
		}

		$text = $m->comp(
			"/funclib/save_editor.mas",
			text => $ARGS{"comments_".$ballot->id}
		);

		$test_length = $text;
		$test_length =~ s|<.+?>||g;
		$test_length =~ s/^\s+//;
		$test_length =~ s/\s+$//;

		$test_length =~ s/\t/ /g;
		$test_length =~ s/\r/ /g;
		$test_length =~ s/\n/ /g;
		$test_length =~ s/\s+/ /g;

		chomp $test_length;
		my @words = split ' ', $test_length;
		$comments_left{$ballot->id} += scalar @words;

		my $comments = Tab::Score->search(
			tag    => "comments",
			ballot => $ballot->id
		)->first;

		if ($text) {

			unless ($comments) {
				$comments = Tab::Score->create({
					tag     => "comments",
					ballot  => $ballot->id
				});
			}

			$comments->text($text);
			$comments->update();
		}
	}

	my $po_panel;
	my @po_entries;
	my $po_round;
	my %po_tb_types;

	if ($event_settings{"po_contest"}) {

		Tab::Panel->set_sql(po_target => "
			select panel.*
				from panel, round, event

			where event.id = ?
				and event.type = 'congress'
				and event.id = round.event
				and round.name = ?
				and round.id = panel.round
				and panel.letter = ?
		");

		$po_panel = Tab::Panel->search_po_target(
			$event_settings{"po_contest"},
			$round->name,
			$panel->letter
		)->first;

		if ($po_panel > 0) {
			$po_round = $po_panel->round;

			@po_entries = $m->comp(
				"/funclib/panel_entries.mas",
				panel => $po_panel
			);

			%po_tb_types = $m->comp(
				"/funclib/tiebreak_types.mas",
				round => $po_round
			);
		}

		foreach my $po_entry (@po_entries) {

			my $po_ballot = $po_panel->ballots(
				judge => $judge->id,
				entry => $po_entry
			)->first;

			if ($po_ballot) {

				if ($po_tb_types{"winloss"}) {

					my @existing = $po_ballot->scores( tag => "winloss" );

					foreach (@existing) {
						eval {$_->delete(); };
					}

					my $winner = 0;

					if ($ARGS{"po_winloss"} eq  $po_entry->id) {
						$winner = 1;
					}

					Tab::Score->create({
						ballot   => $po_ballot->id,
						value    => $winner,
						tag      => "winloss"
					});
				}

				if ($po_tb_types{"point"}) {

					my @existing = $po_ballot->scores( tag => "point" );

					foreach (@existing) {
						eval {$_->delete(); };
					}

					Tab::Score->create({
						ballot   => $po_ballot->id,
						value    => $ARGS{"po_point_".$po_entry->id},
						tag      => "point"
					});
				}

				if ($po_tb_types{"rank"}) {

					my @existing = $po_ballot->scores( tag => "rank" );

					foreach (@existing) {
						eval {$_->delete(); };
					}

					Tab::Score->create({
						ballot   => $po_ballot->id,
						value    => $ARGS{"po_rank_".$po_entry->id},
						tag      => "rank"
					});
				}
			}
		}
	}

	if ($skipme) {

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id&default=rankings";

		foreach my $key (keys %ARGS) {
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			next if $key eq "tourn_settings";
			next if $key eq "person_settings";
			next if $key eq "perms";
			next if index($key, 'comments') != -1;
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&msg=RFD and comments Saved";
		$m->redirect("ballot.mhtml".$url_args);

	}

	my $total_points;

	if ($type eq "speech"
		|| $type eq "congress"
		|| $event_settings{"team_points"}
	) {
		$team_points++ if $tb_types{"point"};
		$team_ranks++ if $tb_types{"rank"};
		undef $tb_types{"point"};
		undef $tb_types{"rank"};
	}

	my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);

	my $forfeit;

	$forfeit++
		if $type eq "speech"
		&& $tiebreaks->setting("forfeits_never_break");

	my $forfeit_last;

	$forfeit_last++
		if $type eq "speech"
		&& $tiebreaks->setting("forfeits_rank_last");

	my $max_points = $event_settings{"max_points"};
	my $min_points = $event_settings{"min_points"};
	$min_points = 0 unless $min_points;

	my $point_increments = $event_settings{"point_increments"};
	my $point_ties = $event_settings{"point_ties"};
	my $subscores = $event_settings{"wsdc_categories"};

	my %max_subpoints = ();
	my %min_subpoints = ();

	my @scores = ("Style", "Content", "Strategy", "POI");

	foreach my $key (@scores) {

		$min_subpoints{$key} = $event_settings{"min_".lc($key)."_points"};
		$max_subpoints{$key} = $event_settings{"max_".lc($key)."_points"};

		$min_subpoints{$key} = 0 unless $min_subpoints{$key};

		$min_subpoints{"total"} += $min_subpoints{$key} unless $key eq "POI";
		$max_subpoints{"total"} += $max_subpoints{$key} unless $key eq "POI";

	}

	my $trash = pop @scores unless $max_subpoints{"POI"};

	my $errs;

	if ($type eq "debate") {
		if ($event_settings{"rfd_plz"}) {
			if ($rfd_left < $event_settings{'rfd_plz'}) {
				$errs .= "This tournament requires a Reason for Rankings/Decision. ";
				$errs .= "Please leave at least ".$event_settings{"rfd_plz"}." words under the Reason for Decision/Ranks space. (You left $rfd_left) <br />";
			}
		}
	}

	my $comments_header;

	if ($type eq "speech") {
		if ($event_settings{"comments_plz"}) {

			foreach my $ballot (keys %comments_left) {

				next if $drop_ballot{$ballot};
				next if $ARGS{$ballot."_forfeit"};

				if ($comments_left{$ballot} < $event_settings{'comments_plz'}) {

					unless ($comments_header++) {
						$errs .= "This tournament requires comments for each speaker.  ";
						$errs .= "Please leave at least ".$event_settings{"comments_plz"}." words of feedback for each speaker. <br /><br />";
					}

					$errs .= $ballot_by_id{$ballot}->entry->code." has only ".$comments_left{$ballot}." words <br />";
				}
			}
		}
	}

	my $side_disagree;
	my $speakerorder_disagree;

	my $no_side_constraints++
		if $event_settings{'no_side_constraints'};

	undef $no_side_constraints
		if ($round_type eq "elim" || $round_type eq "final")
		&& $event_settings{"sidelock_elims"};


	my $sidelocks++
		if ($round_type eq "elim"
			|| $round_type eq "final"
			|| $round_type eq "runoff"
		)
		&& (not defined $no_side_constraints)
		&& (not defined $event_settings{"sidelock_elims"});

	if (
		$type eq "speech"
		|| $type eq "congress"
		|| $event_settings{"flip_online"}
	) {
		undef $no_side_constraints;
		undef $sidelocks;
	}

	my $locked;

	if ($sidelocks) {
		$locked =  $m->comp(
			"/funclib/round_elim_dueaff.mas",
			panel => $panel
		);
	}

	my %sides = ();

	if ($no_side_constraints || ($sidelocks && (not defined $locked))) {

		my %taken = ();
		my $changed;

		foreach my $other_ballot ($panel->ballots) {
			next if $other_ballot->judge && $other_ballot->judge->id == $judge->id;
			$sides{$other_ballot->entry->id} = $other_ballot->side;
		}

		BALLOT:
		foreach my $ballot (@ballots) {

			my $side = $ARGS{$ballot->id."_side"};

			my $disagreement_sth = $dbh->prepare("
				select
					ballot.id, ballot.judge, judge.first, judge.last, ballot.side
				from ballot, judge
				where ballot.panel = ?
					and ballot.audit = 1
					and ballot.judge = judge.id
					and ballot.entry = ?
					and ballot.side != ?
					and judge.id != ?
					and judge.id > 0
			");

			$disagreement_sth->execute($panel->id, $ballot->entry, $side, $judge->id);
			my $results = $disagreement_sth->fetchall_hash();

			if ($results && (scalar @{$results} > 0)) {
				$side_disagree++;
			}

			if ($type ne "mock_trial" && $ballot->side != $side) {
				$m->comp("/funclib/swap_sides.mas", panel => $ballot->panel, person => $person);
				$changed++;
				last if $changed;
			}
		}

		if ($changed) {
			foreach my $ballot (@ballots) {
				if ($ballot->side == 2) {
					$ballot->side(1);
					$ballot->update();
				} else {
					$ballot->side(2);
					$ballot->update();
				}
			}
		}
	}

	if ($type eq "speech") {

		if ($no_side_constraints) {

			my %taken = ();
			my %speakerorders = ();
			my %entries;

			foreach my $ballot (@ballots) {
				$entries{$ballot->entry->id}++;
			}

			my $num_entries = scalar (keys %entries) + 1;

			foreach my $ballot (@ballots) {
				$ballot->speakerorder($num_entries++);
			}

			foreach my $ballot (@ballots) {

				my $speakerorder = $ARGS{$ballot->id."_speakerorder"};
				$errs .= "<p>You must specify a speaker order for both entries</p>" unless $speakerorder;

				if ($taken{$speakerorder}) {
					$errs .= "<p>You cannot make entries all on one speakerorder.  Try again</p>"
				} else {
					$taken{$speakerorder}++;
					$ballot->speakerorder($speakerorder);
					$ballot->update;
					$speakerorders{$speakerorder} = $ballot->entry->id;
					$speakerorders{$ballot->entry->id} = $speakerorder;
				}
			}

			foreach my $other_judge (
				$m->comp("/funclib/panel_judges.mas",
					panel => $panel
				)
			) {

				next if $other_judge->id == $judge->id;

				my ($win, $side, $winspeakerorder) = $m->comp(
					'/funclib/panel_winner.mas',
						panel => $panel,
						judge => $other_judge
				);

				if ($win && $winspeakerorder) {
					$speakerorder_disagree++ if $speakerorders{$winspeakerorder} != $win->id;
				} else {

					my @ballots = Tab::Ballot->search(
						judge => $other_judge->id,
						panel => $panel->id,
						audit => 0
					);

					foreach my $ballot (@ballots) {
						next unless $ballot->entry;
						$ballot->speakerorder($speakerorders{$ballot->entry->id});
						$ballot->update;
					}
				}
			}
		}
	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

	if ($tb_types{"rank"}) {

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) {

			my $rank = $ARGS{$student->id."_ranks"};

			if ($chair && $event_settings{"parli_noautofill"}) {
				# Do nothing, the parli should have done their job here
				undef $event_settings{"truncate_fill"};

			} elsif (
				$event_settings{"scorer_max"}
				&& $event_settings{"truncate_fill"}
				&& ($rank > $event_settings{"truncate_fill"})
			) {
				# Do nothing, this should trip the duplicate ranks error
				$errs .= "<p>Rank $rank is over ".$event_settings{"truncate_fill"};
				$errs .= ". Leave entries ranked above ".$event_settings{"truncate_fill"}." blank</p>";

			} elsif (
				$event_settings{"truncate_fill"}
				&& (not defined $rank)
			) {
				$rank = $event_settings{"truncate_fill"};
			}

			$errs .= "<p>Rank missing for ".$student->last."</p>" unless $rank;

			next unless $rank;

			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>" if $rank_taken{$rank};

			$errs .= "<p>Rank $rank is outside of range.</p>"
				if $rank < 1
				|| $rank > scalar @students;

			$rank_taken{$rank}++
				unless ($event_settings{"truncate_fill"} || $event_settings{"allow_rank_ties"});

			$student{$student->id}{"rank"} = $rank;

			if ($tb_types{"point"}) {
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}
		}

		my $current;

		foreach my $rk (reverse sort {$a <=> $b} keys %rank_points) {

			if ($rank_points{$rk} < $current) {
				$errs .= "<p>Speaker ranked $rk has worse speaks than a lower ranked student";
				$errs .= "(".$rank_points{$rk}." vs ".$current.")</p>";
			}
			$current = $rank_points{$rk};
		}

		my $num = scalar @entries;
		$num = $event_settings{"truncate_fill"} if $num > $event_settings{"truncate_fill"};

		if ($num) {
			foreach my $rank (1 .. $num) {
				next if $rank == $event_settings{"truncate_fill"};
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}
	}

	if ($team_ranks) {

		my %rank_taken;
		my %rank_points;
		my $max_rank;

		BALLOT:
		foreach my $ballot (@ballots) {

			my $rank;
			my $not_here;

			if ( ($forfeit || $forfeit_last)  && $ARGS{$ballot->id."_forfeit"}) {
				$entry{$ballot->entry->id}{"forfeit"} = 1;
			} else {

				if ($tb_types{"tv"}  && $ARGS{$ballot->id."_tv"}) {
					$entry{$ballot->entry->id}{"tv"} = 1;
				}

				$rank = $ARGS{$ballot->id."_ranks"};

				if ($chair && $event_settings{"parli_noautofill"}) {
					# Do nothing, the parli should have done their job here
					undef $event_settings{"truncate_fill"};
				} elsif (
					$event_settings{"scorer_max"}
					&& $event_settings{"truncate_fill"}
					&& ($rank && $rank > $event_settings{"truncate_fill"})
				) {
					# Do nothing, this should trip the duplicate ranks error
					$errs .= "<p>Rank $rank is higher than ".$event_settings{"truncate_fill"}."</p>";

				} elsif (
					$event_settings{"truncate_fill"}
					&& ($rank < 1)
				) {
					$rank = $event_settings{"truncate_fill"};
				}

				unless ($drop_ballot{$ballot->id}) {

					$errs .= "<p>Rank missing for ".$ballot->entry->code."</p>" unless $rank;
					next BALLOT unless $rank;

					$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);

					unless ($event_settings{"allow_rank_ties"}) {
						$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>"
							if $rank_taken{$rank} && ($rank != $event_settings{"truncate_fill"});
					}

					$errs .= "<p>Rank $rank is outside of range</p>" if $rank < 1 || $rank > scalar @ballots;
				}

				$rank_taken{$rank}++ if $rank;
				$entry{$ballot->entry->id}{"rank"} = $rank if $rank;
				$max_rank = $rank if $max_rank < $rank;
			}

			if ($team_points) {
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}
		}

		if ($forfeit_last) {
			$max_rank++;
			foreach my $ballot (@ballots) {
				if ($entry{$ballot->entry->id}{"forfeit"}) {
					$entry{$ballot->entry->id}{"rank"} = $max_rank;
				}
			}
		}

		my $current;
		my $not_ok;
		my $ok;

		foreach my $rank ( sort {$a <=> $b} keys %rank_points) {
			next unless $rank;
			if ($current) {
				if ($rank_points{$rank} < $current) {
					$ok++
				} elsif ($rank_points{$rank} == $current && $point_ties) {
					$ok++
				} elsif ($rank_points{$rank} > $current) {
					$not_ok .= ", " if $not_ok;
					$not_ok .= $rank." (".$rank_points{$rank}.")";
				}
			}

			$current = $rank_points{$rank};
		}

		if ($ARGS{"lpw"} && $not_ok && $no_lpw) {

			$errs .= "<p>Rank order must match the order of points given.</p>";

		} elsif ($not_ok && (not defined $ARGS{"lpw"})) {

			$errs .= "<p>Entry ranked $not_ok has worse points than a lower ranked entry</p>";

			if ($no_lpw) {
				$errs .= "<p>Rank order must match the order of points given.</p>";
			} else {
				$errs .= "<p>You must mark the low-point rank checkbox if that's what you intend.</p>";
			}

		} elsif ($ARGS{"lpw"} && (not defined $not_ok)) {

			$errs .= "<p>You marked the low-point rank checkbox, but the ranks are ";
			$errs .= "in order of points.  Please check for errors and correct them.</p>";

		}

		my $num = scalar @entries;
		$num = $event_settings{"truncate_fill"} if $num > $event_settings{"truncate_fill"};

		if ($num) {
			foreach my $rank (1 .. $num) {
				next if $rank == $event_settings{"truncate_fill"};
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}
	}

	if (
		$team_points
		&& (
			($type eq "mock_trial" && (not defined $event_settings{"ballot_rubric"}) )
			|| (not defined $tb_types{"point"})
		)
	) {

		my %points_taken = ();

		BALLOT:
		foreach my $ballot (@ballots) {

			my $points = $ARGS{$ballot->id."_points"};
			$points = 0 unless $points;
			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			unless ($drop_ballot{$ballot->id} || $entry{$ballot->entry->id}{"forfeit"}) {

				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
					if $points_taken{$points} && $point_ties < 1;

				if ($min_points > 0 || $max_points > 0) {
					$errs .= "<p>Points $points are outside of range $min_points - $max_points</p>"
						if ($points < $min_points) || ($points > $max_points);
				}
			}

			$points_taken{$points}++;
			$entry{$ballot->entry->id}{"points"} += $points;
		}
	}

	my $winner;
	my %rubrics;

	if (
		$type eq "mock_trial"
		&& $event_settings{"ballot_rubric"}
		&& $tb_types{"point"}
	) {
		if ($chair && $event_settings{"chair_scores"}) {

		} elsif ($chair && $event_settings{"chair_winloss"}) {
			undef $tb_types{'point'};
			undef $event_settings{"ballot_rubric"};
		} elsif ($chair) {
			undef $event_settings{"ballot_rubric"};
			undef $tb_types{'point'};
			undef $tb_types{'winloss'};
		}
	}

	if ($event_settings{'chair_only_outstanding'}) {
		if ($chair) {
			$tb_types{'outstanding_yes'}++;
			$event_settings{"ballot_rubric"}++;
		} else {
			$tb_types{'outstanding_no'}++;
		}
	}

	if (
		$event_settings{"ballot_rubric"}
		&& ($tb_types{"point"} || $tb_types{"outstanding_yes"} || $team_points )
	) {

		if ($team_points || $tb_types{'point'}) {
			my $last;
			my %points_taken;
			$team_points++;

			my $clear_scores_sth = $dbh->prepare("
				delete score.* from score, ballot
					where score.ballot = ballot.id
					and score.tag IN ('rubric', 'point', 'winloss', 'speaker')
					and ballot.panel = ?
					and ballot.judge = ?
			");

			$clear_scores_sth->execute($panel->id, $judge->id);
			$clear_scores_sth->finish();

			foreach my $ballot (@ballots) {

				my $total;
				my %rubric;
				my $side = $ballot->side;

				if ($ARGS{$ballot->id."_points"}) {

					$total = $ARGS{$ballot->id."_points"};

				} else {

					foreach my $row_id (sort {$a <=> $b} keys %{$event_settings{"ballot_rubric"}{$side}}) {

						my $row = $event_settings{"ballot_rubric"}{$side}{$row_id};

						if (not defined $ARGS{$side."_".$row_id."_points"}) {
							$ARGS{$side."_".$row_id."_points"} = 0;
						}

						if ($ARGS{$side."_".$row_id."_points"} < $row->{'min'}) {
							$errs .= "<p>Your points for ".$row->{'label'}." were below the minimum ".$row->{'min'}."</p>";
						};

						if ($ARGS{$ballot."_".$row_id."_speaker"}) {
							$rubric{$row_id}{"speaker"} = $ARGS{$ballot."_".$row_id."_speaker"};
						}

						$rubric{$row_id}{"points"} = $ARGS{$side."_".$row_id."_points"};
						$rubric{$row_id}{"label"}  = $row->{"label"};

						if ($row->{"mult"}) {
							$ARGS{$side."_".$row_id."_points"} = $ARGS{$side."_".$row_id."_points"} * $row->{"mult"};
						}

						$total += $ARGS{$side."_".$row_id."_points"};
						$total_points += $ARGS{$side."_".$row_id."_points"};
					}
				}

				unless ($total > 0) {
					$errs .= "<p>Your points total was zero. </p>";
				} else {

					Tab::Score->create({
						ballot  => $ballot,
						tag     => "rubric",
						content => JSON::encode_json(\%rubric)
					});

					Tab::Score->create({
						ballot => $ballot,
						tag    => "point",
						value  => $total
					});

					$rubrics{$ballot}{"scores"} = \%rubric;
					$rubrics{$ballot}{"total"}  = $total;
					$rubrics{$ballot}{"entry"}  = $ballot->entry;
					$rubrics{$ballot}{"side"}   = $side;

					if ($points_taken{$total}) {

						$errs .= "<p>Tied points forbidden: you have two teams with points $total </p>";

					} else {

						if ($last) {
							if ($total > $last) {
								$winner = $ballot;
								$last = $total;
							}
						} else {
							$winner = $ballot;
							$last = $total;
						}
					}
				}
			}

			if ($winner) {

				foreach my $ballot (@ballots) {

					my $result = 0;

					if ($ballot == $winner) {
						$result = 1;
						$ARGS{"winner_side"} = $ballot->side;
					}

					Tab::Score->create({
						ballot => $ballot,
						tag    => 'winloss',
						value  => $result
					});
				}
			} else {
				$errs .= "<p>Winner not selected.  Please fill in all points blanks for the winner to be determined.</p>";
			}

		}

		if ($event_settings{"roles_rubric"}) {

			my %taken;

			my $wipe_role = $dbh->prepare("
				delete score.*
				from score, ballot
				where ballot.panel = ?
					and ballot.id      = score.ballot
					and score.tag      = 'speaker'
					and score.position = ?
			");

			foreach my $order (sort {$a <=> $b} keys %{$event_settings{"roles_rubric"}}) {

				my $student_id = $ARGS{"roles_".$order};
				my $row = $event_settings{"roles_rubric"}{$order};

				if ($student_id) {

					if ($student{$student_id} && $ARGS{"roles_".$order."_points"} > 0) {

						$wipe_role->execute($panel->id, $order);

						Tab::Score->create({
							ballot   => $student{$student_id}{"ballot"},
							tag      => 'speaker',
							position => $order,
							student  => $student_id,
							value    => $ARGS{"roles_".$order."_points"}
						});

						$rubrics{"roles"}{$order} = $student{$student_id}{"obj"};
						$rubrics{"roles_entry"}{$order} = $student{$student_id}{"entry"};

					} elsif ($student{$student_id}) {
						$errs .= "<p>You have not selected a point score for your nominee for best ".$event_settings{"roles_rubric"}->{$order}{"label"}."</p>";
					} else {
						$errs .= "<p>You have not selected an  for place number ".$order."</p>";
					}
				}
			}
		}

		if ($event_settings{"speakers_rubric"}) {

			my %taken;

			foreach my $order (sort {$a <=> $b} keys %{$event_settings{"speakers_rubric"}}) {

				my $student_id = $ARGS{"speaker_".$order};
				my $row = $event_settings{"speakers_rubric"}{$order};

				if ($student_id) {
					if ($student{$student_id}) {

						if ($taken{$student_id}++) {
							$errs .= "<p>You have selected the same speaker in multiple places</p>";
						} else {

							my $score = Tab::Score->create({
								ballot  => $student{$student_id}{"ballot"},
								tag     => 'speaker',
								student => $student_id,
								value   => $row->{"points"},
								topic   => $row->{'label'},
								speech  => $order
							});

							$rubrics{"outstanding"}{$order} = $student{$student_id}{"obj"};
							$rubrics{"outstanding_entry"}{$order} = $student{$student_id}{"entry"};
						}

					} else {
						$errs .= "<p>You have selected an invalid speaker for ".$row->{"label"}."</p>";
					}
				} else {
					$errs .= "<p>You have not selected a speaker for ".$row->{"label"}."</p>";
				}
			}
		}

		if ($errs) {

			my $url_args = "?panel_id=$panel_id&judge_id=$judge_id&default=rankings";

			foreach my $key (keys %ARGS) {
				next if $key eq "panel_id";
				next if $key eq "judge_id";
				next if $key eq "rfd";
				next if $key eq "tourn_settings";
				next if $key eq "defaults";
				next if $key eq "person_settings";
				next if $key eq "perms";
				next if index($key, 'comments') != -1;
				$url_args .= "&$key=$ARGS{$key}";
			}

			$url_args .= "&errs=$errs";
			$m->redirect("ballot.mhtml".$url_args);
		}
	}

	if (
		(not defined $event_settings{"ballot_rubric"})
		|| ($chair && $event_settings{"chair_winloss"})
	) {

		if ($tb_types{"point"}) {

			my %points_taken;

			foreach my $student (@students) {

				my $points = $ARGS{$student->id."_points"};
				$points = 0 unless $points;

				$errs .= "<p>Points missing</p>"
					if $min_points > 0
					&& (not defined $points);

				$errs .= "<p>Points $points below minimum of ".$min_points."</p>"
					if $min_points > $points;

				next unless $points;

				$points = int($points + 0.5) if $point_increments eq "whole";

				if ($point_increments eq "tenths") {
					$points = $points * 10;
					$points = int($points + 0.5);
					$points = $points/10;
				}

				$points = nearest(.5, $points) if $point_increments eq "half";
				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				if ($subscores) {

					my $subtotal;

					foreach my $score (@scores) {

						my $subpoints = $ARGS{$student->id."_".$score};

						if ($subpoints < $min_subpoints{$score}
							|| $subpoints > $max_subpoints{$score}) {

							$errs .= "<p>Points $subpoints for ".$student->last." are out of range</p>";
						}
						$student{$student->id}{$score} = $subpoints;
						$subtotal += $subpoints;
					}

					if ($subtotal != $points) {
						$errs .= "<p>Point subscores do not add up to $points</p>";
					}
				}

				if (not defined $event_settings{"ballot_rubric"}) {
					$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
						if $points_taken{$points}
						&& $point_ties < 1;

					if ($min_points > 0 && $max_points > 0) {
						$errs .= "<p>Points $points are outside of range $min_points - $max_points</p>"
							if $points < $min_points
							|| $points > $max_points;
					}
				}

				$points_taken{$points}++;
				$student{$student->id}{"points"} = $points;
				$entry{$student{$student->id}{"entry"}}{"points"} += $points;
				$total_points += $points;
			}
		}

		if ($tb_types{"winloss"})  {

			my $winning_ballot = $ARGS{"winner"};
			$winner = Tab::Ballot->retrieve($winning_ballot);

			$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>"
			unless $winner;

			$errs .= "<p>Your winner and your chosen side did not agree</p>"
				if $winner
				&& $winner->side != $ARGS{"winner_side"};

			#2nd bit avoid mavericks
			if ($winner && $entry{$winner->entry->id}{"headcount"} == $max_headcount) {

				my $winner_points = $entry{$winner->entry->id}{"points"};

				foreach my $ballot (@ballots) {

					my $bal_points = $entry{$ballot->entry->id}{"points"};

					if ($no_lpw) {

						$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>"
							if $winner_points < $bal_points;

					} else {

						$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>"
							if $winner_points < $bal_points
							&& (not defined $ARGS{"lpw"});

						$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>"
							if $winner_points > $bal_points
							&& $ARGS{"lpw"};
					}
				}
			}
		}

		if ($errs) {

			my $url_args = "?panel_id=$panel_id&judge_id=$judge_id&default=rankings";

			foreach my $key (keys %ARGS) {
				next if $key eq "panel_id";
				next if $key eq "judge_id";
				next if $key eq "rfd";
				next if $key eq "tourn_settings";
				next if $key eq "defaults";
				next if $key eq "person_settings";
				next if $key eq "perms";
				next if index($key, 'comments') != -1;
				$url_args .= "&$key=$ARGS{$key}";
			}

			$url_args .= "&errs=$errs";
			$m->redirect("ballot.mhtml".$url_args);

		} else {

			# Clear the old cruft

			Tab::Score->set_sql( clear_cruft => "
				delete score.*
					from score, ballot
				where ballot.panel   = ?
					and ballot.judge = ?
					and score.tag    = ?
					and ballot.id    = score.ballot"
			);

			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "rank");
			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "point");
			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "winloss");

			if ($subscores) {
				foreach my $score (@scores) {
					Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "subpoints_".lc($score));
				}
			}

			sleep 1;

			BALLOT:
			foreach my $ballot (@ballots) {

				if ($tb_types{"tv"} && $entry{$ballot->entry->id}{"tv"}) {
					$ballot->tv(1);
				}

				$ballot->audit(0);
				$ballot->update;

				if ($entry{$ballot->entry->id}{"forfeit"}) {
					$ballot->forfeit(1);
					$ballot->update();

					if ($forfeit_last && $entry{$ballot->entry->id}{"rank"}) {
						my $ranks = Tab::Score->search({
							ballot  => $ballot->id,
							tag     => "rank",
						})->first;

						if ($ranks) {
							$ranks->value($entry{$ballot->entry->id}{"rank"})
						} else {
							Tab::Score->create({
								ballot => $ballot->id,
								tag    => "rank",
								value  => $entry{$ballot->entry->id}{"rank"}
							});
						}

						if ($tb_types{"point"}) {

							my $points = Tab::Score->search({
								ballot  => $ballot->id,
								tag     => "point",
							})->first;

							if ($points) {
								$points->value(0);
							} else {
								Tab::Score->create({
									ballot => $ballot->id,
									tag    => "point",
									value  => 0
								});
							}
						}
					}
					next BALLOT;
				}

				if ($tb_types{"winloss"}) {

					my $tigers_blood = 0;

					$tigers_blood++ if $winner->id == $ballot->id;

					my $winner = Tab::Score->search({
						ballot => $ballot->id,
						tag	=> "winloss"
					})->first;

					unless ($winner) {

						eval {
							$winner = Tab::Score->create({
								ballot   => $ballot->id,
								value    => $tigers_blood,
								tag      => "winloss"
							});
						};
					}
				}

				if ($tb_types{"best_po"}) {

					my $best_po = Tab::Score->search({
						ballot => $ballot->id,
						tag    => "best_po"
					})->first;

					if ($ARGS{"best_po"} eq $ballot->id) {

						unless ($best_po) {
							$best_po = Tab::Score->create({
								ballot   => $ballot->id,
								value    => 1,
								tag      => "best_po"
							});
						}

						$entry{$ballot->entry->id}{"best_po"}++;
					}
				}

				if ($team_points) {

					if ($type eq "speech" || $type eq "congress") {

						my $points = Tab::Score->search(
							ballot => $ballot->id,
							tag    => "point"
						)->first;

						eval {
							$points = Tab::Score->create({
								ballot   => $ballot->id,
								tag      => "point",
								value    => $entry{$ballot->entry->id}{"points"}
							});
						} unless $points;

					} else {

						foreach my $student (@students) {

							next unless $student{$student->id}{"entry"} == $ballot->entry->id;

							my $value = $entry{$ballot->entry->id}{"points"};

							if (defined $value) {

								unless (Tab::Score->search(
									ballot  => $ballot->id,
									tag     => "point",
									student => $student->id
								)) {

									my $points = eval {
										return Tab::Score->create({
											ballot  => $ballot->id,
											student => $student->id,
											tag     => "point",
											value   => $entry{$ballot->entry->id}{"points"}
										});
									};
								}
							}
						}
					}
				}

				if ($tb_types{"point"}) {

					foreach my $student (@students) {

						next unless $student{$student->id}{"entry"} == $ballot->entry->id;

						my $points = Tab::Score->search(
							ballot  => $ballot->id,
							tag     => "point",
							student => $student->id
						)->first;

						$student{$student->id}{"points"} = 0 unless $student{$student->id}{"points"};

						if ($points) {

							if (not defined $student{$student->id}{"points"}) {
								$points->delete();
							} else {
								$points->value($student{$student->id}{"points"});
								$points->update();
							}

						} else {

							$points = eval {
								Tab::Score->create({
									ballot   => $ballot->id,
									student  => $student->id,
									tag      => "point",
									value    => $student{$student->id}{"points"}
								});
							};

							unless ($points) {

								$points = Tab::Score->search(
									ballot  => $ballot->id,
									tag     => "point",
									student => $student->id
								)->first;

								if (not defined $student{$student->id}{"points"}) {
									$points->delete();
								} else {
									$points->value($student{$student->id}{"points"});
									$points->update();
								}
							}
						}

						if ($subscores) {

							foreach my $score (@scores) {

								Tab::Score->create({
									ballot   => $ballot->id,
									student  => $student->id,
									tag      => "subpoints_".lc($score),
									content  => lc($score),
									value    => $student{$student->id}{$score}
								});
							}
						}
					}
				}

				if ($tb_types{"rank"}) {

					foreach my $student (@students) {

						next unless $student{$student->id}{"entry"} == $ballot->entry->id;

						my $value = 0;

						$value = $student{$student->id}{"rank"}
							if $student{$student->id}{"rank"};

						my $ranks = Tab::Score->search({
							ballot  => $ballot->id,
							tag     => "rank",
							student => $student->id}
						)->first;

						$ranks = eval {
							return Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "rank",
								value    => $value
							});
						}
					}
				}

				if ($team_ranks) {

					if ($type eq "speech" || $type eq "congress") {

						my $ranks = Tab::Score->search(
							ballot => $ballot->id,
							tag    => "rank"
						)->first;

						if ($ranks) {

							$ranks->value($entry{$ballot->entry->id}{"rank"});
							$ranks->update();

						} else {
							$ranks = eval {
								return Tab::Score->create({
									ballot   => $ballot->id,
									tag      => "rank",
									value    => $entry{$ballot->entry->id}{"rank"}
								});
							};
						}

					} else {

						foreach my $student (@students) {

							next unless $student{$student->id}{"entry"} == $ballot->entry->id;

							my $ranks = Tab::Score->search(
								ballot  => $ballot->id,
								tag     => "rank",
								student => $student->id
							)->first;

							unless ($ranks) {
								$ranks = Tab::Score->create({
									ballot  => $ballot->id,
									student => $student->id,
									tag     => "rank",
									value   => $entry{$ballot->entry->id}{"rank"} || 0
								});
							} else {
								$ranks->value($entry{$ballot->entry->id}{"rank"} || 0);
								$ranks->update();
							}
						}
					}
				}
			}
		}
	}

</%init>

	<div class="main ballotmain">

%		if ($tb_types{"point"} && (not defined $total_points)) {

			<div class="block padmuchmore martop centeralign">

				<br />
				<br />
				<br />
				<br />
				<br />

				<h1 class="centeralign redtext">
					YOU GAVE NO POINTS?!
				</h1>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

				<h4 class="martop centeralign">
					If you are trying to enter a forfeit, stop.  Contact the
					tab room.  They have to enter forfeit/forfeit wins, not
					you.
				</h4>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

			</div>
<%perl>
		}

		if ($tb_types{"winloss"} && $side_disagree < 1) {

			my $winside = $ARGS{"winner_side"};
			my $side = $aff_string if $winside == 1;
			$side = $neg_string if $winside == 2;
</%perl>

			<div class="full">

				<h2>Your ballot is almost complete</h2>

%				unless ($type eq "mock_trial") {

					<div class="full flexrow centeralign">
						<h5>
							You voted for
							<% $side %>: <% $winner->entry->code %>
							<% $winner->entry->name
								%><% $no_side_constraints ?
								": ".Lingua::EN::Numbers::Ordinate::ordinate($winner->speakerorder)." speakers"
								: ""
							%>
						</h5>
					</div>

%				} else {

					<div class="centeralign flexrow marbottom ltbordertop padtopmore">
						<span class="half rightalign padright">
							<h6 class="semibold">
								You voted for:
							</h6>
						</span>
						<span class="half leftalign padleft">
							<h6 class="semibold">
								<% $winner && $winner->entry ? $winner->entry->code : "NO ONE" %> on the <% $side %>
							</h6>
						</span>
					</div>

%				}

%		} else {

			<h4 class="marbottommore">
				Please confirm your ranking of this round:
			</h4>
<%perl>
		}

		if (
			($event_settings{"ballot_rubric"} || $event_settings{"ballot_rubric_single"})
			&& ($tb_types{"point"} || $tb_types{'outstanding_yes'})
		) {

			unless ($chair && $event_settings{'chair_only_outstanding'}) {

				foreach my $ballot (sort {$a->side <=> $b->side} @ballots) {
</%perl>
					<span class="half marbottom top">
						<div class="full flexrow">
							<span class="twothirds">
								<h6><% $ballot->entry->code %>/<% $ballot->side == 1 ? $aff_string : $neg_string %></h6>
							</span>

							<span class="third nowrap padtop semibold centeralign <% $winner == $ballot ? "greentext" : "redtext" %>">
								<% $winner == $ballot ? "WINNING SIDE" : "LOSING SIDE" %>
							</span>
						</div>

<%perl>
						my $notfirst;

						foreach my $order (
							sort {$a <=> $b}
							keys %{$event_settings{"ballot_rubric"}{$ballot->side}}
						) {

							my $row = $event_settings{"ballot_rubric"}{$ballot->side}{$order};
							my $speaker = $student{$rubrics{$ballot}{"scores"}{$order}{"speaker"}}{"obj"};
</%perl>
							<div class="row flexrow <% $notfirst++ ? "" : "bluebordertop" %>">
								<span class="fourfifths padleft padvertless nowrap smallish">
									<% $row->{"label"} %>
%									if ($speaker) {
										<div class="full nospace padvertless italic graytext smallish">
											<% $speaker->first." ". $speaker->last %>
										</div>
%									}
								</span>
								<span class="fifth rightalign padright">
									<% $rubrics{$ballot}{"scores"}{$order}{"points"} %>
									<% $row->{"mult"}
										? "<span class='padleft italic smallish'>x".$row->{"mult"}."</span>"
										: ""
									%>
								</span>
							</div>
%						}

						<div class="bluebordertop flexrow">
							<span class="fourfifths semibold padleft padvert">
								TEAM TOTAL
							</span>
							<span class="fifth rightalign padright">
								<% $rubrics{$ballot}{"total"} %>
							</span>
						</div>

					</span>
%				}
%			}

		</div>

%			if ( $event_settings{"roles_rubric"} && (not defined $tb_types{'outstanding_no'})) {

				<h6 class="martopmore">
					Top Competitors Selected
				</h6>

				<div class="full centeralign">
					<span class="ninetenths leftalign">
<%perl>
					my $notfirst;

					foreach my $order (sort {$a <=> $b} keys %{$event_settings{"roles_rubric"}}) {

						my $student = $rubrics{"roles"}{$order};
						my $entry = $rubrics{"roles_entry"}{$order};

						if ($student) {
</%perl>
							<div class="flexrow odd <% $notfirst++ ? "" : "bluebordertop" %>">
								<span class="twofifths semibold padleft padvert">
									<% $event_settings{"roles_rubric"}{$order}{"label"} %>
								</span>
								<span class="twofifths">
									<% $student->first." ".$student->last %>
								</span>
								<span class="fifth padleft graytext smallish">
									<% $entry->code %>
								</span>
							</div>
%						}
%					}

					</span>
				</div>

%			} elsif ($event_settings{"speakers_rubric"}) {

				<h6 class="martopmore">
					Top Competitors Selected
				</h6>

				<div class="full nospace">
<%perl>
					my $notfirst;

					foreach my $order (sort {$a <=> $b} keys %{$event_settings{"speakers_rubric"}}) {

						my $student = $rubrics{"outstanding"}{$order};
						my $entry = $rubrics{"outstanding_entry"}{$order};

						if ($student) {
</%perl>
							<div class="flexrow row <% $notfirst++ ? "" : "bluebordertop" %>">
								<span class="twofifths semibold padleft">
									<% $event_settings{"speakers_rubric"}{$order}{"label"} %>
								</span>
								<span class="twofifths">
									<% $student->first." ".$student->last %>
								</span>
								<span class="fifth padleft graytext smallish">
									<% $entry->code %>
								</span>
							</div>
%						}
%					}
				</div>
%			}

			<p class="centeralign padtopmore martopmuchmore redtext semibold bluebordertop">
				Please check the accuracy of the information above &amp; confirm below.
			</p>

			<p class="centeralign graytext bigger semibold marbottommore">
				You cannot change scores once confirmed.
%				unless ($type eq "mock_trial" && (not defined $event_settings{mock_trial_feedback})) {
					You may write or edit feedback until the end of the tournament.
%				}
			</p>

			<div class="full flexrow">
				<span class="half centeralign padleft padright">
					<a
						class="redtext buttonwhite invert full confirm wrap"
						href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
					>
						NO! <% $side_disagree
								? "FIX SIDES PLEASE"
								: "RE-ENTER BALLOT"
							%>
					</a>
				</span>

				<span class="half centeralign padleft padright">
					<a
						class="greentext buttonwhite invert full confirm wrap"
						href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
					>
						YES! CORRECT! CONFIRMED!
					</a>
				</span>
			</div>
<%perl>

		} else {

			if (($team_points || $team_ranks) && $side_disagree < 1) {

				my $switch;

				@entries =
					sort {$entry{$a->id}{"points"} <=> $entry{$b->id}{"points"} } @entries
					if $team_points;

				@entries =
					sort {$entry{$a->id}{"rank"} <=> $entry{$b->id}{"rank"} } @entries
					if $team_ranks;

</%perl>
				<& "/funclib/tablesorter.mas",
					table => "final",
					nobuttons => 1
				&>

				<table id="final">

					<thead>
						<tr class="smallish yellowrow nosort centeralign">

%							if ($team_ranks) {
								<th>
									Rank
								</th>
%							}

%							if ($team_points) {
								<th>
									Points
								</th>
%							}

%							if ($chair && $tb_types{"best_po"}) {
								<th>
									Best PO
								</th>
%							}

							<th>
								Code
							</th>

%						   if ($ballot_school_code) {
								<th>
									School
								</th>
%						   }
%						   if ($ballot_school_name) {
								<th>
									School
								</th>
%						   }

%						   if ($ballot_entry_name) {
								<th>
									Name
								</th>
%						   }

%						   if ($ballot_entry_first_name) {
								<th>
									First Name
								</th>
%						   }

%						   if ($category_settings{'ballot_entry_titles'}) {
								<th>
									Title/Question
								</th>
%						   }

%							if ($type eq "speech" && (not defined $tourn->setting('mock_trial_registration'))) {
								<th>
									Spoke
								</th>
%							}

%							if ($tb_types{"tv"}) {
								<th>
									Violation
								</th>
%							}
						</tr>

					</thead>

					<tbody>
<%perl>
					foreach my $entry (@entries) {

						next if $entry->dropped
							&! $entry{$entry->id}{"rank"}
							&! $entry{$entry->id}{"points"};
</%perl>

						<tr>
%							if ($entry{$entry->id}{"forfeit"}) {
								<td class="centeralign semibold redtext">
									Forfeit
%								if ($entry{$entry->id}{"rank"}) {
									/ <% $entry{$entry->id}{"rank"} %>
%								}
								</td>

%							} elsif ($team_ranks) {
								<td class="centeralign">
									<% $entry{$entry->id}{"rank"} %>
								</td>
%							}

%							if ($team_points) {
								<td class="centeralign">
									<% $entry{$entry->id}{"points"}
										?  $entry{$entry->id}{"points"}
										: "ZERO"
									%>
								</td>
%							}

%							if ($chair && $tb_types{"best_po"}) {
								<td class="centeralign">
									<% $entry{$entry->id}{"best_po"}
										? "YES"
										: ""
									%>
								</td>
%							}

							<td class="centeralign">
								<% $entry->code %>
							</td>

%							if ($ballot_school_code) {
								<td class="centeralign">
									<% $entry->school->code %>
								</td>
%							}

%							if ($ballot_school_name) {
								<td>
									<% $entry->school->name %>
								</td>
%							}

%						   if ($ballot_entry_name) {
								<td>
									<% $entry->name %>
								</td>
%						   }

%						   if ($ballot_entry_first_name) {
								<td>
%									foreach my $student (@{$entry{$entry->id}{"students"}}) {
										<% $student->first %>
%									}
								</td>
<%perl>
						   }

						   if ($category_settings{'ballot_entry_titles'}) {

								my $title;

								$title = $entry{$entry->id}{"ballot"}->scores(
									tag => "title"
								)->first if $entry{$entry->id}{"ballot"};
</%perl>
								<td>
									<% $title ? $title->text : "" %>
								</td>
%						   }

%							if ($type eq "speech" && (not defined $tourn->setting('mock_trial_registration'))) {
								<td class="centeralign">
									<% Lingua::EN::Numbers::Ordinate::ordinate($entry->speaks) %>
								</td>
%							}
%							if ($tb_types{"tv"}) {
								<td class="centeralign redtext semibold">
									<% $entry{$entry->id}{"ballot"}->tv ? "Y" : "" %>
								</td>
%							}

						</tr>
%					}

					</tbody>
				</table>
<%perl>
			}

			if (($tb_types{"point"} || $tb_types{"rank"})
				&& $side_disagree < 1
			) {

				foreach my $entry (@entries) {
</%perl>
					<span class="pagehalf">

						<span class="semibold bigger full padvertmore martopmore">
							<% $entry->side == 1 ? $aff_string : $neg_string %>
							<% $entry->code %> scores
						</span>

%						my $switch;
%						foreach my $student (@{$entry{$entry->id}{"students"}}) {

							<div class="odd padmore">
								<span class="half rightalign">
									<%	$student->first." ".$student->last %>:
								</span>
%								if ($tb_types{"point"}) {
									<span class="quarter centeralign">
										<% $student{$student->id}{"points"}
											?  $student{$student->id}{"points"}
											: "ZERO"
										%>
%								}

%								if ($tb_types{"rank"}) {
									<span class="quarter centeralign">
										<% Lingua::EN::Numbers::Ordinate::ordinate(
											$student{$student->id}{"rank"}
										) %>
									</span>
%								}

							</div>

%						}

					</span>
%				}
%			}

%			if ($event_settings{"po_contest"}) {

				<h5>Presiding Officers</h5>
<%perl>
				foreach my $po_entry (@po_entries) {

					my $po_ballot = $po_entry->ballots(
						judge => $judge,
						panel => $po_panel
					)->first;

					my %scores = map {$_->tag => $_} $po_ballot->scores;
</%perl>
					<div class="row">

						<span class="twofifths nospace">
							<span class="third semibold">
								<span class="spacer"></span>
								<% $po_entry->code %>
							</span>

							<span class="twothirds">
								<span class="spacer"></span>
								<% $po_entry->name %>
							</span>
						</span>

						<span class="fifth centeralign greentext semibold">
%							if ($po_tb_types{"winloss"}) {
%								if ($scores{"winloss"} && $scores{"winloss"}->value == 1) {
									WINNER
%								}
%							}
						</span>

						<span class="fifth centeralign">
%							if ($po_tb_types{"rank"}) {
%								if ($scores{"rank"} && $scores{"rank"}->value == 1) {
									RANK <% $scores{"rank"}->value %>
%								}
%							}
						</span>

						<span class="fifth centeralign">
%							if ($po_tb_types{"point"}) {
%								if ($scores{"point"} && $scores{"point"}->value == 1) {
									<% $scores{"point"}->value %> POINTS
%								}
%							}
						</span>
					</div>
%				}
%			}

%			if ($side_disagree) {

				<h1 class="redtext semibold centeralign">WHOOOPS!</h1>

				<h6 class="redtext martopmore marbottommore semibold centeralign">
					Your ballot disagreed with another judge's on sides.
				</h6>

				<h6 class="redtext martopmore marbottommore semibold centeralign">
					You marked them the opposite way as another judge in this debate.
				</h6>

				<h6 class="orangetext martopmore marbottommore semibold centeralign">
					Please confirm: which team was actually <% $aff_string %>? </h4>
				<h6>

				<div class="centeralign martopmuchmore">
<%perl>
					my $color;
					foreach my $entry (@entries) {
						$color = "blue" if $color eq "green";
						$color = "green" unless $color;
</%perl>
						<span class="pagehalf">
							<a
								class = "confirm <% $color %>text buttonwhite invert full"
								href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>"
							>
								<% $entry->code %> was <% uc($aff_string) %>
							</a>
						</span>
%					}
				</div>

%			} else {

				<p class="centeralign padtop martopmuchmore bigger semibold bluebordertop">
					Please check the accuracy of the information above &amp; confirm
				</p>

				<p class="centeralign bigger semibold">
					You cannot change confirmed ballots online
				</p>

				<p class="centeralign bigger semibold marbottommore">
					You may write further feedback until the end of the tournament
				</p>

				<div class="full martopmuchmore flexrow">
					<span class="half centeralign ballotconfirm padleft padright">
						<a
							class="redtext buttonwhite invert full confirm"
							href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
						>
							NO! <% $side_disagree
									? "FIX SIDES PLEASE"
									: "RE-ENTER BALLOT"
								%>
						</a>
					</span>

					<span class="half centeralign ballotconfirm padleft padright">
						<a
							class="greentext buttonwhite invert full confirm"
							href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
						>
							YES! CORRECT! CONFIRM!
						</a>
					</span>
				</div>
%			}
%		}
	</div>
	</div>

	<div class="menu ballotmenu">
%		unless ($type eq "mock_trial" && (not defined $event_settings{mock_trial_feedback})) {
			<div class="sidenote">
				<h4>RFD</h4>
				<% $ARGS{"rfd"} %>
			</div>
%		}

	</div>

