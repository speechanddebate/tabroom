<%args>
	$person
	$strike_id => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($strike_id) {
		$m->print('{ "error": true, "message": "No Strike ID sent"}');
		$m->abort();
	}

	my $strike = Tab::Strike->retrieve($strike_id);

	my $ok;
	my $message;
	my $judge;
	my $tourn;

	if ($strike) {

		$judge = $strike->judge;

		if ($judge) {

			$tourn = $judge->category->tourn;

			if ($judge->person == $person->id) {

				if ($judge && $judge->person == $person->id) {

					if ($strike->conflictee || $strike->entered_by == $person->id) {

						$message = "Constraint against ".$strike->entry->code." removed by ".$person->email
							if $strike->type eq "entry";

						$message = "Constraint against ".$strike->school->code." removed by ".$person->email
							if $strike->type eq "school";

						$message = "Constraint against ".$strike->region->name." removed by ".$person->email
							if $strike->type eq "region";

						$strike->delete();
					}
				}
			}
		}
	}

	if ($message && $judge && $tourn) {

		$m->comp("/funclib/log.mas",
			type        => 'conflicts',
			tourn       => $tourn->id,
			person      => $person->id,
			judge       => $judge->id,
			description => $message
		);

	} else {
		$m->print('{ "error": true, "message": "Constraint cannot be removed"}');
		$m->abort();
	}

	$m->print('{ "error": false, "message": "'.$message.'"}');
	$m->flush_buffer();
	$m->abort();

</%init>
