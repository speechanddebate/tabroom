<%args>
	$person
	$perms
	$chapter_judge_id => undef
	$judge_id         => undef
</%args>
<%init>

	if ($chapter_judge_id) {

		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);

		my @admins;

		if ($cj > 0 && $cj->chapter > 0) {

			# Check for repeats
			my @already = Tab::ChapterJudge->search(
				chapter => $cj->chapter,
				person  => $person->id
			);

			push @already, Tab::ChapterJudge->search(
				chapter        => $cj->chapter->id,
				person_request => $person->id
			);

			if (@already) {
				my $err = "You are already linked to another judge on that school's roster. ";
				$err .= "You can only be linked to 1 judge per roster at a time. ";
				$err .= "If you are linking yourself to all your school's judges, DO NOT. ";
				$err .= "Each judge must have their OWN Tabroom account for the system to function.";
				$m->redirect("search.mhtml?err=$err");
			}

			$cj->person_request($person->id);
			$cj->update();

			my $subject = "[Tabroom] ". $person->email." requests access to judge ".$cj->first." ".$cj->last;
			my $url = $Tab::url_prefix."/user/chapter/judges.mhtml?chapter_id=".$cj->chapter->id;

			my $body = "The Tabroom user \n\n".$person->first." ".$person->last." (".$person->email.") \n";
			$body .= "\nhas requested online access to updates, ballots and texts ";
			$body .= "for judge ".$cj->first." ".$cj->last."\n in your team roster.\n";

			$body .= "\n\nIf these are the same people, approve this request by logging ";
			$body .= "into Tabroom and visiting\n\n";

			$body .= $url;

			$body .= "\n\nIf this is not authorized, you do not need to do anything.\n\n";

			my @admins = $m->comp("/funclib/chapter_admins.mas", chapter => $cj->chapter);

			my @ids;

			foreach my $admin (@admins) {
				next if $admin->no_email;
				push @ids, $admin->id;
			}

			my $now = DateTime->now();
			my $numberwang = substr($now->epoch, -6, 6);
			my $from_string = "Tabroom Link <judgelink_".$numberwang.'@www.tabroom.com>';
			my $reply_to = $person->first." ".$person->last." <".$person->email.">";

			$m->comp("/funclib/send_notify.mas",
				from     => $from_string,
				reply_to => $reply_to,
				ids      => \@admins,
				subject  => $subject,
				body     => $body
			);

			my $msg = "You have requested access to the judge ".$cj->first." ".$cj->last." from the team coaches.";
			$m->redirect("search.mhtml?msg=$msg");

		} else {

			my $msg = "No judge found with record ID $chapter_judge_id";
			$m->redirect("search.mhtml?msg=$msg");
		}

	} elsif ($judge_id) {

		my $judge = Tab::Judge->retrieve($judge_id);

		unless ($judge && $judge->category) {
			my $err = "No such judge exists connected to a tournament";
			$m->redirect("search.mhtml?err=$err");
		}

		my $msg;
		my $err;

		my @already = Tab::Judge->search(category => $judge->category, person => $person->id);
		push @already, Tab::Judge->search(category => $judge->category, person_request => $person->id);

		if (@already) {

			$err = "You are already linked to another ".$judge->category->abbr." judge.  You may only link to one judge in a given tournament.  If you are trying to link yourself to all your school's judges, please DO NOT.  Every judge must be linked to their OWN Tabroom account.";

		} else {

			$judge->person_request($person->id);
			$judge->update;
			$msg = "You have requested access to the judge ".$judge->first." ".$judge->last." from the tournament administrators.";
		}

		$m->redirect("search.mhtml?err=$err&msg=$msg");

	}

</%init>
