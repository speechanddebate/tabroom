<%args>
	$person
	$panel_id      => undef
	$judge_id      => undef
	$entry_id      => undef
	$score_id      => undef
	$points        => undef
	$topic         => undef
	$side          => 0
	$comments      => undef
	$comments_only => undef
</%args>
<%init>

	my $msg;

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	unless ($judge) {
		$m->comp("/funclib/abort.mas",
			err => "Judge record not found.  Hit back and try again");
	}

	unless ($judge->person->id == $person->id || $person->site_admin) {
		$m->comp("/funclib/abort.mas",
			err => "You are trying to submit a ballot for someone else.  Nope.");
	}

	my $panel = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;

	my $ballot = Tab::Ballot->search(
		panel => $panel,
		judge => $judge,
		entry => $entry
	)->first;

	unless ($ballot) {
		$m->comp("/funclib/abort.mas",
			err => "No ballot was found for that student with you judging.  <br />Please go back and try again! $panel_id $judge_id $entry_id");
	}

	my $score;

	if ($comments_only && $ARGS{"new_score"}) {

		$score = Tab::Score->search(
			ballot => $ballot->id,
			tag    => "speech",
			value  => 0
		)->first;

		unless ($score) {
			$score = eval {
				return Tab::Score->create({
					ballot   => $ballot->id,
					tag      => "speech",
					value    => 0,
					speech   => 0,
					position => 0
				});
			};

			unless ($score) {
				$score = Tab::Score->search(
					ballot => $ballot->id,
					tag    => "speech",
					value  => 0
				)->first;
			}

			unless ($score) {
				$score = eval {
					return Tab::Score->create({
						ballot   => $ballot->id,
						tag      => "speech",
						value    => 0,
						speech   => 0,
						position => 0
					});
				};
			}
		}

	} else {

		$score = Tab::Score->retrieve($score_id) if $score_id;
	}

	unless ($panel && $entry) {
		$m->comp("/funclib/abort.mas",
			err => "No entry found on that particular judge panel.  Contact tab for help.");
	}

	my $event = $panel->round->event;
	my %event_settings = $event->all_settings;

	Tab::Score->set_sql( entry_po => "
		select score.*
		from score, ballot
		where ballot.entry = ?
			and ballot.panel= ?
			and ballot.id = score.ballot
			and score.tag = 'po'
	");

	my $po = Tab::Score->search_entry_po($entry->id, $panel->id)->first;

	if ($po) {

		my $now = DateTime->now();
		$topic = "Score for Presiding, given at ".$m->comp("/funclib/showtime.mas",
			dt     => $now,
			tz     => $event->tourn->tz,
			return => 1
		);

		$side++;
	}

    my $max_points = $event_settings{"max_points"};
    my $min_points = $event_settings{"min_points"};
	$min_points = 0 unless $min_points;
	$max_points = 6 unless $max_points;

	my %missing = ();

	unless ($comments_only) {

		$missing{"points"}++ unless $points;
		$missing{"topic"}++ unless $topic;
		$missing{"side"}++ unless $side;

		unless ($missing{"points"}) {
			$missing{"points_range"}++ unless (
				$points <= $max_points
				&& $points >= $min_points
			);
		}
	}

	#Sanitize the text

	if ($topic) {
		$topic = $m->comp("/funclib/save_editor.mas", text => $topic);
	}

	if ($comments) {
		$comments = $m->comp("/funclib/save_editor.mas", text => $comments);
	}

	if ($score) {

		unless ($score->ballot->id == $ballot->id) {

			$m->comp("/funclib/abort.mas",
				err => " Something has gone terribly wrong; the speech you tried to edit doesn't match with the right speaker.  Please refresh and try again"
			);
		}

		unless ($comments_only) {
			$score->value($points);
			$score->position($side);
			$score->topic($topic);
			$person->setting("congress_topic", $topic);
			$msg = "Scores for speech number ".$score->speech." re-saved";
		} else {
			$msg = "Comments for speech number ".$score->speech." saved";
		}

		$score->text($comments);
		$score->update();

	} elsif ($comments_only) {

		$msg = "No speech found for those comments.";

	} else {

		Tab::Score->set_sql( max_speech => "
			select max(score.speech)
			from score, ballot
			where ballot.panel = ?
			and ballot.id = score.ballot
			and score.tag = 'speech'
		");

		my $max_value = Tab::Score->sql_max_speech->select_val($panel->id);
		$max_value++;

		$points = 0 unless $points;

		my $score = eval {
			return Tab::Score->create({
				ballot   => $ballot->id,
				tag      => "speech",
				value    => $points,
				topic    => $topic,
				speech   => $max_value,
				position => $side
			});
		};

		unless ($score) {
			my $err = "No score created.  Did you double click the save button?";
			$m->redirect("ballot.mhtml?panel_id=$panel_id&judge_id=$judge_id&entry_id=$entry_id&err=$err");
		}

		$score->text($comments);

		#Save for the next ballot
		eval {
			$person->setting("congress_topic", 0);
			$person->setting("congress_topic", $topic);
		};

		$msg = "Scores for speech number $max_value saved";
	}

	if ( (not defined $ballot->chair) && keys %missing) {

		my $missing_string;

		foreach my $key (keys %missing) {
			$missing_string .= "," if $missing_string;
			$missing_string .= $key;
		}

		$m->redirect("ballot.mhtml?panel_id=$panel_id&judge_id=$judge_id&entry_id=$entry_id&missing=$missing_string");
	}

	if ($comments_only) {
		$m->redirect("congress_comments.mhtml?panel_id=".$panel->id."&judge_id=".$judge->id."&entry_id=".$entry->id."&msg=$msg");
	} else {
		$m->redirect("ballot.mhtml?panel_id=".$panel->id."&judge_id=".$judge->id."&entry_id=".$entry->id."&msg=$msg");
	}

</%init>
