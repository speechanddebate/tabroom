<%args>
	$person
	$panel_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);

    unless ($panel_id && $judge_id) {
        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
        $m->redirect("/user/home.mhtml?err=$err");
    }

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

    unless ($panel && $judge) {
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/user/home.mhtml?err=$err");
    }

    unless ($person->site_admin || $judge->person->id == $person->id) {
        my $err = "You are not authorized to enter ballots for that judge.";
        $m->redirect("/user/home.mhtml?err=$err")
    }

    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );
	my %ballot_by_id = map {$_->id => $_} @ballots;

    unless (@ballots) {
        my $err = "No unfinished ballots were found for that judge.  ";
		$err .= " Either you were not judging in that room or you ";
		$err .= " are trying to enter already-entered ballots.";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $unconfirmed;

	foreach my $ballot (@ballots) {
		$unconfirmed++ unless $ballot->audit > 0;
	}

	unless ($unconfirmed) {
        my $err = "Those ballots were already confirmed.  Please contact the ";
		$err .=" tournament staff if you believe there was an error";
        $m->redirect("/user/home.mhtml?err=$err");
	}

	my $round = $panel->round;
	my $event = $round->event;
	my %event_settings = $event->all_settings();

    my $type = $event->type;

	my $aff_string = $event_settings{"aff_label"} || "Aff";
	my $neg_string = $event_settings{"neg_label"} || "Neg";

	my $no_lpw;

	if ($event_settings{"no_lpw"} || $type eq "speech" || $type eq "congress") {
		$no_lpw++;
	}

	my $total_points;
	my @entries;
	my %ballot_points = ();
	my %already;

	my $rfd_left;
	my $errs;

	if ($event_settings{"rfd_plz"}) {

		my $rfd = Tab::Score->search(
			tag    => "rfd",
			ballot => $ballots[0]->id
		)->first;

		my $text = $m->comp(
			"/funclib/save_editor.mas",
			text => $ARGS{"rfd"}
		);

		my $test_length = $text;
		unless ($rfd_left) {
			$test_length =~ s|<.+?>||g;
			$test_length =~ s/^\s+//;
			$test_length =~ s/\s+$//;

			my @words = split (/\ /, $test_length);
			$rfd_left += scalar @words;
		}

		Tab::debuglog("Quads");

		if ($rfd_left < $event_settings{'rfd_plz'}) {
			$errs .= "This tournament requires a Reason for Rankings/Decision. ";
			$errs .= "Please leave at least ".$event_settings{"rfd_plz"}." words under the Reason for Decision/Ranks space. (You left $rfd_left) <br />";

			Tab::debuglog("Error problem");
		}
	}

	# If the user only wants to save the RFD and comments, this reconstructs
	# the ballot for the user and then puts them back there because I'm too
	# lazy to do a jquery post right now.  This is also useful later in case
	# the user screws something up and we need to kick them back to their
	# ballot.

	my $url_args = "?panelid=$panel_id&judgeid=$judge_id";

	foreach my $key (keys %ARGS) {
		next if $key eq "panel_id";
		next if $key eq "judge_id";
		next if $key eq "rfd";
		next if index($key, 'comments') != -1;
		$url_args .= "&$key=$ARGS{$key}";
	}

	if ($skipme) {
		$url_args .= "&msg=RFD and comments Saved";
		$m->redirect("wsdc_ballot.mhtml".$url_args);
	}

	my %tiebreak_types = $m->comp("/funclib/tiebreak_types.mas", round => $round);
	my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
	my %student_by_id = map {$_->id => $_} @students;

	my @subcats = ("content", "style", "strategy", "poi");

	my %limits;

	foreach my $subcat (@subcats) {

		$limits{$subcat}{"min"} = $event_settings{"min_".$subcat."_points"};
		$limits{$subcat}{"max"} = $event_settings{"max_".$subcat."_points"};

		if ($subcat eq "content" || $subcat eq "style") {
			$limits{$subcat}{"min"} = 24 unless $limits{$subcat}{"min"};
			$limits{$subcat}{"max"} = 32 unless $limits{$subcat}{"max"};
		} elsif ($subcat eq "strategy") {
			$limits{$subcat}{"min"} = 12 unless $limits{$subcat}{"min"};
			$limits{$subcat}{"max"} = 16 unless $limits{$subcat}{"max"};
		}

		unless ($subcat eq "poi") {
			$limits{"total"}{"min"} += $event_settings{"min_".$subcat."_points"};
			$limits{"total"}{"max"} += $event_settings{"max_".$subcat."_points"};
		}
	}

	unless ($limits{"total"}{"min"} > 0) {
		$limits{"total"}{"min"} = $event_settings{"min__points"};
	}

	unless ($limits{"total"}{"max"} > 0) {
		$limits{"total"}{"max"} = $event_settings{"max__points"};
	}

    my $point_increments = $event_settings{"point_increments"};
    my $point_ties = $event_settings{"point_ties"};

	my %student_values = ();

	my $side_disagree;

	my $no_side_constraints++ if $event_settings{'no_side_constraints'};

    my $sidelocks++
			if ($round->type eq "elim" || $round->type eq "final")
			&& not defined $no_side_constraints;

	my $locked = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;

	if ($no_side_constraints || ($sidelocks && (not defined $locked))) {

		my %taken = ();
		my %sides = ();

		foreach my $ballot (@ballots) {

			my $side = $ARGS{$ballot->id."_side"};

			if ($taken{$side}) {
				$errs .= "<p>You cannot make entries all on one side.  Try again</p>";
			} elsif ($side && ($ballot->side != $side)) {
				$m->comp("/funclib/swap_sides.mas", panel => $ballot->panel, person => $person);
			} elsif ($side) {

			} else {
				$errs .= "<p>You must specify a side for both entries</p>";
			}

			$sides{$side} = $ballot->entry->id;
			$sides{$ballot->entry->id} = $side;
		}

		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {

			next if $other_judge->id == $judge->id;

			my ($win, $winside) = $m->comp(
				'/funclib/panel_winner.mas',
				panel => $panel,
				judge => $other_judge
			);

			if ($win && $winside) {
				$side_disagree++ if $sides{$winside} != $win->id;
			} else {

    			my @ballots = Tab::Ballot->search(
					judge => $other_judge->id,
					panel => $panel->id,
					audit => 0
				);

				my $max;

				foreach my $ballot (@ballots) {
					$max = $ballot->side if $ballot->side > $max;
				}

				$max++;

				foreach my $ballot (@ballots) {
					$ballot->side($max++);
					$ballot->update();
				}

				my %taken;

				foreach my $ballot (@ballots) {
					my $side = $sides{$ballot->entry->id};
					$side++ unless $side;
					while ($taken{$side}) {
						$side++;
					}
					$ballot->side($side);
					$taken{$side}++;
					$ballot->update;
				}
			}
		}
	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

	my %student_by_position = ();

	my %student_scores = ();

	if ($tiebreak_types{"point"}) {

		foreach my $ballot (@ballots) {

			foreach my $position (1 .. 4) {

				my $key = $position."_".$ballot->id."_student";
				my $student_id = $ARGS{$key};

				if ($student_by_id{$student_id}) {

					$student_by_position{$ballot->id}{$position} = $student_by_id{$student_id};

					unless ($position == 4) {
						$student_scores{$student_id}{"position"} = $position;
						$student_scores{$student_id}{"tag"} = $position."_".$ballot->id;
					}

					$student_scores{$student_id}{"ballot"} = $ballot->id;

				} else {

					$errs .= "<p>Student ID $student_id selected for key $key position $position";
					$errs .= " on ".$ballot->entry->code." was not valid</p>";

				}
			}
		}
	}

	if ($tiebreak_types{"rank"}) {

		my %rank_taken;
		my %rank_order;

		foreach my $student (@students) {

			my $rank = $ARGS{$student->id."_ranks"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;

			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range.</p>" if $rank < 1 || $rank > 6;

			$rank_taken{$rank}++;
			$student_scores{$student->id}{"rank"} = $rank;

			if ($tiebreak_types{"point"}) {
				$rank_order{$rank} += $ARGS{$student_scores{$student->id}{"tag"}."_content"};
				$rank_order{$rank} += $ARGS{$student_scores{$student->id}{"tag"}."_style"};
				$rank_order{$rank} += $ARGS{$student_scores{$student->id}{"tag"}."_strategy"};
			}
		}

		my $current;

		foreach my $rk (reverse sort keys %rank_order) {
			$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_order{$rk}." vs ".$current.")</p>" if $rank_order{$rk} < $current;
			$current = $rank_order{$rk};
		}

	}

	if ($tiebreak_types{"point"}) {

		foreach my $ballot (@ballots) {

			my $replydone;

			foreach my $position (1 .. 4) {

				my $student = $student_by_position{$ballot->id}{$position};
				my $multiplier = 1;
				$multiplier = .5 if $position == 4;

				next unless $student && $student->id;
				next unless $student_scores{$student->id}{"position"};

				my $speaker_total;

				foreach my $subcat (@subcats) {

					next if $limits{$subcat}{"max"} < 1;

					my $speech_string = ucfirst($subcat)." points for ".$student->first." ".$student->last;
					$speech_string .= " in the reply speech " if $position == 4;

					my $tag = $subcat;

					$tag .= "_reply" if $position == 4;

					$student_scores{$student->id}{$tag} = $ARGS{$position."_".$ballot->id."_".$subcat};

					if ($student_scores{$student->id}{$tag} < ($limits{$subcat}{"min"} * $multiplier)) {
						$errs .= "<p>$speech_string (".$student_scores{$student->id}{$tag}.") ";
						$errs .= "were below minimum ".($limits{$subcat}{"min"} * $multiplier) ." </p>"
					}

					if ($student_scores{$student->id}{$tag} > ($limits{$subcat}{"max"} * $multiplier)) {
						$errs .= "<p>$speech_string (".$student_scores{$student->id}{$tag}.") ";
						$errs .= "were above maximum ".($limits{$subcat}{"max"} * $multiplier) ." </p>";
					}

					my $ballot_total = $student_scores{$student->id}{$tag};

					$errs .= "<p> $speech_string  missing for ".$student->first." ".$student->last ."</p>"
						if not defined $ballot_total;

					next unless $ballot_total;

					$ballot_total = int($ballot_total + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") {
						$ballot_total = $ballot_total * 10;
						$ballot_total = int($ballot_total + 0.5);
						$ballot_total = $ballot_total/10;
					}

					$ballot_total = nearest(.5, $ballot_total) if $point_increments eq "half";

					$errs .= "<p>$speech_string must be a number</p>" unless ($ballot_total eq $ballot_total + 0);

					$student_scores{$student->id}{"point"} += $ballot_total if $position != 4;
					$student_scores{$student->id}{"refute"} += $ballot_total if $position == 4;

					if ($position == 4) {
						$student_scores{$student->id}{"subpoints"}{"reply"}{$subcat} = $ballot_total;
					} else {
						unless ($student_scores{$student->id}{"subpoints"}{"speech"}) {
							$student_scores{$student->id}{"subpoints"}{"speech"}{"position"} = $position;
						}
						$student_scores{$student->id}{"subpoints"}{"speech"}{$subcat} = $ballot_total;
					}

					$student_scores{$student->id}{"categories"} .= ', ' if $student_scores{$student->id}{"categories"};

					if ($position == 4 && not defined $replydone) {
						$student_scores{$student->id}{"categories"} .= ' REPLY: ';
						$replydone++;
					}

					$student_scores{$student->id}{"categories"} .= ucfirst($subcat).": $ballot_total";
					$ballot_points{$student_scores{$student->id}{"ballot"}} += $ballot_total;
					$speaker_total += $ballot_total;
					$total_points += $ballot_total;

				}

				if ($limits{"total"}{"max"} > 0) {
					if (($limits{"total"}{"max"} * $multiplier) < $speaker_total) {
						$errs .= "<p>Speaker total $speaker_total are above the maximum ";
						$errs .= ($limits{"total"}{"max"} * $multiplier )."</p>";
					}
				}

				if ($limits{"total"}{"min"} > 0) {
					if (($limits{"total"}{"min"} * $multiplier) > $speaker_total) {
						$errs .= "<p>Speaker total $speaker_total are below the minimum ";
						$errs .= ($limits{"total"}{"min"} * $multiplier )."</p>";
					}
				}
			}
		}

		unless ($point_ties) {

			my %points_taken = ();

			foreach my $ballot (@ballots) {

				if ($points_taken{$ballot_points{$ballot->id}}++) {
					$errs .= "<p>Both teams have the same number of points.  Ties are not allowed</p>";
				}
			}
		}
	}

	my $winner;

	if ($tiebreak_types{"winloss"})  {

		$winner = $ballot_by_id{$ARGS{"winner"}};

		unless ($winner) {
			$errs .= "<p>You didn't choose a winner.</p>";
			$errs .= "<p>There are no ties in debate, though there ";
			$errs .= "are sometimes tears.  Be strong.</p>";
		}

		$errs .= "<p>Your winner and your chosen side did not agree</p>"
			if $winner && $winner->side != $ARGS{"winner_side"};

		if ($winner) {

			my $winner_points = $ballot_points{$winner->id};

			foreach my $ballot (@ballots) {

				my $bal_points = $ballot_points{$ballot->id};

				if ($no_lpw) {

					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>"
						if $winner_points < $bal_points;

				} else {

					if ($winner_points < $bal_points && not defined $ARGS{"lpw"}) {
						$errs .= "<p>Please mark if the low-point win is intended.  ";
						$errs .= "(Winner has $winner_points, loser has $bal_points)</p>";
					}

					if ($winner_points > $bal_points && $ARGS{"lpw"}) {

						$errs .= "<p>You marked the low-point win box but this ";
						$errs .= "isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>";
					}
				}
			}
		}
	}

	if ($errs) {

		# If there are errors we send them back from whence they came with the
		# error messages

		$url_args .= "&errs=$errs";
		$m->redirect("wsdc_ballot.mhtml".$url_args);

	} else {

		# Clear the old cruft

		Tab::Score->set_sql( clear_cruft => "
			delete from score
			where score.ballot = ?
			and score.tag in (
				'rank', 'point', 'refute', 'winloss', 'categories', 'subpoints'
			)
		");

		sleep 1;

		foreach my $ballot (@ballots) {

			Tab::Score->sql_clear_cruft->execute($ballot->id);

			$ballot->audit(0);
			$ballot->update;

			if ($tiebreak_types{"winloss"}) {

				my $tigers_blood = 0;

				$tigers_blood++ if $winner->id == $ballot->id;

				my $winner = Tab::Score->search({
					ballot => $ballot->id,
					tag    => "winloss"
				})->first;

				unless ($winner) {

					$winner = eval {
						return Tab::Score->create({
							ballot  => $ballot->id,
							value   => $tigers_blood,
							tag     => "winloss",
							student => 0
						});
					};
				}
			}

			foreach my $position (1 .. 4) {

				my $student = $student_by_position{$ballot->id}{$position};

				if ($tiebreak_types{"point"}) {

					my $tag = "point";
					$tag = "refute" if $position == 4;

					Tab::Score->create({
						ballot   => $ballot->id,
						student  => $student->id,
						tag      => $tag,
						position => $position,
						value    => $student_scores{$student->id}{$tag}
					});

					if ($student_scores{$student->id}{"subpoints"}) {

						my $json = eval {
							JSON::encode_json($student_scores{$student->id}{"subpoints"});
						};

						if ($json) {
							eval {
								Tab::Score->create({
									ballot   => $ballot->id,
									student  => $student->id,
									position => $position,
									tag      => "subpoints",
									content  => $json
								});
							};
						}
					}

					if ($position < 4 && $student_scores{$student->id}{"categories"}) {

						eval {
							Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								position => $position,
								tag      => "categories",
								content  => $student_scores{$student->id}{"categories"}
							});
						};
					}
				}

				if ($tiebreak_types{"rank"}) {

					my $value = 0;
					$value = $student_scores{$student->id}{"rank"} if $student_scores{$student->id}{"rank"};

					my $existing_ranks = Tab::Score->search({
							ballot  => $ballot->id,
							tag     => "rank",
							student => $student->id
						})->first;

					eval {
						$existing_ranks = Tab::Score->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "rank",
							value    => $value
						});
					} unless $existing_ranks;

				}

			}

		}

	}

</%init>

	<div class="main">

%		if ($tiebreak_types{"point"} && not defined $total_points) {

			<div class="full padmuchmore martop centeralign">

				<h1 class="centeralign redtext martopmuchmore padtopmuchmore" style="font-size: 48px;">
					YOU GAVE NO POINTS!
				</h1>


				<h4 class="martop centeralign martopmuchmore padtopmore">
					If you are trying to enter a forfeit, stop.  Contact the tab room.
					They have to enter forfeit/forfeit wins, not judges.
				</h4>

				<p>
					Otherwise, please hit your browser's back button and try again with points.
				</p>

			</div>

%		}

%		if ($side_disagree) {

			<h2>OH NOES! POSSIBLE ERROR!</h2>

			<p class="warning centeralign padmore martopmore">
				Your ballot disagreed with another judge's on sides.
			</p>

			<p class="warning centeralign padmore martopmore">
				You listed a team as affirmative that other judge(s) listed as negative,
				and vice-versa.
			</p>

			<h4 class="bluetext martopmore marbottommuchmore">
				Please confirm: which team was actually <% $aff_string %>?
			</h4>

			<div class="centeralign martopmuchmore full marbottommuchmore">
%				foreach my $entry (@entries) {
					<a
						class = "dkblue"
						style = "padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;"
						href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>"
					>
						<% $entry->code %> was <% uc($aff_string) %>
					</a>
%				}
			</div>

			<div class="full nospace flexrow centeralign">

				<span class="pagehalf centeralign">
					<a
						class="dkred full confirm"
						href="wsdc_ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>&url_args=<% $url_args %>">
						NO! I WAS WRONG! SWAP SIDES!
					</a>
				</span>

				<span class="pagehalf centeralign">
					<a
						class="dkgreen full confirm"
						href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
						YES! I AM CORRECT! CONFIRM IT
					</a>
				</span>

			</div>

			<h5 class="centeralign martopmore padmuchmore redtext">
				Once you confirm your ballot, you cannot change it online.  <br />
				You'll have to contact the tournament staff to make any further changes
			</h5>

<%perl>
		} else {

			if ($tiebreak_types{"winloss"}) {

				my $winside = $ARGS{"winner_side"};
				my $side = $aff_string if $winside == 1;
				$side = $neg_string if $winside == 2;

</%perl>
				<h5>Your winner was</h5>


				<div class="full padtopmore padmuchmore martop centeralign">

					<h2 class="centeralign">
						<% $winner->entry->code %> on the <% $side %>
					</h2>

					<h5 class="martop centeralign">
						(<% $winner->entry->name %>)
					</h5>

				</div>


%			} else {

				<h4>Please confirm your ranking of this round:</h4>

<%perl>
			}

			if ($tiebreak_types{"point"} || $tiebreak_types{"rank"}) {

				my $notfirst;

				$m->print('<div class="full flexrow">');

				foreach my $ballot (@ballots) {
					my $entry = $ballot->entry;

					if ($notfirst++) {
						$m->print('<span class="halfspacer"></span>');
					}
</%perl>

					<span class="pagehalf">

						<div class="full nospace flexrow">
							<span class="tenth">
								<% $winner && $entry->id == $winner->entry->id
									? '<span class="greentext fa fa-lg fa-check-circle"></span>'
									: '<span class="redtext fa fa-lg fa-times-circle-o"></span>'
								%>
							</span>
							<span class="ninetenths nowrap">
								<h6>
									<% $entry->code %>
								</h6>
								<p class="nospace padtopless explain">
									<% $entry->name %>
								</p>
							</span>
						</div>

%						foreach my $position (1 .. 4) {

%							my $student = $student_by_position{$ballot->id}{$position};

							<div class="row padmore marno">

								<div class="full flexrow">

								<span class="sixth semibold bluetext padleft">
									<% $position == 4 ? "Reply" : "Spkr ".$position %>
								</span>

								<span class="half grow">
									<%	$student->first." ".$student->last %>
<%perl>
									if ($student_scores{$student->id}{"categories"}) {

										my $toss;
										my $keep;

										if ($position == 4) {
											($toss, $keep) =
												split(/REPLY:/, $student_scores{$student->id}{"categories"});
										} else {
											($keep, $toss) =
												split(/REPLY:/, $student_scores{$student->id}{"categories"});
										}

										$keep =~ s/\s+$//;
										$keep =~ s/,+$//;

</%perl>
										<div class="full flexrow explain padtop">
											<% $keep %>
										</div>
%									}
								</span>

%								if ($tiebreak_types{"point"}) {
%									if ($position == 4) {
										<span class="eighth semibold redtext">
											<% $student_scores{$student->id}{"refute"}
												?  $student_scores{$student->id}{"refute"}
												: "ZERO"
											%>
										</span>
%									} else {
										<span class="eighth semibold redtext">
											<% $student_scores{$student->id}{"point"}
												?  $student_scores{$student->id}{"point"}
												: "ZERO"
											%>
										</span>
%									}
%								}

%								if ($tiebreak_types{"rank"}) {
									<span class="eighth">
										<% Lingua::EN::Numbers::Ordinate::ordinate(
											$student_scores{$student->id}{"rank"}
										) %>
									</span>
%								}

								</div>

							</div>
%						}

						<div class="row marno padsetting flexrow">
							<span class="sixsevenths rightalign semibold bluetext ">
								TOTAL TEAM POINTS:
							</span>
							<span class="seventh semibold redtext padleft">
								<% $ballot_points{$ballot->id} %>
							</span>
						</div>
					</span>

%				}

				</div>

%			}

			<div class="pagefull flexrow martopmuchmore">

				<span class="pagehalf centeralign">
					<a
						class="dkred full confirm"
						href="wsdc_ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>&url_args=<% $url_args %>">
						NO!  RE-ENTER BALLOT
					</a>
				</span>

				<span class="pagehalf centeralign">
					<a
						class="dkgreen full confirm"
						href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
						YES! CORRECT! CONFIRM IT
					</a>
				</span>

			</div>

			<h5 class="centeralign martopmuchmore padmuchmore bluetext">

				Once you confirm your ballot, you cannot change it online.  <br />
				You'll have to contact the tournament staff to make any further changes.

			</h5>
%		}

	</div>

	<div class="menu">
		<div class="sidenote">
			<h4>RFD</h4>
			<% $ARGS{"rfd"} %>
		</div>
	</div>

