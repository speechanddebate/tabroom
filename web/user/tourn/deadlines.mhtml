<%args>
	$person
	$defaults
	$session
</%args>
<%init>

	my $request = $defaults->{"request"};

	delete $request->{"error"};
	delete $request->{"errors"};

	$ARGS{"name"} =~ s/-/ /g;
	$ARGS{"name"} =~ tr/a-zA-Z0-9 //cd;

	# Yes this is heavy handed but the system puts the year of the tournament
	# in there already and people who put in anyway despite the clear message
	# saying not to RIGHT IN THE BOX and thus creating tournaments named things
	# like "The 2019 Wanker Invitational 2019" drive me UP THE DAMN WALL.
	#
	# Screw those people.

	my $now = DateTime->now;
	my $year = $now->year;
	$year = $year - 4;

	foreach (1 .. 8) {
		if (index($ARGS{"name"}, $year) != -1) {
			$request->{'error'} .= "Please do not include the year in your tournament name <br />";
			$request->{"errors"}{"name"}++;
		}
	}

	unless (defined $ARGS{"test"}) {
		if (index(lc($ARGS{"name"}), "test") != -1) {
			unless (index(lc($ARGS{"name"}), "contest") != -1){
				$request->{'error'} .= "The tournament name includes the word Test.  Did you mean ";
				$request->{'error'} .= "to mark it as a test tournament? </br>";
				$request->{"errors"}{"test"}++;
			}
		}
	}

    $ARGS{"name"} =~ s/  / /;
    $ARGS{"name"} =~ s/^\s+//;
    $ARGS{"name"} =~ s/\s+$//;

	if ($ARGS{"name"}) {
		$request->{"name"} = $ARGS{"name"};
	} else {
		$request->{"error"} .= "You must choose a tournament name ".$ARGS{"name"}." <br />";
		$request->{"errors"}{"name"}++;
	}

	unless ($ARGS{"tz"}) {
		$request->{"error"} .= "You must choose a timezone <br />";
		$request->{"errors"}{"tz"}++;
	} else {
		$request->{"tz"} = $ARGS{"tz"};
	}

	my $startdt = eval {
		return Tab::dtme($ARGS{"start"}, $ARGS{"starttime"}, $ARGS{"tz"});
	};

	if ($startdt) {
		$request->{"start"} = $ARGS{"start"};
		$request->{"starttime"} = $ARGS{"starttime"};
	}

	my $enddt = eval {
		return Tab::dtme($ARGS{"end"}, $ARGS{"endtime"}, $ARGS{"tz"});
	};

	if ($enddt) {
		$request->{"end"} = $ARGS{"end"};
		$request->{"endtime"} = $ARGS{"endtime"};
	}

	unless ($startdt && $startdt->year) {
		$request->{"error"} .= "You must enter a valid start date for your tournament <br />";
		$request->{"errors"}{"dates"}++;
	}

	unless ($enddt && $enddt->year) {
		$request->{"error"} .= "You must enter a valid end date for your tournament <br />";
		$request->{"errors"}{"dates"}++;
	}

	if ($startdt) {
		$request->{"start"} = $ARGS{"start"};
		$request->{"starttime"} = $ARGS{"starttime"};
	}

	if ($enddt) {
		$request->{"end"} = $ARGS{"end"};
		$request->{"endtime"} = $ARGS{"endtime"};
	}

	if ($startdt && $startdt->year && $enddt && $enddt->year) {

		if ($startdt->year < 300 || $enddt->year < 300) {

			$request->{"error"} .= "Those tournament start or end dates are set to occur";
			$request->{"error"} .= "during the Roman Empire.  <br /><br />";
			$request->{"error"} .= "I doubt that's what you want.  <br /><br />";
			$request->{"error"} .= "Please use full years (2017 instead of just 17).";
			$request->{"errors"}{"dates"}++;

		} elsif ($startdt->year < 2018 || $enddt->year < 2018) {

			$request->{"error"} .= "The year you chose for your start or end date ";
			$request->{"error"} .= "is several years in the past.<br /> <br />";
			$request->{"error"} .= "I doubt that's what you want.  Try again?";
			$request->{"errors"}{"dates"}++;

		} elsif ($startdt->year > 2110 || $enddt->year > 2110) {

			$request->{"error"} .= "The year you chose for your start or end date is rather many";
			$request->{"error"} .= "years in the future.<br /> <br />";
			$request->{"error"} .= "I doubt that's what you want.  Try again?";
			$request->{"errors"}{"dates"}++;
		}
	}

	if ($ARGS{"existing_webname"}) {

		$ARGS{"webname"} = $ARGS{"existing_webname"};
		$request->{"webname"} = $ARGS{'webname'};

	} elsif ($ARGS{'webname'}) {

		#Remove all the whitespace
		$ARGS{'webname'} =~ s/ //g;

		#Remove all non-alphanumeric characters
		$ARGS{'webname'} =~ s/[^\w]//g;

		#Lowercase the whole thing
		$ARGS{'webname'} = lc($ARGS{'webname'});

		#Remove the friggin year
		my $year = $now->year;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;

		$year++;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;

		$year = substr($year, 2, 4);
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;

		$year--;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;
		$ARGS{'webname'} =~ s/$year++//g;

		$ARGS{'webname'} =~ s/  / /;
		$ARGS{'webname'} =~ s/^\s+//;
		$ARGS{'webname'} =~ s/\s+$//;

		if ($ARGS{'webname'}
			&& $ARGS{'webname'} eq int($ARGS{'webname'})
		) {
			$request->{'error'} .= "Web names cannot consist only of numbers<br />";
		}

		if ($ARGS{'webname'}) {

			my $dbh = Tab::DBI->db_Main();

			my $ok;
			$ok++ if $person->site_admin;

			unless ($ok) {

				my $not_ok_sth = $dbh->prepare("
					select
						tourn.id
						from tourn
						where tourn.webname = ?
						and not exists (
							select permission.id
							from permission
							where permission.person = ?
							and permission.tag = 'owner'
						)
				");

				$not_ok_sth->execute($ARGS{'webname'}, $person->id);

				if ($not_ok_sth->fetch()) {

					my $ok_sth = $dbh->prepare("
						select
							tourn.id
							from tourn
							where tourn.webname = ?
							and exists (
								select permission.id
								from permission
								where permission.person = ?
								and permission.tag = 'owner'
							)
					");

					$ok_sth->execute($ARGS{'webname'}, $person->id);

					if ($ok_sth->fetch()) {
						$ok++;
					}

				} else {
					$ok++;
				}
			}


			unless ($ok) {
				$request->{'error'} .= "The web name ".$ARGS{'webname'}." is taken by someone else.  ";
				$request->{'error'} .= "You must be listed as the tournament owner to reuse a webname.";
				$request->{"errors"}{"webname"}++;
			}
		}

		unless ($request->{"errors"}{"webname"}) {
			$request->{"webname"} = $ARGS{'webname'};
		}

	} else {

		$request->{"error"} .= "You must choose a tournament webname ".$ARGS{"webname"}." <br />";
		$request->{"errors"}{"webname"}++;
	}

	if ($ARGS{"online"} eq "nsda_campus") {

		$request->{"city"} = "NSDA Campus";
		$request->{"online"}++;

	} elsif ($ARGS{"online"} eq "other") {

		$request->{"city"} = "Online";
		$request->{"online"}++;

	} elsif (not defined $ARGS{"city"}) {

		$request->{'error'} .= "You did not enter a city location for your tournament";
		$request->{"errors"}{"city"}++;

	} else {

		$request->{"city"} = $ARGS{"city"};
	}

	$request->{'state'}   = $ARGS{"state"};
	$request->{'country'} = $ARGS{"country"};
	$request->{'test'}    = $ARGS{"test"};
	$request->{'test'}    = 0 unless $ARGS{"test"};

	if ($ARGS{"clone_id"}) {
		$request->{'clone'} = $ARGS{"clone_id"};
	} elsif ($ARGS{"clone"}) {
		$request->{'clone'} = $ARGS{"clone"};
	} elsif ($ARGS{"reference_id"}) {
		$request->{'reference'} = $ARGS{"reference_id"};
	} elsif ($ARGS{"reference"}) {
		$request->{'reference'} = $ARGS{"reference"};
	}

	$defaults->{"request"} = $request;
	$session->default($defaults);

	if ($request->{'error'}) {
		$m->redirect("request.mhtml");
	}

	# Default DT object for the other deadlines, which therefore must include
	# times.

	my $deadlinedt = $startdt->clone;

	$deadlinedt->set(
		hour   => "17",
		minute => "00",
		second => "00"
	) if $deadlinedt;

	if (
		$request->{"clone"}
		|| $request->{"reference"}
	) {

		$m->comp("clone_tournament.mas",
			person  => $person,
			clone   => $request->{"clone"} || $request->{reference},
			name    => $request->{"name"},
			start   => $startdt,
			end     => $enddt,
			webname => $request->{'webname'},
			city    => $request->{"city"},
			state   => $request->{"state"},
			country => $request->{"country"},
			online  => $ARGS{"online"},
			test    => $ARGS{"test"},
			tz      => $request->{"tz"}
		);
	}

	$defaults->{"request"} = $request;
	$session->default($defaults);


	if ($request->{'reg_start'}) {
		$request->{'reg_start'} = Tab::DBI::date_inflate($request->{"reg_start"});
	} elsif (not defined $request->{"error"}) {
		$request->{'reg_start'} = $deadlinedt->clone;
		$request->{'reg_start'}->subtract( months => 1);
	}

	if ($request->{'reg_end'}) {
		$request->{'reg_end'} = Tab::DBI::date_inflate($request->{"reg_end"});
	} elsif (not defined $request->{"error"}) {
		$request->{'reg_end'} = $deadlinedt->clone;
		$request->{'reg_end'}->subtract( weeks => 1);
	}

	if ($request->{'frozen'}) {
		$request->{'frozen'} = Tab::DBI::date_inflate($request->{"frozen"});
	} elsif (not defined $request->{"error"}) {
		$request->{'frozen'} = $deadlinedt->clone;
		$request->{'frozen'}->subtract( days => 3);
	}

	if ($request->{'judge'}) {
		$request->{'judge'} = Tab::DBI::date_inflate($request->{"judge"});
	} else {
		$request->{'judge'} = $deadlinedt->clone;
		$request->{'judge'}->subtract( days => 3);
	}

	if ($request->{'drops'}) {
		$request->{'drops'} = Tab::DBI::date_inflate($request->{"drops"});
	} else {
		$request->{'drops'} = $deadlinedt->clone;
		$request->{'drops'}->subtract( days => 3);
	}

	if ($request->{'fines'}) {
		$request->{'fines'} = Tab::DBI::date_inflate($request->{"fines"});
	} else {
		$request->{'fines'} = $deadlinedt->clone;
		$request->{'fines'}->subtract( days => 3);
	}

</%init>

	<div class="main">

		<form
			action = "circuit.mhtml"
			method = "post"
		>

		<h2>Set registration deadlines</h2>

%       if ($request->{"error"}) {
			<p class="warning">
				<% $request->{"error"} %>
			</p>
%       }

		<table>

			<& "/funclib/datepicker.mas",
				id  => "reg_start",
				max => $ARGS{"start"}
			&>

			<tr class="<% $request->{'errors'}{"reg_start"} ? "lirdrow" : "even" %>">
				<td class="limit2">
					Online registration opens
				</td>

				<td class="explain">
				</td>

				<td class="centeralign limit2">

					<input
						type  = "text"
						name  = "reg_start"
						id    = "reg_start"
						size  = "10"
						value = "<% ($request->{'reg_start'}) ? $request->{'reg_start'}->mdy('/') : "" %>"
					>
					<span class="halfspacer"></span>
					at

					<span class="halfspacer"></span>
					<& /funclib/timepicker.mas,
						size => 6,
						name => "reg_starttime",
						time => $request->{'reg_start'}
					&>
				</td>
			</tr>

			<& /funclib/datepicker.mas,
				id  => "reg_end",
				max => $ARGS{"start"}
			&>

			<tr class="<% $request->{'errors'}{"reg_end"} ? "lirdrow" : "odd" %>">
				<td>
					New entries due by
				</td>

				<td class="explain">
					You can also later set up per-event deadlines once your
					tournament is approved.  <br />

					After this date, entries cannot be added, but can be
					dropped, name-changed, or judges added.
				</td>

				<td class="centeralign">
					<input
						type  = "text"
						name  = "reg_end"
						id    = "reg_end"
						size  = "10"
						value = "<% ($request->{'reg_end'}) ? $request->{'reg_end'}->mdy('/') : "" %>"
					>

					<span class="halfspacer"></span>
						at
					<span class="halfspacer"></span>
						<& /funclib/timepicker.mas,
							size => 6,
							name => "reg_endtime",
							time => $request->{'reg_end'}
						&>
				</td>
			</tr>

			<tr class="odd">
				<td colspan="4">
					<h5>
						Optional Deadlines:
					</h5>
				</td>
			</tr>

			<& /funclib/datepicker.mas,
				id  => "frozen",
				max => $ARGS{"start"}
			&>

            <tr class="row">
				<td >
					Fees &amp; judge obligations frozen on
                </td>

				<td class="explain">
					After this date, drops will not delete the competitor from
					the system, and schools will still be charged entry fees
					and still be on the hook for judging for those entries.
				</td>

                <td class="centeralign">
                    <input
						type  = "text"
						name  = "frozen"
						id    = "frozen"
						size  = "10"
						value = "<% ($request->{'frozen'}) ? $request->{'frozen'}->mdy('/') : "" %>"
					>
					<span class="halfspacer"></span>
						at
					<span class="halfspacer"></span>
						<& /funclib/timepicker.mas,
							size => 6,
							name => "frozentime",
							time => $request->{'frozen'}
						&>
                </td>

            </tr>

			<& /funclib/datepicker.mas,
				id  => "judge" ,
				max => $ARGS{"start"}
			&>

            <tr class="row">
				<td>
					Judge registration deadline
                </td>

				<td class="explain">
					Deadline for judge adds, alterations and drops online.
				</td>

                <td class="centeralign">
                    <input
						type  = "text"
						name  = "judge"
						id    = "judge"
						size  = "10"
						value = "<% ($request->{'judge'}) ? $request->{'judge'}->mdy('/') : "" %>"
					>
					<span class="halfspacer"></span>
						at
					<span class="halfspacer"></span>
						<& /funclib/timepicker.mas,
							size => 6,
							name => "judgetime",
							time => $request->{'judge'}
						&>
                </td>
            </tr>

			<& /funclib/datepicker.mas,
				id  => "drops" ,
				max => $ARGS{"start"}
			&>

            <tr class="row">
				<td>
					Registrants can drop &amp; namechange online until
                </td>

				<td class="explain">
					Deadline to allow coaches to drop students and change names on their
					own.  After, a tournament admin must do all changes.
				</td>

                <td class="centeralign">
                    <input
						type  = "text"
						name  = "drops"
						id    = "drops"
						size  = "10"
						value = "<% ($request->{'drops'}) ? $request->{'drops'}->mdy('/') : "" %>"
					>
					<span class="halfspacer"></span>
					at
					<span class="halfspacer"></span>
					<& /funclib/timepicker.mas,
						size => 6,
						name => "dropstime",
						time => $request->{'drops'}
					&>
                </td>
            </tr>

			<& /funclib/datepicker.mas,
				id  => "fines",
				max => $ARGS{"start"}
			&>

            <tr class="row">
				<td>
					Automatically levy drop fines after
                </td>

				<td class="explain">
					After this point, additional drop fines (in addition to
					registration fees) apply to dropped students.  You can set
					drop fine amounts once your tournament is approved.
					Recommend you set this for after you'll have paneled, to
					encourage people to report drops early.
				</td>

                <td class="centeralign">
                    <input
						type  = "text"
						name  = "fines"
						id    = "fines"
						size  = "10"
						value = "<% ($request->{'fines'}) ? $request->{'fines'}->mdy('/') : "" %>"
					>
					<span class="halfspacer"></span>
						at
					<span class="halfspacer"></span>
						<& /funclib/timepicker.mas,
							size => 6,
							name => "finestime",
							time => $request->{'fines'}
						&>
                </td>
            </tr>
		</table>

		<div class="liblrow rightalign">
			<span class="third centeralign">
				<input
					type  = "submit"
					value = "Next: Tournament Circuits"
				>
			</span>
		</div>
		</form>

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>Tournament Setup</h4>

			<table>

            	<tr class="row">
					<td class="smaller" colspan="2">
						<% $request->{"name"} %>
					</td>
				</tr>

            	<tr class="row">
					<td class="smaller">
						Web Name
					</td>

					<td class="smaller">
						<% $ARGS{'webname'} %>
					</td>
				</tr>

            	<tr class="row">
					<td class="smaller">
						City/Location
					</td>

					<td class="smaller">
						<% $request->{"city"} %>
					</td>
				</tr>

            	<tr class="row">
					<td class="smaller">
						State/Country
					</td>

					<td class="smaller">
						<% $request->{"state"} ? $request->{"state"}."/" : "" %><% $request->{"country"} %>
					</td>
				</tr>

            	<tr class="row">
					<td class="smaller">
						Start
					</td>

					<td class="smaller">
						<% Tab::niceshortdt($startdt) %>
					</td>
				</tr>

            	<tr class="row">
					<td class="smaller">
						End
					</td>

					<td class="smaller">
						<% Tab::niceshortdt($enddt) %>
					</td>
				</tr>
			</table>
		</div>
	</div>

