<%args>
	$tourn
	$tourn_settings
	$person
	$session
	$perms
</%args>
<%init>

	my $room_err;

	my $now = DateTime->now(time_zone => "UTC");
	$now->set_time_zone($tourn->tz);

	my %days = $m->comp("/funclib/campus_days.mas",
		tourn  => $tourn,
	);

	my $day_allocations = ({});
	my $observer_allocations = ({});
	$day_allocations = $tourn_settings->{"nsda_campus_days"};
	$observer_allocations = $tourn_settings->{"nsda_campus_observer_days"};

	# Check for badly formatted json and wipe if so

	my $day_tz = eval {
		return $day_allocations->{'tz'};
	};

	unless ($day_tz) {
		$tourn->setting('nsda_campus_days', 0);
		$tourn->setting('nsda_campus_observer_days', 0);
		undef $day_allocations;
		undef $observer_allocations;
	}

	if ($ARGS{"save"}) {

		my $limit = $tourn_settings->{"nc_purchased"};
		my $obs_limit = $tourn_settings->{"nco_purchased"};

		$day_allocations->{'tz'} = $tourn->tz;
		$observer_allocations->{'tz'} = $tourn->tz;

		foreach my $day_id (
			sort {
				$days{$a}{"start"}->epoch <=> $days{$b}{"end"}->epoch
			} keys %days
		) {

			my $count = $ARGS{"room_count_".$day_id};
			my $obs_count = $ARGS{"obs_count_".$day_id};

			if ($count > $limit) {
				$count = $limit;
			}

			if ($obs_count > $obs_limit) {
				$obs_count = $obs_limit;
			}

			$day_allocations->{$day_id}{'count'} = $count;
			$observer_allocations->{$day_id}{'count'} = $obs_count;
		}

		$tourn->setting("nsda_campus_days", "json", $day_allocations);
		$tourn->setting("nsda_campus_observer_days", "json", $observer_allocations);
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.abbr, event.type, count(entry.id),
			online_mode.value, campus_room_limit.value

		from event

			left join entry
				on entry.event = event.id
				and entry.active = 1

			left join event_setting online_mode
				on online_mode.tag = 'online_mode'
				and online_mode.event = event.id

			left join event_setting campus_room_limit
				on campus_room_limit.tag = 'campus_room_limit'
				and campus_room_limit.event = event.id

		where event.tourn = ?

		group by event.id

	");

	$sth->execute($tourn->id);

	my %events;

	while (
		my (
			$event_id, $abbr, $type, $count,
			$online_mode, $campus_room_limit
		) = $sth->fetchrow_array()
	) {

		$events{$event_id}{"abbr"}  = $abbr;
		$events{$event_id}{"type"}  = $type;
		$events{$event_id}{"count"} = $count;

		$events{$event_id}{"online_mode"}       = $online_mode;
		$events{$event_id}{"campus_room_limit"} = $campus_room_limit;
	}

</%init>

	<& "menu.mas",
		tourn          => $tourn,
		whoami         => "nsda_campus",
		person         => $person,
		session        => $session,
		tourn_settings => $tourn_settings
	&>

	<div class="main">

		<div class="flexrow">
			<span class="twofifths nospace">
				<h2>NSDA Campus Setup</h2>
			</span>

			<span class="threefifths rightalign semibold bigger bluetext">
				Tournament Time Zone: <% $tourn->tz %>
			</span>
		</div>

		<p>
			A tournament "day" is from 6 AM to 6 AM in your tournament's time
			zone. Each online room purchase lasts for one day.  Don't change
			your tournament's timezone to eke out extra hours.  We do track
			that.
		</p>

		<p>
			Once a day has begun, you may not reduce the number
			of rooms allocated to it. You can increase a day's allocation
			at any time.
		</p>

		<div class="full martop flexrow">
			<span class="third leftalign">
				<h5>Day Allocation</h5>
			</span>

			<span class="twothirds rightalign redtext semibold italic smallish">
				Allocate rooms from your total to each day of your tournament
			</span>
		</div>

		<form
			action = "nsda_campus.mhtml"
			method = "post"
		>

		<input
			type  = "hidden"
			name  = "save"
			value = "1"
		>
<%perl>

			my $weekends;
			my $yesterday;

			foreach my $day_id (
				sort {
					$days{$a}{"start"}->epoch <=> $days{$b}{"end"}->epoch
				} keys %days
			) {

				if (
					$yesterday
					&& ($days{$day_id}{"start"}->day > ($yesterday +1) )
				) {
					$weekends++;
					last;
				}

				$yesterday = $days{$day_id}{"start"}->day;
			}

			undef $yesterday;

			foreach my $day_id (
				sort {
					$days{$a}{"start"}->epoch <=> $days{$b}{"end"}->epoch
				} keys %days
			) {

				my $min_lock = 0;
				my $obs_min_lock = 0;
				my $warning;

				if (
					$weekends
					&& ($days{$day_id}{"start"}->day != ($yesterday +1) )
				) {

					$m->print('<div class="full nospace bluebordertop ltborderbottom"></div>');
				}

				$yesterday = $days{$day_id}{"start"}->day;

				if ($days{$day_id}{"start"}->epoch < $now->epoch) {

					unless ($person->site_admin) {
						$min_lock = $day_allocations->{$day_id}{'count'};
						$obs_min_lock = $observer_allocations->{$day_id}{'count'};
					}

					if (
						$day_allocations->{"tz"}
						&& ($tourn->tz != $day_allocations->{"tz"})
					) {

						$warning = "Time zone mismatch: allocation was for ".$day_allocations->{"tz"}." and tournament is now in ".$tourn->tz;

						Tab::Changelog->create({
							person      => $person,
							type        => "campus",
							description => $warning,
							tourn       => $tourn,
							created     => $now
						});

						$tourn->tz($day_allocations->{"tz"});
						$tourn->update();
						$warning .= "<br />Tournament timezone re-set to ".$day_allocations->{"tz"};
					}
				}

				if ($warning) {
</%perl>
					<div class="row centeralign orangetext">
						<% $warning %>
					</div>
%				}

				<div class="row flexrow">
					<span class="threetenths flexrow padleft">
						<span class="twofifths">
							<% $days{$day_id}{"start"}->day_name%>
						</span>
						<span class="threefifths">
							<% $days{$day_id}{"start"}->month_name %>
							<% Lingua::EN::Numbers::Ordinate::ordinate($days{$day_id}{"start"}->day) %>
						</span>
					</span>

					<span class="quarter flexrow">
						<span class="threefifths">
							Campus Rooms
						</span>
						<span class="twofifths">
							<input
								type     = "number"
								class    = "room_count"
								min      = "<% $min_lock %>"
								max      = "<% $tourn_settings->{"nc_purchased"} %>"
								name     = "room_count_<% $day_id %>"
								id       = "room_count_<% $day_id %>"
								value    = "<% $day_allocations->{$day_id}{"count"} %>"
%								unless ($person->site_admin) {
									onChange = "countRooms();"
%								}
							>
						</span>
					</span>

					<span class="quarter flexrow">
						<span class="threefifths">
							Observer Rooms
						</span>
						<span class="twofifths">
						<input
							type     = "number"
							class    = "obs_count"
							min      = "<% $obs_min_lock %>"
							max      = "<% $tourn_settings->{"nco_purchased"} %>"
							name     = "obs_count_<% $day_id %>"
							id       = "obs_count_<% $day_id %>"
							value    = "<% $observer_allocations->{$day_id}{"count"} %>"
%							unless ($person->site_admin) {
								onChange = "countRooms();"
%							}
						>
						</span>
					</span>

%					my $murica = $m->comp("/funclib/showdt.mas", at => 1, dt => $days{$day_id}{start}, format => "murica_shortest", return => 1);
					<span class="fifth rightalign smaller padright">
						<% $min_lock
							? $person->site_admin
							? "Admin Override"
								: "Day Started"
								: "Change until ".$murica
						%>
					</span>
				</div>
%			}

			<div class="liblrow rightalign bluebordertop">
				<span class=" third centeralign padvertless">
					<input
						type  = "submit"
						value = "Save Day Allocation"
					>
				</span>
			</div>
		</form>

		<script>

			function countRooms() {

				var limit = parseInt(<% $tourn_settings->{"nc_purchased"} %>);
				var obsLimit = parseInt(<% $tourn_settings->{"nco_purchased"} %>);
				var total = 0;

				$(".room_count").each(function() {
					var count = parseInt($(this).val());
					if (count + total > limit) {
						alertify.notify("You may only allocate "+limit+" rooms", "warning");
						count = limit - total;
						$(this).val(count);
					}
					total = total + count;
				});

				total = 0;

				$(".obs_count").each(function() {
					var obsCount = parseInt($(this).val());

					if (obsCount != NaN) {
						if (obsCount + total > obsLimit) {
							alertify.notify("You may only allocate "+obsLimit+" observer rooms", "warning");
							alertify.notify("Your current total is "+(obsCount + total), "warning");
							obsCount = obsLimit - total;
							$(this).val(obsCount);
						}
						total = total + obsCount;
					}
				});

				return;
			}

		</script>

		<div class="full martopmore flexrow">
			<span class="fourfifths">
				<h5>Online Event Settings</h5>
			</span>

			<span
				class="fifth rightalign"
				id="events_buttonarea"
			>
			</span>
		</div>

		<p class="explain nospace padbottom padleft padright centeralign">
			These optional limits prevent an event from using more rooms than
			you intend, such as overly small IE sections or not
			properly double flighting a debate event.
		</p>

		<& "/funclib/tablesorter.mas", table => "events" &>

		<table id="events">

			<thead>
				<tr class="ltyellow">
					<th class="padvert">
						Event
					</th>

					<th>
						Entries
					</th>

					<th>
						Online Mode
					</th>

					<th>
						Room Limit
					</th>
				</tr>
			</thead>

			<tbody>
<%perl>

			my %totals;

			foreach my $event_id (
				sort {
					$events{$a}{type} cmp $events{$b}{"type"}
					|| $events{$a}{abbr} cmp $events{$b}{"abbr"}
				} keys %events
			) {

				$totals{"entries"} += $events{$event_id}{"count"};
				$totals{"online"}++ if $events{$event_id}{"online_mode"};

				$totals{"campus"}++ if $events{$event_id}{"online_mode"} eq "nsda_campus";
				$totals{"campus"}++ if $events{$event_id}{"online_mode"} eq "public_jitsi";

				$totals{"campus_observers"}++ if $events{$event_id}{"online_mode"} eq "public_jitsi_observers";
				$totals{"campus_observers"}++ if $events{$event_id}{"online_mode"} eq "nsda_campus_observers";

				$totals{"limits"} += $events{$event_id}{"campus_room_limit"};
</%perl>
				<tr id="<% $event_id %>">
					<td class="semibold bluetext">
						<% $events{$event_id}{"abbr"} %>
					</td>

					<td class="centeralign">
						<% $events{$event_id}{"count"} %>
					</td>

					<td class="centeralign">

						<select
							name           = "online_mode"
							setting_name   = "online_mode",
							property_value = "nsda_campus",
							event_id       = "<% $event_id %>"
							onChange       = "postSwitch(this, '/setup/events/setting_switch.mhtml');"
						>
							<option value="none"
							>Offline</option>

							<option value="nsda_campus"
								<% $events{$event_id}{"online_mode"} eq "nsda_campus" ? "selected" : "" %>
							>Campus</option>

							<option value="nsda_campus_observers"
								<% $events{$event_id}{"online_mode"} eq "nsda_campus_observers" ? "selected" : "" %>
							>Campus Observers</option>

%							if ($person->site_admin) {
								<option value="public_jitsi"
									<% $events{$event_id}{"online_mode"} eq "public_jitsi" ? "selected" : "" %>
								>Public Jitsi</option>
								<option value="public_jitsi_observers"
									<% $events{$event_id}{"online_mode"} eq "public_jitsi_observers" ? "selected" : "" %>
								>Public Jitsi w/Observers</option>
%							}

							<option value="sync"
								<% $events{$event_id}{"online_mode"} eq "sync" ? "selected" : "" %>
							>Sync w/Outside Service</option>

							<option value="async"
								<% $events{$event_id}{"online_mode"} eq "async" ? "selected" : "" %>
							>Asynchronous</option>

						</select>
					</td>

					<td class='padless centeralign'>
						<span class="hiddencsv">
							<% $events{$event_id}{"campus_room_limit"} %>
						</span>
						<input
							type         = "number"
							min          = "0"
							max          = "<% $tourn_settings->{"nc_purchased"} %>"
							value        = "<% $events{$event_id}{"campus_room_limit"} %>"
							event_id     = "<% $event_id %>"
							setting_name = "campus_room_limit"
							onChange     = "postSwitch(this, '/setup/events/setting_switch.mhtml');"
						>
					</td>
				</tr>
%			}

			</tbody>

			<tr class="libl">
				<th class="padsettingtext">
					Total
				</th>

				<th class="centeralign">
					<% $totals{"entries"} %>
				</th>

				<th class="centeralign">
				</th>

				<th class="centeralign">
					<% $totals{"limits"} %>
				</th>
			</tr>

		</table>

	</div>
%
