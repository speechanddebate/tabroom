<%args>
	$dbh
	$now
	$tourn
	$person
	$event_id       => undef
	$category_id    => undef
	$type           => undef
	$clone_event    => undef
	$tourn_settings => undef
	$person_settings
</%args>
<%init>

	my $msg;
	my $districts = $tourn_settings->{"nsda_district"};

	my $readonly = 'readonly="true"' if $districts;
	undef $readonly if $person->site_admin;
	undef $readonly if $person_settings->{"nsda_admin"};

	my $event = eval {
		return Tab::Event->retrieve($event_id);
	};

	foreach my $tag ("name", "abbr") {

		$ARGS{$tag} =~ s/^\s+//;  # Leading only
		$ARGS{$tag} =~ s/\s+$//;  # Trailing

		my $err;

		if (index($ARGS{$tag}, '/') != -1) {
			$err = "That event $tag contains a slash. That can cause a ";
			$err .= "surprising number of issues! Try a hyphen instead.";
		}

		if (index($ARGS{$tag}, '%') != -1) {
			$err = "That event $tag contains a percent symbol. That can cause a ";
			$err .= "surprising number of issues! Try a hyphen instead.";
		}

		if (index($ARGS{$tag}, '?') != -1) {
			$err = "That event $tag contains a question mark. That can cause a ";
			$err .= "surprising number of issues! Try a hyphen instead.";
		}

		if (index($ARGS{$tag}, '&') != -1) {
			$err = "That event $tag contains an ampersand. That can cause a ";
			$err .= "surprising number of issues! Try a plus character instead.";
		}

		if (
			(	$event > 0
				&& $ARGS{$tag} ne $event->$tag
			)
			|| (not defined $event)
		) {

			# Names must be unique
			my $other_sth = $dbh->prepare("
				select event.id
					from event
				where 1=1
					and event.tourn  = ?
					and event.".$tag." = ?
			");

			$other_sth->execute($tourn, $ARGS{$tag});
			my $others = $other_sth->fetchall_hash();

			if ($others && scalar @{$others} > 0) {
				$err .= "There is already an event with $tag ".$ARGS{$tag}." in tournament ".$tourn->name." Events must have unique ".$tag."s";
			}
		}

		if ($err) {
			$m->redirect("edit.mhtml?event_id=".int($event)."&err=$err");
		}
	}

	unless ($ARGS{'name'} && $ARGS{'abbr'}) {
		my $err .= "Every event must have a name and abbreviation";
		$m->redirect("edit.mhtml?event_id=".int($event)."&err=$err");
	}

	if ($event) {

		if ($type ne $event->type) {
			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => "Event type changed to ".$event->type
			);
		}

		if ($ARGS{'fee'} ne $event->fee) {
			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => "Event fee changed to ".$event->fee
			);
		}

		$event->name($ARGS{"name"});
		$event->level($ARGS{"level"});
		$event->type($ARGS{"type"});
		$event->abbr($ARGS{"abbr"});

		if ($category_id != $event->category) {

			my $category = $event->category;
			my $new_category = Tab::Category->retrieve($category_id);

			my $ot = $category->setting("original_tourn");
			my $not = $new_category->setting("original_tourn");

			if (
				($ot || $not)
				&& ($ot != $not)
			) {
				$m->comp("/funclib/abort.mas",
					message => "In merged tournaments, you may NOT move events to judge categories of the other tournament!  Use Judge Pools instead.  Please read the instructions on the Settings &rarr; Tournament &rarr; Merged page before doing anything more."
				);
			}
		}

		$event->category($category_id);
		$event->fee($ARGS{'fee'} || 0);
		$event->update();
		$msg = "Event changes saved";

	} elsif ($ARGS{'name'}) {

		$event = Tab::Event->create({
			name     => $ARGS{name},
			type     => $type,
			abbr     => $ARGS{abbr},
			tourn    => $tourn->id,
			category => $category_id,
			fee      => $ARGS{'fee'} || 0
		});

		$msg ="Event $ARGS{'name'} created";

		if ($type eq "congress") {
			$event->setting("code_style", "names");
			$event->setting("allow_rank_ties", 1);
			$event->setting("parli_ballot", 1);
			$event->setting("max_points", 6);
			$event->setting("min_points", 1);
			$event->setting("truncate_fill", 9);
		}
	}

	unless ($event) {
		$m->comp('/funclib/abort.mas',
			message => "Event creation failed, or no event found with ID $event_id"
		);
	}

	if ($type eq "congress") {
		if ($event->setting("online_mode") eq "nsda_campus_observers") {
			$event->setting("online_mode", "nsda_campus");
			$msg .= "<br />Online mode changed to NSDA Campus because Observers are not supported with Congress";
		}
	}

	my $sth = $dbh->prepare("
		select
			circuit.id, circuit.abbr, circuit.name,
			qualifier.value_text quals
		from circuit, tourn_circuit tc, circuit_setting qualifier
		where tc.tourn = ?
			and tc.circuit = circuit.id
			and circuit.id = qualifier.circuit
			and qualifier.tag = 'qualifiers'
		order by circuit.abbr
	");

	$sth->execute($tourn->id);

	my $quals = $sth->fetchall_hash();
	my %qual_options;

	foreach my $ref (@{$quals}) {

		my $rules = eval {
			return JSON::decode_json($ref->{quals});
		};

		next unless $rules;
		my $circuit_id = $ref->{"id"};
		my $circuit = $ref->{$circuit_id};

		my $ruleset_key = "qualifier_".$circuit_id;
		my $event_key   = "qualifier_event_".$circuit_id;
		$event->setting($ruleset_key, $ARGS{$ruleset_key});
		$event->setting($event_key, $ARGS{$event_key});
	}

	if ($clone_event) {

		my @settings = Tab::EventSetting->search( event => $clone_event);

		my %already_settings = map {$_->tag => $_}
			Tab::EventSetting->search( event => $event->id );

		foreach my $setting (@settings) {
			if ($already_settings{$setting->tag}) {
				$already_settings{$setting->tag}->value($setting->value);
				$already_settings{$setting->tag}->update;
			} else {
				my $stolen = $setting->copy({
					event => $event->id
				});
			}
		}

		my $ce = Tab::Event->retrieve($clone_event);
		$msg .= "<br />Settings from ".$ce->name." cloned";
	}

	my %event_settings = $event->all_settings();

	my @settings = (
		"code_style",
		"code_start",
		"usa_wsdc",
		"not_nats",
		"min_entry",
		"max_entry",
		"split_team",
		"presplit",
		"topic"
	);

	unless ($readonly) {
		push @settings, "nsda_event_category";
	}

	my @text_settings = (
		"description",
		"result_description",
		"bowl_description"
	);

	foreach my $setting (@text_settings) {

		my $value = $m->comp("/funclib/save_editor.mas",
			text => $ARGS{$setting}
		);

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;

			my $description;

			if ($value eq "0") {
				$description = "Setting $setting text deleted";
				$event->setting($setting, $value);
			} else {
				$description = "Setting $setting changed to $value";
				$event->setting($setting, "text", $value);
			}

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);
		}
	}


	my $bfm;

	if (
		$ARGS{"code_style"} eq "numbers"
		|| $ARGS{"code_style"} eq "school_numbers"
		|| $ARGS{"code_style"} eq "initials"
	) {
		$event->setting('code_length', "short");
	} else {
		$event->setting('code_length', 0);
	}

	if (
		$event_settings{"code_style"}
		&& $ARGS{'code_style'} ne $event_settings{"code_style"}
	) {
		$bfm = "Changing the code format here DOES NOT RECODE ENTRIES.  The potential for accidental ";
		$bfm .= "lost data is too great.  If you wish to re-code the entries to the new format, go to ";
		$bfm .= "Entries : Data, and select Entry Codes at right";
	}

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($value == 1 && ($setting eq "min_entry" || $setting eq "max_entry")) {
			$value = 0;
		}

		if ($value eq $event_settings{$setting}) {

		} else {

			if ($setting eq "nsda_event_category") {
				$event->setting("nsda_point_codefail", 0);
			}

			$value = 0 unless $value;
			my $description = "Setting $setting changed to $value";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);

			$event->setting($setting, $value);

		}
	}

	# Big Questions ballot
	if ($event_settings{"nsda_event_category"} eq "108") {
		$event->setting('big_questions', 1);
	}

	unless ($event_settings{"aff_label"}) {
		$event->setting("aff_label", "Aff");
	}

	unless ($event_settings{"neg_label"}) {
		$event->setting("neg_label", "Neg");
	}

	$m->redirect("edit.mhtml?event_id=".$event->id."&msg=$msg&err=$bfm");

</%init>
