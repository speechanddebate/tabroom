<%args>
	$dbh
	$person
	$tourn
	$tourn_settings => undef
	$event_id       => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => 0
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($event_id) {
		$m->print('{ "error": true, "message": "No event ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $event = Tab::Event->retrieve($event_id);

	unless ($event) {
		$m->print('{ "error": true, "message": "No event found for ID '.$event_id.'"}');
		$m->abort();
	}

	my $message;
	my $extra;

	if (
		$setting_name eq "online_mode"
		&& $property_value ne "none"
		&& $tourn_settings->{"nsda_district"}
		&& $event->type eq "congress"
	) {
		$event->setting("min_panel_size", 8);
		$event->setting("max_panel_size", 16);
	} elsif (
		$setting_name eq "online_mode"
		&& $tourn_settings->{"nsda_district"}
		&& $event->type eq "congress"
	) {
		$event->setting("min_panel_size", 8);
		$event->setting("max_panel_size", 29);
	}

	if ($setting_name eq "online_mode" && $property_value ne "none") {
		$event->setting("online_ballots", 1);
	}

	if (
		$setting_name eq "online_mode"
		&& ($property_value eq "nsda_campus" || $property_value eq "nsda_campus_observers")
		&& ($person->site_admin < 1)
	) {
		my $sth = $dbh->prepare("update round set published = 0 where event = ?");
		$sth->execute($event->id);
		$extra = " and all rounds unpublished due to the switch to Campus."
	}

	if ($setting_name) {

		if ($setting_name eq "online_mode" && $property_value eq "none") {
			$property_value = 0;
			$event->setting("online_hybrid", 0);
		}

		if ($setting_name eq "online_mode"
			&& ($property_value eq "sync"
			|| $property_value eq "sync")
		) {
			$event->setting("online_hybrid", 0);
		}

		$event->setting($setting_name, $property_value);
		$message = "Setting $setting_name changed to $property_value";
		$message .= " ".$extra;

	} elsif ($property_name) {

		$event->$property_name($property_value);
		$event->update();
		$message = "Event ".$event->abbr." property $property_name changed to $property_value";
	}

	if ($setting_name eq "no_side_constraints" && $property_value == 1) {
		$event->setting("allow_repeat_prelim_side", 0);
	}

	my @setvalues;

	if ($setting_name eq "flip_before_start") {

		$event->setting("flip_autopublish", 0);
		push @setvalues, ({ id => "flip_autopublish", content => "" });

	} elsif ($setting_name eq "flip_autopublish") {

		$event->setting("flip_before_start", 0);
		push @setvalues, ({ id => "flip_before_start", content => "" });
	}

    my %response = (
		error   => 0,
		message => $message
    );

	if (scalar @setvalues) {
		$response{"setvalue"} = \@setvalues;
	}

	my $now = DateTime->now();

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $event->id,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $message
	);

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
