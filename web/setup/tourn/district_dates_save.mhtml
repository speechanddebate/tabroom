<%args>
	$tourn
	$tourn_settings
	$person
	$weekend_id          => undef
	$name                => undef
	$start               => undef
	$starttime           => undef
	$end                 => undef
	$endtime             => undef
	$reg_start           => undef
	$reg_starttime       => undef
	$reg_end             => undef
	$reg_endtime         => undef
	$drop_deadline       => undef
	$drop_deadlinetime   => undef
	$judge_deadline      => undef
	$judge_deadlinetime  => undef
	$freeze_deadline     => undef
	$freeze_deadlinetime => undef
	$fine_deadline       => undef
	$fine_deadlinetime   => undef
</%args>
<%init>

	my $now = DateTime->now();

	my $weekend;
	my @messages;

	if ($weekend_id && $weekend_id ne "new_dates") {

		$weekend = Tab::Weekend->retrieve($weekend_id);

		if ($weekend) {

			my $delta;

			if ($weekend->name ne $name) {
				$weekend->name($name);
				$delta++;
			}

			if ($weekend->city ne $ARGS{"city"}) {
				$weekend->city($ARGS{"city"});
				$delta++;
			}

			if ($weekend->state ne $ARGS{"state"}) {
				$weekend->state($ARGS{"state"});
				$delta++;
			}

			$weekend->update(); # with Dennis Miller.

			if ($delta) {
				push @messages, "Changed the location of ".$weekend->name." to ".$weekend->city." ".$weekend->state;
			}
		}

	} else {

		$weekend = Tab::Weekend->create({
			tourn           => $tourn->id,
			name            => $name,
			start           => $now,
			end             => $now,
			reg_start       => $now,
			reg_end         => $now,
			freeze_deadline => $now,
			drop_deadline   => $now,
			judge_deadline  => $now,
			fine_deadline   => $now,
			site            => 0,
			city            => $ARGS{"city"},
			state           => $ARGS{"state"}
		});

		push @messages, "Created a new tournament weekend ".$weekend->name;

	}

	$m->abort() unless $weekend;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $startdt;
	my $enddt;

	my $reg_startdt;
	my $reg_enddt;

	eval {
		$startdt = Tab::dtme($start, $starttime, $tz);
		$enddt = Tab::dtme($end, $endtime, $tz);

		$reg_startdt = Tab::dtme($reg_start,$reg_starttime, $tz);
		$reg_enddt = Tab::dtme($reg_end,$reg_endtime, $tz);
	};

	unless ($startdt) {
		my $err = "Start date was not valid";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}
	unless ($enddt) {
		my $err = "End date was not valid";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	unless ($reg_startdt) {
		my $err = "Registration start date was not valid";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	if ($tourn_settings->{"nsda_district"}) {

		my $seven_days_ago = $startdt->clone;
		$seven_days_ago->subtract(days => 7);

		if ($reg_enddt < $seven_days_ago
			&& !$person->site_admin
		) {

			my $err = "Registration must be due no less than 7 days before the start of your District tournament";
			$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
		}
	}

	unless ($reg_enddt) {
		my $err = "Registration deadline was not valid";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	if ($startdt->year < 400 || $enddt->year < 400) {
		my $err = "Those tournament start or end dates are set to occur during the early Roman Empire.";
		$err .= "<br /><br />Please use full years (2014 instead of 14).";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	if ($startdt->year < 2000 || $enddt->year < 2000) {
		my $err = "The year you chose for your start or end date ";
		$err .= "is several years in the past. <br /> <br />I doubt ";
		$err .= "that's what you want.  Try again?";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	if ($startdt->year > 2100 || $enddt->year > 2100) {
		my $err = "The year you chose for your start or end date is ";
		$err .= "in the far distant future.<br />As much as I like to be an ";
		$err .= "optimist, I doubt Tabroom will be around that long.  Try again?";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	if ($startdt->epoch > $enddt->epoch) {
		my $err = "Your tournament starts after it ends.  ";
		$err .= "The laws of time and space are not pleased at your arrogance.  ";
		$err .= "Please preserve the universe and try again.";
		$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&err=$err");
	}

	my $drop_deadlinedt;
	my $judge_deadlinedt;
	my $freeze_deadlinedt;
	my $fine_deadlinedt;

	eval {
		$drop_deadlinedt   = Tab::dtme($drop_deadline,$drop_deadlinetime, $tz);
		$judge_deadlinedt  = Tab::dtme($judge_deadline,$judge_deadlinetime, $tz);
		$freeze_deadlinedt = Tab::dtme($freeze_deadline,$freeze_deadlinetime, $tz);
		$fine_deadlinedt   = Tab::dtme($fine_deadline,$fine_deadlinetime, $tz);
	};

	$drop_deadlinedt = $reg_enddt->clone unless $drop_deadlinedt;
	$judge_deadlinedt = $reg_enddt->clone unless $judge_deadlinedt;
	$freeze_deadlinedt = $reg_enddt->clone unless $freeze_deadlinedt;
	$fine_deadlinedt = $reg_enddt->clone unless $fine_deadlinedt;

	if ($startdt != $weekend->start) {
		my $start = $m->comp("/funclib/showdt.mas", dt => $startdt, format => "murica_short", return => 1 );
		push @messages, "Changed the start date of ".$weekend->name." to $start";
	}

	if ($enddt != $weekend->end) {
		my $end = $m->comp("/funclib/showdt.mas", dt => $enddt, format => "murica_short", return => 1);
		push @messages, "Changed the end date of ".$weekend->name." to $end";
	}

	if ($reg_startdt != $weekend->reg_start) {
		my $reg_start = $m->comp("/funclib/showdt.mas", dt => $reg_startdt, format => "murica_short", return => 1);
		push @messages, "Changed the reg start of ".$weekend->name." to $reg_start";
	}

	if ($reg_enddt != $weekend->reg_end) {
		my $reg_end = $m->comp("/funclib/showdt.mas", dt => $reg_enddt, format => "murica_short", return => 1);
		push @messages, "Changed the reg end of ".$weekend->name." to $reg_end";
	}

	if (scalar @messages > 0) {

		my $description = join(",", @messages);

		Tab::ChangeLog->create({
			tag         => "districts",
			person      => $person,
			tourn       => $tourn,
			description => $description,
		});
	}

	$weekend->start($startdt);
	$weekend->end($enddt);
	$weekend->reg_start($reg_startdt);
	$weekend->reg_end($reg_enddt);

	$weekend->drop_deadline($drop_deadlinedt);
	$weekend->judge_deadline($judge_deadlinedt);
	$weekend->freeze_deadline($freeze_deadlinedt);
	$weekend->fine_deadline($fine_deadlinedt);

	my $site = Tab::Site->retrieve($ARGS{"site_id"}) if $ARGS{"site_id"};
	$weekend->site($site->id) if $site;
	$weekend->site(0) unless $site;

	if ($site) {
		foreach my $event ($tourn->events() ) {

			next unless $event->setting('weekend') == $weekend->id;

			foreach my $round ($event->rounds() ) {
				$round->site($site->id);
				$round->update();

			}
		}
	}

	$weekend->update();

	my $tourn_startdt;
	my $tourn_enddt;
	my $tourn_regstartdt;
	my $tourn_regenddt;

	my %tourn_sites;

	foreach my $weekend ($tourn->weekends) {

		if (
			(not defined $tourn_startdt)
			|| $tourn_startdt->epoch > $weekend->start->epoch
		) {
			$tourn_startdt = $weekend->start;
		}
		if (
			(not defined $tourn_enddt)
			|| $tourn_enddt->epoch < $weekend->end->epoch
		) {
			$tourn_enddt = $weekend->end;
		}

		if (
			(not defined $tourn_regstartdt)
			|| $tourn_regstartdt->epoch > $weekend->reg_start->epoch
		) {
			$tourn_regstartdt = $weekend->reg_start;
		}

		if (
			(not defined $tourn_regenddt)
			|| $tourn_regenddt->epoch < $weekend->reg_end->epoch
		) {
			$tourn_regenddt = $weekend->reg_end;
		}

		$tourn_sites{$weekend->site->id}++ if $weekend->site;
	}


	foreach my $dt ($tourn_startdt, $tourn_enddt, $tourn_regstartdt, $tourn_regenddt) {
		$dt->set_time_zone($tourn->tz);
	}

	$tourn->start($tourn_startdt);
	$tourn->end($tourn_enddt);
	$tourn->reg_start($tourn_regstartdt);
	$tourn->reg_end($tourn_regenddt);

	$tourn->update();

	my %alreadies = map {$_->id => $_} $tourn->sites();

	foreach my $site_id (keys %tourn_sites) {

		next unless $site_id > 0;
		next if $alreadies{$site_id};

		my $site = Tab::Site->retrieve($site_id);

		next unless $site;

		Tab::TournSite->create({
			tourn => $tourn->id,
			site  => $site_id
		});

		$alreadies{$site_id} = $site;

	}

	foreach my $already (keys %alreadies) {

		next if $tourn_sites{$already};
		next if $site && $already == $site->id;

		foreach my $site_mem (
			Tab::TournSite->search(
				tourn => $tourn->id,
				site => 0
			)
		) {
			$site_mem->delete();
		}

		if ($alreadies{$already} && $alreadies{$already}->id) {

			my @site_mems = Tab::TournSite->search(
				tourn => $tourn->id,
				site => $already
			);

			Tab::Round->set_sql(by_site_and_tourn => "
				select round.*
				from round, event
				where round.event = event.id
				and event.tourn = ?
				and round.site = ?
			");

			my @site_rounds = Tab::Round->search_by_site_and_tourn($tourn->id, $already);

			if ($site) {
				foreach my $site_round (@site_rounds) {
					$site_round->site($site->id);
					$site_round->update();
				}
			}

			foreach my $mem (@site_mems) {
				$mem->delete();
			}
		}
	}

	foreach my $message (@messages) {

		$m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			type        => "districts",
			person      => $person->id,
			description => $message
		);
	}

	my $msg = "Date changes have been saved for ".$weekend->name." @messages ";

	$weekend->update();

	$m->redirect("district_dates.mhtml?weekend_id=".$weekend->id."&msg=$msg");

</%init>
