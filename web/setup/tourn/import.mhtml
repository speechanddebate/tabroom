<%args>
	$tourn
	$person
	$clone
	$erase   => undef
	$entries => undef
</%args>
<%perl>

	my $not_gonna_do_it;

	return unless $clone;

	my %translator;

	my $old_tourn = Tab::Tourn->retrieve($clone);

	if ($old_tourn->id == $tourn->id) {
		$not_gonna_do_it = ' <p class="redtext strong">
		You are attempting to import these tournament rules into the same
		tournament.

		This is the Tabroom.com equivalent of the Ghostbusters
		crossing the streams.
		</p><p class="redtext strong">
		Please hit back and try to do this properly</p> ';
	}

	my $now = DateTime->now;

	if ($tourn->start < $now) {

		$not_gonna_do_it .= '
		<p class="redtext strong">
			You are attempting to wipe out and import rules for a tournament that
			has already started.
		</p>

		<p class="redtext strong">
			This is the Tabroom.com equivalent of the Ghostbusters
			crossing the streams.
		</p>

		<p class="redtext strong">
			So I shall not do it, because I am a benevolent website. Please hit
			back and import your tournament rules into a fresh tournament, not
			an existing one.
		</p>';
	}

	if ($not_gonna_do_it) {
		$m->print('<div class="main">');
		$m->print($not_gonna_do_it);
		$m->print("</div>");
		$m->abort;
	}

	if ($erase)  {
		Tab::EventSetting->set_sql( delete_event => "
			delete event_setting.*
			from event_setting, event
			where event_setting.event = event.id
			and event.tourn = ? ");

		Tab::CategorySetting->set_sql( delete_class => "
			delete category_setting.*
			from category_setting, category
			where category_setting.category = category.id
			and category.tourn = ?");

		Tab::TournSetting->set_sql( delete_tourn => "
			delete tourn_setting.*
			from tourn_setting
			where tourn_setting.tourn = ?
			and tourn_setting.tourn='tourn'");

		Tab::Strike->set_sql( delete => "
			delete strike.*
			from strike,judge,category
			where strike.judge = judge.id
			and judge.category = category.id
			and category.tourn = ?");

		Tab::Judge->set_sql( delete => "
			delete judge.*
			from judge, category
			where judge.category = category.id
			and category.tourn = ? ");

		Tab::Entry->set_sql( delete => "
			delete entry.*
			from entry, school
			where entry.school = school.id
			and school.tourn = ? ");

		Tab::Round->set_sql( delete => "
			delete round.*
			from round, event
			where round.event = event.id
			and event.tourn = ? ");

		Tab::School->set_sql( delete => "delete from school where tourn = ? ");

		Tab::Event->set_sql( delete => "delete from event where tourn = ? ");

		Tab::Category->set_sql( delete => "delete from category where tourn = ? ");

		Tab::Timeslot->set_sql( delete => "delete from timeslot where tourn = ? ");

		Tab::EventSetting->sql_delete_event->execute($tourn->id);
		Tab::CategorySetting->sql_delete_class->execute($tourn->id);
		Tab::TournSetting->sql_delete_tourn->execute($tourn->id);
		Tab::Strike->sql_delete->execute($tourn->id);
		Tab::Judge->sql_delete->execute($tourn->id);
		Tab::Entry->sql_delete->execute($tourn->id);
		Tab::Round->sql_delete->execute($tourn->id);
		Tab::School->sql_delete->execute($tourn->id);
		Tab::Event->sql_delete->execute($tourn->id);
		Tab::Category->sql_delete->execute($tourn->id);
		Tab::Timeslot->sql_delete->execute($tourn->id);
	}

	my $ostart = $old_tourn->start;

	# $diff is the change between the old start & the new start.  translates
	# all dates.

	my $diff = $tourn->start->delta_days($ostart);

	my $reg_start = $old_tourn->reg_start->clone;
	$reg_start->add_duration($diff);

	my $reg_end = $old_tourn->end->clone;
	$reg_end->add_duration($diff);

	$tourn->reg_start($reg_start);
	$tourn->reg_end($reg_end);
	$tourn->update;

	#Settings
	foreach my $setting ($old_tourn->settings) {

		next unless $setting->value;
		next if $setting->tag eq "invite";
		next if $setting->tag eq "bills";
		next if $setting->tag eq "logo";
		next if $setting->tag eq "autoquals";
		next if $setting->tag eq "district_authorships";
		next if $setting->tag eq "nsda_points_posted";
		next if $setting->tag eq "naudl_processed";
		next if $setting->tag eq "created_by";

		next if $setting->tag eq "nc_requested";
		next if $setting->tag eq "nc_purchased";
		next if $setting->tag eq "nco_requested";
		next if $setting->tag eq "nco_purchased";
		next if $setting->tag eq "nsda_campus_days";
		next if $setting->tag eq "nsda_campus_observer_days";

		next if $setting->tag eq "nsda_campus_purchaser";
		next if $setting->tag eq "store_carts";
		next if $setting->tag eq "tabroom_purchased";
		next if $setting->tag eq "tabroom_requested";
		next if $setting->tag eq "tabroom_grant";
		next if $setting->tag eq "school_name";
		next if $setting->tag eq "school_state";
		next if $setting->tag eq "school_city";
		next if $setting->tag eq "school_zip";
		next if $setting->tag eq "school_state";




		next if $setting->value eq "text" && not defined $setting->value_text;
		next if $setting->value eq "json" && not defined $setting->value_text;

		next if Tab::TournSetting->search( tourn => $tourn->id, tag => $setting->tag);

		my $nsetting = $setting->copy({
			tourn => $tourn->id
		});

		if ($nsetting->value eq "date") {
			my $new_date = $nsetting->value_date->clone;
			$new_date->add_duration($diff);
			$nsetting->value_date($new_date);
		}
		$nsetting->update;
	}

	# Tiebreakers and sets
	my %already = map {$_->name => 1} $tourn->protocols;

	foreach my $protocol ($old_tourn->protocols) {

		next if $already{$protocol->name};

		my $nprotocol = $protocol->copy({
			tourn => $tourn->id
		});

		foreach my $protocol_setting ($protocol->settings) {
			$protocol_setting->copy({
				protocol => $nprotocol->id
			});
		}

		foreach my $tb ($protocol->tiebreaks) {
			my $ntb = $tb->copy({
				protocol => $nprotocol->id
			});
		}

		$translator{"protocol"}{$protocol->id} = $nprotocol->id;
	}

	my @circuits;

	#Circuits
	foreach my $circuit ($old_tourn->tourn_circuits) {

		unless (Tab::TournCircuit->search(
			tourn   => $tourn->id,
			circuit => $circuit->circuit->id)
		) {

			my $ncircuit = $circuit->copy({
				tourn    => $tourn->id,
				approved => 0
			});
		}

		push (@circuits, $circuit->circuit);
	}

	#Tournament specific regions
	foreach my $region ($old_tourn->regions) {
	   my $nregion = $region->copy({
		   tourn    => $tourn->id
	   });
	}

	#Limits on Double Entry
	foreach my $ed ($old_tourn->patterns) {
		my $ned = $ed->copy({
			tourn => $tourn->id
		});
		$translator{"pattern"}{$ed->id} = $ned->id;
	}

	#Tournament Sites
	foreach my $tournsite ($old_tourn->tourn_sites) {
		eval {
			my $ntournsite = $tournsite->copy(
				tourn => $tourn->id
			);
		};
	}

	#Webpages
	if ($tourn->webname eq $old_tourn->webname) {
		foreach my $webpage ($tourn->webpages) {
			my $nwebpage = $webpage->copy;
			$nwebpage->tourn($tourn->id);
			$nwebpage->update;
		}
	}

	#Concessions
	foreach my $concession ($old_tourn->concessions) {

		my $nconcession = $concession->copy;
		$nconcession->tourn($tourn->id);

		my $new_deadline = $concession->deadline;
		$new_deadline->add_duration($diff) if $new_deadline;
		$nconcession->deadline($new_deadline) if $new_deadline;

		$nconcession->update;
	}


	#Tournament Standing Fees
	foreach my $tourn_fee ($old_tourn->tourn_fees) {

		my $ntourn_fee = $tourn_fee->copy;
		$ntourn_fee->tourn($tourn->id);

		my $new_start = $ntourn_fee->start;
		$new_start->add_duration($diff) if $new_start;
		$ntourn_fee->start($new_start) if $new_start;

		my $new_end = $ntourn_fee->end;
		$new_end->add_duration($diff) if $new_end;
		$ntourn_fee->end($new_end) if $new_end;

		$ntourn_fee->update;
	}

	#Timeslots
	foreach my $ts ($old_tourn->timeslots) {

		my $nts = $ts->copy;
		$nts->tourn($tourn->id);

		my $ntstart = $nts->start;
		$ntstart->add_duration($diff);
		$nts->start($ntstart);

		my $ntend = $nts->end;
		$ntend->add_duration($diff);
		$nts->end($ntend);

		$nts->update;

		$translator{"timeslot"}{$ts->id} = $nts;
		$translator{"timeslot"}{$ts->id."-start"} = $ntstart;

	}

	#Judge Categories
	foreach my $category ($old_tourn->categories) {

		my $ncategory = $category->copy({
			tourn => $tourn->id
		});

		$translator{"category"}{$category->id} = $ncategory->id;

		#Settings

		foreach my $setting ($category->settings) {

			next if $ncategory->setting($setting->tag);

			my $nsetting = $setting->copy({
				category => $ncategory->id
			});

			$nsetting->category($ncategory->id);

			if ($nsetting->value eq "date") {
				if ($nsetting->value_date) {
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
				}
			}

			$nsetting->update;
		}


		foreach my $rs ($category->rating_subsets) {

			my $nrs = $rs->copy({
				category => $ncategory->id
			});

			$translator{"rating_subset"}{$rs->id} = $nrs->id;

			#Rating/Preference Tiers
			foreach my $rating_tier ($rs->rating_tiers) {
				my $nrating_tier = $rating_tier->copy({
					rating_subset => $nrs->id
				});
			}

		}

		foreach my $shift ($category->shifts) {

			my $nshift = $shift->copy;
			$nshift->category($ncategory->id);

			my $new_start = $shift->start;
			$new_start->add_duration($diff);
			$nshift->start($new_start);

			my $new_end = $shift->end;
			$new_end->add_duration($diff);
			$nshift->end($new_end);

			$nshift->update;

		}

	}

	#Events
	foreach my $event ($old_tourn->events) {

		my $pattern = $event->pattern->id if $event->pattern;

		my $nevent = eval {
			return $event->copy({
				tourn         => $tourn->id,
				category      => $translator{"category"}{$event->category->id},
				pattern       => $translator{"pattern"}{$pattern},
				rating_subset => $translator{"rating_subset"}{$event->rating_subset}
			});
		};

		next unless $nevent;
		$translator{"event"}{$event->id} = $nevent;

		SETTING:
        foreach my $setting ($event->settings) {

			next if $setting->tag eq "round_notified";
			next if $setting->tag eq "first_round_notified";
			next if $setting->tag eq "congress_placard_logo";
			next if $setting->tag eq "nsda_points_posted";
			next if $setting->tag eq "nsda_point_codefail";

            my $nsetting = $setting->copy({
                event => $nevent->id
            });

            if ($setting->tag eq "speaker_protocol"
				|| $setting->tag eq "leadership_protocol"
				|| $setting->tag eq "po_protocol"
			) {

				if ($translator{"protocol"}{$setting->value}) {
					$nsetting->value($translator{"protocol"}{$setting->value});
					$nsetting->update;
				} else {
					$nsetting->delete();
					next SETTING;
				}
            }

            if ($nsetting->value eq "date") {
                my $new_date = $nsetting->value_date->clone;
                $new_date->add_duration($diff);
                $nsetting->value_date($new_date);
                $nsetting->update;
            }

        }

		# Copy the ballots from the old tournament into the new one
		system $Tab::s3_cmd." cp -r $Tab::s3_bucket/tourns/".$old_tourn->id."/events/".$event->id." $Tab::s3_bucket/tourns/".$tourn->id."/events/".$nevent->id;

		# Copy the rounds

		foreach my $round ($event->rounds) {

			my $nround = eval {
				return $round->copy({
					event => $nevent->id
				});
			};

			next unless $nround > 0;

			if ($round->timeslot) {
				$nround->timeslot($translator{"timeslot"}{$round->timeslot->id});
				$nround->start_time($translator{"timeslot"}{$round->timeslot->id."-start"});

				if ($round->protocol) {
					$nround->protocol($translator{"protocol"}{$round->protocol->id});
				}
			}

			$nround->setting("motion", 0);
			$nround->update();

			$translator{"round"}{$round->id} = $nround->id;

			foreach my $setting ($round->settings) {
				next if $setting->tag eq "entry_list_published";
				next if $setting->tag eq "motion";
				next if $setting->tag eq "cat_id";
				next if $setting->tag eq "flip_published";
				next if $setting->tag eq "flipped_at";
				next if $setting->tag eq "flip_at";
				next if $setting->tag eq "flip_round_deadline";
				next if $setting->tag eq "strikes";
				next if $setting->tag eq "strikes_due";
				next if $setting->tag eq "strikes_blast";
				next if $setting->tag eq "strikes_published";
				next if $setting->tag eq "student_vote_open";
				next if $setting->tag eq "first_ballot";
				next if $setting->tag eq "last_ballot";

				my $nsetting = $setting->copy({
					round => $nround->id
				});

				if (
					$setting->tag eq "seed_round"
					|| $setting->tag eq "sidelock_against"
					|| $setting->tag eq "roomlock_against"
					|| $setting->tag eq "showrooms_from"
					|| $setting->tag eq "parli_share"
					|| $setting->tag eq "session_lock"
				) {
					$nsetting->value($translator{"rounds"}{$setting->value});
					$nsetting->update();
				}

				if ($nsetting->value eq "date" && $nsetting->value_date) {
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
					$nsetting->update();
				}
			}
		}

		if ($nevent->setting("bid_round")) {
			my $new_bid = $translator{"round"}{$nevent->setting("bid_round")};
			$nevent->setting("bid_round",  $new_bid);
		}

	} # End of events

	foreach my $event_id (keys %{$translator{"event"}}) {
		my $nevent = $translator{"event"}{$event_id};
		if ($nevent->setting("po_contest")) {
			my $new_po_event = $translator{"event"}{$nevent->setting("po_contest")};
			$nevent->setting("po_contest",  $new_po_event);
		}
	}

	foreach my $category ($old_tourn->categories) {

		my $ncategory = $translator{"category"}{$category->id};

		foreach my $jpool ($category->jpools) {

			my $njpool = $jpool->copy({
				category => $ncategory
			});

			foreach my $round ($jpool->rounds) {

				next unless $translator{"round"}{$round->id};

				Tab::JPoolRound->create({
					round => $translator{"round"}{$round->id},
					jpool => $njpool->id
				});

			}

			foreach my $setting ($jpool->settings) {

				my $nsetting = $setting->copy({
					jpool => $njpool->id
				});

				if ($nsetting->tag eq "standby_timeslot") {
					my $value = $translator{"timeslot"}{$setting->value};

					if ($value) {
						$setting->value($value);
						$setting->update();
					} else {
						$setting->delete();
					}
				}
			}
		}
	}

	foreach my $rpool ($old_tourn->rpools) {

		my $nrpool = $rpool->copy({ tourn => $tourn->id });

		foreach my $round ($rpool->rounds) {

			next unless $translator{"round"}{$round->id};

			Tab::RPoolRound->create({
				round => $translator{"round"}{$round->id},
				rpool => $nrpool->id
			});
		}

	}


	Tab::Round->set_sql(clear_publish => "
		delete round_setting.*
		from round_setting, round, event
		where event.tourn = ?
		and round.event = event.id
		and round.id = round_setting.round
		and round_setting.tag in (
			'publish_entry_list',
			'motion',
			'motion_publish',
			'completed',
			'coach_wins',
			'coach_points',
			'coach_feedback',
			'blasted');
	");

	Tab::Round->set_sql(clear_publish_fields => "
        update round, event
            set round.published = 0,
			round.post_primary = 0,
			round.post_secondary = 0,
			round.post_feedback = 0,
			round.start_time = NULL,
            round.paired_at = NULL
        where round.event = event.id
        and event.tourn = ?
	");

	Tab::Round->sql_clear_publish->execute($tourn->id);
	Tab::Round->sql_clear_publish_fields->execute($tourn->id);

	foreach my $room_strike ($old_tourn->room_strikes) {

		my $nroom_strike = $room_strike->copy;

		if ($nroom_strike->type eq "entry" || $nroom_strike->type eq "judge") {
			$nroom_strike->delete();
			next;
		}

		$nroom_strike->tourn($tourn->id);

		$nroom_strike->event($translator{"event"}{$room_strike->event->id})
			if $room_strike->event;

		if ($nroom_strike->start) {
			my $new_start = $nroom_strike->start;
			$new_start->add_duration($diff);
			$nroom_strike->start($new_start);
		}

		if ($nroom_strike->end) {
			my $new_end = $nroom_strike->end;
			$new_end->add_duration($diff);
			$nroom_strike->end($new_end);
		}

		$nroom_strike->update;

	}

	#Sweepstakes
	foreach my $sweep_set ($old_tourn->sweep_sets) {

		my $nsweep_set = $sweep_set->copy({
			tourn => $tourn->id
		});

		$translator{"sweep_set"}{$sweep_set->id} = $nsweep_set->id;

		foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) {

			my $nsweep_event = $sweep_event->copy({
				event     => $translator{"event"}{$sweep_event->event},
				sweep_set => $nsweep_set->id
			});
		}

		foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) {

			my $nsweep_rule;

			if ($sweep_rule->tag eq "ignore_round") {

				if ($translator{"round"}{$sweep_rule->value}) {
					$nsweep_rule = $sweep_rule->copy({
						sweep_set => $nsweep_set->id,
						value     => $translator{"round"}{$sweep_rule->value}
					});
				}

			} else {

				$nsweep_rule = $sweep_rule->copy({
					sweep_set => $nsweep_set->id
				});
			}

			if ($sweep_rule->protocol > 0) {

				if ($translator{"protocol"}{$sweep_rule->protocol}) {
					$nsweep_rule->protocol($translator{"protocol"}{$sweep_rule->protocol});
				} else {
					$nsweep_rule->protocol(0);
				}

				$nsweep_rule->update();
			}
		}
	}

	foreach my $old_sweep_set ($old_tourn->sweep_sets) {

		my $sweep_set = $translator{"sweep_set"}{$old_sweep_set->id};

		if ($sweep_set > 0) {

			my @links = Tab::SweepInclude->search( parent => $old_sweep_set );

			foreach my $link (@links) {

				if ($translator{"sweep_set"}{$link->child}) {
					my $nlink = $link->copy({
						parent => int($sweep_set),
						child  => $translator{"sweep_set"}{$link->child},
					});
				}
			}
		}
	}

	# Schools if we're doing that thing

	if ($entries) {

		foreach my $school ($old_tourn->schools) {
			my $new_school = $school->copy({ tourn => $tourn->id });
			$translator{"school"}{$school->id} = $new_school;
		}

		foreach my $judge ($m->comp("/funclib/tourn_judges.mas", tourn => $old_tourn)) {

			my $school = $translator{"school"}{$judge->school} if $judge->school;
			$school = 0 unless $school;

			my $new_judge = $judge->copy({
				category => $translator{"category"}{$judge->category->id},
				school   => $school
			});

			$translator{"judge"}{$judge->id} = $new_judge;

			foreach my $strike ($judge->strikes) {

				next if $strike->entry;

				$strike->copy({
					tourn  => $tourn->id,
					school => $translator{"school"}{$strike->school},
					event  => $translator{"event"}{$strike->event},
					judge  => $new_judge->id
				});

			}

			foreach my $setting ($judge->settings) {
				$setting->copy({  judge => $new_judge->id });
			}

		}


	foreach my $school ($old_tourn->schools) {

		my $new_school = $translator{"school"}{$school->id};

		foreach my $entry ($school->entries) {

			my $event_id = $entry->event->id;
			my $new_event = $translator{"event"}{$event_id};

			next unless $new_event;

			my $new_entry = $entry->copy({ school => $new_school->id,  event => $new_event });

			foreach my $es ($entry->entry_students) {
				$es->copy({ entry => $new_entry });
			}

			foreach my $strike ($entry->strikes) {
				$strike->copy({
					tourn => $tourn->id,
					entry => $new_entry->id,
					judge => $translator{"judge"}{$strike->judge->id} });
			}

			foreach my $rating ($entry->ratings) {
				$rating->copy({
					tourn => $tourn->id,
					entry => $new_entry->id,
					judge => $translator{"judge"}{$rating->judge->id} });
			}

		}

		}

	}

	my $msg = "Tournament ".$old_tourn->name." has been imported into this one.";
	$m->redirect("settings.mhtml?msg=$msg");

</%perl>
