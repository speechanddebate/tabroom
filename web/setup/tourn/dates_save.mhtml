<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$name                         => undef
	$start                        => undef
	$starttime                    => undef
	$end                          => undef
	$endtime                      => undef
	$reg_start                    => undef
	$reg_starttime                => undef
	$reg_end                      => undef
	$reg_endtime                  => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();
	my $dbh = Tab::DBI->db_Main();

	my $startdt = $m->comp("/funclib/showdt.mas",
		date   => $start,
		time   => $starttime,
		tz     => $tz,
		object => 1
	);

	my $enddt = $m->comp("/funclib/showdt.mas",
		date   => $end,
		time   => $endtime,
		tz     => $tz,
		object => 1
	);

	if (
		$tourn_settings->{"tabroom_purchased"}
		|| $tourn_settings->{"tabroom_grant"}
		|| $tourn_settings->{"nc_purchased"}
		|| $tourn_settings->{"nco_purchased"}
	) {

		my $delete_payment;

		if (
			$tourn_settings->{"original_start"}
		) {
			my $start_diff = $tourn_settings->{original_start} - $startdt;
			$delete_payment = &seven_span($start_diff);
		}

		if (
			$tourn_settings->{"original_end"}
		) {
			my $end_diff = $tourn_settings->{original_end} - $enddt;
			$delete_payment = &seven_span($end_diff);
		}

		unless ($delete_payment) {
			my $start_diff = $tourn->start - $startdt;
			$delete_payment = &seven_span($start_diff);
		}

		unless ($delete_payment) {
			my $end_diff = $tourn->end - $enddt;
			$delete_payment = &seven_span($end_diff);
		}

		if ($delete_payment) {

			my $sth = $dbh->prepare('
				delete from tourn_setting where tourn = ?
					and tag IN ("tabroom_purchased", "tabroom_grant",
						"nc_purchased", "nco_purchased",
						"original_start", "original_end"
					)
			');

			$sth->execute($tourn->id);

			my $string = "TR Purchase ".$tourn_settings->{"tabroom_purchased"};
			$string .= "TR Grant ".$tourn_settings->{"tabroom_grant"};
			$string .= "Campus Purchase ".$tourn_settings->{"nc_purchased"};
			$string .= "Campus Observer Purchase ".$tourn_settings->{"nco_purchased"};

			Tab::ChangeLog->create({
				tag         => "payment",
				person      => $person,
				tourn       => $tourn,
				description => "Date change triggered deletion of payment data: $string"
			});

			my @owners = Tab::Permission->search( tourn => $tourn, tag => 'owner');
			my @ids;
			foreach my $owner (@owners) {
				push @ids, $owner->person->id,
			}

			push @ids, $person->id;

			my $from_string = $person->first." ".$person->last." via Tabroom <tourn_".$tourn->id.'@www.tabroom.com>';

			$m->comp("/funclib/send_notify.mas",
				from_string => $from_string,
				ids         => \@ids,
				subject     => "Tournament dates changed, payment revoked",
				body        => "The ".$tourn->name." tournament dates were changed more than 7 days after payment by ".$person->email.", so the payment record was deleted, as this is now considered a new tournament.  Moving a tournament rather than creating and cloning a new one can create serious problems operating Tabroom tournaments; it is best practice to instead create a new tournament every year."
			);

		} else {

			if (not defined $tourn_settings->{"original_start"}) {
				$tourn->setting('original_start', 'date', $tourn->start);
			}

			if (not defined $tourn_settings->{"original_end"}) {
				$tourn->setting('original_end', 'date', $tourn->end);
			}
		}
	}

	my $reg_startdt = $m->comp("/funclib/showdt.mas",
		date   => $reg_start,
		time   => $reg_starttime,
		tz     => $tz,
		object => 1
	);

	my $reg_enddt = $m->comp("/funclib/showdt.mas",
		date   => $reg_end,
		time   => $reg_endtime,
		tz     => $tz,
		object => 1
	);

	unless ($startdt) {
		my $err = "Start date was not valid ($start $starttime)";
		$m->redirect("dates.mhtml?err=$err");
	}

	unless ($enddt) {
		my $err = "End date was not valid ($end $endtime)";
		$m->redirect("dates.mhtml?err=$err");
	}

	unless ($reg_startdt) {
		my $err = "Registration start date was not valid ($reg_start $reg_starttime)";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($tourn_settings->{"nsda_district"}) {

		my $seven_days_ago = $startdt->clone;
		$seven_days_ago->subtract(days => 7);

		if ($reg_enddt > $seven_days_ago && !$person->site_admin) {
			my $err = "Registration must be due no less than 7 days before the start of your District tournament";
			$m->redirect("dates.mhtml?err=$err");
		}
	}

	unless ($reg_enddt) {
		my $err = "Registration deadline was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}

	my $tourn_start = eval {
		my $dt = $tourn->start;
		$dt->set(second => 00);
		$dt->set_time_zone("UTC");
		return $dt;
	};

	unless ($person->site_admin || $person_settings->{nsda_admin}) {

		if (not defined $tourn_start) {

		} elsif (
			$tourn_settings->{nc_purchased} > 0
			&& ($startdt ne $tourn_start)
			&& ($tourn_start < $now)
		) {
			my $err = "You may not change the start date and time of an online tournament after it has already begun";
			$m->redirect("dates.mhtml?err=$err");
		}
	}

	if ($startdt->year < 400 || $enddt->year < 400) {
		my $err = "Those tournament start and end dates are set to occur during the time of the Roman Empire.  ";
		$err .= "<br /><br />I doubt that's what you want.  <br /><br />Please use full years (2019 instead of 19).";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year < 2000 || $enddt->year < 2000) {
		my $err = "The year you chose for your start or end date is several years in the past. ";
		$err .= "<br /> <br />I doubt that's what you want.  Try again?";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year > 2100 || $enddt->year > 2100) {
		my $err = "The year you chose for your start or end date is in the far distant future.";
		$err .= "<br />I like to plan ahead and all, but I doubt that's what you want.  Try again?";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->epoch > $enddt->epoch) {
		my $err = "Your tournament starts after it ends.  The laws of time and space are not pleased ";
		$err .= "at your arrogance.  Please preserve the universe and try again.";
		$m->redirect("dates.mhtml?err=$err");
	}

	my $delta;

	if ($startdt != $tourn->start) {
		$tourn->start($startdt);

		$delta .= " " if $delta;
		$delta .= "Tourn start date changed to $startdt";
	}

	if ($enddt != $tourn->end) {
		$tourn->end($enddt);
		$delta .= " " if $delta;
		$delta .= "Tourn end date changed to $enddt";
	}

	if ($reg_enddt != $tourn->reg_end) {
		$tourn->reg_end($reg_enddt);
		$delta .= " " if $delta;
		$delta .= "Registration end date changed to $reg_enddt";
	}

	if ($reg_startdt != $tourn->reg_start) {
		$tourn->reg_start($reg_startdt);
		$delta .= " " if $delta;
		$delta .= "Registration start date changed to $reg_startdt";
	}

	$tourn->update();

	my @deadlines = (
		"drop",
		"judge",
		"freeze",
		"fine",
		"supp",
		"bill",
		"script",
		"release",
		"refund",
		"fifty_percent",
		"hundred_percent"
	);

	foreach my $key (@deadlines) {

		my $date = $ARGS{$key."_deadline"};
		my $time = $ARGS{$key."_deadlinetime"};

		my $dt = $m->comp("/funclib/showdt.mas",
			date   => $date,
			time   => $time,
			tz     => $tz,
			object => 1
		);

		$dt = $reg_enddt->clone unless $dt;
		$dt = $enddt->clone if $dt > $enddt;

		if ($dt ne $tourn_settings->{$key."_deadline"}) {
			$tourn->setting($key."_deadline", "date", $dt);
			$delta .= " " if $delta;
			$delta .= ucfirst($key)." deadline date changed to $dt";
		}
	}

	if ($delta) {
		Tab::ChangeLog->create({
			tag         => "tabbing",
			person      => $person,
			tourn       => $tourn,
			description => $delta
		});
	}

	my $msg = "Date changes have been saved";
	$m->redirect("dates.mhtml?msg=$msg");

	sub seven_span {
		my $diff = shift;
		my $days = $diff->days;
		$days += $diff->weeks * 7;

		my $delete_payment;
		if (
			abs($diff->years) > 0
			|| abs($diff->months) > 0
			|| $days > 6
		) {
			$delete_payment++;
		}

		return $delete_payment;
	};

</%init>
