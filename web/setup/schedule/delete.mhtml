<%args>
	$tourn
	$person
	$timeslot_id => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($timeslot_id) {
		$m->print('{ "error": true, "message": "No timeslot ID sent"}');
		$m->abort();
	}

	my $timeslot = Tab::Timeslot->retrieve($timeslot_id);

	unless ($timeslot) {
		$m->print('{ "error": true, "message": "No timeslot found for ID '.$timeslot_id.'"}');
		$m->abort();
	}

	my $msg = "Timeslot ".$timeslot->name." deleted together with its ".$timeslot->rounds()." rounds.";

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		tourn       => $tourn->id,
		person      => $person->id,
		description => $msg
	);

	# MySQL has cacade deletion now, and it works way faster than Class::DBI trying to do it.

	my $dbh = Tab::DBI->db_Main();
	my $rm_sth = $dbh->prepare("
		delete
			score, ballot, ps, panel, rs, round, timeslot
		from (score, ballot, panel, round, timeslot)

			left join panel_setting ps on ps.panel = panel.id
			left join round_setting rs on rs.round = round.id

		where score.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = timeslot.id
			and timeslot.id = ?
	");

	$rm_sth->execute($timeslot->id);

	eval {
		$timeslot->delete();
	};

	my %response = (
		error   => "false",
		message => $msg,
		destroy => $timeslot_id
	);

	$m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
