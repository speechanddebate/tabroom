<%args>
	$tourn
	$tourn_settings
	$round       => undef
	$round_id    => undef
	$timeslot_id => undef
	$panel_id    => undef
	$judge_id    => undef
	$round_type  => undef
	$sort_by     => undef
	$personless  => undef
</%args>
<%init>

	my $tourn_name = $tourn->name;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	$m->comp("/funclib/online_usage.mas",
		tourn    => $tourn,
		env      => \%ENV,
		district => $tourn_settings->{"nsda_district"}
	);

	# This is the result of Palmer discovering that it takes like 48 minutes to
	# print a round's events at Nationals and deciding he has to do better even
	# though it's the last thing he wants to do right now.

	unless ($tourn_settings->{"printed_ballots"}) {
		$tourn->setting("printed_ballots", 1);
	}

	$round_id = $round unless $round_id;

	my $limit;
	my $name = "Ballots";

	my $has_bq;

	if ($round_id && $round_id == int($round_id)) {
		$round_id = int($round_id);
		$limit .= " and round.id = ".$round_id;
		$name .= "-Round-$round_id"
	}

	if ($timeslot_id && $timeslot_id == int($timeslot_id)) {
		$timeslot_id = int($timeslot_id);
		$limit .= " and timeslot.id = ".$timeslot_id;
		$name .= "-Timeslot-$timeslot_id"
	}

	if ($panel_id && $panel_id == int($panel_id)) {
		$panel_id = int($panel_id);
		$limit .= " and panel.id = ".$panel_id;
		$name .= "-Section-$panel_id"
	}

	if ($judge_id && $judge_id == int($judge_id)) {
		$judge_id = int($judge_id);
		$limit .= " and judge.id = ".$judge_id;
		$name .= "-Judge-$judge_id"
	}

	unless ($limit) {
		$m->comp("/funclib/abort.mas", warning => "No valid parameters sent to print ballots");
	}

    if (not defined $tourn_settings->{"bias_statement"}) {

        $tourn_settings->{"bias_statement"} = eval {
            my $bias_statement = Tab::TabroomSetting->search(
                tag   => "bias_statement"
            )->first;

            my ($yes, $no) = split(/Please remember/, $bias_statement->value_text);
			return $yes;
        }
    }

	if ($personless) {
		$limit .= " and judge.person = 0 ";
	}

	my %category_settings;
	foreach my $category ($tourn->categories) {
		%{$category_settings{$category->id}} = $category->all_settings();

		$category_settings{$category->id}{"ncfl"} = $tourn_settings->{ncfl};
		$category_settings{$category->id}{"nsda_nats"} = $tourn_settings->{nsda_nats};
	}

	my %tb_types;

	my $dbh = Tab::DBI->db_Main();

	my $setting_sth = $dbh->prepare("
		select
			combined_ballots.value,
			separate_codes.value,
			dumb_signature_line.value_text,
			team_points.value,
			speech_times.value_text,
			point_scale.value_text,
			big_questions.value,
			topic.topic_text,
			resolution.value_text,
			num_judges.value,
			motion.value_text,
			flip_round.value,
			flight_offset.value,
			ballot_rules.value_text,
			chair_ballot_rules.value_text,
			aff_string.value,
			neg_string.value,
			no_side_constraints.value,
			no_elim_side_constraints.value,
			no_lpw.value,
			wsdc_no_rfd.value,
			max_points.value,
			min_points.value,
			max_entry.value

		from (round, event)

			left join event_setting dumb_signature_line on dumb_signature_line.event = event.id
				and dumb_signature_line.tag = 'dumb_signature_line'
			left join event_setting separate_codes on separate_codes.event = event.id
				and separate_codes.tag = 'separate_codes'
			left join event_setting combined_ballots on combined_ballots.event = event.id
				and combined_ballots.tag = 'combined_ballots'
			left join event_setting team_points on team_points.event = event.id
				and team_points.tag = 'team_points'
			left join event_setting speech_times on speech_times.event = event.id
				and speech_times.tag = 'speech_times'
			left join event_setting point_scale on point_scale.event = event.id
				and point_scale.tag = 'point_scale'
			left join event_setting big_questions on big_questions.event = event.id
				and big_questions.tag = 'big_questions'
			left join event_setting topiclink on topiclink.event = event.id
				and topiclink.tag = 'topic'
			left join topic on topic.id = topiclink.value
			left join event_setting resolution on resolution.event = event.id
				and resolution.tag = 'resolution'
			left join event_setting ballot_rules on ballot_rules.event = event.id
				and ballot_rules.tag = 'ballot_rules'
			left join event_setting chair_ballot_rules on chair_ballot_rules.event = event.id
				and chair_ballot_rules.tag = 'chair_ballot_rules'
			left join event_setting flight_offset on flight_offset.event = event.id
				and flight_offset.tag = 'flight_offset'

			left join event_setting aff_string on aff_string.event = event.id
				and aff_string.tag = 'aff_string'
			left join event_setting neg_string on neg_string.event = event.id
				and neg_string.tag = 'neg_string'
			left join event_setting no_side_constraints on no_side_constraints.event = event.id
				and no_side_constraints.tag = 'no_side_constraints'
			left join event_setting no_elim_side_constraints on no_elim_side_constraints.event = event.id
				and no_elim_side_constraints.tag = 'no_elim_side_constraints'
			left join event_setting no_lpw on no_lpw.event = event.id
				and no_lpw.tag = 'no_lpw'
			left join event_setting max_points on max_points.event = event.id
				and max_points.tag = 'max_points'
			left join event_setting min_points on min_points.event = event.id
				and min_points.tag = 'min_points'
			left join event_setting max_entry on max_entry.event = event.id
				and max_entry.tag = 'max_entry'

			left join round_setting num_judges on num_judges.round = round.id
				and num_judges.tag = 'num_judges'
			left join round_setting motion on motion.round = round.id
				and motion.tag = 'motion'
			left join round_setting flip_round on flip_round.round = round.id
				and flip_round.tag = 'flip_round'
			left join event_setting wsdc_no_rfd on wsdc_no_rfd.event = event.id
				and wsdc_no_rfd.tag = 'wsdc_no_rfd'

		where round.id = ?
			and round.event = event.id
	");

	my $sth = $dbh->prepare("
		select
			ballot.id,
			ballot.side, ballot.speakerorder, ballot.chair,
			panel.id, panel.letter, panel.flight,
			room.name,
			judge.id, judge.code, judge.first, judge.middle, judge.last,
			judge_school.name, judge_school.code, judge_congress.value,
			judge_region.name, judge_region.code,
			phone.value, judge_person.phone, judge_person.email,
			entry.id, entry.code, entry.name,
			student.id, student.first, student.last,
			entry_school.code, entry_congress.value, entry_school.name, entry_region.code, entry_region.name,
			title.value,
			event.id, event.abbr, event.name, event.type, event.category,
			round.id, round.name, round.label, round.flighted, round.type, round.start_time,
			timeslot.start, round.protocol,
			positions.value_text

		from (ballot, entry, panel, round, event, timeslot)
			left join judge on ballot.judge = judge.id
			left join school judge_school on judge.school = judge_school.id
			left join school_setting judge_congress
				on judge_congress.school = judge_school.id
				and judge_congress.tag ='congress_code'
			left join region judge_region on judge_school.region = judge_region.id
			left join school entry_school on entry.school = entry_school.id
			left join school_setting entry_congress
				on entry_congress.school = entry_school.id
				and entry_congress.tag ='congress_code'
			left join region entry_region on entry_school.region = entry_region.id

			left join entry_student es on es.entry = entry.id
			left join student on es.student = student.id
			left join entry_setting title on title.entry = entry.id and title.tag = 'title'
			left join entry_setting positions on positions.entry = entry.id and positions.tag = 'positions'

			left join room on panel.room = room.id
			left join judge_setting phone on phone.judge = judge.id
				and phone.tag = 'phone'
			left join person judge_person on judge_person.id = judge.person

		where ballot.entry = entry.id
			and entry.active = 1
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = timeslot.id
			and round.event = event.id
			and panel.bye != 1
			$limit
	");

	my %sections;
	my %rounds;
	my %judge_sections;
	my %starts;

	my $has_ws;

	$sth->execute();

	while (
		my (
			$ballot_id,
			$ballot_side, $ballot_speakerorder, $ballot_chair,
			$panel_id, $panel_letter, $panel_flight,
			$room_name,
			$judge_id, $judge_code, $judge_first, $judge_middle, $judge_last,
			$judge_school_name, $judge_school_code, $judge_congress_code,
			$judge_region_name, $judge_region_code,
			$phone_value, $judge_person_phone, $judge_person_email,
			$entry_id, $entry_code, $entry_name,
			$student_id, $student_first, $student_last,
			$entry_school_code, $entry_congress_code, $entry_school_name,
			$entry_region_code, $entry_region_name,
			$title,
			$event_id, $event_abbr, $event_name, $event_type, $event_category,
			$round_id, $round_name, $round_label, $round_flighted, $round_type, $round_start_time,
			$timeslot_start, $protocol_id,
			$positions
		) = $sth->fetchrow_array()
	) {

		next if $personless && $judge_person_email;

		unless ($rounds{$round_id}) {

			$setting_sth->execute($round_id);

			$rounds{$round_id}{"type"}       = $round_type;
			$rounds{$round_id}{"flighted"}   = $round_flighted;
			$rounds{$round_id}{"category"}   = $event_category;
			$rounds{$round_id}{"event_name"} = $event_name;
			$rounds{$round_id}{"event_abbr"} = $event_abbr;
			$rounds{$round_id}{"event_id"}   = $event_id;
			$rounds{$round_id}{"event_type"} = $event_type;

			$has_ws++ if $event_type eq "wsdc";

			$rounds{$round_id}{"protocol"} = $protocol_id;

			if ($round_label) {
				$rounds{$round_id}{"round_name"} = $round_label;
			} else {
				$rounds{$round_id}{"round_name"} = $round_name;
			}

			while (
				my (
					$combined_ballots,
					$separate_codes,
					$dumb_signature_line,
					$team_points,
					$speech_times,
					$point_scale,
					$big_questions,
					$topic_text,
					$resolution,
					$num_judges,
					$motion,
					$flip_round,
					$flight_offset,
					$ballot_rules,
					$chair_ballot_rules,
					$aff_string,
					$neg_string,
					$no_side_constraints,
					$no_elim_side_constraints,
					$no_lpw,
					$wsdc_no_rfd,
					$max_points,
					$min_points,
					$max_entry
				) = $setting_sth->fetchrow_array()
			) {

				$rounds{$round_id}{"ballot_rules"}        = $m->comp("/funclib/print_format.mas", message => $ballot_rules);
				$rounds{$round_id}{"chair_ballot_rules"}  = $m->comp("/funclib/print_format.mas", message => $chair_ballot_rules);
				$rounds{$round_id}{"dumb_signature_line"} = $m->comp("/funclib/print_format.mas", message => $dumb_signature_line);
				$rounds{$round_id}{"bias_statement"}      = $m->comp("/funclib/print_format.mas", message => $tourn_settings->{"bias_statement"});

				$rounds{$round_id}{"combined_ballots"} = $combined_ballots;
				$rounds{$round_id}{"separate_codes"}   = $separate_codes;
				$rounds{$round_id}{"team_points"}      = $team_points;
				$rounds{$round_id}{"speech_times"}     = $speech_times;
				$rounds{$round_id}{"point_scale"}      = $point_scale;
				$rounds{$round_id}{"big_questions"}    = $big_questions;
				$rounds{$round_id}{"topic_text"}       = $topic_text;
				$rounds{$round_id}{"resolution"}       = $resolution;
				$rounds{$round_id}{"num_judges"}       = $num_judges;
				$rounds{$round_id}{"motion"}           = $motion;
				$rounds{$round_id}{"flip_round"}       = $flip_round;
				$rounds{$round_id}{"flight_offset"}    = $flight_offset;

				$has_bq++ if $big_questions;

				$rounds{$round_id}{"aff_string"}          = $aff_string;
				$rounds{$round_id}{"aff_string"}          = "Aff" unless $aff_string;
				$rounds{$round_id}{"neg_string"}          = $neg_string;
				$rounds{$round_id}{"neg_string"}          = "Neg" unless $neg_string;

				$rounds{$round_id}{"no_side_constraints"}      = $no_side_constraints;
				$rounds{$round_id}{"no_elim_side_constraints"} = $no_elim_side_constraints;
				$rounds{$round_id}{"no_lpw"}                   = $no_lpw;
				$rounds{$round_id}{"no_rfd"}                   = $wsdc_no_rfd;
				$rounds{$round_id}{"max_points"}               = $max_points;
				$rounds{$round_id}{"min_points"}               = $min_points;
				$rounds{$round_id}{"max_entry"}                = $max_entry || 1;
			}

			unless (
				$tourn_settings->{ncfl}
				|| $tourn_settings->{nsda_nats}
				|| $tourn_settings->{"double_entry"} eq "none"
			) {
				%{$rounds{$round_id}{"doubled"}} = $m->comp("/funclib/round_doubled.mas", round_id => $round_id);
			}

			$setting_sth->finish();
		}

		unless ($sections{$panel_id}) {

			$sections{$panel_id}{"id"}     = $panel_id;
			$sections{$panel_id}{"letter"} = $panel_letter;
			$sections{$panel_id}{"room"}   = $room_name;
			$sections{$panel_id}{"room"}   = "ASK TAB" unless $room_name;
			$sections{$panel_id}{"flight"} = $panel_flight;

			my $start = $round_start_time;
			$start = $timeslot_start unless $start;
			$panel_flight = 1 unless $panel_flight;

			unless ($starts{$start}{$panel_flight}) {

				$starts{$start}{$panel_flight} = DateTime::Format::MySQL->parse_datetime($start);

				$starts{$start}{$panel_flight}->set_time_zone("UTC");
				$starts{$start}{$panel_flight}->set_time_zone($tz);

				my $flight_offset = $rounds{$round_id}{"flight_offset"};

				if ($panel_flight > 1 && $flight_offset) {
					$flight_offset = $flight_offset * ($panel_flight - 1);
					$starts{$start}{$panel_flight}->add(minutes => $flight_offset);
				}
			}

			$sections{$panel_id}{"start"} = $starts{$start}{$panel_flight};
			$sections{$panel_id}{"round_id"} = $round_id;
		}

		unless ($sections{$panel_id}{"judge"}{$judge_id}) {

			$sections{$panel_id}{"judge"}{$judge_id}{"last_name"} = $judge_last;
			$sections{$panel_id}{"judge"}{$judge_id}{"name"} = $judge_last.", ".$judge_first." ".$judge_middle;
			$sections{$panel_id}{"judge"}{$judge_id}{"code"} = $judge_code;

			if ($judge_school_name) {
				$sections{$panel_id}{"judge"}{$judge_id}{"school_name"} = $judge_school_name;
				$sections{$panel_id}{"judge"}{$judge_id}{"school_code"} = $judge_school_code;
				$sections{$panel_id}{"judge"}{$judge_id}{"school_code"} = $judge_congress_code
					if $rounds{$round_id}{"separate_codes"};
			} else {
				$sections{$panel_id}{"judge"}{$judge_id}{"school_name"} = "Hired";
				$sections{$panel_id}{"judge"}{$judge_id}{"school_code"} = "XX";
			}

			$sections{$panel_id}{"judge"}{$judge_id}{"region_name"} = $judge_region_name;
			$sections{$panel_id}{"judge"}{$judge_id}{"region_code"} = $judge_region_code;
			$sections{$panel_id}{"judge"}{$judge_id}{"phone"} = $phone_value;
			$sections{$panel_id}{"judge"}{$judge_id}{"phone"} = $judge_person_phone if $judge_person_phone;
			$sections{$panel_id}{"judge"}{$judge_id}{"chair"} = $ballot_chair;

			$judge_sections{$judge_id}{"flight"} = $panel_flight;
			$judge_sections{$judge_id}{"name"}   = $judge_last;
			$judge_sections{$judge_id}{"letter"} = $panel_letter;
			$judge_sections{$judge_id}{"code"}   = $judge_code;
			$judge_sections{$judge_id}{"room"}   = $room_name;
			$judge_sections{$judge_id}{"event"}  = $event_abbr;
			$judge_sections{$judge_id}{"panel"}{$panel_id}++;
		}

		unless ($sections{$panel_id}{"entry"}{$entry_id}) {

			if ($positions) {
				$sections{$panel_id}{"entry"}{$entry_id}{"positions"} = eval {
					return JSON::decode_json($positions);
				};
			}

			$sections{$panel_id}{"entry"}{$entry_id}{"code"}  = $entry_code;
			$sections{$panel_id}{"entry"}{$entry_id}{"order"} = $ballot_speakerorder;
			$sections{$panel_id}{"entry"}{$entry_id}{"side"}  = $ballot_side;
			$sections{$panel_id}{"byside"}{$ballot_side}      = $entry_id;

			$sections{$panel_id}{"entry"}{$entry_id}{"name"}        = $entry_name;
			$sections{$panel_id}{"entry"}{$entry_id}{"title"}       = $title;
			$sections{$panel_id}{"entry"}{$entry_id}{"school_code"} = $entry_school_code;
			$sections{$panel_id}{"entry"}{$entry_id}{"region_code"} = $entry_region_code;
			$sections{$panel_id}{"entry"}{$entry_id}{"school_code"} = $entry_school_code;
			$sections{$panel_id}{"entry"}{$entry_id}{"region_name"} = $entry_region_name;

			if ($rounds{$round_id}{"separate_codes"}) {
				$sections{$panel_id}{"entry"}{$entry_id}{"school_code"}   = $entry_congress_code
			}

			if ($sections{$panel_id}{"entry"}{$entry_id}{"first_name"}) {
				$sections{$panel_id}{"entry"}{$entry_id}{"first_name"} .= " & ";
			}

			$sections{$panel_id}{"entry"}{$entry_id}{"first_name"} .= $student_first;
		}

		unless ($sections{$panel_id}{"entry"}{$entry_id}{"students"}{$student_id}) {
			$sections{$panel_id}{"entry"}{$entry_id}{"students"}{$student_id}{"first"} = $student_first;
			$sections{$panel_id}{"entry"}{$entry_id}{"students"}{$student_id}{"last"} = $student_last;
		}
	}

	foreach my $section_id (keys %sections) {

		my $has = scalar (keys %{$sections{$section_id}{"judge"}});
		my $need = $rounds{$sections{$section_id}{"round_id"}}{"num_judges"};

		if ($has < $need) {

			foreach my $blank ($has .. $need) {
				my $judge_id = $section_id."_blank".$blank;
				$judge_sections{$judge_id}{"room"}       = $sections{$section_id}{"room"};
				$judge_sections{$judge_id}{"flight"}     = $sections{$section_id}{"flight"};
				$judge_sections{$judge_id}{"letter"}     = $sections{$section_id}{"letter"};
				$judge_sections{$judge_id}{"event_abbr"} = $sections{$section_id}{"event_abbr"};
				$judge_sections{$judge_id}{"panel"}{$section_id}++;
			}
		}
	}

	#Prepare the file
    my $filepath = $Tab::file_root."tmp/".$name;

    $m->comp(
        "/funclib/printout.mas",
        tourn        => $tourn,
        filename     => $name,
		no_footer    => $tourn_settings->{nsda_nats},
		page_numbers => 1,
		tall         => 1,
		bitwide      => 1,
        head         => 1
    );

    open (my $texout, ">>$filepath.tex");

    my $logo = $tourn_settings->{"logo"};

    if ($logo) {
        unless (-e "$Tab::file_root/tmp/$logo") {
            system "cd $Tab::file_root/tmp; $Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo;
        }
	}

	my %bq_stuff;

	if ($has_bq) {

		$bq_stuff{bqd_logo}  = $Tab::file_root."lib/images/big-questions-logo.jpg";
		$bq_stuff{nsda_logo} = $Tab::file_root."lib/images/nsda-logo-printable.png";
		$bq_stuff{jtf_logo}  = $Tab::file_root."lib/images/templeton-logo.png";

		$bq_stuff{resolution} = Tab::TabroomSetting->search(
			tag   => "bqd_resolution"
		)->first;

		$bq_stuff{resolution} = $m->comp("/funclib/print_format.mas",
			message =>  $bq_stuff{resolution}->value_text
		);

		$bq_stuff{rules} = Tab::TabroomSetting->search(
			tag   => "bqd_rules"
		)->first;

		$bq_stuff{rules} = $m->comp("/funclib/print_format.mas",
			message =>  $bq_stuff{rules}->value_text
		);

		$bq_stuff{speech_times} = Tab::TabroomSetting->search(
			tag   => "bqd_speech_times"
		)->first;

		$bq_stuff{speech_times} = $bq_stuff{speech_times}->value_text;

		$bq_stuff{jesus_loves_topicality}
			= " I verify that this round followed the event rules and that the winning debater ran a topical position:";
	}

	my %ws_stuff;

	if ($has_ws) {

		foreach my $round_id (keys (%rounds)) {

			next unless $rounds{$round_id}{event_type} eq "wsdc";

			my $event_id = $rounds{$round_id}{'event_id'};
			next if $ws_stuff{$event_id};

			my %max_points;
			my %min_points;

			my @scores = ("style", "content", "strategy", "poi");
			my @used_scores;

			my %event_settings = Tab::Event->retrieve($event_id)->all_settings();

			foreach my $key (@scores) {

				$min_points{$key} = $event_settings{"min_".$key."_points"};
				$max_points{$key} = $event_settings{"max_".$key."_points"};

				next unless $max_points{$key};
				$min_points{$key} = 0 unless $min_points{$key};

				push @used_scores, $key;

				$min_points{"total"} += $min_points{$key} unless $key eq "poi";
				$max_points{"total"} += $max_points{$key} unless $key eq "poi";
			}

			$ws_stuff{$event_id}{ws_scores} = \@used_scores;
			$ws_stuff{$event_id}{max_points} = \%max_points;
			$ws_stuff{$event_id}{min_points} = \%min_points;
		}

		foreach my $round_id (keys (%rounds)) {

			next unless $rounds{$round_id}{event_type} eq "wsdc";
			my $event_id = $rounds{$round_id}{'event_id'};

			$rounds{$round_id}{ws_scores} = $ws_stuff{$event_id}{ws_scores} ;
			$rounds{$round_id}{max_points} = $ws_stuff{$event_id}{max_points} ;
			$rounds{$round_id}{min_points} = $ws_stuff{$event_id}{min_points} ;

		}
	}

	# These methods will print by judge key first
	my @jkeys;

	if ($sort_by eq "name") {
		@jkeys = sort {
			$judge_sections{$a}{"name"} cmp $judge_sections{$b}{"name"}
		} keys %judge_sections;
	} elsif ($sort_by eq "room") {
		@jkeys = sort {
			$judge_sections{$a}{"room"} cmp $judge_sections{$b}{"room"}
			|| $judge_sections{$a}{"name"} cmp $judge_sections{$b}{"name"}
		} keys %judge_sections;
	} elsif ($sort_by eq "code") {
		@jkeys = sort {
			$judge_sections{$a}{"code"} cmp $judge_sections{$b}{"code"}
		} keys %judge_sections;
	} elsif ($sort_by eq "panname") {
		@jkeys = sort {
			$judge_sections{$a}{"event"} cmp $judge_sections{$b}{"event"}
			|| $judge_sections{$a}{"name"} cmp $judge_sections{$b}{"name"}
		} keys %judge_sections;
	} elsif ($sort_by eq "section") {
		@jkeys = sort {
			$judge_sections{$a}{"event"} cmp $judge_sections{$b}{"event"}
			|| length($judge_sections{$a}{"letter"}) <=> length($judge_sections{$b}{"letter"})
			|| $judge_sections{$a}{"letter"} cmp $judge_sections{$b}{"letter"}
			|| $judge_sections{$a}{"name"} cmp $judge_sections{$b}{"name"}
		} keys %judge_sections;
	} else {
		@jkeys = sort {
			$judge_sections{$a}{"event"} cmp $judge_sections{$b}{"event"}
			|| $judge_sections{$a}{"name"} cmp $judge_sections{$b}{"name"}
		} keys %judge_sections;
	}


	my $t_start = $tourn->start->set_time_zone($tz);
	my $t_end = $tourn->end->set_time_zone($tz);

	my $date_string;
	if ($t_start->month == $t_end->month) {
		$date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->day.", ".$t_end->year;
	} else {
		$date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->month_abbr." ".$t_end->day.", ".$t_end->year;
	}

	foreach my $judge_id (@jkeys) {

		foreach my $section_id (
			sort {
				$sections{$a}{"flight"} <=> $sections{$b}{"flight"}
			} keys %{$judge_sections{$judge_id}{"panel"}}
		) {

			my $round_id        = $sections{$section_id}{"round_id"};
			my $category_id     = $rounds{$round_id}{"category"};
			my $event_type      = $rounds{$round_id}{"event_type"};
			my $protocol_id = $rounds{$round_id}{"protocol"};

			if ($rounds{$round_id}{"big_questions"}) {
				$rounds{$round_id}{"speech_times"}  = $bq_stuff{"speech_times"};
			}
			
			#Header
			print $texout "\\parbox[l][.75in][t]{2.85in}{\n";

				print $texout "\\large \n";
				print $texout "\\textsb{ Room: ".&Tab::texify($sections{$section_id}{"room"})."} \n\n";

				print $texout "\\normalsize \n";
				print $texout "\\textsb{ ";
				if ($rounds{$round_id}{"flighted"} > 1) {
					print $texout "Flight ".$sections{$section_id}{"flight"}." -- ";
				}
				print $texout "Start: ".Tab::nicetime($sections{$section_id}{"start"})." } \n\n ";

				print $texout "\\textsb{ ".&Tab::texify($rounds{$round_id}{"event_abbr"})." ".$sections{$section_id}{"letter"}."}\n\n";

				if (-e "$Tab::file_root/tmp/".$logo) {
					print $texout "\\textsb{ Round: ".$rounds{$round_id}{"round_name"}." } \n\n ";
				}

			print $texout "}\n";

			print $texout "\\parbox[c][.75in][t]{1.75in}{\n";

			if ($rounds{$round_id}{"big_questions"}) {

				print $texout "\\centerline{\\includegraphics[height=.7in,width=1.45in,keepaspectratio]{".$bq_stuff{"bqd_logo"}."}}\n";

			} else {

				if ($logo && -e "$Tab::file_root/tmp/".$logo) {
					print $texout "\\centerline{\\includegraphics[height=.7in,width=1.45in,keepaspectratio]{".$logo."}}\n";
				} else {

					print $texout "\\strut\n";
					print $texout "\\hfill\n";
					print $texout "\\textsb{\\fontsize{32pt}{32pt}\\selectfont ".$rounds{$round_id}{"round_name"}." } \n\n ";
					print $texout "\\hfill\n";
					print $texout "\\strut\n";
				}
			}

			print $texout "}\n";

			print $texout "\\parbox[r][.75in][t]{2.85in}{\n";

				print $texout "\\strut\n";
				print $texout "\\hfill\n";

				print $texout "{\\Huge \\bf *}" if $sections{$section_id}{"judge"}{$judge_id}{"chair"};

				if ($sections{$section_id}{"judge"}{$judge_id}{"name"}) {

					unless (
						$category_settings{$category_id}{"no_codes"}
						|| (not defined $sections{$section_id}{"judge"}{$judge_id}{"code"})
					) {
						print $texout "\\textsb{\\fontsize{22pt}{22pt}\\selectfont\n";
						print $texout Tab::texify($sections{$section_id}{"judge"}{$judge_id}{"code"});
						print $texout " } \n";
						print $texout "\\vspace{.05in}";
						print $texout "\\newline\n";
						print $texout "\\strut\n";
						print $texout "\\hfill\n";
						print $texout "\\textsb{\\fontsize{18pt}{18pt}\\selectfont\n";
						print $texout Tab::texify(substr($sections{$section_id}{"judge"}{$judge_id}{"name"}, 0, 24));
						print $texout " } \n";

					} else {
						print $texout "\\textsb{\\fontsize{20pt}{20pt}\\selectfont\n";
							print $texout Tab::texify(substr($sections{$section_id}{"judge"}{$judge_id}{"name"}, 0, 24));
						print $texout " } \n";
					}

					print $texout "\\vspace{.05in}";
					print $texout "\\newline\n";
					print $texout "\\strut\n";
					print $texout "\\hfill\n";
					print $texout "{\\normalsize \n";

					if ($tourn_settings->{'ncfl'}) {

						print $texout Tab::texify($sections{$section_id}{"judge"}{$judge_id}{"region_code"})." ";
						print $texout Tab::texify($sections{$section_id}{"judge"}{$judge_id}{"region_name"});

					} else {

						if ($sections{$section_id}{"judge"}{$judge_id}{"region_code"}) {
							print $texout Tab::texify($sections{$section_id}{"judge"}{$judge_id}{"region_code"})." ";
						} elsif ($sections{$section_id}{"judge"}{$judge_id}{"school_code"}) {
							print $texout Tab::texify($sections{$section_id}{"judge"}{$judge_id}{"school_code"})." ";
						}
						print $texout Tab::texify(substr($sections{$section_id}{"judge"}{$judge_id}{"school_name"}, 0, 32));
					}

					print $texout " } \n";

				} else {
					print $texout "{\\Large \\bf Judge: \\makebox[2in]{\\hrulefill}}";
				}

			print $texout "} \n";


			print $texout "\\smallskip\n";
			print $texout "\\newline\n";

			print $texout "\\strut \\hfill\n";
			print $texout "{\\Large \\bf \\color{black!64} ".&Tab::texify(uc($tourn_name))." } \n";
			print $texout "\\hfill \\strut\n";

			unless ($protocol_id) {
				print $texout "\\smallskip\n";
				print $texout "\\newline\n";
				print $texout "\\strut \\hfill\n";
				print $texout "{\\LARGE \\bf \\color{red} You have no tiebreakers set so this ballot is blank.";
				print $texout " You must set tiebreakers for the ballot to have score blanks }";
				print $texout "\\hfill \\strut\n";
			}

			print $texout "\\smallskip\n";
			print $texout "\\newline\n";
			print $texout "\\normalsize\n";

			if ($rounds{$round_id}{'big_questions'}) {
				print $texout "\\parbox[t][7.35in][t]{7.25in}{\n";
			} else {
				print $texout "\\parbox[t][7.5in][t]{7.25in}{\n";
			}

			if ($rounds{$round_id}{"big_questions"}) {

				print $texout "\\begin{center} \n";
				print $texout "\\strut\n";
				print $texout "\\hfill\n";
				print $texout "\\textsb{ Resolution: }";
				print $texout Tab::texify($bq_stuff{"resolution"});
				print $texout "\\hfill\n";
				print $texout "\\strut\n";
				print $texout "\\end{center}\n";

			} elsif ($rounds{$round_id}{"topic_text"}) {

				print $texout "\\raggedright \n";
				print $texout "\\textsb{Topic: }";
				$rounds{$round_id}{"topic_text"} =~ s/\n/<br>/g;
				print $texout Tab::texify($rounds{$round_id}{"topic_text"});
				print $texout "\\vspace{4mm}\n";
				print $texout "\\newline\n";

			} elsif ($rounds{$round_id}{"resolution"}) {

				print $texout "\\begin{center} \n";
				print $texout "\\textsb{ Resolution: }";
				print $texout Tab::texify($rounds{$round_id}{"resolution"});
				print $texout "\\end{center}\n";

			} elsif ($rounds{$round_id}{"motion"}) {

				print $texout "\\begin{center} \n";
				print $texout "\\textsb{ Motion: }";
				print $texout Tab::texify($rounds{$round_id}{"motion"});
				print $texout "\\end{center}\n";
				print $texout "\\newline\n";
			}

			if ($sections{$section_id}{"judge"}{$judge_id}{"chair"}) {

				if ($rounds{$round_id}{"chair_ballot_rules"}) {

					print $texout "\\strut\n \\hfill\n";
					print $texout "\\textsb{\\Large \\color{black!64} CHAIR INSTRUCTIONS }\n";
					print $texout "\\hfill \\strut\n";
					print $texout "\\smallskip\n";
					print $texout "\\newline\n";

					print $texout "\\strut\n \\hfill\n";
					print $texout "\\begin{minipage}{7in}\n";
			        print $texout "\\footnotesize\n ";
					print $texout "\\noindent\n ";
					print $texout $rounds{$round_id}{"chair_ballot_rules"};
					print $texout "\\end{minipage}\n";
					print $texout "\\hfill \\strut\n";

					print $texout "\\medskip\n";
					print $texout "\\newline \n ";
				}
			}

			if ($rounds{$round_id}{"ballot_rules"}) {

				print $texout "\\strut\n \\hfill\n";
				print $texout "\\textsb{\\Large \\color{black!64} INSTRUCTIONS }\n";
				print $texout "\\hfill \\strut\n";
				print $texout "\\smallskip\n";
				print $texout "\\newline\n";

				print $texout "\\begin{minipage}{7in}\n";
				print $texout "\\footnotesize\n ";
				print $texout "\\noindent\n ";
				print $texout $rounds{$round_id}{"ballot_rules"};
				print $texout "\\end{minipage}\n";

				print $texout "\\medskip\n";
				print $texout "\\newline \n ";
			}

			if ($rounds{$round_id}{"big_questions"} && $bq_stuff{'rules'}) {

				print $texout "\\strut\n \\hfill\n";
				print $texout "\\textsb{\\Large \\color{black!64} BIG QUESTIONS RULES }\n";
				print $texout "\\hfill \\strut\n";
				print $texout "\\smallskip\n";
				print $texout "\\newline\n";

				print $texout "\\begin{minipage}{7in}\n";
				print $texout "\\footnotesize\n ";
				print $texout "\\noindent\n ";
				print $texout $bq_stuff{"rules"};
				print $texout "\\end{minipage}\n";

				print $texout "\\medskip\n";
				print $texout "\\newline \n ";

			}

			if ($rounds{$round_id}{"bias_statement"}) {
				print $texout "\\strut\n \\hfill\n";
				print $texout "\\smallskip\n";
				print $texout "\\newline\n";
				print $texout "\\begin{minipage}{7in}\n";
				print $texout "\\footnotesize\n ";
				print $texout "\\noindent\n ";
				print $texout $rounds{$round_id}{"bias_statement"};
				print $texout "\\end{minipage}\n";
				print $texout "\\medskip\n";
				print $texout "\\newline \n ";
			}

			my $other_names;

			foreach my $oj_id (keys %{$sections{$section_id}{"judge"}}) {
				next unless $oj_id > 0;
				next if $oj_id == $judge_id;
				$other_names .= ', ' if $other_names;

				unless ($category_settings{$category_id}{"no_codes"}) {
					$other_names .= $sections{$section_id}{"judge"}{$oj_id}{"code"}." ";
				}
				$other_names .= $sections{$section_id}{"judge"}{$oj_id}{"name"};

				if ($sections{$section_id}{"judge"}{$oj_id}{"chair"}) {

					if ($rounds{$round_id}{"event_type"} eq "congress") {
						$other_names .= "(Parliamentarian)";
					} else {
						$other_names .= "(Chair)";
					}
				}
			}

			if ($other_names) {
				print $texout "\\strut\n";
				print $texout "\\hfill\n";
				print $texout "\\large \\textsb{ DO NOT START UNTIL ALL JUDGES ARE PRESENT.}\n";
				print $texout "\\hfill\n";
				print $texout "\\strut\n";

				print $texout "\\smallskip \n";
				print $texout "\\newline \n";

				print $texout "\\strut\n";
				print $texout "\\hfill\n";
				print $texout "\\normalsize Other judge(s) in your room: ".Tab::texify($other_names)." \n";;
				print $texout "\\hfill\n";
				print $texout "\\strut\n";

				print $texout "\\medskip \n";
				print $texout "\\newline \n";
			}

			unless ($tb_types{$protocol_id}) {
				%{$tb_types{$protocol_id}} = $m->comp(
					"/funclib/tiebreak_types.mas",
						round_id => $round_id
				);
			}

			if ($event_type eq "speech" || $event_type eq "congress") {

				$m->comp("ballot/speech.mas",
					texout            => $texout,
					category_settings => $category_settings{$category_id},
					section           => $sections{$section_id},
					rounds            => $rounds{$round_id},
					tb_types          => $tb_types{$protocol_id}
				);

			} elsif ($event_type eq "wudc") {

				$m->comp("ballot/wudc.mas",
					texout            => $texout,
					category_settings => $category_settings{$category_id},
					section           => $sections{$section_id},
					rounds            => $rounds{$round_id},
					tb_types          => $tb_types{$protocol_id}
				);

			} elsif ($event_type eq "wsdc") {

				$m->comp("ballot/wsdc.mas",
					texout            => $texout,
					category_settings => $category_settings{$category_id},
					section           => $sections{$section_id},
					rounds            => $rounds{$round_id},
					tb_types          => $tb_types{$protocol_id}
				);


			} elsif ($rounds{$round_id}{"combined_ballots"}) {

				$m->comp("ballot/combined.mas",
					texout            => $texout,
        			filename          => $name,
					category_settings => $category_settings{$category_id},
					section           => $sections{$section_id},
					rounds            => $rounds{$round_id},
					tb_types          => $tb_types{$protocol_id}
				);

			} elsif ($event_type eq "debate") {

				$m->comp("ballot/debate.mas",
					texout            => $texout,
					category_settings => $category_settings{$category_id},
					section           => $sections{$section_id},
					rounds            => $rounds{$round_id},
					tb_types          => $tb_types{$protocol_id}
				);
			}

			print $texout " } \n"; # End of enclosing paragraph box.
			print $texout " \\newline\n";

			if ($rounds{$round_id}{"dumb_signature_line"}) {
				print $texout "\\emph{\\normalsize ";
				print $texout $rounds{$round_id}{"dumb_signature_line"};
				print $texout "} \\smallskip \\newline\n";
			}

			if (
				$category_settings{$category_id}{"ballot_signature"}
				|| $category_settings{$category_id}{"ballot_judge_phones"}
			) {

				if ($rounds{$round_id}{"big_questions"}) {
					print $texout "\\emph{\\normalsize \n ";
					print $texout $bq_stuff{jesus_loves_topicality};
					print $texout "\n } \\smallskip \\newline\n";
				}


				print $texout "\\strut\n";
				print $texout "\\hspace{.65in}\n";
				print $texout "\\newline \n";

			}

			print $texout "\\parbox[l][][t]{4in}{\n";
			if ($category_settings{$category_id}{"ballot_signature"}) {
				print $texout "\\textsb{\\normalsize Judge Signature: }";
				print $texout "\\makebox[3in]{\\hrulefill} \n";
			}
			print $texout "}\n";

			if ($category_settings{$category_id}{"ballot_judge_phones"}) {

				print $texout "\\hspace{2mm}\n";
				print $texout "\\parbox[l][][t]{3in}{\n";
				print $texout "\\textsb{\\normalsize Phone number:} \n";
				if ($sections{$section_id}{"judge"}{$judge_id}{"phone"}) {
					print $texout "\\makebox[.5in]{\\hrulefill}.";
					print $texout Tab::phoneme($sections{$section_id}{"judge"}{$judge_id}{"phone"});
					print $texout "\\makebox[.5in]{\\hrulefill}.";
				} else {
					print $texout "\\makebox[2.25in]{\\hrulefill}\n";
				}

				print $texout "}\n";
				print $texout "\\newline\n";
				print $texout "\\strut\n";
				print $texout "\\hfill\n";

				if ($sections{$section_id}{"judge"}{$judge_id}{"phone"}) {
					print $texout "\\emph{\\scriptsize Please make sure your number is correct, so Tab can contact you if needed.} \n\n";
				} else {
					print $texout "\\emph{\\scriptsize For the Tab staff, in case there is an issue with your ballot.} \n\n";
				}
			} else {
				print $texout "\\medskip\n";
				print $texout "\\newline\n";
			}

			if ($rounds{$round_id}{"big_questions"}) {

				print $texout "\\includegraphics[height=.5in,keepaspectratio]{".$bq_stuff{nsda_logo}."}\n";
				print $texout "\\hfill\n";

				unless ($tourn_settings->{"nsda_nats"} || $tourn_settings->{'nsda_district'}) {
					if (-e "$Tab::file_root/tmp/".$logo) {
						print $texout "\\includegraphics[height=.5in,keepaspectratio]{".$logo."}\n";
						print $texout "\\hfill\n";
					}
				}

				print $texout "\\includegraphics[height=.5in,keepaspectratio]{".$bq_stuff{jtf_logo}."}\n";
				print $texout "\\newline\n";
			}

			print $texout "\\strut \\hfill {\\scriptsize ".$section_id." } \\hfill \\strut\n";
			print $texout "\\newpage\n";

		}
	}

    $m->comp(
        "/funclib/printout.mas",
        tourn        => $tourn,
        filename     => $name,
		no_footer    => $tourn_settings->{nsda_nats},
		page_numbers => 1,
		tall         => 1,
		bitwide      => 1,
        tail         => 1
    );

</%init>
