<%args>
	$dbh
	$tourn
	$tourn_settings
	$panel_id => undef
</%args>
<%init>

	use POSIX;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now->set_time_zone($tz);

	my $panel = Tab::Panel->retrieve($panel_id);

	unless ($panel) {
		$m->comp("/funclib/abort.mas", message => "No valid section ID sent");
	}

	my $round = $panel->round;
	my $event = $round->event;

	my $filename = $round->realname;
	$filename =~ s/[\W_]//g;
	$filename = $event->abbr."-".$filename;

	$filename = "FinalBio-".$filename;
	my $filepath = $Tab::file_root."tmp/".$filename;

	$m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		head      => 1,
		linespace => 2,
		no_footer => 1,
		taller    => 1
	);

	my $sth = $dbh->prepare("
		select
			school.name, school.state,
			chapter.state,
			person.state,
			judge.first, judge.last,
			diamonds.value,
			final_bio.value_text,
			nomination.value_text

		from (judge, ballot)

			left join person on person.id = judge.person

			left join person_setting diamonds
				on diamonds.person = judge.person
				and diamonds.tag = 'diamonds'

			left join judge_setting final_bio
				on final_bio.judge = judge.id
				and final_bio.tag = 'final_bio'

			left join judge_setting nomination
				on nomination.judge = judge.id
				and nomination.tag = 'nomination'

			left join school
				on school.id = judge.school

			left join chapter
				on school.chapter = chapter.id

		where ballot.panel = ?
			and ballot.judge = judge.id

		group by judge.id
		order by judge.last
	");

	$sth->execute($panel->id);

	open (TEXOUT, ">>$filepath.tex");

	my $notfirst;

	while (
		my (
			$school_name, $school_state,
			$chapter_state,
			$person_state,
			$judge_first, $judge_last,
			$diamonds,
			$final_bio,
			$nomination
		) = $sth->fetchrow_array()
	) {

		my %nominations = eval {
			return %{JSON::decode_json($nomination) };
		};

		unless ($school_state) {
			$school_state = $chapter_state;
		}

		unless ($school_state) {
			$school_state = $person_state;
		}

		my $bio = $m->comp("/funclib/print_format.mas", message => $final_bio);

		unless ($notfirst && $notfirst % 4) {
			if ($notfirst) {
				print TEXOUT "\\end{minipage} \n";
				print TEXOUT "\\newpage \n";
			}
			print TEXOUT "\\begin{minipage}[t][9in][t]{\\textwidth}\n";
		}

		$notfirst++;

		print TEXOUT "\\newline\n";
		print TEXOUT "\\begin{minipage}[t][2.25in][t]{\\textwidth}";
		print TEXOUT "{\\color{black!32}  \\makebox[7in]{\\hrulefill}  }\n";

		print TEXOUT "\\raggedright\n";
		print TEXOUT "\\textsb{\\huge ".Tab::texify($judge_first." ".$judge_last)." } \\hfill \n";
		print TEXOUT "{\\Large ".Tab::texify($school_name."	--	".$school_state)." } \\medskip \\\\ \n";

		if ($nominations{"phonetic"}) {
			print TEXOUT "\\emph{\\Large ".Tab::texify($nominations{phonetic})." } \\hfill \n";
		} else {
			print TEXOUT "\\strut \\hfill \n";
		}
		if ($diamonds) {
			print TEXOUT "{\\Large \\textsb{ ".Tab::texify($diamonds)."} Diamonds } \\medskip \\newline \n";
		} else {
			print TEXOUT "\\medskip \\newline \n";
		}

		print TEXOUT "\\raggedright\n";
		print TEXOUT "{\\fontsize{18}{19}\\selectfont ".Tab::texify($bio) ." } \n";
		print TEXOUT "\\end{minipage} \n"
	}

	print TEXOUT "\\end{minipage} \n";
	close TEXOUT;

	$m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>
