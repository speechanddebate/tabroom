<%args>
	$tourn
	$person
	$round_id       => undef
	$property_name  => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	unless ($round_id) {
		$m->print('{ "error": true, "message": "No round ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property or setting to change sent"}');
		$m->abort();
	}

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->print('{ "error": true, "message": "No round found for ID '.$round_id.'"}');
		$m->abort();
	}

	my $msg;

	if ($setting_name) {

		if ($setting_name eq "strikes_due") {

			$msg = "Setting is $setting_name, Property is ".$property_value;

			my $start = $round->timeslot->start if $round->timeslot;

			$start->set_time_zone($tz);
			my $start_date = Tab::pickerdate($start);
			my $strikes_due_dt  = Tab::dtme($start_date, $property_value, $tz);

			$round->setting($setting_name, "date", $strikes_due_dt);

		} else {

			$round->setting($setting_name, $property_value);
			$msg = ucfirst($setting_name)." set to ".$property_value;
		}

		if ($setting_name eq "strikes_published") {
			$round->setting('strike_panels', 0);
			$msg .=" strike panels was also zeroed.";
		}

		if ($setting_name eq "strikes_blast") {

			Tab::Person->set_sql(selves => "
				select person.*
				from person, student, entry_student, ballot, panel
				where panel.round = ?
					and panel.id              = ballot.panel
					and ballot.entry          = entry_student.entry
					and entry_student.student = student.id
					and student.person        = person.id
			");

			Tab::Person->set_sql(coaches => "
				select person.*
				from person, permission, entry, school, ballot, panel
				where panel.round = ?
					and panel.id          = ballot.panel
					and ballot.entry      = entry.id
					and entry.school      = school.id
					and school.chapter    = permission.chapter
					and permission.person = person.id
					and (permission.tag = 'chapter' or permission.tag = 'prefs')
			");

			my $subject = $round->realname." strike card released";

			my $event = $round->event;
			my $tourn = $event->tourn;
			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;

			my $due = $round->setting('strikes_due');
			my $url = $Tab::url_prefix."/user/enter/strike_cards.mhtml";

			my $body = "A strike card for Round: ".$round->realname." in division ".$event->abbr." is ";
			$body .= "available for you on Tabroom.com. To access it as a coach or competitor, log into ";
			$body .= "Tabroom and go to\n";
			$body .= $url."\n\n";

			if ($due) {
				$body .= "The strike card is due by ".$m->comp("/funclib/showtime.mas", dt => $due, return => 1, tz => $tz);
				$body .=". Any strikes not entered by then will be selected at random by the computer.";
			}

			my @persons = (
				Tab::Person->search_selves($round->id),
				Tab::Person->search_coaches($round->id)
			);

			my %nonsense = map {$_->id => 1} @persons;
			my @ids = keys %nonsense;
			my $now = DateTime->now();

			# Google is so stupid.
			my $numberwang = substr($now->epoch, -6, 6);
			my $from_string = $tourn->name."<".$tourn->webname.'_'.$numberwang.'@www.tabroom.com>';

			if (@ids) {
				$m->comp( "/funclib/send_notify.mas",
					from    => $from_string,
					ids     => \@ids,
					url     => $url,
					tourn   => $tourn,
					subject => $subject,
					body    => $body
				);
			}

			my $dbh = Tab::DBI->db_Main();
			my $sth = $dbh->prepare('
				select person.id, person.first, person.last
					from person, judge, ballot, panel
				where panel.round = ?
					and panel.id = ballot.panel
					and ballot.judge = judge.id
					and judge.person = person.id
					and person.no_email = 0
				group by person.id
			');

			$sth->execute($round);
			my $judges = $sth->fetchall_hash();
			my $due_string = $m->comp("/funclib/showtime.mas", dt => $due, return => 1, tz => $tz);
			my $round_name = $round->label || "Round ".$round->name;
			my $event_name = $event->abbr || $event->name;

			foreach my $judge (@{$judges}) {
				next;

				my $message = " Judge ".$judge->{first}." ".$judge->{last}." is on a strike card for ";
				$message .= $round_name." of ".$event_name;
				$message .= " Please be sure you're available in case you end up judging the round.\n\n";
				$message .= "The strike cards are due by $due_string \n";
				my @id = [$judge->{id}];

				push (@ids, @id);

				$m->comp( "/funclib/send_notify.mas",
					from    => $from_string,
					tourn   => $tourn,
					ids     => \@ids,
					subject => "Strike Card: $event_name $round_name",
					body    => $message
				);
			}

			$msg = "Blasted strike cards to ".scalar @ids." recipients";
		}
	}

	$msg =~ s/_/ /g;

    my %response = (
		error   => 0,
		message => $msg
    );

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>

