<%args>
	$tourn
	$perms
	$dbh
	$person          => undef
	$person_settings => undef
	$tourn_settings  => undef
	$round_id        => undef
	$confirm         => undef
	$message         => undef
	$include_motion  => undef
	$motion          => undef
	$scheduled       => undef
</%args>
<%init>

	use REST::Client;
	use MIME::Base64;

	my $round = Tab::Round->retrieve($round_id) if $round_id;

	unless ($round) {
		return "No valid round ID sent" if $scheduled;
		$m->comp("/funclib/abort.mas", message => "No valid round ID sent");
	}

	my $event = $round->event;

	my $tz = $tourn->tz;
	$tz ="UTC" unless $tz;

	my $event_type = $event->type;

	$event_type = "debate"
		if $event_type eq "wsdc"
		|| $event_type eq "parli";

	if ($confirm) {
		unless ($round) {
			my $msg ="Pick a round plz";
			$m->redirect("/register/index.mhtml?msg=$msg");
		}

		my $preset = 1 unless $m->comp('/funclib/round_entries.mas', round => $round);

		if ($include_motion && $motion) {
			$round->setting("motion", $motion);
		} else {
			undef $motion;
		}

		my @rounds;
		if ($ARGS{all_timeslot}) {
			push @rounds, $round->timeslot->rounds();
		} else {
			push @rounds, $round;
		}

		my $now = DateTime->now();
		my $msg;

		foreach my $oround (@rounds) {

			my ($error, $garbage) = $m->comp("/funclib/online_usage.mas",
				tourn    => $tourn,
				round    => $round,
				env      => \%ENV,
				return   => $ARGS{scheduled},
				district => $tourn_settings->{"nsda_district"}
			);

			if ($ARGS{"scheduled"} && $error != 1) {
				return $error;
			}

			if ($ARGS{"publish"}) {
				$oround->published(1);
				$oround->update();
				$m->comp('/funclib/docshare_rooms.mas', round => $oround);
				$m->comp('/funclib/publish_flips.mas', round => $oround);
				$m->comp('/funclib/cache_invalidate.mas', round => $oround);
			}

			my $client = REST::Client->new(
				host => $Tab::url_prefix
			);

			my %send_message = (
				message => $message,
				flight  => $ARGS{"flight"},
				sender  => int($ARGS{"sender"}),
			);

			my $post = JSON::encode_json(\%send_message);
			my $auth_header = encode_base64($Tab::indexcards_user.":".$Tab::indexcards_key);

			$client->POST(
				$Tab::indexcards_url.'/ext/mason/round/'.$oround->id.'/blast',
				$post,
				{
					'Authorization' => "Basic $auth_header",
					'Accept'        => 'application/json',
					'Content-Type'  => 'application/json'
				}
			);

			my $response = eval {
				return JSON::decode_json($client->responseContent());
			};

			if ($response && $response->{message} ) {
				$msg .= "Blast response ".$response->{message};
			}

			$msg .= "<br />" if $msg;
			$msg .= "Emails and web notifications sent for ".$oround->realname;

			if ($ARGS{"publish"}) {
				$msg .= " and round was published online ";
			}
		}

		return $msg if $scheduled;
		$m->redirect("show.mhtml?round_id=".$round->id."&msg=$msg");
	}

	my %others;

	unless ($scheduled) {

		my $limiter;

		unless (
			$perms->{tourn}{$tourn} eq "tabber"
			|| $perms->{tourn}{$tourn} eq "owner"
		) {

			my $event_ids;
			if ($perms->{event}) {
				foreach my $eid (keys %{$perms->{event}}) {
					$event_ids .= "," if $event_ids;
					$event_ids .= $eid;
				}
			}

			if ($event_ids) {
				$limiter = " and event.id IN (".$event_ids.")";
			} else {
				$m->comp("/funclib/abort.mas", message => "You do not have access to any events to blast");
			}
		}

		my $sth = $dbh->prepare('
			select
				round.id, round.name, round.label,
				event.id event_id, event.abbr

			from round, event
			where round.timeslot = ?
				and round.event = event.id
				and round.id != ?
				'.$limiter.'
		');

		$sth->execute($round->timeslot, $round->id);

		my $results = $sth->fetchall_hash();

		if ($results && @{$results}) {
			%others = map {$_->{id} => $_} @{$results};
		}
	}

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $default_blast = $start->clone();
	$default_blast->subtract( minutes => 30);

	my $completed = $round->setting('last_ballot');
	my $blasted = $round->setting('blasted');

</%init>

	<div class="main">

		<& "blast_pairing.mas",
			round           => $round,
			tourn           => $tourn,
			tourn_settings  => $tourn_settings,
			person          => $person,
			person_settings => $person_settings,
			others          => \%others
		&>


		<& "blast_message.mas",
			round           => $round,
			tourn           => $tourn,
			tourn_settings  => $tourn_settings,
			person          => $person,
			person_settings => $person_settings,
			perms           => $perms,
			others          => \%others
		&>

		<div class="full nospace martopmore flexrow">
			<span class="half nospace">
				<h5>Scheduled Blast & Publish</h5>
			</span>

			<span class="half rightalign martop semibold italic graytext">
				Publishes and blasts assignments at a pre-set time.
			</span>
		</div>

<%perl>

		my $sth = $dbh->prepare("
			select
				aq.id, aq.tag, aq.active_at, aq.message,
				person.id person_id, person.first, person.last, person.email
			from (autoqueue aq)
				left join person on person.id = aq.created_by
			where 1=1
				and aq.round = ?
				and aq.tag IN ('blast', 'blast_publish', 'publish')
		");

		$sth->execute($round_id);
		my $rounds = $sth->fetchall_hash();

</%perl>

%		if ($rounds && @{$rounds}) {

%			foreach my $ref (@{$rounds}) {

			<div class="dkred row marbottom flexrow">
				<span class="twothirds martop padleft">
					Round will be
						<% $ref->{tag} eq "blast_publish" ? "both blasted &amp; published" : "" %>
						<% $ref->{tag} eq "blast" ? "blasted only" : "" %>
						<% $ref->{tag} eq "publish" ? "published only" : "" %>
					on
						<& "/funclib/showdt.mas",
							string => $ref->{active_at},
							tz     => $tourn->tz,
							tzname => 1,
							length => "longcasual"
						&>

					<% $ref->{message}
						? '<div class="padno full explain marbottom"> Message: '.$ref->{message}.'</div>'
						: "" %>
					<div class="padno full explain marbottom">
						Set by: <% $ref->{first} %> <% $ref->{last} %>
						at <& "/funclib/showdt.mas",
							string => $ref->{active_at},
							tz     => $tz
						&>
					</div>
				</span>

				<span class="third centeralign">
					<a
						class="buttonwhite orangetext hover invert"
						href="blast_delete.mhtml?aq_id=<% $ref->{id} %>"
					>
						Cancel Scheduled Blast
					</a>
				</span>
			</div>

%			}
%		}

		<form
			action="blast_schedule.mhtml"
			method="post"
		>

			<input
				type  = "hidden"
				name  = "round_id"
				value = "<% $round->id %>"
			>

			<div class="row flexrow">
				<span class="quarter semibold bluetext padleft">
					Schedule for
				</span>

				<span class="quarter">
					<& "/funclib/datepicker.mas",
						id      => "blastdate",
						max     => $tourn->end
					&>

					<input
						type        = "text"
						name        = "blastdate"
						id          = "blastdate"
						placeholder = "Date.."
						size        = "24"
						value       = "<% Tab::pickerdate($default_blast) %>"
					>
				</span>

				<span class="twenty centeralign semibold redtext">
					at
				</span>

				<span class="quarter">
					<&
						"/funclib/timepicker.mas",
						name        => "blasttime",
						size        => 24,
						placeholder => "Time...",
						default     => $default_blast
					&>
				</span>
			</div>

			<div class="row flexrow">
				<span class="quarter semibold padleft">
					Message to recipients
				</span>

				<span class="threefifths">
					<input
						type  = "text"
						name  = "message"
						value = "<% $round->setting("notes")
							? $round->setting("notes")
							:""
						%>">
				</span>
			</div>

			<div class="row flexrow">

				<span class="quarter semibold padleft">
					Scheduled Actions
				</span>

				<span class="quarter flexrow">
					<span class="half smallish hover centeralign">
						<label for="schedule_publish">
							<input
								type  = "checkbox"
								name  = "publish"
								id    = "schedule_publish"
								value = "1"
								checked
							>
							Publish
						</label>
					</span>

					<span class="half smallish hover centeralign">
						<label for="schedule_blast">
							<input
								type  = "checkbox"
								name  = "blast"
								id    = "schedule_blast"
								value = "1"
								checked
							>
							Blast
						</label>
					</span>
				</span>

%				if (keys %others) {
					<span class="quarter hover">
						<label for="schedule_include">
							<span class="fourfifths semibold">
								<span class='quarterspacer'></span>
								Entire Timeslot
							</span>

							<span class="fifth">
								<input
									type  = "checkbox"
									name  = "all_timeslot"
									id    = "schedule_include"
									value = "1"
								>
							</span>
						</label>
					</span>

					<span class="true quarter italic flexrow wrap">
%						foreach my $other (sort keys %others) {
							<span class="third explain">
								<% $others{$other}{abbr} %> <% $others{$other}{label} || 'R'.$others{$other}{'name'} %>
							</span>
%						}
					</span>
%				}
			</div>

			<div class="liblrow rightalign">
				<span class="third centeralign nospace">
					<input
						type  = "submit"
						value = "Schedule Blast"
					>
				</span>
			</div>
		</form>
	</div>

	<div class="menu">
		<div class="sidenote">
			<h4>Share & Enjoy</h4>

			<div class="row marno full padless">
				<span class="fourfifths nospace">
					<span class="third nowrap">
						Start time
					</span>

					<span class="twothirds nospace">
						<& "/funclib/timepicker.mas",
							name => "start_time",
							time => $start,
							size => 12
						&>
					</span>
				</span>

				<span class="fifth rightalign nospace">
					<input
						type          = "submit"
						class         = "notfirst thin"
						value         = "Set"
						round_id      = "<% $round->id %>"
						property_name = "start_time"
						other_value   = "start_time"
						onClick       = "postSwitch(this, 'schemat_switch.mhtml');"
					>
				</span>
			</div>

			<a
				class = "full blue martopmore"
				href  = "show.mhtml?round_id=<% $round->id %>"
			>
				Return to Pairing
			</a>
		</div>

		<div class="sidenote">

			<div class="full flexrow nospace">
				<span class='third nospace'>
					<h4>Stats</h4>
				</span>

				<span class="twothirds rightalign bluetext semibold">
					<% $event->abbr %> <% $round->realname %>
				</span>
			</div>

%			if ($event->type eq "wudc" || $event->type eq "wsdc") {
				<span class="third block">
					Motion
				</span>
				<span class="twothird block">
					<% $round->setting("motion") ?"Entered" :"Not Entered" %>
				</span>
%			}

			<div class="row padvertno flexrow">
				<span class="threetenths semibold">
					Paired
				</span>

				<span class="seventenths">
					<& "/funclib/showdt.mas",
						format => 'murica_short',
						dt     => $round->paired_at,
						tz     => $tourn->tz,
						at     => 1,
					&>
				</span>
			</div>

			<div class="row flexrow">
				<span class="threetenths semibold">
					Blasted
				</span>
				<span class="seventenths">
					<& "/funclib/showdt.mas",
						format => 'murica_short',
						dt     => $blasted,
						tz     => $tourn->tz,
						at     => 1,
					&>
				</span>
			</div>

			<div class="row flexrow">
				<span class="threetenths semibold">
					Last Ballot
				</span>
				<span class="seventenths">
					<& "/funclib/showdt.mas",
						format => 'murica_short',
						dt     => $completed,
						tz     => $tourn->tz,
						at     => 1,
					&>
				</span>
			</div>

		</div>


		<div class="sidenote">

			<h5>What Happened to Texts?</h5>

			<p>
				Text blasts are now blocked by most cell carriers unless we pay
				very high fees to use their enterprise services.
			</p>

			<p>
				Instead, your attendees can now tap the red bell in the top
				right corner of every Tabroom page to enable web alerts that
				will arrive just like blasts used to.  Messages also go to the
				user's Tabroom Inbox on the top header of every Tabroom page.
			</p>
		</div>


	</div>

