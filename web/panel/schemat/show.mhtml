<%args>
	$dbh
	$person
	$person_settings
	$tourn
	$tourn_settings
	$session
	$defaults => undef
	$show     => undef
	$done     => undef
	$event_id => undef
	$round_id => undef
	$perms    => undef
	$default  => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id) if $event_id;
	my $round = Tab::Round->retrieve($round_id) if $round_id;

	if ($perms->{'by_event'} && $perms->{'details'}{$event} eq "entry") {
		$m->comp("/funclib/abort.mas", message => "You do not have access to the administrator pairing");
	}

	$event = $round->event() if $round && not defined $event;
	$m->abort() unless $event;

	$defaults->{tourns}{$tourn}{event} = $event->id;
	$session->default($defaults);

	my $rounds_sth = $dbh->prepare("
		select round.id, round.name, round.label, round.type
			from round
		where round.event = ?
	");
	$rounds_sth->execute($event);
	my $results = $rounds_sth->fetchall_hash();
	my %rounds = map {$_->{id} => $_ } @{$results};

	unless ($round) {

		unless (keys %rounds) {
			my $msg = "There are no rounds scheduled of ".$event->name.".  Try scheduling some?";
			$m->redirect("/setup/schedule/event.mhtml?event_id=$event_id&msg=$msg");
		}

		$round = $m->comp("/funclib/event_current_round.mas", event => $event);

		unless ($round) {
			$round = $m->comp("/funclib/event_current_round.mas",
				event => $event,
				done  => "done"
			);
		}

		unless ($round) {
			my @ids = sort {$rounds{$a}{"name"} <=> $rounds{$b}{"name"}} keys %rounds;
			$round = Tab::Round->retrieve($ids[0]);
		}
	}

	my $tourn_start = $tourn->start;
	my $now = DateTime->now();

	my %round_settings = $round->all_settings if $round;
	my $round_type = $round->type;
	my $ncfl++ if $tourn_settings->{"ncfl"};

	unless ($event || $round) {
		my $msg = "Please pick an event or a round plz";
		$m->redirect("/register/index.mhtml?msg=$msg");
	}

	my $event_type = $event->type;
	$event_type = "debate" if $event_type eq "wsdc";

	my $section = "section" if $event_type eq "speech";
	$section    = "chamber"	if $event_type eq "congress";
	$section    = "pair" 	if $event_type eq "debate";
	$section    = "pair" 	if $event_type eq "mock_trial";
	$section    = "assign" 	if $event_type eq "wudc";

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $category = $event->category if $event;
	$m->abort unless $category;

	my %category_settings   = $category->all_settings;
	my %event_settings      = $event->all_settings;
	my $round_robin         = $event_settings{"round_robin"};
	my $no_side_constraints = $event_settings{"no_side_constraints"};
	my $rounds_per          = $category_settings{"rounds_per"};
	my $tab_ratings         = $category_settings{"tab_ratings"};
	my $coach_ratings       = $category_settings{"coach_ratings"};

	undef $rounds_per if $round_type eq "elim" || $round_type eq "final";

	my $prefs = $category_settings{"prefs"};
	undef $prefs if $prefs eq "none";
	undef $prefs if $event_settings{"no_prefs"};

	my $unbalanced;

	if ($event_type eq "speech" || $event_type eq "congress") {
		$unbalanced++ if $m->comp(
			"/funclib/round_unbalanced.mas",
			round => $round
		);
	}

	my $preset++ unless $m->comp('/funclib/round_entries.mas', round => $round);

	my $num_flights = $round->flighted;
	$num_flights = 1 unless $num_flights;

	my @flights = (1 .. $num_flights);
	my %ballots_out = ();
	my $all_done++;

	foreach my $flight (@flights) {

		Tab::Judge->set_sql(ballots_out => "
			select count(distinct ballot.judge)
				from ballot, panel
			where panel.round = ?
				and panel.id = ballot.panel
				and ballot.audit != 1
				and panel.flight = ?
				and ballot.judge > 0
		");

		$ballots_out{$flight} = Tab::Judge->sql_ballots_out->select_val( $round->id, $flight);
		undef $all_done if $ballots_out{$flight} > 0;
	}

	my $missing_judges;
	my $missing_rooms;

	unless ($event_settings{"online_mode"}
		&& $event_settings{"online_mode"} ne "sync"
		&& (not defined $round_settings{"use_normal_rooms"})
		&& (not defined $event_settings{"online_hybrid"})
	) {

		my $room_sth = $dbh->prepare("
			select panel.id
			from panel, ballot
			where panel.round = ?
				and panel.bye != 1
				and panel.id = ballot.panel
				and ballot.bye != 1
				and ballot.forfeit != 1
				and ballot.audit != 1
			and not exists (
				select room.id from room where room.id = panel.room
			)
			and not exists (
				select ps.id from panel_setting ps
				where ps.panel = panel.id
				and ps.tag = 'online_hybrid'
			)
		");

		$room_sth->execute($round);
		$missing_rooms = $room_sth->fetch();
		$room_sth->finish();
	}

	my $judge_sth = $dbh->prepare("
		select panel.id
		from panel, ballot
		where panel.round = ?
			and panel.bye != 1
			and panel.id = ballot.panel
			and ballot.bye != 1
			and ballot.forfeit != 1
			and ballot.audit != 1
		and not exists (
			select judge.id from judge where ballot.judge = judge.id
		)
	");

	$judge_sth->execute($round);
	$missing_judges = $judge_sth->fetch();
	$judge_sth->finish();

	my $entered++ if $all_done && (not defined $missing_judges);
	my $settings_visible++ if $missing_judges || $missing_rooms;

    my @tabs;
	my %links;

	if (
		($event_type eq "speech" || $event_type eq "congress")
		&& (
			$round_type eq "elim"
			|| $round_type eq "snaked_prelim"
			|| ($tourn_settings->{nsda_nats} && $round_type eq "final")
			|| ($tourn_settings->{ncfl} && $round_type eq "final")
			|| ($event_settings{"seed_presets"} && $round_type eq "prelim")
		)
	) {
		$links{"snake"} = "show_snake.mhtml?round_id=".$round->id;
	}

	$links{"log"} = "round_log.mhtml?round_id=".$round->id;

    push @tabs, "settings";

	my $panel_sth = $dbh->prepare("
		select panel.* from panel where round = ?
	");
	$panel_sth->execute($round->id);

	my @panels = eval {
		my $pan_ref = $panel_sth->fetchall_hash();
		if ($pan_ref) {
			return @{$pan_ref};
		}
	};

	if (scalar @panels > 0) {
		$default = "schematic" unless $default;
	} else {
		$default = "settings" unless $default;
	}

	if ($preset && ($round_type eq "elim" || $round_type eq "final")) {
    	push @tabs, "pre-create";
	};

	if (
		($event_type eq "debate" || $event_type eq "mock_trial")
		&& (
			$round_type eq "elim"
			|| $round_type eq "final"
			|| $event_settings{"no_side_constraints"}
		)
	) {
		push @tabs, "actions";
	}

	if ($round) {
		push @tabs, "schematic";
		push @tabs, "reports";
		push @tabs, "results";
	}

	unless ($default) {
		$default = "pre-create" if $preset && ($round_type eq "elim" || $round_type eq "final");
		$default = "schematic" unless $default;
	}

	my $start = $round->start_time;
	$start = $round->timeslot->start
		if $round->timeslot && (not defined $start);
	$start->set_time_zone($tz) if $start;

	my $end;

	if ($event_settings{'online_mode'}) {
		$end = $round->timeslot->end if $round->timeslot;
		$end->set_time_zone($tz) if $end;
	}

	my $prep_offset;

	if ($event_settings{"prep_offset"}) {
		$prep_offset = $start->clone();
		$prep_offset->subtract( minutes => $event_settings{"prep_offset"});
	}

	my $checker++ if ${$perms}{"checker"};
	undef $checker if $person_settings->{"nsda_district"};
	undef $checker if $person->site_admin;

	$show = "schools" if $checker;

	Tab::Panel->set_sql(next_round =>  "
		select distinct panel.*
			from panel, round
		where round.name = ?
			and round.event = ?
			and round.id = panel.round
	");

	my $decision_deadline;
	my $decision_time;

    if ($round_type eq "elim" || $round_type eq "final") {
        $decision_deadline = $event_settings{"elim_decision_deadline"};
    } else {
        $decision_deadline = $event_settings{"prelim_decision_deadline"};
    }

    if ($decision_deadline) {
        $decision_time = $start->clone;
        $decision_time->add("minutes", $decision_deadline);
    }

	my %flight_deadline;
	my %flight_left;

    if ($decision_time) {

        foreach my $flight (1 .. $num_flights) {
			my $offset = $event_settings{"flight_offset"} * ($flight - 1);
			$flight_deadline{$flight}  = $decision_time->clone();
			$flight_deadline{$flight}->add('minutes', $offset);
			$flight_left{$flight} = ($flight_deadline{$flight} - $now);
        }
    }

	my $round_url = $Tab::indexcards_url."/tab/".$tourn->id."/round/".$round->id;
	my $stat_url  = $round_url."/status";
	my $blast_url = $round_url."/blastStatus";
	my $side_url  = $round_url."/sidecount";

</%init>

	<script>

		function checkIgnoreResults() {

			const ignoreResults = $(`#ignore_results`).prop('checked');

			if (ignoreResults) {
				$(`.ballots`).addClass('strike');
				$(`.ballots`).addClass('normalweight');
				$(`.ballots`).addClass('graytext');
				$(`.ballots`).removeClass('greentext');
				$(`#roundwarning`).removeClass('hidden');
				$(`#roundwarning`).html(`<p class="redtext semibold centeralign">The "Ignore Results" setting is ENABLED for this round.  <br />None of the round results will be counted unless this setting is disabled under Settings below.</p>`);
			} else {
				$(`.ballots`).removeClass('strike');
				$(`.ballots`).removeClass('normalweight');
				$(`.ballots`).removeClass('graytext');
				$(`.ballots`).addClass('greentext');
				$(`#roundwarning`).addClass('hidden');
			}
		}

		function refreshResult (firstRun) {

			// Set the sorting element to the pref differential if there are no
			// results.

			$('.allprefs').each( (index, prefbox) => {

				const key      = $(prefbox).attr('key');
				const existing = $(`#${key}_sortme`).text();
				const prefs    = $(`#${key}_prefs`).text();

				if (!existing || existing == '') {
					$(`#${key}_sort`).attr('data-text', prefs);
				}
			});

			$.ajax({
				type        : 'GET',
				url         : '<% $stat_url %>',
				crossDomain : true,
				xhrFields   : {
					withCredentials: true
				},
			}).then( function(status) {

				Object.keys(status.judges).forEach( judgeId => {

					Object.keys(status.judges[judgeId]).forEach( panelId => {

						const judge = status.judges[judgeId][panelId];
						const judgeKey = `${judgeId}_${panelId}`;


						if (judge.text || judge.count) {

							let existing = $(`#${judgeKey}_result`).text();

							if (!existing && judge.count) {
								judge.text = '';
								judge.text = `${judge.count.toString()}`;
							}
							let isHalf = $(`#${judgeKey}_result`).attr('half');

							if (existing === '½' || existing === '&frac12;' || isHalf) {
								existing = '&frac12;'
							}

							if (
								existing.toUpperCase() !== judge.text.toUpperCase()
								&& existing !== judge.text
							) {

								$(`#${judgeKey}_result`).removeClass('graytext');
								$(`#${judgeKey}_result`).removeClass('greentext');
								$(`#${judgeKey}_result`).removeClass('bluetext');
								$(`#${judgeKey}_result`).removeClass('redtext');

								$(`.${judge.panel}_prefs`).addClass('hidden');
								$(`.${judge.panel}_result`).removeClass('hidden');

								if (!firstRun && $(`#${judgeKey}_result`).text() !== '&frac12;') {
									$(`#${judgeKey}_result`).addClass('ltyellow').removeClass('ltyellow', 2000);
									$(`#${judgeKey}_name`).addClass('ltyellow').removeClass('ltyellow', 2000);
								}

								if (judge.text == '&frac12;') {
									$(`#${judgeKey}_result`).html(judge.text);
									$(`#${judgeKey}_result`).attr('half', true);
								} else {
									$(`#${judgeKey}_result`).html(judge.text.toUpperCase());
									$(`#${judgeKey}_result`).removeAttr('half');
								}

								if (judge.text !== '-') {
									$(`.${judge.panel}_sortme`).html(judge.text);
								}

								if (judge.class) {
									$(`#${judgeKey}_result`).addClass(judge.class);
								}
							}

						} else if (status.panels[judge.panel] < 10) {

							$(`.${judgeKey}`).removeClass('hidden');
							$(`#${judgeKey}_result`).addClass('hidden');
							$(`.${judge.panel}_prefs`).removeClass('hidden');

							$(`.${judge.panel}_sortme`).html(
								$(`.${judge.panel}_prefs`).text()
							);
						}
					});
				});

				let replaceStatus = false;

				Object.keys(status.panels).forEach( panelId => {
					if (
						status.panels[panelId] !== 2
						&& status.panels[panelId] !== 1000
					) {
						replaceStatus = true;
					}
				});

				if (replaceStatus) {
					Object.keys(status.panels).forEach( panelId => {
						$(`#${panelId}_sort`).removeClass('doublespace');

						if (status.panels[panelId] > 2) {
							$(`#${panelId}_sort`).attr('data-text', parseFloat(status.panels[panelId] * 10));
						}
					});

					Object.keys(status.byePanels).forEach( panelId => {

						const existing = $(`#${panelId}_sort`).attr("bye");

						if (existing !== status.byePanels[panelId]) {
							$(`#${panelId}_sort`).empty();
							$(`#${panelId}_sort`).addClass('ltyellow').removeClass('ltyellow', 2000);
							$(`#${panelId}_sort`).addClass('nowrap');
							$(`#${panelId}_sort`).html(status.byePanels[panelId]);
							$(`#${panelId}_sort`).attr("bye", status.byePanels[panelId]);
							$(`#${panelId}_sort`).attr("title", status.byePanels[panelId]);
							$(`#${panelId}_sort`).addClass("smaller");
							$(`#${panelId}_sort`).addClass('doublespace');
						}
					});


					Object.keys(status.out).forEach( flight => {
						const outCount = Object.keys(status.out[flight]).length;
						if (outCount > 0) {
							$(`#ballots_out_flight_${flight}`).html(outCount+' out');
							$(`#ballots_out_flight_${flight}`).removeClass('greentext');
						} else {
							$(`#ballots_out_flight_${flight}`).addClass('greentext');
							$(`#ballots_out_flight_${flight}`).html('DONE');
						}
					});

					fixVisual();
				}

			}).then( () => {
				fixVisual();
			});

			$.ajax({
				type        : 'GET',
				url         : '<% $side_url %>',
				crossDomain : true,
				xhrFields: {
					withCredentials: true
				},
			}).then( function(sideCounts) {

				$('#debateResults').html('');
				const colors = ['bluetext', 'orangetext', 'greentext'];
				Object.keys(sideCounts).forEach( side => {
					$("#debateResults").append(`
						<span class="half centeralign semibold">
							<span class="twofifths rightalign ${colors.shift()}">
								${side.substring(0, 3)}:
							</span>
							<span class="halfspacer">
							</span>
							<span class="twofifths leftalign">
								${sideCounts[side]}
							</span>
						</span>
					`);
				});
			});

			fixVisual();
		}

		// Show/hide various values on the schematic.  This time with at least
		// a vague understanding of JS and not just flinging shit around until
		// it sticks.  For Science! --CLP

		function showProperty() {

			let hideEntryIdentity = true;
			let hideJudgeIdentity = true;
			let anonymize = false;

			$(`.properties`).each( (index, element) => {

				const fieldName = element.id;

				if ( $("#"+fieldName).prop("checked") ) {

					$("."+fieldName).removeClass('hidden');
					$("."+fieldName+"_placeholder").addClass('hidden');
					$("."+fieldName+"_label").addClass('semibold');
					$("."+fieldName+"_label").addClass('bluetext');

					if (fieldName === "anonymize") {
						$(".identities").addClass("hidden");
						anonymize = true;
					}

					if (fieldName == 'judgenames' || fieldName === "judgecodes") {
						hideJudgeIdentity = false;
					} else if (fieldName == 'entryames' || fieldName === "entrycodes") {
						hideEntryIdentity = false;
					}

				} else {

					$("."+fieldName).addClass('hidden');
					$("."+fieldName+"_placeholder").removeClass('hidden');
					$("."+fieldName+"_label").removeClass('semibold');
					$("."+fieldName+"_label").removeClass('bluetext');

					if (fieldName === "anonymize") {
						$(".identities").removeClass("hidden");
					}
				}

				if (anonymize) {

					$('.entry_identities').addClass('hidden');
					$('.entrynames').addClass('hidden');
					$('.judge_identities').addClass('hidden');

				} else {

					if (hideJudgeIdentity) {
						$('.judge_identities').addClass('hidden');
					} else {
						$('.judge_identities').removeClass('hidden');
					}

					if (hideEntryIdentity) {
						$('.entry_identities').addClass('hidden');
					} else {
						$('.entry_identities').removeClass('hidden');
					}
				}

			});

			if (
				$('#judgenames').prop("checked")
				&& $('#schoolnames').prop("checked")
			) {
				$('.judgeheightbox').each( (index, item) => {
					$(item).removeClass('judgeheight');
					$(item).addClass('doublejudgeheight');
				});
			} else {
				$('.judgeheightbox').each( (index, item) => {
					$(item).addClass('judgeheight');
					$(item).removeClass('doublejudgeheight');
				});
			}

			resizeToChildren('entry_resizer');
			resizeToChildren('judge_resizer');
		}

%		if ($round->type eq "final") {
			function theFinalCountdown() {
				var audio = new Audio('/lib/images/final-decision.mp3');
				audio.loop = false;

				try {
					audio.play();
				} catch (err) {
					console.log(err);
				}
			}
%		}

		$(document).ready(function() {

			showProperty();
			refreshResult(true);
			checkIgnoreResults();
			checkBlastStatus();

			$("#hide").click(function(){
				$("#eraser").hide();
				$("#hide").hide();
				$("#show").show();
			});

			$("#show").click(function(){
				$("#eraser").show();
				$("#hide").show();
				$("#show").hide();
			});

			resizeToChildren('entry_resizer');
			resizeToChildren('judge_resizer');

%			if (not defined $ARGS{"norefresh"}) {
				setInterval(refreshResult, 15000);
%			}

%			if ($round->published != 1) {
				setInterval(checkBlastStatus, 15000);
%			}
		});

	</script>

	<div class="menu">

%		if ($checker) {
			<div class="sidenote">
				<h4>Return</h4>

				<a
					class="blue full"
					href="/tabbing/entry/index.mhtml"
				>
					Return to Ballot Entry
				</a>
			</div>
%		} else {
			<div class="sidenote">
<%perl>
				unless ($round->published > 0) {
					$settings_visible++ if $preset;
					$settings_visible++ if $unbalanced;
				}
</%perl>
				<div
					style = "border-bottom: 1px dashed #444;"
					class = "nowrap flexrow"
				>
					<span class="eighth">
						<a
							class = "notfirst fa fa-sm fa-eye-slash buttonwhite redtext invert"
							id    = "hide"
							style = "<% $settings_visible ? "" : "display: none;"%>"
						></a>

						<a
							class = "notfirst fa fa-sm fa-eye buttonwhite redtext"
							id    = "show"
							style = "<% $settings_visible ? "display: none;" : ""%>"
						></a>
					</span>

					<span class="seveneighths">
						<h4 class="marno">
							Change &amp; Destroy
						</h4>
					</span>
				</div>

				<div
					id    = "eraser"
					style = "<% $settings_visible ? "" : "display: none;"%>
				">
<%perl>
					my %show_buttons;

					if ($tourn_settings->{"nsda_district"}) {

						$show_buttons{"qualifiers"}++ if $round_type eq "final";
						$show_buttons{"qualifiers"}++ if $round_type eq "runoff";

						if ($event_settings{"round_robin"}) {
							$show_buttons{"qualifiers"}++;
						}

						if ($round_type eq "prelim") {
							my @entries = $event->entries( active => 1 );
							if (scalar @entries < 8) {
								my @rounds = sort {$rounds{$b}{"name"} <=> $rounds{$a}{"name"}} keys %rounds;
								if ($rounds[0] == $round) {
									$show_buttons{"qualifiers"}++;
								}
							}
						}
					}

					if ($tourn_settings->{"nsda_nats"}) {
						$show_buttons{"top14"}++ if $round_type eq "final";
					}

					if (
						$tourn_settings->{"nsda_nats"}
						&& (not defined $event_settings{"not_nats"})
						&& ($round_type eq "elim" || $round_type eq "final")
						&& ($event_type ne "congress" && $event_type ne "speech")
					) {

						# NSDA Nationals rules in the elims are more like districts than not
						$show_buttons{"nsda_section"}++;
						$show_buttons{"nsda_next_section"}++ if $entered && $round_type ne "final";

					} else {

						# Congratulations.  You are running a normal tournament.
						if ($event_settings{"round_robin"}) {
							unless ($round_type eq "elim" || $round_type eq "final") {
								$show_buttons{"round_robin_warning"}++
							}
						}

						if ($round_type eq "elim" || $round_type eq "final") {

							$show_buttons{"normal_elim_section"} = "Auto-Advance to ".ucfirst($round_type)." Round";

							if ($event_type eq 'congress' && $round_type eq "elim") {
								$show_buttons{"clone_elim"}++;
							}

						} elsif ($round_type eq "runoff") {

						} else {
							if ($event_type eq "debate" || $event_type eq "wudc" || $event_type eq "mock_trial") {
								$show_buttons{"normal_section"} = "Auto Pair";

								$show_buttons{"normal_powermatch"}++
									if $round_type eq "highhigh" || $round_type eq "highlow";

							} elsif ($event_type eq "speech") {
								$show_buttons{"normal_ie_section"} = "Auto Section";
							} elsif ($event_type eq "congress") {
								$show_buttons{"normal_congress_section"} = "Auto Chamber";
							}
						}
					}

					if ($event_type eq "wudc") {

						my @entries = $event->entries( active => 1 );

						if (scalar @entries % 4) {
							$show_buttons{"wudc_warn"} = "The field size (".scalar @entries.") is not ";
							$show_buttons{"wudc_warn"} .= "divisible by 4.  This pairing will have byes.";
						}
					}

					$show_buttons{"runoff_warning"}++ if $round_type eq "runoff";
					my $pair_class = "yellow half";
					$pair_class = "centeralign dkgreen half" if $preset;
</%perl>

%					if ($show_buttons{"qualifiers"}) {
						<a
							class="dkyellow full martopmore centeralign"
							href="/tabbing/results/nsda_qualifiers.mhtml?event_id=<% $event->id %>"
						>
							Display National Qualifiers
						</a>
%					}

%					if ($show_buttons{"top14"}) {
						<a
							class="dkgreen full martopmore"
							href="/tabbing/results/nsda_qualifiers.mhtml?event_id=<% $event->id %>"
						>
							Display Top 14 Finishers
						</a>
%					}

%					if ($show_buttons{"nsda_section"}) {
						<a
							class="<% $preset ? "dkgreen" : "dkyellow" %> martop full marbottom"
							href="/panel/round/nsda/redirector.mhtml?round_id=<% $round->id %>"
						>
							<% $preset ? "" : "Re-" %><% ucfirst($section) %>
							<% $round->realname %>
						</a>
%					}

<%perl>
					if (
						(not defined $preset)
						&& $show_buttons{"nsda_next_section"}
					) {
</%perl>
						<a
							class = "dkgreen martop full marbottom"
							href  = "/panel/round/nsda/redirector.mhtml?round_id=<% $round->id %>&next=1"
						>
							Create next round
						</a>
%					}

%					if ($show_buttons{"runoff_warning"}) {
						<p class='semibold redtext biggish'>
							To schedule a runoff, start from the round where the tie occurred,
							and use 'Schedule Runoff' under Change &amp; Destroy.
						</p>"
<%perl>
					}

					my $warn;

					if ($show_buttons{"round_robin_warning"}) {
						$warn = "This button will pair the ENTIRE round robin ";
						$warn .= " AND delete any existing rounds.  Continue?";
					} else {
						$warn = "This will delete the existing ".$round->realname." and ";
						$warn .= "resection it.  Are you sure?";
					}

					if ($show_buttons{"normal_section"}) {
</%perl>
						<a
							class = "<% $pair_class %> martop"
							href  = "/panel/round/panel_master.mhtml?round_id=<% $round->id %>"
%							unless ($preset) {
								<& "/funclib/confirm.mas", warn => $warn &>
%							}
						>
							<% $show_buttons{"normal_section"} %>
						</a>
%					}

%					if ($show_buttons{"normal_ie_section"}) {
						<a
							class = "<% $pair_class %> martop"
							href  = "/panel/round/panel_single.mhtml?round_id=<% $round->id %>"
%							unless ($preset) {
								<& "/funclib/confirm.mas", warn => $warn &>
%							}
						>
							<% $show_buttons{"normal_ie_section"} %>
						</a>
%					}

%					if ($show_buttons{"normal_congress_section"}) {
						<a
							class = "<% $pair_class %> martop"
							href  = "/panel/round/congress_chambers.mhtml?round_id=<% $round->id %>"
						>
							<% $show_buttons{"normal_congress_section"} %>
						</a>
%					}

%					if ($show_buttons{"normal_elim_section"}) {

						<a
							class = "<% $pair_class %> martop full"
							href="/tabbing/break/index.mhtml?into_id=<% $round->id %>&event_id=<% $event->id %>"
%							unless ($preset) {
								<& "/funclib/confirm.mas", warn => $warn &>
%							}
						>
							<% $show_buttons{"normal_elim_section"} %>
						</a>
<%perl>
					}

					if ($show_buttons{"clone_elim"}) {

						my $first_elim;
						my $elim_count;
						my $clone_round_id;

						foreach my $other_id (sort {$rounds{$a}{"name"} <=> $rounds{$b}{"name"}} keys %rounds) {
							my $other = $rounds{$other_id};
							if ($other->{type} eq "elim") {
								$first_elim = Tab::Round->retrieve($other_id) unless $first_elim;
								$elim_count++;
							}
						}

						if ($event_type eq "congress"
							&& $tourn_settings->{"nsda_nats"}
							&& $round_type eq "elim"
						) {

							my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);

							my $clone_round;

							if (@ties) {
								unless ($ties[0] == $round) {
									$clone_round = $ties[0];
								}
							} else {
								my @rounds = sort {$rounds{$b}{"name"} <=> $rounds{$a}{"name"}} keys %rounds;
								$clone_round_id = $rounds[($round->name - 1)];
								my $clone_round = $rounds{$clone_round_id};
							}

							if ($clone_round) {
</%perl>
								<a
									class = "<% $pair_class %> full"
									href  = "/panel/round/panel_master.mhtml?round_id=<% $round->id %>&clone=<% $clone_round_id || 1 %>"
%									unless ($preset) {
										<& "/funclib/confirm.mas", warn => $warn &>
%									}
								>
									Clone <% $clone_round->{label} || ' Round '.$clone_round->{name} %> into <% $round->realname %>
								</a>
%							}

<%perl>
	         			} elsif ($elim_count > 1
							&& $first_elim != $round
							&& $first_elim > 0
							&& $first_elim->id
							&& $round > 0
							&& $round->id
						) {
</%perl>
							<a
								class = "<% $pair_class %> martop full"
								href  = "/panel/round/panel_master.mhtml?round_id=<% $round->id %>&clone=1";
%								unless ($preset) {
									<& "/funclib/confirm.mas", warn => $warn &>
%								}
							>
								Clone <% $first_elim->realname %> into <% $round->realname %>
							</a>
<%perl>
						}
					}

					if ($show_buttons{"normal_powermatch"}) {
</%perl>
						<a
							class = "yellow half"
							href  = "/panel/manipulate/manual_powermatch.mhtml?round_id=<% $round->id %>"
						>
							Manually Power
						</a>
%					}

%					if ($show_buttons{"normal_section"}) {

%						if ($event_type eq "wudc") {

							<a
								class = "yellow half"
								href  = "/panel/manipulate/manual_wudc.mhtml?round_id=<% $round->id %>">
								Manually pair
							</a>

%						} else {

							<a
								class = "yellow half"
								href  = "/panel/manipulate/manual_debate.mhtml?round_id=<% $round->id %>">
								Manually pair
							</a>
							<a
								class = "yellow half"
								href  = "/panel/round/manual_debate.mhtml?round_id=<% $round->id %>">
								Manual Changes
							</a>
<%perl>
							if ($event_settings{"round_robin"}) {

								unless ($round->published > 0) {
									my @entries = $event->entries( active => 1 );
									my $num_entries = scalar @entries;
									my $pattern = Tab::TabroomSetting->search( tag => "round_robin_".$num_entries)->first;

									if ($pattern) {
										my $warn = "This will re-section the entire round robin.  Continue?";
</%perl>
										<a
											class = "yellow half"
											onClick  = "postConfirm(
												'<% $warn %>',
												this,
												'<% $Tab::indexcards_url %>/tab/<% $tourn->id %>/event/<% $event->id %>/section/robin/template')
											;"
										>Pair Standard <% $num_entries %> RR</a>
<%perl>
									}
								}
							}
						}
					}

					if ($show_buttons{"normal_ie_section"} || $show_buttons{"normal_congress_section"}) {
</%perl>
						<a
							class = "yellow half"
							href  = "/panel/manipulate/manual_speech.mhtml?round_id=<% $round->id %>">
							Hand Assignments
						</a>
%					}

<%perl>
					if (
						(not defined $tourn->{nsda_district})
						&& ($event_type eq "congress" || $tourn_settings->{"mock_trial_registration"})
					) {
</%perl>
						<a
							class = "half yellow"
							href  = "chair_confirm.mhtml?round_id=<% $round->id %>"
							title = "Mark all chairs as not scoring/voting"
						>
							Make <% $event_type eq "congress" ? "Parli" : "Judges" %> non-voting
						</a>
%					}

%					if ($event_type eq "speech" || $event_type eq "wsdc" || $event_type eq "debate") {
						<a
							class = "half yellow"
							href  = "/panel/round/runoff.mhtml?round_id=<% $round->id %>"
							title = "Use a runoff for tiebreakers for a qualifier"
						>
							Schedule Runoff
						</a>
%					}

					<span class="nospace padvertless full"></span>
<%perl>
					unless ($preset) {

						$warn = "You are about to erase judges and re-assign them.  Are you sure?";
						undef $warn if $missing_judges;

						if (
							$event_type eq "congress" || $event->type eq "mock_trial"
							&& ($category_settings{"ask_parli"} || $tourn_settings->{"nsda_nats"} || $event->type eq "mock_trial")
						) {

							my $parli_warn = "You are about to erase parliamentarians and re-assign them";
							$parli_warn = " in ALL prelim chambers" if $round_type eq "prelim";
							$parli_warn .= ". Are you sure?";

							my $scorer_warn = "You are about to erase scorers in ".$round->realname;
							$scorer_warn .= " and re-assign them.  Are you sure?";

							undef $parli_warn if $missing_judges;
							undef $scorer_warn if $missing_judges;
</%perl>
							<a
								class="yellow half"
								href="/panel/round/judges.mhtml?round_id=<% $round->id %>&parlis=1"
								<& "/funclib/confirm.mas", warn => $parli_warn &>
							>
								Auto-Assign <% $event_type eq "congress" ? "Parlis" : "Judges" %>
							</a>

							<a
								class="yellow half"
								href="/panel/round/judges.mhtml?round_id=<% $round->id %>&parlis=2"
								<& "/funclib/confirm.mas", warn => $scorer_warn &>
							>
								Auto-Assign Scorers
							</a>

							<a
								class="yellow half"
								href="/panel/round/judges.mhtml?round_id=<% $round->id %>&parlis=3"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-Assign Both
							</a>
<%perl>

						} elsif (
							$event_type eq "speech"
							|| $event_type eq "congress"
							|| $event_type eq "wudc"
							|| ($category_settings{"tab_ratings"} && $event_settings{"auto_chairs"})
						) {
</%perl>
							<a
								class="yellow half"
								href="/panel/round/judges.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-assign Judges
							</a>
<%perl>
						} elsif (
							$round_settings{"num_judges"} > 1
							&& $prefs
							&& $round_type eq "elim"
						) {
</%perl>
							<a
								class="yellow half"
								href="/panel/round/debate_judge_panel.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-assign Judges
							</a>
<%perl>
						} else {

							if ($event_settings{"break_point"}
								&& ($round_type eq "highhigh" || $round_type eq "highlow")
							) {

								my $break_bracket = $round->name - $event_settings{"break_point"} - 1;
</%perl>
								<a
									class = "yellow half"
									href  = "/panel/round/debate_judge_assign.mhtml?min_bracket=<% $break_bracket %>&round_id=<% $round->id %>"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Judges (In debates)
								</a>

								<a
									class="yellow half"
									href="/panel/round/debate_judge_assign.mhtml?max_bracket=<% ($break_bracket) %>&round_id=<% $round->id %>"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Judges (Out debates)
								</a>
%							}

							<a
								class="yellow half"
								href="/panel/round/debate_judge_assign.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-assign Judges
							</a>
%						}

						<a
							class="yellow half"
							href="/panel/round/manual_judges.mhtml?round_id=<% $round->id %>"
						>
							Hand place <% $tourn_settings->{"mock_trial_registration"} ? "Panels" : "Judges" %>
						</a>
<%perl>
						if ($round_settings{"num_judges"} > 1
							&& $round->flighted > 1
							&& (
								($round_type ne "elim") || (not defined $prefs)
							)
						) {
</%perl>
							<a
								class = "yellow full nowrap"
								title = "Use this if your judging is tight"
								href  = "/panel/round/debate_judge_panel.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-place judges w/o same panels flight 2
							</a>
<%perl>
						}

						unless (
							$event_settings{"online_mode"}
							&& $event_settings{"online_mode"} ne "sync"
							&& (not defined $round_settings{"use_normal_rooms"})
							&& (not defined $event_settings{"online_hybrid"})
						) {

							$m->print('<span class="nospace full"></span>');

							undef $warn;
</%perl>
							<a
								class = "yellow half"
								href  = "/panel/round/rooms.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Auto-assign Rooms
							</a>

							<a
								class = "yellow half"
								href  = "/panel/round/manual_rooms.mhtml?round_id=<% $round->id %>"
							>
								Hand place Rooms
							</a>
%						}

%						if ($event_type eq "congress" || $event_settings{"sort_precedence"}) {

							<a
								class = "yellow half martop"
								href  = "/panel/round/congress_recency.mhtml?round_id=<% $round->id %>&redirect=1"
							>
								Reset Sess <% $round->name %> recency
							</a>

							<a
								class = "yellow half martop"
								href  = "/panel/round/congress_recency.mhtml?event_id=<% $event->id %>&redirect=1"
							>
								Reset all recency for <% $event->abbr %>
							</a>


							<a
								class = "yellow half marbottom"
								href  = "/panel/round/congress_recency_report.mhtml?event_id=<% $event->id %>&redirect=1"
							>
								Recency Report
							</a>

%						}

%						if ($event_type eq "speech" || $event_type eq "congress") {
%							if ($unbalanced) {
								<a
									class = "dkgreen half martop marbottom"
									href  = "/panel/manipulate/manual_rebalance.mhtml?round_id=<% $round->id %>"
								>
									Rebalance <% $section%>s
								</a>
%							}
<%perl>
							my $drops_sth = $dbh->prepare("
								select entry.id
									from entry, ballot, panel
								where panel.round = ?
									and panel.id = ballot.panel
									and ballot.entry = entry.id
									and entry.active != 1
								limit 1
							");

							$drops_sth->execute($round->id);
							my $drops = $drops_sth->fetch();
</%perl>
%							if ($drops) {
								<a
									class = "dkgreen full martop marbottom"
									title = "This will remove any dropped entries who have no scores, and re-adjust speaker orders to fill in gaps"
									href  = "/panel/manipulate/trim_sections.mhtml?round_id=<% $round->id %>&from=schemat"

									<& "/funclib/confirm.mas",
										warn => "This function pulls all dropped entries from this round only, and then fills in gaps in speaking order.  It will not remove any entry with scores or ballot comments.  Are you sure?"
									&>
								>
									Prune drops & redo <% $event_type eq "speech" ? "speaker orders" : "recency" %>
								</a>
%							}
%						}

%						$warn = "You are about to delete all entries from this round.  You cannot get them back. ";
%						$warn .= "Please, for the love of all that is good and holy, be certain you mean it";

						<div class="centeralign nospace martopmore">

							<a
								class = "lird semibold padleft half redhover"
								href  = "round_dump_entries.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Erase Entries
							</a>

<%perl>
							unless (
								$event_settings{"online_mode"}
								&& $event_settings{"online_mode"} ne "sync"
								&& (not defined $round_settings{"use_normal_rooms"})
								&& (not defined $event_settings{"online_hybrid"})
							) {
								$warn = "You are about to delete all ROOMS from this round.  You cannot get them back. ";
								$warn .= "Please, for the love of all that is good and holy, be certain you mean this";
</%perl>
								<a
									class = "lird semibold padleft half redhover"
									href="round_dump_rooms.mhtml?round_id=<% $round->id %>"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Erase Rooms
								</a>
<%perl>
							}

							$warn = "You are about to delete all judges from this round.  You cannot get them back.  ";
							$warn .= "Please, for the love of all that is good and holy, be certain you mean this";

							if ($event_type eq "congress") {
</%perl>
								<a
									class = "lird semibold padleft half redhover"
									href = "round_dump_judges.mhtml?round_id=<% $round->id %>&erase_chairs=1"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Erase Parlis
								</a>

								<a
									class = "lird semibold padleft half redhover"
									href = "round_dump_judges.mhtml?round_id=<% $round->id %>&erase_chairs=2"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Erase Scorers
								</a>

%							} else {

								<a
									class = "lird semibold padleft half redhover"
									href = "round_dump_judges.mhtml?round_id=<% $round->id %>"
									<& "/funclib/confirm.mas", warn => $warn &>
								>
									Erase <% $tourn_settings->{"mock_trial_registration"} ? "Panels" : "Judges" %>
								</a>
<%perl>
							}

							$warn = "You are about to delete this ENTIRE ROUND. You cannot get it back.  ";
							$warn .= "Please, for the love of all that is good and holy, be certain you mean this!";
</%perl>
							<a
								class = "lird semibold half redhover padleft"
								href="round_dump.mhtml?round_id=<% $round->id %>"
								<& "/funclib/confirm.mas", warn => $warn &>
							>
								Erase Round
							</a>

						</div>
<%perl>
						if ($tourn->hidden) {
							$warn = "You are about to fake the ranks for an entire round.  ";
							$warn .= "Existing ranks will be wiped out.  Please be sure.  There is no undo here.";
</%perl>

							<h6 class="semibold bluetext">Generate Fake Results</h6>

							<a
								class = "lird semibold padleft half redhover"
								<& "/funclib/confirm.mas", warn => $warn &>
								href="/tabbing/entry/fake/<% $event_type %>.mhtml?round_id=<% $round->id %>"
							>
								This Round
							</a>
<%perl>
							$warn = "You are about to fake the ranks for the ENTIRE EVENT.  ";
							$warn .= "ALL Existing ranks will be wiped out.  Please be sure.  There is no undo here.";
</%perl>

							<a
								class = "lird semibold padleft half redhover"
								<& "/funclib/confirm.mas", warn => $warn &>
								href="/tabbing/entry/fake/<% $event_type %>.mhtml?event_id=<% $event->id %>"
							>
								Whole Event
							</a>
<%perl>
						}

						if ($round_type ne "runoff"
							&& ($round_type eq "elim" || $tourn_settings->{"wsdc"})
						) {
</%perl>
							<a
								class="martopmore full yellow"
								href="/panel/manipulate/bracket_edit.mhtml?round_id=<% $round->id %>"
							>Edit Bracket</a>
%						}

%						my @idle = $m->comp("/funclib/round_idle_judges.mas", round => $round);

						<a
							class = "yellow full martopmore"
							href  = "/panel/manipulate/free_judges.mhtml?round_id=<% $round->id %>"
						>
							Assign/List <% scalar @idle %> Unused Judges
						</a>
%					}

				</div>
			</div>

			<div class="sidenote">

				<h4>Share & Enjoy</h4>
<%perl>
				my $sizebutton = "half";

				if ($round_type eq "prelim"
					&& $event_type eq "speech"
					&& $tourn_settings->{"nsda_nats"}
					&& (not defined $event_settings{"not_nats"})
				) {

					$sizebutton = "half";
</%perl>
					<a
						class="yellow martop half"
						href="/panel/round/nsda/nats_speakerorder.mhtml?event_id=<% $event->id %>"
					>
						NSDA Speaker Order
					</a>
<%perl>
				} elsif ($round_type eq "elim"
					&& $tourn_settings->{"nsda_nats"}
					&& (not defined $event_settings{"not_nats"})
				) {

					$sizebutton = "half";
					if ($event_type eq "speech") {
</%perl>
						<a
							class="full yellow <% $sizebutton %>"
							href="show_snake.mhtml?round_id=<% $round->id %>"
						>
							NSDA Nationals Checks
						</a>
%					} elsif ($event_type eq "debate") {
						<a
							class="full yellow martop"
							href="/panel/round/nsda/redirector.mhtml?round_id=<% $round->id %>&default=checks"
						>
							NSDA Nationals Checks
						</a>
%					}
%				}

				<a
					class="yellow <% $sizebutton %>"
					href="disaster_check.mhtml?round_id=<% $round->id %>"
				>
					Round Disaster Check
				</a>
				<a
					class="marbottom yellow <% $sizebutton %>"
					href="disaster_check.mhtml?event_id=<% $event->id %>"
				>
					Event Disaster Check
				</a>

<%perl>
				if ($tourn_settings->{'require_disaster_check'}
					&& (not defined $round_settings{"disaster_checked"})
					&& $round->published == 0
				) {
</%perl>
					<div class="full nodisaster centeralign redtext biggish semibold ltborder">
						<span class="ninetenths">
							Tournament policy requires a disaster check
							before publication of any schematics.
						</span>
					</div>

					<div class="full nospace hidden">

%				} else {
					<div class="full nospace">
%				}
					<div class="row flexrow">

						<span class="fivesixths flexrow nospace">
							<span class="third nowrap">
								Start time
							</span>

							<span class="twothirds nospace padrightmore">
								<& "/funclib/timepicker.mas",
									name => "start_time",
									time => $start,
									size => 12
								&>
							</span>
						</span>

						<span class="sixth rightalign padright nospace">
							<input
								type          = "submit"
								class         = "notfirst thin"
								value         = "Set"
								round_id      = "<% $round->id %>"
								property_name = "start_time"
								other_value   = "start_time"
								onClick       = "postSwitch(this, 'schemat_switch.mhtml');"
							>
						</span>
					</div>

%					if ($event_settings{"online_mode"} eq "async") {
						<div
							class="row marno full padless"
							title="To change this deadline, adjust the end time of the timeslot on the schedule"
						>
							<span class="twofifths semibold redtext padvert marless">
								Voting Deadline
							</span>
							<span class="threefifths semibold redtext rightalign">
								<& "/funclib/showdt.mas", dt => $end, day => "pls" &>
							</span>
						</div>
%					}

					<div class="row flexrow">

						<input
							type  = "hidden"
							name  = "round_id"
							value = "<% $round->id %>"
						>
<%perl>
						undef $warn;

						if ($missing_judges && $missing_rooms) {
							$warn = "This round has missing rooms AND judges.  Are you sure you want to publish it? ";
						} elsif ($missing_rooms) {
							$warn = "This round has missing rooms.  Are you sure you want to publish it? ";
						} elsif ($missing_judges) {
							$warn = "This round has missing judges.  Are you sure you want to publish it? ";
						}
</%perl>
						<span class="fivesixths flexrow nospace">
							<span class="third nospace">
								<a
									href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>"
									class="plain link-underline semibold bluetext nospace padvertless"
									target="_blank"
								>Publish</a>
							</span>

							<span class="twothirds nospace">
								<select
									name  = "published"
									id    = "published"
									class = "notfirst smallish fixedmost plain"
								>
									<option
										value="0"
										<% $round->published ? "" : "selected" %>
									>Not Public</option>

									<option
										value="1"
										<% $round->published == 1 ? "selected" : "" %>
									>Full Schematic</option>

									<option
										value="2"
										<% $round->published == 2 ? "selected" : "" %>
									>No Judges</option>

%									if ($round_type eq "elim" || $round_type eq "final") {
										<option
											value="3"
											<% $round->published
												? ""
												: $round_settings{'publish_entry_list'}
													? "selected"
													: ""
											%>
										>Entry List Only</option>
%									}

%									if ($event_type eq "congress" && $round_type eq "prelim") {
										<option
											value="5"
											<% $round->published
												? ""
												: $round_settings{'publish_prelim_chamber'}
													? "selected"
													: ""
											%>
										>Chamber Asmt to Entries</option>
%									}
								</select>
							</span>
						</span>

						<span class="sixth rightalign padright nospace">
							<input
								type          = "submit"
								value         = "Go"
								class         = "thin notfirst"
								round_id      = "<% $round->id %>"
								property_name = "published"
								other_value   = "published"
								onClick       = "postSwitch(this, 'schemat_switch.mhtml');"
							>
						</span>
					</div>

					<form
						action = "blast.mhtml"
						method = "post"
					>
						<input
							type  = "hidden"
							name  = "round_id"
							value = "<% $round->id %>"
						>

						<div class="row flexrow">
							<span class="fivesixths flexrow nospace">
								Blast Notifications
							</span>

							<span class="sixth rightalign nospace padright">
								<input
									type  = "submit"
									value = "Go"
									class = "thin notfirst"
								>
							</span>
						</div>

					</form>

					<div
						class="row flexrow"
						title="For more fine-grained results publish options, look under the blue Settings tab"
					>
<%perl>
						my $status;

						if ($round->post_primary == 3
							&& $round->post_secondary == 3
							&& $round->post_feedback == 2
						) {

							$status = 3;

						} elsif ($round->post_primary == 3
							&& $round->post_feedback == 2
							&& $round->post_secondary < 1
						) {

							$status = 2;

						} elsif ($round->post_primary == 3
							&& $round->post_feedback < 1
							&& $round->post_secondary < 1
						) {

							$status = 1;

						} elsif (
							$round->post_primary > 0
							|| $round->post_feedback > 0
							|| $round->post_secondary > 0
						) {
							$status = 4;
						} else {
							$status = 0;
						}

</%perl>
						<span class="fivesixths flexrow nospace">
							<span class="third">
								Results
							</span>

							<span class="twothirds nospace">
								<select
									name  = "post_results"
									id    = "post_results"
									class = "notfirst fixedmost smallish plain">

									<option
										value = "0"
										<% $status < 1 ? "" : "selected" %>
									>Nothing Visible</option>

									<option
										value="1"
										<% $status == 1 ? "selected" : "" %>
									><% $event_type ne "debate" && $event_type ne "mock_trial"
											? "Ranks "
											: "Win/Loss "
									%>Public </option>

									<option
										value="2"
										<% $status == 2 ? "selected" : "" %>
									><% $event_type ne "debate" && $event_type ne "mock_trial"
										? "Ranks"
										: "Win/Loss"
									%> &amp; Feedback </option>

									<option
										value="3"
										<% $status == 3 ? "selected" : "" %>
									>All Results Public</option>

									<option
										value="4"
										<% $status == 4 ? "selected" : "" %>
									>Other Configuration</option>
								</select>
							</span>
						</span>
<%perl>
						my $publish_warn;

						unless ($all_done) {
							$publish_warn = "You are publishing results before ballots are entered.  ";
							$publish_warn .= "This will mean people can see each ballot as it is entered by ";
							$publish_warn .= "judges or you. Click OK to confirm you are a little insane ";
							$publish_warn .= "and actually want to do this...";
						}
</%perl>
						<span class="sixth rightalign padright">
							<input
								type          = "submit"
								value         = "Go"
								class         = "thin notfirst"
								round_id      = "<% $round->id %>"
								property_name = "post_results"
								other_value   = "post_results"
%								if ($publish_warn) {
									onClick       = "postConfirm('<% $publish_warn %>', this, 'schemat_switch.mhtml');"
%								} else {
									onClick       = "postSwitch(this, 'schemat_switch.mhtml');"
%								}
							>
						</span>
					</div>
				</div>

				<h4>Display</h4>
<%perl>
				my %displays = (
					entrycodes  => { order => 1, label => "Entry Codes", default => "on"},
					entrynames  => { order => 2, label => "Entry Names"},
					judgenames  => { order => 4, label => "Judge Names", default => "on"},
				);

				my $order = 7;

				unless ($category_settings{"no_codes"}) {
					$displays{"judgecodes"} = { order => 3, label => "Judge Codes" };
				}

				if ($event_type eq "speech") {
					$displays{"speakerorder"} = { order => $order++, label => "Speaker Order", default => "off"};
				} elsif ($event_type eq "congress") {
					$displays{"speakerorder"} = { order => $order++, label => "Recency", default => "off"};
				}

				$displays{"schoolnames"} = { order => $order++, label => "School Names" };

				unless ($tourn_settings->{"nsda_nats"} || $tourn_settings->{'ncfl'}) {
					if ($tourn_settings->{"school_codes"} ne "none") {
						$displays{"schoolcodes"} = { order => $order++, label => "School Codes" };
					}
				}

				if ($tourn_settings->{"nsda_district"} && $event->abbr eq "HSE") {
					$displays{"blocs"} = { order => $order++, label => "House Blocs"};
				}

				if ($tourn_settings->{"nsda_nats"}) {
					$displays{"districtcodes"} = { order => $order++, label => "District Codes"};
					$displays{"districtnames"} = { order => $order++, label => "District Names"};
					$displays{"states"} = { order => $order++, label => "States"};

					if ($tourn_settings->{"district_regions"}) {
						$displays{"districtregions"} = { order => $order++, label => "District Regions"};
					}

				} elsif ($tourn_settings->{"ncfl"}) {
					$displays{"regioncodes"} = { order => $order++, label => "Dio Codes"};
					$displays{"regionnames"} = { order => $order++, label => "Dio Names"};
					if ($event_type eq "debate") {
						$displays{"areas"} = { order => $order++, label => "Dio Areas"};
					}
				} elsif ($tourn_settings->{"regions"}) {
					$displays{"regioncodes"} = { order => $order++, label => "Region Codes"};
					$displays{"regionnames"} = { order => $order++, label => "Region Names"};

					if ($tourn_settings->{region_areas}) {
						$displays{"areas"} = { order => $order++, label => "Areas"};
					}
				}

				if ($round_settings{"showrooms_from"}) {
					my $from_round = Tab::Round->retrieve($round_settings{"showrooms_from"});

					if ($from_round) {
						$displays{"showrooms_from"} = {
							order => $order++, label => $from_round->realname." Rooms"
						};
					} else {
						$round->setting("showrooms_from", 0);
					}
				}

				$displays{"anonymize"} = { order => $order++, label => "Anonymize"};

				if ($prefs || $tab_ratings || $coach_ratings) {
					$displays{"prefs"} = { order => $order++, label => "Prefs/Ratings", default => "on"};
				}

				if ($event_type eq "debate" || $event_type eq "mock_trial") {
					if ($round_type eq "elim") {
						$displays{"records"} = { order => $order++, label => "Records"};
					} else {
						$displays{"records"} = { order => $order++, label => "Records", default => "on"};
					}
					$displays{"decisions"} = { order => $order++, label => "Decisions", default => "on"};
				}


				if (
					$round_type eq "prelim" && (
						$event_settings{"pair_seeds"}
						|| $event_settings{"apda"}
						|| $event_settings{'seed_presets'}
					)
				) {

					$displays{"seeds"} = { order => $order++, label => "Seeds"};
				}
</%perl>

				<div class="full nospace flexrow wrap">

<%perl>
				foreach my $field (
					sort {$displays{$a}{"order"} <=> $displays{$b}{"order"}}
					keys %displays
				) {
</%perl>
					<span class="half hover padvertless marno ltborder flexrow">
						<label for="<% $field %>">
							<span
								class="
									fourfifths <% $field %>_label
									<% $displays{$field}{"default"} eq "on"
										? "semibold bluetext"
										: ""
									%>"
								>
								&nbsp;
								<% $displays{$field}{"label"} %>
							</span>

							<span class="fifth centeralign nospace padvertless">
								<input
									type     = "checkbox"
									id       = "<% $field %>"
									value    = "1"
									class    = "padvertless marno notfirst properties"
									onChange = "showProperty();"
									<% $displays{$field}{"default"} eq "on"
										? "checked"
										: ""
									%>
								>
							</span>
						</label>
					</span>
%				}

				</div>
			</div>

			<div class="sidenote">

%				if ($tourn_settings->{"backtab"}) {
					<a
						class  = "blue full"
						target = "_blank"
						href   = "/tabbing/entry/rapid.mhtml?round_id=<% $round->id %>"
					>
						Rapid Win/Loss Result Entry
					</a>
%				}

%				if ($event_settings{"online_mode"} ne "async") {
					<a
						class="blue full"
						target="_blank"
						href="/tabbing/status/status.mhtml?round_id=<% $round->id %>"
					>
						Online Room Access Dashboard
					</a>
%				}

%				if ($tourn_settings->{"online_rooms"}) {

					<h4>Online Utility Rooms</h4>
<%perl>
					my @utilities = eval {
						return @{$tourn_settings->{online_rooms}};
					};

					foreach my $utility (@utilities) {

						next unless $utility->{"access"} eq "tab";

						if ($utility->{"event_id"} && $utility->{"event_id"} ne $event) {
							next;
						}

						if ($utility->{"category_id"} && $utility->{"category_id"} ne $category) {
							next;
						}
</%perl>
						<div class="row rooms">
							<span class="threequarters">
								<span class="halfspacer"></span>
								<% $utility->{"name"} %>
							</span>

							<span class="quarter centeralign">
								<& "/funclib/online_room.mas",
									util   => $utility,
									person => $person,
									tourn  => $tourn,
									perms  => $perms,
									class  => "fa-sm"
								&>
							</span>
						</div>
%					}
%				}
			</div>

			<div class="sidenote">

%				if ($decision_deadline) {

					<h4>Decision Deadlines</h4>

%			        foreach my $flight (1 .. $num_flights) {

						<div
							class="ltbordertop ltborderbottom padvertless flexrow biggish semibold"
%							if ($round->type eq "final") {
								onClick = "theFinalCountdown();";
%							}
						>

%							if ($num_flights > 1) {
								<span class="sixth bluetext nospace padleft">
									Flt <% $flight %>
								</span>
%							}

							<span class="third nospace semibold code padleftless grow centeralign">
								<& "/funclib/showtime.mas",
									dt => $flight_deadline{$flight},
									tz => $tourn->tz
								&>
							</span>
<%perl>
							my $remaining;

							if ($flight_left{$flight}) {
								$remaining = $flight_left{$flight}->in_units('minutes');
							}

							$remaining = 0 unless $remaining;
</%perl>
							<span class="sixth bluetext nospace padleftless">
								Left
							</span>

							<span
								class="third rightalign nospace"
							>
								<& "/funclib/stopwatch.mas",
									label     => "deadline_flt".$flight,
									inline    => "true",
									autostart => "true",
									class     => "nospace bigger",
									default   => $remaining
								&>
								<span class="spacer"></span>
							</span>
						</div>
%					}
%				}

				<h4>Stats & Data</h4>

%				if ($event_type eq "wudc") {
					<a
						class = "blue full"
						href  = "/panel/manipulate/wudc_positions.mhtml?round_id=<% $round->id %>"
					>
						Check Team Positions
					</a>
%				}

<%perl>
				if ($round_type eq "prelim"
					&& (
						$event_settings{"pair_seeds"}
						|| $event_settings{"apda"}
						|| $event_settings{'seed_presets'}
					)
				) {
</%perl>
					<a
						class="blue full"
						href="/panel/report/preset_draw.mhtml?event_id=<% $event->id %>"
					>
						Preset Draw Report
					</a>
%				}

%				if ($event_type eq "wudc") {

					<div class="odd full">
						<span class="third full">
							Motion
						</span>

						<span class="twothird full">
							<% $round_settings{"motion"} ? "Entered" : "Not Entered" %>
						</span>
					</div>
%				}

				<div class="row nospace flexrow">
					<span class="fifth rightalign padless semibold">
						Paired
					</span>

					<span class="threetenths padless rightalign padright">
						<& "/funclib/showtime.mas",
							dt       => $round->paired_at,
							tz       => $tourn->tz,
							format   => "short",
						&>
					</span>
<%perl>

					Tab::Score->set_sql( last_altered => "
						select score.*
							from panel, ballot, score
						where panel.round = ?
							and panel.id = ballot.panel
							and ballot.id = score.ballot
							and score.tag in ('winloss', 'rank')
						order by score.timestamp DESC limit 1
					");

					my $last_bv = Tab::Score->search_last_altered($round)->first if $round;
					my $last_timestamp;

					if ($last_bv) {
						$last_timestamp = $last_bv->timestamp;
						$last_timestamp->set_time_zone("UTC");
						$last_timestamp->set_time_zone($tz);
					}

					my $count_sth = $dbh->prepare("
						select count(distinct panel.id),
							count(distinct(CONCAT(ballot.judge, panel.flight))),
							count(distinct ballot.entry)
						from panel, ballot
						where panel.round = ?
						and panel.id = ballot.panel
					");

					$count_sth->execute($round);

					my ($panel_count, $judge_count, $entry_count) = $count_sth->fetch();
</%perl>
					<span class="fifth rightalign padless semibold">
						Blasted
					</span>

					<span class="threetenths padless rightalign padrightless">
						<& "/funclib/showtime.mas",
							string => $round_settings{"blasted"},
							tz     => $tourn->tz,
							length => "day"
						&>
					</span>
				</div>

				<div class="row nospace flexrow">
					<span class="fifth rightalign semibold" title="First Ballot Entered">
						1st Bal
					</span>

					<span class="threetenths padless rightalign padright">
						<% $round_settings{"first_ballot"}
							?  &Tab::niceshortdayt($round_settings{"first_ballot"}->set_time_zone($tz))
							: "None Yet"
						%>
					</span>

					<span class="fifth rightalign padless semibold" title="Last Ballot Entered">
						Last Bal
					</span>

					<span class="threetenths padless rightalign padright">
						<% $last_timestamp
							? &Tab::niceshortdayt($last_timestamp)
							: "None Yet" %>
					</span>
				</div>

				<div class="row flexrow nospace">
					<span
						class = "fifth rightalign padless semibold"
						title = "Number of Sections, including any byes"
					>
						Entries
					</span>

					<span class="threetenths padless rightalign padright">
						<% $entry_count %>
					</span>

					<span class="fifth rightalign padless semibold" title="Number of Ballots">
						Judges
					</span>

					<span class="threetenths padless rightalign padright">
						<% $judge_count %>
					</span>
				</div>
<%perl>

				if ($rounds_per > 0 ) {

					my (
						$assigned_judges_past, $paired_panels_current, $assigned_judges_current,
						$needed_panels_current, $needed_judges_current, $paired_panels_future,
						$assigned_judges_future, $needed_panels_future, $needed_judges_future,
						$category_rds_left, $assigned_to_last, $unassigned_burned_already,
						$unassigned_one_plus_left, $unassigned_one_left, $total_in_category
					) = $m->comp(
						"/funclib/round_judgedata.mas",
						current_rd_id => $round->id
					);
</%perl>

%					if ($round_type ne "elim") {

						<h5>
							Current pairing
						</h5>

						<div class="row marno full padless marno">

							<span class="tenth rightalign">
								<% $assigned_judges_current %>
							</span>

							<span class="third">
								Judges In
							</span>

							<span class="tenth rightalign">
								<% $needed_judges_current %>
							</span>

							<span class="third">
								more needed
							</span>

						</div>

						<div class="row full padless marno">

							<span class="tenth rightalign">
								<% $assigned_to_last %>
							</span>

							<span class="fivesixth">
								In for last round
							</span>
						</div>

						<div class="row flexrow padless marno bluebordertop thinborder">
							<span class="seventh rightalign padrightless">
								<% $unassigned_burned_already %>
							</span>

							<span class="sixsevenths">
								unassigned with zero rounds left
							</span>
						</div>

						<div class="row padless marno flexrow flexgrow">
							<span class="third padleft grow">
								One round left:
							</span>
							<span class="twenty">
								<% $unassigned_one_left %>
							</span>

							<span class="third grow">
								More than one:
							</span>
							<span class="twenty">
								<% $unassigned_one_plus_left %>
							</span>
						</div>

						<h5>
							To Infinity and Beyond!
						</h5>

						<div class="row full padless marno nowrap">

							<span class="tenth rightalign">
								<% $needed_judges_future %>
							</span>

							<span class="fivesixths">
								Future rounds needing judges
							</span>
						</div>

						<div class="row full padless marno nowrap">

							<span class="tenth rightalign">
								<% $category_rds_left %>
							</span>

							<span class="fourfifths">
								Rounds of committment left
							</span>
						</div>

						<div class="row full padless marno">
							<span class="tenth rightalign">
								<% $total_in_category-$assigned_to_last-$unassigned_burned_already %>
							</span>
							<span class="fourfifths">
								Individual judges w/rounds left
							</span>
						</div>

%					}
%				}

%				if ($prefs) {

%					my %prefs_data = $m->comp("/funclib/round_pref_data.mas", round => $round);

					<div class="full semibold redtext biggish marno">
						All Debates
					</div>

					<div class="row full nospace">
						<span class="quarter biggish bluetext semibold">
							Prefs
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Avg
							</div>
							<div class="full nospace">
								<% $prefs_data{"average_pref"} %>
							</div>
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Best
							</div>
							<div class="full nospace">
								<% $prefs_data{"best_pref"} %>
							</div>
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Worst
							</div>
							<div class="full nospace">
								<% $prefs_data{"worst_pref"} %>
							</div>
						</span>

					</div>

					<div class="row full nospace">
						<span class="quarter biggish bluetext semibold">
							Mutual
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Avg
							</div>
							<div class="full nospace">
								<% $prefs_data{"average_mut"} %>
							</div>
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Best
							</div>
							<div class="full nospace">
								<% $prefs_data{"best_mut"} %>
							</div>
						</span>

						<span class="quarter centeralign nospace">
							<div class="full nospace semibold">
								Worst
							</div>
							<div class="full nospace">
								<% $prefs_data{"worst_mut"} %>
							</div>
						</span>
					</div>

<%perl>
					if ( $round_type ne "elim"
						&& $event_settings{"break_point"}
						&& $event_settings{"break_point"} < ($round->name)
					) {
</%perl>

						<div class="full semibold redtext biggish marno">
							Debates &lt; <% $event_settings{"break_point"} %> losses
						</div>

						<div class="row full nospace">
							<span class="quarter biggish bluetext semibold">
								Prefs
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Avg
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_average_pref"} %>
								</div>
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Best
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_best_pref"} %>
								</div>
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Worst
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_worst_pref"} %>
								</div>
							</span>

						</div>

						<div class="row full nospace">
							<span class="quarter biggish bluetext semibold">
								Mutual
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Avg
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_average_mut"} %>
								</div>
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Best
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_best_mut"} %>
								</div>
							</span>

							<span class="quarter centeralign nospace">
								<div class="full nospace semibold">
									Worst
								</div>
								<div class="full nospace">
									<% $prefs_data{"matters_worst_mut"} %>
								</div>
							</span>
						</div>

%					}
%				}

%				if ($prefs) {
					<a
						class = "blue full martop"
						href  = "/panel/report/pref_experience.mhtml?event_id=<% $event->id %>"
					>
						Entry Average Prefs Report
					</a>
%				}

			</div>

<%perl>
			if (
				($event_type eq "debate" || $event_type eq "mock_trial")
				&& $round_type ne "elim"
				&& $round_type ne "final"
				&& $round_type ne "runoff"
				&& (not defined $round_robin)
			) {
</%perl>
				<& "pascal.mas", round => $round &>
<%perl>

			}
		}
		my $name = $event->name;
		$name = "House" if $name eq "Congressional Debate: House";
		$name = "Senate" if $name eq "Congressional Debate: Senate";

</%perl>
%       if ($person->site_admin) {
			<div class="sidenote">
            <a
                href="check_usage.mhtml?round_id=<% $round %>"
                class="full yellow"
            >Check Campus/Tabroom License Status</a>
			</div>
%       }

	</div>

	<div class="main">
		<div class="flexrow flexkids padbottommore top">
			<span class="half nowrap">
				<h4 class="marno padno padbottomless"><% $name %></h4>
			</span>

			<span class="threetenths wrap flexrow">
				<h6 class="full semibold bluetext nospace padbottomless">
					<% $round->realname %>: <% &Tab::nicetime($start) %>
				</h6>

%				if ($prep_offset) {
					<p class="semibold graytext nospace full">
						Draw begins: <% &Tab::nicetime($prep_offset) %>
					</p>
%				}
			</span>

%			unless ($missing_judges) {
				<span class="marno fifth wrap flexrow">
%					foreach my $flight (@flights) {
						<span class = "semibold bigger <% scalar @flights > 2 ? "half" : "full" %> nowrap flexrow">
							<span class="third rightalign padright ">
								<% (scalar @flights) > 1
									? " F".$flight.": "
									: ""
								%>
							</span>
							<span class="twothirds leftalign"
								id    = "ballots_out_flight_<% $flight %>"
							><% $ballots_out{$flight}
								? $ballots_out{$flight}." out"
								: "DONE"
							%></span>
						</span>
%					}
				</span>
%			}
		</div>

<%perl>
			if (
				(not defined $event_settings{'online_ballots'})
				&& (not defined $tourn_settings->{'printed_ballots'})
				&& ($round->published == 1)
			) {
</%perl>
				<div class="centeralign full">
					<div class='warning borderorange ninetenths'>
						<p class="bigger">
							Your judges cannot see online ballots.
						</p>

						<p class="ninetenths">
							You have not enabled
							online ballots in the settings. To do so, check the Settings : Event screen for this event,
							and enable the setting the
								<a target="_blank" href="/setup/events/tabbing.mhtml?event_id=<% $event %>">Tabulation </a>
							tab on the lower left labeled "Online Ballots."
						</p>

						<p class="ninetenths">
							If you are using printed ballots, this message will
							disappear once you print some ballots.
						</p>

					</div>
				</div>
%			}

		<div class='hidden warning borderred' id='roundwarning'>
		</div>

		<& "round_tabs.mas",
			default        => $default,
			round          => $round,
			round_settings => \%round_settings,
			event          => $event,
		&>

		<script>

			const hideStatus = async () => {
				$(`#blastStatus`).addClass('hidden');
			};

			const checkBlastStatus = async () => {

				$.ajax({
					type        : 'GET',
					url         : '<% $blast_url %>',
					crossDomain : true,
					xhrFields   : {
						withCredentials: true
					},

				}).then( (rawStatus) => {

					if (rawStatus.length > 0) {

						const status = rawStatus.shift();

						let blastMessage = 'Round will be';

						if (status.tag === 'blast_publish') {
							blastMessage += ' both blasted &amp; published';
						} else if (status.tag === 'blast') {
							blastMessage += ' blasted only';
						} else if (status.tag === 'publish') {
							blastMessage += ' published only';
						}

						const activeAt = new Date(status.activeAt);
						const createdAt = new Date(status.createdAt);

						let dateOptions = { weekday: 'short', month: 'short', day: 'numeric' };
						let timeOptions = { hour: 'numeric', minute: 'numeric', timeZoneName: 'short' };

						blastMessage += ` on ${ activeAt.toLocaleDateString(false, dateOptions) }`;
						blastMessage += ` at ${ activeAt.toLocaleTimeString(false, timeOptions) }`;

						function htmlEntities(str) {
						    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
						};

						if (status.message) {
							blastMessage += ` <div class="padno padtopless full explain marbottom"> Message: ${htmlEntities(status.message)} </div>`;
						}

						if (status.last) {
							blastMessage += `<div class="padno full explain marbottom padtopless">
									Set by: ${status.first} ${status.last} <${status.email}>
									on ${ createdAt.toLocaleDateString(false, dateOptions) }
									at ${ createdAt.toLocaleTimeString(false, timeOptions) }
								</div>`;
						}

						$(`#blastMetaData`).html(blastMessage);
						$(`#blastCancelButton`).attr('aq_id', status.id);
						$(`#blastStatus`).removeClass('hidden');
					} else {
						$(`#blastStatus`).addClass('hidden');
					}
				});
			};
		</script>

		<div class="dkred row marbottom hidden rounded flexrow" id="blastStatus">

			<span class="twothirds martop padleftmore padtop" id="blastMetaData">
			</span>

			<span class="third rightalign padrightmore" id="blastCancel">
				<a
					class   = "buttonwhite orangetext hover invert semibold"
					id      = "blastCancelButton"
					aq_id   = ""
					destroy = "blastStatus"
					onClick = "postSwitch(this, 'blast_delete.mhtml', hideStatus);"
				>
					Cancel Scheduled Blast
				</a>
			</span>
		</div>

%		if ($round) {

%			unless ($round->protocol > 0) {

				<div class="dkred bigger centeralign padvert">
					<h4>Doom awaits you!</h4>
					<h4 class="padtopmore">No tiebreakers assigned!</h4>
				</div>

%				if ($tourn_settings->{"nsda_district"}) {

					<div class="bigger centeralign">

						<p class="bigger redtext">
							At Districts, tiebreakers are auto-selected.
							Please just go to the event schedule, remove the
							round, and save.  Then create it again, and you
							should be good to go.
						</p>

%				} else {

					<div class="bigger centeralign">

						<p class="bigger redtext semibold semibold">
							Tiebreakers are how Tabroom knows which scores
							(win/loss, points, ranks) to ask for.
						</p>

						<p class="bigger redtext semibold">
							Every round must have a tiebreaker set assigned, or
							else ballot entry, and tabbing, and printouts all
							will not work.
						</p>

						<p class="bigger redtext semibold">
							Go to Setup :: Schedule to set tiebreakers for
							every round.  Otherwise your ballots, both printed
							and online, will be blank.
						</p>
					</div>
<%perl>
				}
			}

			if ($round->published == 1 && ($now < $tourn_start)) {
</%perl>
				<div class="centeralign nospace padbottom">
					<h5 class="padtopmore bluetext semibold">Your tournament starts in the future</h5>
					<div class="biggish centeralign redtext semibold ninetenths">
						Your tournament is not scheduled to start until <&
							"/funclib/showdt.mas",
								dt     => $tourn_start,
								tz     => $tourn->tz,
								length => "longcasual",
								showtz => "yas"
						&>,
						but this round is already published.
					</div>
					<div class="biggish centeralign redtext semibold ninetenths">
						Judges cannot see online ballots and competitors cannot see their online rooms until
						the tournament begins. </p>

						<p>If this is in error, adjust your
							<a class="underline" href="/setup/tourn/dates.mhtml">Tournament Schedule here</a>
					</div>
				</div>
<%perl>
			}

		}

		my $count = scalar @tabs;
		$count += scalar (keys %links);

		unless ($count < 2) {
</%perl>
            <&
                "/funclib/tabs.mas",
                    tabs    => \@tabs,
                    links   => \%links,
                    default => $default,
					center  => "yes",
					buttons => "yes"
            &>
%		}

%		if ($preset) {

			<div
				id    = "pre-create"
				class = "pre-create screens hidden"
			>

%			if ($event_type eq "speech" || $event_type eq "congress") {

				<& "preset_edit.mas",
					person            => $person,
					round             => $round,
					tourn             => $tourn,
					tourn_settings    => $tourn_settings,
					event             => $event,
					event_settings    => \%event_settings,
					category          => $category,
					category_settings => \%category_settings
				&>
%			}

			</div>
%		}

<%perl>

		if (
			($event_type eq "debate" || $event_type eq "wsdc" || $event_type eq "mock_trial")
			&& ($round_type eq "elim"
				|| $round_type eq "final"
				|| $event_settings{"no_side_constraints"}
			)
		) {

			my $round_settings = $round->all_settings();
</%perl>

			<div
				class = "actions screens hidden"
				id    = "actions"
			>
				<& "schemat_actions.mas",
					dbh            => $dbh,
					person         => $person,
					tourn          => $tourn,
					tourn_settings => $tourn_settings,
					event          => $event,
					event_settings => \%event_settings,
					round          => $round,
					round_settings => \%round_settings
				&>
			</div>
%		}

%		if ($round) {

			<div
				class = "reports screens hidden"
				id    = "reports"
			>

				<& "schemat_reports.mas",
					dbh            => $dbh,
					person          => $person,
					person_settings => $person_settings,
					tourn           => $tourn,
					tourn_settings  => $tourn_settings,
					event           => $event,
					event_settings  => \%event_settings,
					round           => $round
				&>

			</div>

			<div
				class = "results screens hidden"
				id    = "results"
			>

%	 			if ( $event_type eq "mock_trial" ) {
					<& 'mt_results.mas',
						dbh            => $dbh,
						round          => $round,
						event          => $event,
						tourn          => $tourn,
						event_settings => \%event_settings,
						tourn_settings => $tourn_settings
					&>
%				} elsif ( $event_type eq "debate" ) {
					<& 'debate_results.mas',
						dbh            => $dbh,
						round          => $round,
						event          => $event,
						tourn          => $tourn,
						event_settings => \%event_settings,
						tourn_settings => $tourn_settings
					&>
%				} elsif ( $event_type eq "speech" || $event_type eq "congress") {
					<& speech_results.mas,
						dbh            => $dbh,
						round          => $round,
						event          => $event,
						tourn          => $tourn,
						event_settings => \%event_settings,
						tourn_settings => $tourn_settings
					&>
%				} elsif ( $event_type eq "wudc" ) {
					<& wudc_results.mas,
						dbh   => $dbh,
						round => $round
					&>
%				}

			</div>

			<div
				class = "schematic screens"
				id    = "schematic"
			>

%	 			if ( $event_type eq "speech" ) {

					<& show_speech.mas,
						checker           => $checker,
						round             => $round,
						dbh            => $dbh,
						round_settings    => \%round_settings,
						tourn             => $tourn,
						tourn_settings    => $tourn_settings,
						event             => $event,
						event_settings    => \%event_settings,
						category          => $category,
						category_settings => \%category_settings,
						show              => $show,
						admin             => $person->site_admin,
						entered           => $entered,
						person            => $person
					&>

%				} elsif ( $event_type eq "congress" ) {

					<&
						"show_congress.mas",
						dbh            => $dbh,
						checker           => $checker,
						round             => $round,
						round_settings    => \%round_settings,
						tourn             => $tourn,
						tourn_settings    => $tourn_settings,
						event             => $event,
						event_settings    => \%event_settings,
						category          => $category,
						category_settings => \%category_settings,
						show              => $show,
						person            => $person,
						tourn_settings    => $tourn_settings
					&>

%				} elsif ( $event_type eq "wudc" ) {

					<&
						"show_wudc.mas",
						dbh     => $dbh,
						checker => $checker,
						round   => $round,
						show    => $show,
						person  => $person
					&>

%				} elsif ( $event_type eq "debate" || $event_type eq "mock_trial") {

%					my $nowarn++ if $tourn_settings->{"nsda_district"};
%					$nowarn++ if $round_settings{"no_warnings"};

					<&
						"show_debate.mas",
							dbh               => $dbh,
							round             => $round,
							round_settings    => \%round_settings,
							tourn             => $tourn,
							tourn_settings    => $tourn_settings,
							event             => $event,
							event_settings    => \%event_settings,
							category          => $category,
							category_settings => \%category_settings,
							entered           => $entered,
							person            => $person,
							nowarn            => $nowarn
						&>

						<div class="semibold italic padtop rightalign nospace">
							<span class="threequarters rightalign">
								Ballot Count
							</span>
							<span id="debateResults" class="quarter nospace rightalign">
							</span>
						</div>

%				} else {

					<p class='warning'>
						You have not chosen an event type.
					</p>

					<p>
						Tabroom does not know how to show you this
						pairing/schematic because that depends on what type of
						event it is (debate, speech, etc).
					</p>

					<p>
						You have confused Tabroom.  Tabroom is lost, and scared.
						Please help it out.  Or it'll totally screw up your
						tournament and not even mean to.
					</p>

					<p>
						You can change the event type from the
							<a
								href="/setup/events/edit.mhtml?event_id=<% $event->id %>"
							>Event Settings</a>
					</p>
%				}
			</div>
%		}

		<div
			id    = "settings"
			class = "screens hidden"
		>
			<& "settings_edit.mas",
				dbh             => $dbh,
				person          => $person,
				person_settings => $person_settings,
				tourn           => $tourn,
				tourn_settings  => $tourn_settings,
				round           => $round,
				event           => $event,
				event_settings  => \%event_settings
			&>
		</div>

	</div>

