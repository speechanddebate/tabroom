<%args>
	$dbh
	$now
	$tourn
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
	$flight         => 1
	$round          => undef
	$panel_id       => undef
	$round_id       => undef
	$person         => undef
	$perms          => undef
</%args>
<%init>

	use List::Util 'shuffle';

    $m->clear_buffer();
    $r->content_type('application/json');

	my $limit;
	my @panels;
	my $event;
	my %event_settings;
	my $only;
	my $panel;

	my %response = ();

	if ($person && $tourn) {

		if ($panel_id) {
			$panel = Tab::Panel->retrieve($panel_id);
			$round = $panel->round;
		} elsif ($round_id) {
			$round = Tab::Round->retrieve($round_id);
		}

		$event = $round->event;
		$tourn = $event->tourn;

		my $ok = $m->comp("/funclib/perms/check.mas",
			dbh      => $dbh,
			tourn    => $tourn,
			person   => $person,
			perms    => $perms,
			round_id => $round->id
		);

		unless ($ok) {
			$m->comp("/funclib/abort.mas",
				message => "You do not have access to that function of this tournament"
			);
		}

	} elsif ($round && $tourn) {

		$event = $round->event;
		$round_id = $round->id;

		# Autoqueue engage; ordinary POSTS cannot send a viable round object on this path.
		unless ($event->tourn == $tourn) {
			return;
		}

	} else {

		$m->comp("/funclib/abort.mas",
			message => "You do not have access to that function of this tournament"
		);
	}

	my $tz = $tourn->tz;

	if ($property_name eq "reset_flips") {

		unless ($round) {
			$round = Tab::Round->retrieve($round_id);
		}

		$event = $round->event;

		my $delete_sth = $dbh->prepare("
			delete panel_setting.*
				from panel_setting, panel
			where panel_setting.tag like 'flip%'
				and panel_setting.panel = panel.id
				and panel.round = ?
		");

		$delete_sth->execute(int($round_id));
		$delete_sth->finish();

		$delete_sth = $dbh->prepare("
			delete round_setting.*
				from round_setting, round
			where round_setting.tag like 'flip%'
				and round_setting.round = round.id
				and round.id = ?
		");

		$delete_sth->execute(int($round_id));
		$delete_sth->finish();

		$response{"error"}   = "false";
		$response{"message"} = "All flips reset and deleted";

	} elsif (index($property_name, "cancel_aq") != -1) {

		$round = Tab::Round->retrieve($round_id);
		$event = $round->event;
		my @setvalues;

		if ($property_name eq "cancel_aq_all") {

			my $sth = $dbh->prepare("
				delete from autoqueue where tag like 'flip%' and round = ?
			");

			$sth->execute($round_id);
			$sth->finish();
			$response{"message"} = "All ";

			push @setvalues, ({ id => "autoqueue_all", content => "" });

			foreach my $flight (1 .. $round->flighted) {
				push @setvalues, ({ id => "autoqueue_".$flight, content => "" });
			}

		} else {

			my $round = Tab::Round->retrieve($round_id);

			foreach my $flight (1 .. $round->flighted) {

				if ($property_name eq "cancel_aq_".$flight) {

					foreach my $aq (Tab::Autoqueue->search(
						round => $round->id,
						tag   => "flip_".$flight
					)) {
						$aq->delete();
					}

					$response{"message"} = "Flight ".$flight;
					push @setvalues, ({ id => "autoqueue_".$flight, content => "" });
				}
			}
		}

		$response{"error"}   = "false";
		$response{"message"} .= " automatic flips canceled for round ".$round->name;

		if (scalar @setvalues) {
			$response{"setvalue"} = \@setvalues;
		}

	} elsif (index($property_name, "autoqueue") != -1) {

		$round = Tab::Round->retrieve($round_id);
		$event = $round->event;

		my $start_dt;

		if ($round->start_time) {
			$start_dt = $round->start_time->set_time_zone("UTC");
		} else {
			$start_dt = $round->timeslot->start->set_time_zone("UTC");
		}

		$start_dt->set_time_zone($tourn->tz);

		my $dt = eval {
			my $dtme = Tab::dtme($start_dt->mdy('/'), $property_value, $tz);
			$dtme->set_time_zone("UTC");
			return $dtme;
		};

		my @setvalues;

		if ( (not defined $person->site_admin) && $dt && $dt <= $now) {

			$response{"error"} = "true";
			$response{"message"} = "You may not schedule an auto-flip for the past. <br />";
			$response{"message"} .= " ( ";
			$response{"message"} .= $m->comp("/funclib/showdt.mas",
										dt     => $dt,
										tz     => $tourn->tz,
										tzname => 1,
										return => 1);
			$response{"message"} .= " )";

			if ($property_name eq "autoqueue_all") {

				push @setvalues, ({ id => "autoqueue_all", content => "" });

			} else {

				foreach my $flight (1 .. $round->flighted) {
					push @setvalues, ({ id => "autoqueue_".$flight, content => "" });
				}
			}

		} elsif ($dt) {

			if ($property_name eq "autoqueue_all") {

				my $sth = $dbh->prepare("
					delete from autoqueue where tag like 'flip%' and round = ?
				");

				$sth->execute($round_id);
				$sth->finish();

				Tab::Autoqueue->create({
					round     => $round_id,
					tag       => "flip",
					active_at => $dt
				});

				Tab::ChangeLog->create({
					tag         => "autoqueue",
					tourn       => $tourn,
					event       => $event,
					description => "Autoqueue set flip to kick off at $dt for round $round",
					person      => $person
				});

				$response{"message"} = "All ";

				foreach my $flight (1 .. $round->flighted) {
					push @setvalues, ({ id => "autoqueue_".$flight, content => "" });
				}

			} else {

				foreach my $flight (1 .. $round->flighted) {

					if ($property_name eq "autoqueue_".$flight) {

						my $sth = $dbh->prepare("
							delete from autoqueue where tag = 'flip_".$flight."' and round = ?
						");

						$sth->execute($round_id);
						$sth = $dbh->prepare("
							delete from autoqueue where tag = 'flip' and round = ?
						");

						$sth->execute($round_id);
						$sth->finish();

						Tab::Autoqueue->create({
							round     => $round_id,
							tag       => "flip_".$flight,
							active_at => $dt
						});

						Tab::ChangeLog->create({
							tag         => "autoqueue",
							tourn       => $tourn,
							event       => $event,
							description => "Autoqueue set flip to kick off at $dt for round $round",
							person      => $person
						});

						$response{"message"} = "Flight ".$flight;
						push @setvalues, ({ id => "autoqueue_all", content => "" });
					}
				}
			}
		}

		$dt->set_time_zone($tz);

		if ($response{"error"} eq "true") {

			if (scalar @setvalues) {
				$response{"errSetValue"} = \@setvalues;
			}

		} else {
			$response{"error"}   = "false";
			$response{"message"} .= "Round ".$round->name." automatic flips set for ".$dt->day_name." ".$dt->hms(':');

			if (scalar @setvalues) {
				$response{"setvalue"} = \@setvalues;
			}
		}

	} elsif ($property_name eq "panel") {

		$panel = Tab::Panel->retrieve($panel_id);

		unless ($panel) {

			if ($ARGS{"auto"}) {
				return "No section found for ID $panel_id";
			}

			$response{"error"}   = "true";
			$response{"message"} = "No section found for ID '.$panel_id.'";

		} else {

			if ($panel->bye) {

				if ($ARGS{"auto"}) {
					return "Section $panel_id is a bye round. No flip done";
				}

				$response{"error"}   = "true";
				$response{"message"} = "There is no point in flipping a bye round";
			}

			push @panels, $panel;
			$limit = " and panel.id = ".$panel->id;

			$round = $panel->round;
			$event = $round->event;
			%event_settings = $event->all_settings();
			$only  = $panel->id;

		}

	} elsif ($property_name eq "round") {

		$round = Tab::Round->retrieve(int($round_id));

		unless ($round) {

			if ($ARGS{"auto"}) {
				return "No round found for ID $round_id";
			}

			$response{"error"}   = "true";
			$response{"message"} = "No round found for ID '.$round_id.'";

		} else {

			$event = $round->event();
			%event_settings = $event->all_settings();
			$limit = " and panel.round = ".$round->id;

			if ($event_settings{"flip_split_flights"} && int($flight) > 0) {
				push @panels, $round->panels(bye => 0, flight => int($flight));
				$limit .= " and panel.flight = ".int($flight);
			} else {
				push @panels, $round->panels(bye => 0);
			}
		}
	}

	my %do_me;

	unless ($response{"message"} ) {

		unless ($event_settings{"no_side_constraints"}) {
			foreach my $panel (@panels) {
				if ($m->comp("/funclib/round_elim_dueaff.mas", panel => $panel)) {
					next;
				}
				$do_me{$panel->id}++;
			}
		} elsif (@panels) {
			%do_me = map {$_ => 1} @panels;
		}

		unless (@panels) {
			if ($ARGS{"auto"}) {
				return "No sections found in that round to flip";
			}

			$response{"error"}   = "true";
			$response{"message"} = "No sections found in that round to flip";
		}

		unless ($event_settings{"flip_online"}) {
			if ($ARGS{"auto"}) {
				return "This event is not set to enable online flips";
			}

			$response{"error"}   = "true";
			$response{"message"} = "This event is not set to enable online flips";
		}
	}

	my $deadline;

	if ($round && (not defined $response{"message"})) {

		my $add_mins = $event_settings{"flip_deadline"};

		$deadline = $now->clone();

		unless ($deadline->second == 0) {
			$deadline->set( second => 0 );
			$deadline->add( minutes => 1);
		}

		$add_mins = 5 unless $add_mins > 0;
		$deadline->add( minutes => $add_mins );

		if ($setting_name eq "flip_published" || $setting_name eq "doall") {

			if ($setting_name eq "doall") {
				$property_value = 1;
			}

			$round->setting("flip_published", $property_value);

			if ($setting_name eq "flip_published") {

				if ($property_value) {

					if ($ARGS{"auto"}) {
						return "Flip choices are set to published";
					}

					$response{"error"}   = "false";
					$response{"message"} = "Flip choices published";

				} else {

					if ($ARGS{"auto"}) {
						return "Flip choices unpublished";
					}

					$response{"error"}   = "false";
					$response{"message"} = "Flip choices unpublished";

				}
			}
		}

		if ($setting_name eq "doall") {

			my $flight_offset;

			if ($event_settings{"flip_split_flights"}) {
				$flight_offset = $event_settings{"flight_offset"};
			}

			my $delete_sth = $dbh->prepare("delete from panel_setting where panel = ? and tag = 'flip_at'");
			my $create_sth = $dbh->prepare("insert into panel_setting (panel, tag, value, value_date) values (?, 'flip_at', 'date', ?)");

			my %flight_cache;

			foreach my $panel (@panels) {

				next unless $do_me{$panel->id};

				unless ($flight_cache{$panel->flight}) {

					my $new_dt = $deadline->clone();
					$new_dt->add( minutes => ($flight_offset * ($panel->flight - 1)));

					my $two_string = DateTime::Format::MySQL->format_datetime($new_dt);
					$flight_cache{$panel->flight} = $two_string;
				}

				my $string = $flight_cache{$panel->flight};
				$delete_sth->execute($panel->id);
				$create_sth->execute($panel->id, $string);
				$delete_sth->finish();
				$create_sth->finish();
			}

			$round->setting(
				"flip_round_deadline",
				"date",
				DateTime::Format::MySQL->format_datetime($deadline));

			if ($setting_name eq "deadline_only") {

				$response{"error"}   = "false";
				$response{"message"} = "Flip deadline now ".$property_value." for all rounds";

				if ($flight_offset) {
					$response{"message"} = "Flip deadline now ".$property_value." for F1 and $flight_offset min later for F2";
				}
			}

		} elsif ($setting_name eq "deadline_only") {

			my $start_dt;

			if ($round->start_time) {
				$start_dt = $round->start_time->set_time_zone("UTC");
			} else {
				$start_dt = $round->timeslot->start->set_time_zone("UTC");
			}

			$start_dt->set_time_zone($tourn->tz);

			my $dt = eval {
				my $dtme = Tab::dtme($start_dt->mdy('/'), $property_value, $tourn->tz);
				$dtme->set_time_zone("UTC");
				return $dtme;
			};

			if ($dt && $dt <= $now) {

				$response{"error"} = "true";
				$response{"message"} = "You may not set the deadline for the past. <br />";
				$response{"message"} .= " ( ";
				$response{"message"} .= $m->comp("/funclib/showdt.mas",
											dt     => $dt,
											tz     => $tourn->tz,
											tzname => 1,
											return => 1
										);
				$response{"message"} .= " )";

				if ($ARGS{"auto"}) {
					return $response{"message"};
				}

				my @setvalues;
				push @setvalues, ({ id => "flip_at", content => "" });
				$response{"errSetValue"} = \@setvalues;

			} elsif ($dt) {

				my $flight_offset;

				if ($event_settings{"flip_split_flights"}) {
					$flight_offset = $event_settings{"flight_offset"};
				}

				my $delete_sth = $dbh->prepare("delete from panel_setting where panel = ? and tag = 'flip_at'");
				my $create_sth = $dbh->prepare("insert into panel_setting (panel, tag, value, value_date) values (?, 'flip_at', 'date', ?)");
				my %flight_cache;

				foreach my $panel (@panels) {

					next unless $do_me{$panel->id};

					unless ($flight_cache{$panel->flight}) {

						my $new_dt = $dt->clone();
						$new_dt->add( minutes => ($flight_offset * ($panel->flight - 1)));

						my $two_string = DateTime::Format::MySQL->format_datetime($new_dt);
						$flight_cache{$panel->flight} = $two_string;
					}

					my $string = $flight_cache{$panel->flight};

					$delete_sth->execute($panel->id);
					$create_sth->execute($panel->id, $string);
				}

				$delete_sth->finish();
				$create_sth->finish();

				$round->setting("flip_round_deadline", "date", DateTime::Format::MySQL->format_datetime($dt));

				if ($setting_name eq "deadline_only") {
					$response{"error"}   = "false";
					$response{"message"} = "Flip deadline now ".$property_value." for all rounds";

					if ($flight_offset) {
						$response{"message"} = "Flip deadline now ".$property_value." for F1 and $flight_offset min later for F2";
					}
				}

			} else {

				$response{"error"}   = "true";
				$response{"message"} = "Invalid deadline time sent.  Please try again";

				if ($ARGS{"auto"}) {
					return $response{"message"};
				}
			}

		}
	}

	if (not defined $response{"message"}) {

		unless ($setting_name eq "blast_only") {

			my $find_sth = $dbh->prepare("
				select panel.id, aff.entry, neg.entry
				from panel
					left join ballot aff on aff.panel = panel.id and aff.side = 1
					left join ballot neg on neg.panel = panel.id and neg.side = 2
				where panel.id = panel.id
					and panel.bye != 1
					$limit

					and not exists ( select ps.id
						from panel_setting ps
						where ps.panel = panel.id
						and ps.tag like 'flip_winner%'
					)
					group by panel.id
			");

			$find_sth->execute();

			my $delete_sth = $dbh->prepare("
				delete
					from panel_setting
				where panel_setting.tag like 'flip%'
					and panel_setting.panel = ?
			");

			while (
				my (
					$panel_id, $aff_id, $neg_id
				) = $find_sth->fetchrow_array()
			) {

				next unless $do_me{$panel_id};

				my @sides = shuffle ($aff_id, $neg_id);
				my $winner = shift @sides;

				$delete_sth->execute($panel_id);
				$delete_sth->finish();

				if ($winner) {
					Tab::PanelSetting->create({
						panel  => $panel_id,
						tag    => "flip_winner",
						value  => $winner
					});

					Tab::PanelSetting->create({
						panel      => $panel_id,
						tag        => "flip_at",
						value      => "date",
						value_date => DateTime::Format::MySQL->format_datetime($deadline)
					});

					Tab::PanelSetting->create({
						panel => $panel_id,
						tag   => "flip_status",
						value => "winner"
					});

				}

				delete $do_me{$panel_id};
			}

			$find_sth->finish();

			$round->setting("flipped_at", "date", $now);
			$round->setting("flip_round_deadline", "date", $deadline);

			$response{"error"} = "false";
			$response{"message"} .= "Flips performed for ".$round->realname." of ".$event->abbr;

			if ($setting_name eq "doall"
				&& (not defined $flight)
				&& (not defined $ARGS{"auto"})
			) {

				if ($event_settings{"flip_split_flights"}) {

					my $flight_offset = $event_settings{"flight_offset"};

					if ($flight_offset) {

						$now->add(minutes => $flight_offset);

						my $aq = Tab::Autoqueue->create({
							tag       => "flip_2",
							round     => $round,
							active_at => $now
						});

						Tab::ChangeLog->create({
							tag         => "autoqueue",
							round       => $round_id,
							tourn       => $tourn,
							event       => $round->event,
							description => "Autoqueue set flip to kick off at $now",
							person      => $person
						});
					}
				}
			}
		}

		unless ($setting_name eq "flip_only") {

			if ($response{"message"}) {
				$response{"message"} .= ", published and blasted.";
			} elsif ($round) {
				$response{"message"} .= "Flip status for ".$round->realname." blasted ";
			} else {
				$response{"message"} .= "Flip status for this debate blasted";
			}

			if ($property_name eq "panel") {

				$m->comp("/funclib/blast_flips.mas",
					panel  => $panel,
					person => $person
				);

				$panel->setting("flip_blasted", "date", $now);

			} elsif ($property_name eq "round" || $setting_name eq "doall") {

				$m->comp("/funclib/blast_flips.mas",
					round  => $round,
					flight => $flight,
					person => $person
				);

				$round->setting("flip_blasted", "date", $now);
			}

			$response{"error"}   = "false";
			$response{"reply"} = $m->comp("/funclib/showdt.mas",
				string => $now,
				tz     => $tz,
				return => 'yasplz'
			);
		}
	}

	if ($flight) {
		$response{"message"} .= " flight $flight";
	}

	if ($ARGS{"auto"}) {

		$response{"message"} .= " by automatic process ";

		$m->comp("/funclib/log.mas",
			type        => 'tabbing',
			event       => $event->id,
			round       => $round,
			panel       => $panel,
			tourn       => $event->tourn->id,
			description => $response{"message"}
		);

		return $response{"message"};
	}

	$m->comp("/funclib/log.mas",
        type        => 'tabbing',
        event       => $event->id,
        tourn       => $event->tourn->id,
		round       => $round,
		panel       => $panel,
        person      => $person,
        description => $response{"message"}
    );

    $m->print(JSON::encode_json(\%response));
    $m->abort();

</%init>
