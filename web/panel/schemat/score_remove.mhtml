<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$judge_id       => undef
	$section_id     => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($judge_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($section_id) {
		$m->print('{ "error": true, "message": "No section ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$judge_id.'"}');
		$m->abort();
	}

	my $section = Tab::Panel->retrieve($section_id);

	unless ($section) {
		$m->print('{ "error": true, "message": "No section found for ID '.$section_id.'"}');
		$m->abort();
	}

	my $fine++ if $setting_name;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my $round = $section->round;
	my $event = $round->event;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		delete score.*
			from score, ballot
		where ballot.panel = ?
			and ballot.judge = ?
			and ballot.id = score.ballot
			and score.tag NOT IN ('rfd', 'comments', 'rubric')
	");

	$sth->execute($section->id, $judge->id);

	foreach my $ballot ($section->ballots( judge => $judge)) {
		$ballot->audit(1);
		$ballot->update();
	}

	my $description = "Removed scores from judge ".$judge->first." ".$judge->last." (";
	$description .= $judge->school->short_name if $judge->school;
	$description .= "Hired" unless $judge->school;
	$description .= ") from ".$event->name." panel ".$section->letter." round ".$round->realname;

	$m->comp("/funclib/log.mas",
		tourn       => $tourn->id,
		type        => "judge",
		judge       => $judge,
		fine        => $fine,
		description => $description,
		old_panel   => $section->id,
		event       => $event->id,
		person      => $person->id
	);

	my $msg = "Judge ".$judge->first." ".$judge->last." scores have been removed from this panel";

    my %response = (
		error   => 0,
		message => $msg
    );

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
