<%args>
	$dbh
	$now
	$person
	$tourn
	$tourn_settings => undef
	$round_id       => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => 0
	$other_value    => 0
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	my $publish_sth = $dbh->prepare("update round set published = ? where id = ?");

	unless ($round_id) {
		$m->print('{ "error": true, "message": "No round ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->print('{ "error": true, "message": "No round found for ID '.$round_id.'"}');
		$m->abort();
	}

	my $message;
	my $refresh;

	if ($setting_name eq "num_judges" && $property_value == 1) {
		$property_value = 0;
	}

	if ($setting_name) {

		if ($setting_name eq "motion" || $setting_name eq "notes" || $setting_name eq "override_link") {
			$round->setting($setting_name, "text", $property_value);
			$message = "Setting $setting_name changed to $property_value";

		} else {
			$round->setting($setting_name, $property_value);
			$message = "Setting $setting_name changed to $property_value";
		}

		unless ($property_value) {
			$message = "Setting $setting_name disabled; default behavior enabled";
		}

	} elsif ($property_name eq "published") {

		$round->setting("publish_prelim_chamber", 0);
		$round->setting("publish_entry_list_no_byes", 0);
		$round->setting("publish_entry_list", 0);

		if ($other_value == 5) {

			$round->setting("publish_prelim_chamber", 1);
			$message = "Prelim chamber assignment listed for students";
			$publish_sth->execute(0, $round);

		} elsif ($other_value == 4) {

			$round->setting("publish_entry_list_no_byes", 1);
			$message = "List of clearing entries has been published without showing byes";
			$publish_sth->execute(0, $round);

		} elsif ($other_value == 3) {

			$round->setting("publish_entry_list", 1);
			$message = "List of clearing entries has been published";
			$publish_sth->execute(0, $round);

		} else {

			$property_name = 0 unless $property_name;

			if ($other_value > 0) {
				$message = "Schematic has been published";
			} else {
				$message = "Schematic has been unpublished";
			}

			if ($other_value == 2) {
				$message .= " without judges";
			}
			$publish_sth->execute($other_value, $round);
		}

		if ($other_value > 0) {
			$m->comp('/funclib/docshare_rooms.mas', round => $round);
			my $return = eval {
				$m->comp('/funclib/docshare_rooms.mas', round => $round);
			};

			$m->comp('/funclib/cache_invalidate.mas', round => $round);
		}

		if ($other_value == 1) {

			my ($error, $garbage) = $m->comp("/funclib/online_usage.mas",
				tourn          => $tourn,
				round          => $round,
				return         => 1,
				env            => \%ENV,
				district       => $tourn_settings->{"nsda_district"}
			);

			unless ($error eq "1" || not defined $error) {

				my %response = (
					error   => 1,
					message => $error
				);

				$publish_sth->execute(0, $round);

				$m->print(JSON::encode_json(\%response));
				$m->abort();

			} else {
				undef $error;
			}

			if ($now < $tourn->start) {

				my $start = $tourn->start;
				$start->set_time_zone($tourn->tz);
				$now->set_time_zone($tourn->tz);

				$error = "Your tournament is set to start under Settings -> Tournament -> the Dates tab in the future! <br /><br />";
				$error .= " Competitors and judges will not be able to see online ballots or rooms until ".Tab::nicedt($tourn->start)." <br /><br />";
				$error .= " Adjust your tournament start time if this is in error!";
			}

			if ($now > $tourn->end) {
				my $end = $tourn->end;
				$end->set_time_zone($tourn->tz);
				$now->set_time_zone($tourn->tz);

				$error = "Your tournament is set to end under Settings -> Tournament -> the Dates tab in the past! <br /><br />";
				$error .= " Competitors and judges will not be able to see online ballots or rooms after ".Tab::nicedt($tourn->end)." <br /><br />";
				$error .= " Adjust your tournament end time if this is in error!";
			}

			$message .= ". ".$m->comp('/funclib/publish_flips.mas', round => $round);

			$m->comp("/funclib/auto_backups.mas",
				subject => "Published",
				person  => $person,
				round   => $round
			);

			$m->comp("/funclib/log.mas",
				person      => $person,
				type        => "tabbing",
				tourn       => $tourn->id,
				round       => $round,
				event       => $round->event->id,
				description => "Round ".$round->name." ".$message
			);

			if ($error) {
				my %response = (
					error   => 1,
					message => $error
				);

				$m->print(JSON::encode_json(\%response));
				$m->abort();
			}
		}

	} elsif ($property_name eq "start_date") {

		my $tz = $tourn->tz;
		my $original = $round->start_time();
		$original->set_time_zone("UTC");
		$original->set_time_zone($tz);

		my $start_dt = eval {
			return Tab::dtme($property_value, $tz);
		};

		unless ($start_dt) {
			$start_dt = $round->timeslot->start;
		}

		$start_dt->set(hour => $original->hour);
		$start_dt->set(minute => $original->minute);
		$start_dt->set(second => $original->second);
		$round->start_time($start_dt);
		$round->update();
		$message = "Round start date changed to ".$property_value;

	} elsif ($property_name eq "start_time") {

		my $timeslot = $round->timeslot;
		my $start_date = $timeslot->start;
		my $tz = $tourn->tz;

		if ($start_date) {
			$start_date->set_time_zone("UTC");
			$start_date->set_time_zone($tz);
		}

		my $start_dt;

		if ($other_value) {
			$start_dt = eval {
				return Tab::dtme( $start_date->mdy('/'), $other_value, $tz);
			};
		} elsif ($property_value) {
			$start_dt = eval {
				return Tab::dtme( $start_date->mdy('/'), $property_value, $tz);
			};
		}

		my $datestring;

		if ($start_dt) {
			$round->start_time($start_dt);
			$datestring = $m->comp("/funclib/showtime.mas", dt => $start_dt, return => 1);
		} elsif ($start_date) {
			$round->start_time($start_date);
			$datestring = $m->comp("/funclib/showtime.mas", dt => $start_date, return => 1);
		}

		$round->update();
		$message = "Round start changed to ".$datestring;

	} elsif ($property_name eq "post_results") {

		if ($other_value == 4) {

		} elsif ($other_value == 3) {

			$round->post_feedback(2);
			$round->post_secondary(3);
			$round->post_primary(3);

			$message = "All results for this round have been published.";

		} elsif ($other_value == 2) {

			$round->post_feedback(2);
			$round->post_secondary(0);
			$round->post_primary(3);

			$message = "Primary results are published, and entrants can see feedback.";

		} elsif ($other_value == 1) {

			$round->post_feedback(0);
			$round->post_secondary(0);
			$round->post_primary(3);

			$message = "Primary results are published.";

		} elsif ($other_value < 1) {

			$round->post_primary(0);
			$round->post_feedback(0);
			$round->post_secondary(0);

			$message = "No results are visible.  PV $property_value";
		}

		eval {
			$round->update();
		};

	} elsif ($property_name) {

		$property_name =~ s/[\W_]//g;
		$property_value =~ s/[^\w\d\s]//g;

		my $autofill_madness = $person->email;
		$autofill_madness =~ s/[^\w\d\s]//g;

		if ($property_value eq $autofill_madness) {

			my %response = (
				error   => 0,
				message => "Your browser settings are causing your email to be auto-filled.  You may want to address that."
			);

			$m->print(JSON::encode_json(\%response));
			$m->abort();
		}

		if ($property_name) {

			my $update_sth = $dbh->prepare("update round set round.$property_name = ? where round.id = ?");
			$update_sth->execute($property_value, $round->id);

			if ($property_name eq "protocol") {
				my $set = Tab::Protocol->retrieve($property_value);
				if ($set) {
					$message = $round->realname." property $property_name changed to ".$set->name;
				} else {
					$message = "No value found for protocol ID $property_value.";
				}
			} else {
				$message = $round->realname." property $property_name changed to $property_value";
			}
		} else {
			$message = "No valid property or value was sent."
		}
	}

    my %response = (
		error   => 0,
		refresh => $refresh,
		message => $message
    );

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $round->event->id,
		round       => $round->id,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $message
	);


    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
