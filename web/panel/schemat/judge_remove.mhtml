<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$judge_id       => undef
	$panel_id       => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($judge_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($panel_id) {
		$m->print('{ "error": true, "message": "No section ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$judge_id.'"}');
		$m->abort();
	}

	my $section = Tab::Panel->retrieve($panel_id);

	unless ($section) {
		$m->print('{ "error": true, "message": "No section found for ID '.$panel_id.'"}');
		$m->abort();
	}

	my $fine++ if $setting_name;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my $round = $section->round;
	my $event = $round->event;

	$m->comp(
		"/funclib/judge_rm.mas",
		panel => $section,
		judge => $judge
	);

	if ($fine) {

		my $reason = "JUDGE FINE: Judge ".$judge->first;
		$reason .= " ".$judge->last." did not appear for ".$round->realname." of ".$event->abbr;

		my $fine_amount;

		if ($round->type eq "elim" || $round->type eq "final" || $round->type eq "runoff") {
			$fine_amount = $tourn_settings->{"forfeit_judge_fine_elim"};
		} else {
			$fine_amount = $tourn_settings->{"forfeit_judge_fine"};
		}

		if ($tourn_settings->{"first_forfeit_multiplier"}) {

			if ($tourn_settings->{"nsda_nats"}
				|| $tourn_settings->{"nsda_ms_nats"}
			) {

				Tab::Fine->set_sql( revoke_bond => "
					update fine
					set deleted = 1
					where reason  = 'Judge Bond'
					and school = ?
				");

				Tab::Fine->set_sql( judge_fine => "
					select * from fine
						where reason like 'BOND REVOKED:%'
						and fine.deleted != 1
						and school = ?
				");

				my $fine_id = Tab::Fine->search_judge_fine($judge->school->id) if $judge->school;

				unless ($fine_id) {
					$fine_amount = $fine_amount * $tourn_settings->{"first_forfeit_multiplier"};
					$reason =~ s/^JUDGE FINE: //g;
					$reason = "BOND REVOKED: ".$reason;
		            Tab::Fine->sql_revoke_bond->execute($judge->school->id)
						if $judge->school;
				}

			} else {

				Tab::Fine->set_sql( judge_fine => "
					select * from fine
						where reason like 'JUDGE FINE:%'
						and school = ?
				");

				my $fine_id = Tab::Fine->search_judge_fine($judge->school->id)
					if $judge->school;

				unless ($fine_id) {
					$fine_amount = $fine_amount * $tourn_settings->{"first_forfeit_multiplier"};
				}
			}
		}

		#jorman
		my $jp = $judge->person;
		$jp = 0 unless $jp;

		if ($tourn_settings->{"ncfl"} && $judge->school && $judge->school->region) {

			$reason .= " (".$judge->school->short_name.")" if $judge->school;

		    $fine = Tab::Fine->create({
				tourn     => $tourn->id,
	        	region    => $judge->school->region->id,
				school    => $judge->school->id,
	        	amount    => $fine_amount,
	        	reason    => $reason,
				judge     => $judge,
				person    => $jp,
				levied_at => $now,
				levied_by => $person->id
	    	});

		} elsif ($judge->school) {

		    $fine = Tab::Fine->create({
				tourn     => $tourn->id,
	        	school    => $judge->school->id,
	        	amount    => $fine_amount,
	        	reason    => $reason,
				person    => $jp,
				judge     => $judge,
				levied_at => $now,
				levied_by => $person->id,
				payment   => 0,
				deleted   => 0
	    	});

		} else {

		    $fine = Tab::Fine->create({
				tourn     => $tourn->id,
	        	judge     => $judge->id,
				person    => $jp,
	        	amount    => $fine_amount,
	        	reason    => $reason,
				levied_at => $now,
				levied_by => $person->id,
				payment   => 0,
				deleted   => 0
	    	});
		}

	}

	if ($fine && $tourn_settings->{'forfeit_notify_coaches'}) {

		my $subject = "Fine levied for missing judge";

		my $reason = $judge->first." ".$judge->last;
		$reason .=  " failed to appear for ".$round->realname." of ".$event->name;

		my $message;
		my @sendtos;

		my @ids;

		if ($judge->school > 0) {

			my $contacts = $m->comp("/funclib/contacts.mas",
				school         => $judge->school->id,
				return         => 'yaskween',
				email_contacts => 1,
			);

			my %id = map {$_->{person_id} => $_} @{$contacts};
			if ($judge->person > 0) {
				$id{$judge->person}++;
			}
			@ids = keys %id;

			$message = "<p>The ".$tourn->name." has issued a fine to your school in the amount of </p>";
			$message .= '<p>$'.sprintf ("%.2f", $fine->amount)."<p>";
			$message .= "<p>This fine was triggered because:</p>";
			$message .= "<p>".$reason."</p>";
			$message .= "<p>Please contact the tournament officials if you believe this to be in error.</p>";

			if (!$tourn_settings->{"tmoney_enable"}) {
				$message .= "<p>You can pay this fine at:";
				$message .= "<a href='".$tourn_settings->{tmoney_url}."/pay/tabroom/".$tourn->id ."/".$judge->school->id."'>";
				$message .= $tourn_settings->{tmoney_url}."/pay/tabroom/".$tourn->id ."/".$judge->school->id;
				$message .= "</a></p>";
			}

		} elsif ($judge->person > 0) {

			$message = "<p>The ".$tourn->name." has issued you a fine against your hired judging in the amount of </p>";
			$message .= '<p>$'.sprintf ("%.2f", $fine->amount)."</p>";
			$message .= "<p>This fine was triggered because:</p>";
			$message .= '<p>'.$reason."</p>";
			$message .= "<p>Please contact the tournament officials if you believe this to be in error.</p>";
		}

		if ($judge->person > 0) {
			push @ids, $judge->person->id;
		}

		$message .= $tourn_settings->{"judge_fine_message"};
		my $numberwang = substr($now->epoch, -6, 6);
		my $from_string = $tourn->name." <".$tourn->webname.'_'.$numberwang.'@www.tabroom.com>';

		$m->comp("/funclib/send_notify.mas",
			from    => $from_string,
			tourn   => $tourn,
			ids     => \@ids,
			subject => $subject,
			html    => $message
		);
	}

	my $description = "Removed judge ".$judge->first." ".$judge->last." (";
	$description .= $judge->school->short_name if $judge->school;
	$description .= "Hired" unless $judge->school;
	$description .= ") from ".$event->name." panel ".$section->letter." round ".$round->realname;
	$description .= "and fined them ".$fine->amount if $fine;

	$m->comp("/funclib/log.mas",
		tourn       => $tourn->id,
		type        => "judge",
		judge       => $judge,
		fine        => $fine,
		description => $description,
		old_panel   => $section->id,
		event       => $event->id,
		person      => $person->id
	);

	my $msg = "Judge ".$judge->first." ".$judge->last." has been removed from this panel";
	$msg .= " and fined \$".$fine->amount if $fine;

    my %response = (
		error   => 0,
		message => $msg,
		destroy => $judge_id
    );

    $m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
