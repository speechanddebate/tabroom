<%args>
	$round
	$num_panels => undef
</%args>
<%perl>

	use POSIX;
	use List::Util 'shuffle';

	if ($ARGS{"po_contest"}) {

		my $target = Tab::Round->retrieve($ARGS{"po_contest"});

		my %new_panels;
		undef $num_panels;

		foreach my $panel ($target->panels) {

			$num_panels++;

			my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
			my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

			my $copy = $panel->copy({ round => $round->id });

			$new_panels{$copy->id}{"object"}  = $copy;
			$new_panels{$copy->id}{"judges"}  = \@judges;
			$new_panels{$copy->id}{"entries"} = \@entries;

			foreach my $judge (@judges) {
				$m->comp('/funclib/panel_judgeadd.mas',
					panel => $copy,
					judge => $judge,
					chair => $judge->chair
				);
			}
		}

		my $po_event = $round->event;
		my @po_entries = $po_event->entries( active => 1 );
		my $target_number = ceil(  (scalar @po_entries) / $num_panels );
		my %scores;

		foreach my $entry (shuffle @po_entries) {

			foreach my $panel (keys %new_panels) {

				my $score;

				if ($new_panels{$panel}{"entries"}) {
					foreach my $test (@{$new_panels{$panel}{"entries"}}) {
						$score++ if $entry->school->id == $test->schoolid;
					}
				}

				if ($new_panels{$panel}{"judges"}) {
					foreach my $test (@{$new_panels{$panel}{"judges"}}) {
						$score += 100 if $entry->school->id == $test->schoolid;
					}
				}

				$scores{$entry->id}{$panel} = $score;
				$scores{$entry->id}{"total"} += $score;
			}
		}

		my %panel_order;

		ENTRY:
		foreach my $entry (sort {$scores{$b}{"total"} <=> $scores{$a}{"total"}} @po_entries) {

			PANEL:
			foreach my $panel (sort {$scores{$entry}{$a} <=> $scores{$entry}{$b}} keys %new_panels ) {

				next if $new_panels{$panel}{"count"} >= $target_number;
				next if $new_panels{$panel}{"schools"}{$entry->school->id};

				$new_panels{$panel}{"schools"}{$entry->school->id}++;
				$new_panels{$panel}{"count"}++;
				$panel_order{$panel}++;

				my $did_judge;

				if ($new_panels{$panel}{"judges"}) {

					foreach my $judge (@{$new_panels{$panel}{"judges"}}) {

						Tab::Ballot->create({
							panel        => $panel,
							judge        => $judge,
							chair        => $judge->chair,
							entry        => $entry,
							speakerorder => $panel_order{$panel},
							audit        => 0
						});
					}

				} else {

					Tab::Ballot->create({
						panel        => $panel,
						chair        => 0,
						entry        => $entry,
						speakerorder => $panel_order{$panel},
						audit        => 0
					});
				}

				next ENTRY;
			}
		}

		$m->comp("congress_recency.mhtml", round => $round);

		return;
		$m->comp("/funclib/abort.mas",
			message => "PO contest activated with $num_panels chambers and target round ID ".$ARGS{"po_contest"}
		);

	}

	our %penalties = (
		school      => 1000000000000,
		state       => 100000000,
		bill_topic  => 1000000,
		author      => 10000,
		name        => 1
	);

	our @constraints;
	push @constraints, "state";

	my $event = $round->event;
	my $tourn = $event->tourn;

	my %event_settings = $event->all_settings();
	my %tourn_settings = $tourn->all_settings();

	if ($tourn_settings{"regions"}) {
		$penalties{"region"} = 1000000000;
		push @constraints, "region";
	}

	if (
		$tourn_settings{"nsda_district"}
		&& ($event_settings{'house_chambers'} == $num_panels)
	) {

		$penalties{"bloc_school"} = 1000000;
		push @constraints, "bloc_school";
	}

	if ($tourn_settings{"nsda_nats"}) {

		%penalties = (
			state     => 100000000,
			region    => 1000000,
			district  => 100033,
			author    => 10000,
			autoqual  => 100,
			name      => 1,
			nsda_nats => 1
		);

		push @constraints, "region";
		push @constraints, "district";
	}

	my $use_seeds++ if $event_settings{"seed_presets"};

	my $dbh = Tab::DBI->db_Main();

	my $delete_round_sth = $dbh->prepare("
		delete score.*, ballot.*, panel.*
		from (panel, ballot)
			left join score on ballot.id = score.ballot
		where panel.round = ?
			and ballot.panel = panel.id
	");

	my $round_clone_sth = $dbh->prepare("
		select panel.letter, chair.id, entry.id, panel.room
		from (panel, ballot, entry)
			left join judge chair
				on chair.id = ballot.judge
				and ballot.chair = 1
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.active = 1
	");

	my $now = DateTime->now();

	# Chained rounds
	my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);

	if ($ARGS{"congress_method"} eq "realign" || $ARGS{'congress_method'} eq "single") {

		my $origin = $ties[0];
		my $last_round = $ties[-1];

		foreach my $other (@ties) {

			next if $other->id == $origin->id;

			if ($ARGS{'congress_method'} eq "single") {
				next if $other->id != $round->id;
			}

			$delete_round_sth->execute($other->id);
			$round_clone_sth->execute($origin->id);

			my %panels;

			while (
				my (
					$panel_letter, $chair_id, $entry_id, $room_id
				) = $round_clone_sth->fetchrow_array()
			) {

				if ($chair_id) {
					$panels{$panel_letter}{"chair"} = $chair_id;
				}

				if ($room_id) {
					$panels{$panel_letter}{"room"} = $room_id;
				}

				$panels{$panel_letter}{"entries"}{$entry_id}++;
			}

			my $chair_audit = 0;

			if ($other->id != $last_round->id) {
				$chair_audit = 1;
			}

			foreach my $letter (keys %panels) {

				my $room_id = $panels{$letter}{"room"};
				$room_id = 0 unless $room_id;

				my $chair_id = $panels{$letter}{"chair"};
				$chair_id = 0 unless $chair_id;

				my $chair = 0;
				$chair++ if $chair_id;

				my $chamber = Tab::Panel->create({
					round  => $other->id,
					room   => $room_id,
					flight => 1,
					letter => $letter
				});

				my $order = 1;

				my $audit;
				if ($chair) {
					$audit = $chair_audit;
				}
				$audit = 0 unless $audit;

				foreach my $entry_id (shuffle keys %{$panels{$letter}{"entries"}}) {

					my $ref = {
						panel        => $chamber->id,
						entry        => $entry_id,
						speakerorder => $order++,
						audit        => $audit,
						chair        => $chair
					};

					if ($chair_id) {
						$ref->{judge} = $chair_id;
					}

					my $ballot = Tab::Ballot->create($ref);
				}
			}

			$other->paired_at($now);
			$other->update();
		}

		$m->comp("congress_recency.mhtml", round => $round);
		return;

	} elsif ($ARGS{"congress_method"} eq "wipe") {

		foreach my $tie (@ties) {
			$delete_round_sth->execute($tie->id);
			$delete_round_sth->finish();
		}

		my @all_entries = $m->comp(
			"/funclib/event_entries.mas",
			event => $event,
			active => 1
		);

		$num_panels = 1 unless $num_panels;

		my $count;
		my $cohort = 1;

		my %entries = ();
		my %panel_cohorts = ();
		my %size_of_school  = ();

		my %entry_settings = $m->comp(
			"/funclib/event_entry_settings.mas",
				event   => $event,
				all     => 1,
				inverse => 1,
				hash    => 1
		);

		Tab::File->columns(TEMP => "entryid");

		Tab::File->set_sql( authors => "
			select file.*, entry.id as entryid
				from file, entry
			where file.tag = 'legislation'
				and file.entry  = entry.id
				and entry.event = ?
		");

		my @bills = Tab::File->search_authors($event->id);
		my %bills_by_entry = map {$_->entryid => $_} @bills;
		my %schools;

		if ($tourn_settings{"ncfl"}) {

			$penalties{"region"} = $penalties{"school"};

			%{$entries{"school"}} = map {$_->id => $_->regionid} @all_entries;

			foreach my $entry (@all_entries) {
				$schools{$entries{"school"}{$entry->id}} = $entry->schoolname;
				$size_of_school{$entries{"school"}{$entry->id}}++;
			}

		} else {

			%{$entries{"school"}} = map {$_->id => $_->schoolid} @all_entries;

			if ($tourn_settings{"nsda_nats"}) {

				$entries{"seed"} = $entry_settings{"seed"};
				$entries{"autoqual"} = $entry_settings{"autoqual"};

				my %authorship;
				my %district_region;

				if ($tourn_settings{'district_authorships'} ) {
					eval {
						%authorship = %{JSON::decode_json $tourn_settings{'district_authorships'}};
					};
				}

				if ($tourn_settings{'district_regions'} ) {
					my %regions_by_id = map {$_->id => $_} $tourn->regions;

					eval {
						%district_region = %{JSON::decode_json $tourn_settings{'district_regions'}};
					};
				}

				foreach my $entry (@all_entries) {

					$entries{"district"}{$entry->id} = $entry->districtid;

					#At nationals states are actually regions.
					$entries{"state"}{$entry->id} = $entry->regionid;
					$entries{"region"}{$entry->id} = $district_region{$entry->districtid};

					$entries{"author"}{$entry->id} = $authorship{$entry->districtid}
						if $authorship{$entry->districtid}
				}

			} else {

				%{$entries{"state"}} = map {$_->id => $_->state} @all_entries;

				if ($event_settings{"region_avoid"}) {
					%{$entries{"region"}}  = map {$_->id => $_->regionid} @all_entries;
				}
			}

			foreach my $entry (@all_entries) {

				$schools{$entries{"school"}{$entry->id}} = $entry->schoolname;
				$size_of_school{$entries{"school"}{$entry->id}}++;
				my $bill = $bills_by_entry{$entry->id};

				if ($bill) {
					$entries{"author"}{$entry->id}++;
					$entries{"bill_topic"}{$entry->id} = $bill->tag if $bill->tag;
					#Leading whitespace was a thing.
					$entries{"bill_topic"}{$entry->id} =~ s/^\s+//;
				}
			}

			$entries{"bloc"} = $entry_settings{"nsda_house_bloc"};

		}

		my @event_students = $m->comp(
			"/funclib/event_students.mas",
			event => $event
		);

		%{$entries{"name"}}= map {$_->entry => $_->last} @event_students;
		my $ranker = 1;
		my %school_rank = ();

		foreach my $key (keys %schools) {
			$school_rank{$key} = $ranker++;
		}

		if ($tourn_settings{"ncfl"}) {

			@all_entries = sort {$a->code <=> $b->code} @all_entries;

		} else {

			@all_entries = shuffle(@all_entries);

			@all_entries =
				sort {$school_rank{$a->schoolid} <=> $school_rank{$b->schoolid}}
				@all_entries;

			@all_entries =
				sort {$entries{"seed"}{$a} <=> $entries{"seed"}{$b}}
				@all_entries if $use_seeds;
		}

		#Set up the initial panels
		my $max_size = ceil(scalar @all_entries / $num_panels);
		my $min_size = floor(scalar @all_entries/ $num_panels);
		my $remainder = (scalar @all_entries - ($num_panels * $min_size));

		my %chambers = ();
		my @keys =  shuffle(1 .. $num_panels);
		my %school_count;

		my %forbidden_sections = ();

		if ($event_settings{"school_percent_limit"}) {

			my $limit_count = (scalar @keys) * $event_settings{"school_percent_limit"} * .01;

			if ($limit_count > 0) {

				foreach my $school (keys %schools) {

					next if $size_of_school{$school} < $limit_count;

					my $counter;
					my $limited;

					foreach my $key (shuffle @keys) {
						next if $counter++ <= $limit_count;
						$forbidden_sections{$school}{$key}++;
						$limited++;
					}
				}

				@all_entries = sort {
					$size_of_school{$entries{"school"}{$b}} <=> $size_of_school{$entries{"school"}{$a}}
				} @all_entries;
			}
		}

		foreach my $entry (@all_entries) {

			my $score = "-1";
			my $picked_key;
			my $last_resort;
			my $msg;

			my $entry_id = $entry->id;

			foreach my $key (@keys) {
				my $school = $entries{"school"}{$entry_id};

				if ($forbidden_sections{$school}{$key} > 0) {
					$entries{"forbidden"}{$entry_id}{$key}++;
				}
			}

			KEY:
			foreach my $key (@keys) {

				next if $score == 0;
				next if $entries{"forbidden"}{$entry_id}{$key};

				$msg .= "Trying $key";

				my @chamber = @{$chambers{$key}} if $chambers{$key};

				if (scalar @chamber == $max_size) {
					next KEY;
				}

				$msg .= " - got past max size";

				if (scalar @chamber == $min_size) {
					next KEY unless $remainder > 0;
				}

				$msg .= " - got past min size";

				if (@chamber) {

					push (@chamber, $entry_id);

					my $new_score = score_chamber(\@chamber, \%entries);

					if ($score == -1 || ($new_score < $score)) {
						$picked_key = $key;
						$score = $new_score;
						last KEY if $score == 0;
					} else {
						$last_resort = $key;
					}

				} else {

					$picked_key = $key;
					$score = 0;
					last KEY;
				}
			}

			$picked_key = $last_resort unless $picked_key;

			$remainder--
				if $chambers{$picked_key}
				&& scalar @{$chambers{$picked_key}} == $min_size;

			push (@{$chambers{$picked_key}}, $entry->id);

			my $k = shift @keys;
			push (@keys, $k);
		}

		my @chamber_keys = shuffle(keys %chambers);
		my $first = $chamber_keys[0];
		my $no_improvement;

		unless ($num_panels == 1) {

			foreach my $counter (1 .. 5) {

				my $total;
				undef $no_improvement;

				foreach my $chamber_key (@chamber_keys) {

					my @section = @{$chambers{$chamber_key}};
					my $entry_section1_score = score_chamber( \@section, \%entries);

					next if $entry_section1_score < 1;

					ENTRY:
					foreach my $entry_id (@section) {

						# Remove the candidate for a test array of original section
						my @section1 = @section;
						my $index = 0;

						$index++ until $section1[$index] == $entry_id;
						splice(@section1, $index, 1);

						my $count;
						my $swap_section;
						my $swap_entry;
						my $current_diff;
						my @new_entry_section;
						my @new_swap_section;

						my $school = $entries{"school"}{$entry_id};

						OTHERPANEL:
						foreach my $other_key (@chamber_keys) {

							# Can't switch to the same section
							next if $other_key <= $chamber_key;

							# Forbidden sections are a no go
							if ($entries{"forbidden"}{$entry_id}{$other_key}) {
								next OTHERPANEL;
							}

							# Find the other section for scoring
							my @section2 = @{$chambers{$other_key}};
							my $other_section2_score = score_chamber( \@section2, \%entries);

							# Put me into this section for testing
							push (@section2, $entry_id);

							OTHERENTRY:
							foreach my $other_entry_id (@{$chambers{$other_key}}) {

								if ($entries{"forbidden"}{$other_entry_id}{$chamber_key}) {
									next OTHERENTRY;
								}

								# Add swap candidate to original section
								push (@section1, $other_entry_id);

								$count++;
								my $other_section1_score = score_chamber( \@section1, \%entries);

								# Remove swap candidate from the section
								my $index = 0;

								$index++ until $section2[$index] == $other_entry_id;
								splice(@section2, $index, 1);

								my $entry_section2_score = score_chamber(\@section2, \%entries);

								my $squo_score = $entry_section1_score + $other_section2_score;
								my $swap_score = $entry_section2_score + $other_section1_score;

								my $diff = $squo_score - $swap_score;

								my $replace = pop(@section1);  #remove me from this section
								push (@section2, $replace);	#put me back from whence I came

								if ( $diff > 0 && $diff > $current_diff) {
									$current_diff = $diff;
									$swap_entry = $other_entry_id;
									$swap_section = $other_key;
								}
							}
						}

						if ($swap_entry && $swap_section) {

							my @section2 = @{$chambers{$swap_section}};
							push (@section1, $swap_entry);

							my $swapdex = 0;
							$swapdex++ until $section2[$swapdex] == $swap_entry;

							splice(@section2, $swapdex, 1);
							push (@section2, $entry_id);

							$no_improvement++;  # Fail

							@{$chambers{$chamber_key}} = @section1;
							@{$chambers{$swap_section}} = @section2;

							@section = @section1;
							$entry_section1_score = score_chamber( \@section1, \%entries);
						}
					}
				}

				last if $no_improvement < 1;
			}
		}

		# Now attempt to improve the seed distribution as long as the score of the
		# panels on states/schools stays the same.

		if ($use_seeds) {

			foreach my $counter (1 .. 5) {

				my %panel_seeds = ();

				foreach my $chamber_key (@chamber_keys) {
					foreach my $entry_id (@{$chambers{$chamber_key}}) {
						$panel_seeds{$chamber_key} += $entries{"seed"}{$entry_id};
					}
				}

				foreach my $chamber_key (@chamber_keys) {

					my @chamber = @{$chambers{$chamber_key}};
					my $panel_score = score_chamber(\@chamber, \%entries);

					OTHER:
					foreach my $other_key (@chamber_keys) {

						my @other = @{$chambers{$other_key}};
						my $other_score = score_chamber(\@other, \%entries);

						next if $other_key == $chamber_key;
						next if $panel_seeds{$other_key} == $panel_seeds{$chamber_key};

						my @can_flip_panel;
						my @can_flip_other;

						foreach my $entry (@chamber) {
							push @other, $entry;
							my $new_other_score = score_chamber(\@other, \%entries);
							push @can_flip_panel, $entry if $new_other_score == $other_score;

							my $index = 0;
							$index++ until $other[$index] == $entry;
							splice(@other, $index, 1);
						}

						foreach my $entry (@other) {
							push @chamber, $entry;
							my $new_panel_score = score_chamber(\@chamber, \%entries);
							push @can_flip_other, $entry if $new_panel_score == $panel_score;

							my $index = 0;
							$index++ until $chamber[$index] == $entry;
							splice(@chamber, $index, 1);
						}

						next unless @can_flip_panel;
						next unless @can_flip_other;
						my $flip_panel;
						my $flip_other;

						if ($panel_seeds{$other_key} > $panel_seeds{$chamber_key}) {

							@can_flip_panel =
								sort {$entries{"seed"}{$a} <=> $entries{"seed"}{$b}}
								@can_flip_panel;

							@can_flip_other =
								sort {$entries{"seed"}{$b} <=> $entries{"seed"}{$a}}
								@can_flip_other;

							$flip_panel = shift @can_flip_panel;
							$flip_other = shift @can_flip_other;

							next OTHER unless $entries{"seed"}{$flip_panel} < $entries{"seed"}{$flip_other};

						} elsif ($panel_seeds{$other_key} < $panel_seeds{$chamber_key}) {

							@can_flip_panel =
								sort {$entries{"seed"}{$b} <=> $entries{"seed"}{$a}}
								@can_flip_panel;

							@can_flip_other =
								sort {$entries{"seed"}{$a} <=> $entries{"seed"}{$b}}
								@can_flip_other;

							$flip_panel = shift @can_flip_panel;
							$flip_other = shift @can_flip_other;

							next OTHER unless $entries{"seed"}{$flip_panel} > $entries{"seed"}{$flip_other};

						}

						if ($flip_panel && $flip_other) {

							my $index = 0;
							$index++ until $chamber[$index] == $flip_panel;
							splice(@chamber, $index, 1);

							$index = 0;
							$index++ until $other[$index] == $flip_other;
							splice(@other, $index, 1);

							push @chamber, $flip_other;
							push @other, $flip_panel;

							$panel_seeds{$other_key} -= $entries{"seed"}{$flip_other};
							$panel_seeds{$chamber_key} -= $entries{"seed"}{$flip_panel};

							$panel_seeds{$other_key} += $entries{"seed"}{$flip_panel};
							$panel_seeds{$chamber_key} += $entries{"seed"}{$flip_other};

							my $panel_score = score_chamber(\@chamber, \%entries);

							@{$chambers{$other_key}} = @other;
							@{$chambers{$chamber_key}} = @chamber;

						}
					}
				}
			}
		}

		foreach my $session (@ties) {

			my $letter = 1;
			$letter = "A" if $event_settings{"panel_lables"} eq "letters";

			foreach my $chamber_key (@chamber_keys) {

				my @entries = @{$chambers{$chamber_key}};

				my $panel = Tab::Panel->create({
					round  => $session->id,
					flight => 1,
					letter => $letter
				});

				if ($letter eq "Z") {
					$letter = "AA";
				} else {
					$letter++;
				}

				my $position = 1;

				foreach my $entry_id (shuffle @{$chambers{$chamber_key}}) {

					if ($entry_id && $panel->id) {
						eval {
							Tab::Ballot->create({
								panel        => $panel->id,
								speakerorder => $position++,
								entry        => $entry_id
							});
						};
					}
				}
			}

			$session->paired_at($now);
			$session->update();
			$m->comp("congress_recency.mhtml", round => $session);
		}
	}

	undef %penalties;
	undef @constraints;
	return;

	sub score_chamber {

		my ($panref, $entries) = @_;
		my $score = 0;

		foreach my $entry (@{$panref}) {

			foreach my $other (@{$panref}) {

				next unless $other > $entry;

				if (defined ${$entries}{"cache"}{$entry}{$other}) {

					$score += ${$entries}{"cache"}{$entry}{$other};

				} else {

					my $local_score = 0;

					if ($penalties{"school"}
						&& (${$entries}{"school"}{$other} eq ${$entries}{"school"}{$entry})
					) {

						if ($penalties{"bloc_school"}
							&& (${$entries}{"bloc"}{$entry} > 0)
							&& (${$entries}{"bloc"}{$other} eq ${$entries}{"bloc"}{$entry})
						) {
							$local_score -= $penalties{"bloc_school"};
						} else {

							$local_score += $penalties{"school"};

							if ($penalties{"nsda_nats"}) {
								$local_score += $penalties{"state"};
							}
						}
					} else {
						foreach my $constraint (@constraints) {
							if (${$entries}{$constraint}{$entry}
								&& ${$entries}{$constraint}{$other} eq ${$entries}{$constraint}{$entry}
							) {

								$local_score += $penalties{$constraint};
							}
						}
					}

					if (${$entries}{"name"}{$other} eq ${$entries}{"name"}{$entry}) {
						$local_score += $penalties{"name"};
					}

					if ($penalties{"autoqual"}) {
						if (${$entries}{"autoqual"}{$entry} && ${$entries}{"autoqual"}{$other} ) {
							$local_score += $penalties{"autoqual"};
						}
					}

					if ($penalties{"author"}) {
						if (${$entries}{"author"}{$entry} && ${$entries}{"author"}{$other} ) {
							$local_score += $penalties{"author"};
						}
					}

					if ($penalties{"bill_topic"}) {
						if (${$entries}{"bill_topic"}{$entry}
							&& ${$entries}{"bill_topic"}{$entry} eq ${$entries}{"bill_topic"}{$other} ) {
							$local_score += $penalties{"bill_topic"};
						}
					}

					$score += $local_score;
					${$entries}{"cache"}{$entry}{$other} = $local_score;

				}
			}
		}

		return $score;
	}

</%perl>
