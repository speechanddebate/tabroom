<%args>
	$round
	$num_panels
	$tourn_settings
	$nsda        => undef
	$entries_ref => undef
	$limit_to    => undef
	$seed_basis  => undef
	$autoqueue   => undef
</%args>
<%perl>

	unless ($num_panels) {
		if ($autoqueue) {
			return "Number of sections selected was zero; I cannot create zero sections";
		} else {
			$m->comp("/funclib/abort.mas",
				message => "Number of sections selected was zero.  I cannot create zero sections!"
			);
		}
	}

	use POSIX qw/ceil floor/;
	use List::Util 'shuffle';

	return unless $round > 0;

	my $dbh = Tab::DBI->db_Main();
	my %round_settings = $round->all_settings;
	return if $round_settings{"flight_a_round"};

	my $event = $round->event;
	my $tourn = $event->tourn;
	my %event_settings = $event->all_settings;

	my %hits = ();
	my %entries = ();
	my %size_of_school = ();

	# Weights and scores for various bad things.  At some point these should
	# likely become settings

	if ($tourn_settings->{"nsda_district"}) {

		$hits{scores}{school} = 1000000000;
		$hits{scores}{title}  = 10000;
		$hits{scores}{repeat} = 100;

		$hits{scores}{repeat_school} = 10;

	} elsif ($tourn_settings->{"nsda_nats"}) {

		# These four are absolute and given the size should always be achievable
		# "Region ID" is actually state

		# ETX can hit WTX and vice versa.  Just no same state crossover
		# $hits{scores}{state}    = 1000000;

		$hits{scores}{school}   = 100000;
		$hits{scores}{district} = 100000;
		$hits{scores}{region}   = 100000;
		$hits{scores}{repeat}   = 100000;
		$hits{scores}{order}    = 100;

		#$hits{scores}{repeat_school} = 50;

		#This one almost certainly cannot be achieved due to the size of some states
		#$hits{scores}{repeat_region} = 1;

	} else {

		$hits{scores}{school} = 1000000;
		$hits{scores}{repeat} = 1000;
		$hits{scores}{repeat_school} = 10;

		if ($event_settings{"region_constrain"}) {

			$hits{scores}{region} = 1000000;
			$hits{scores}{repeat_region} = 10;

		} elsif ($event_settings{"region_avoid"}) {
			$hits{scores}{region} = 100000;
			$hits{scores}{repeat_region} = 1;
		}

		if ($seed_basis) {
			$hits{scores}{average} = 100;
		}
	}

	my $sth = $dbh->prepare("
		select
			entry.id, entry.code, entry.name, school.id, school.region, school.state
		from entry, school
		where entry.event = ?
			and entry.active = 1
			and entry.school = school.id
	");

	$sth->execute($event->id);

	my @all_entries;

	while (
		my (
			$entry_id, $entry_code, $entry_name, $school_id, $region_id, $state
		) = $sth->fetchrow_array()
	) {

		push @all_entries, $entry_id;

		$entries{$entry_id}{"code"} = $entry_code;
		$entries{$entry_id}{"name"} = $entry_name;
		$entries{$entry_id}{'school'} = $school_id;

		if ($tourn_settings->{"ncfl"}
			|| $event_settings{"region_constrain"}
			|| $tourn_settings->{"nsda_nats"}
		) {
			$entries{$entry_id}{'region'} = $region_id if $region_id;

		} else {

			$entries{$entry_id}{'school'} = $school_id;
			$size_of_school{$school_id}++;

			if (
				$event_settings{"region_avoid"}
				|| $tourn_settings->{"nsda_nats"}
			) {
				$entries{$entry_id}{"region"} = $region_id;
			}

		}

		if ($tourn_settings->{"nsda_nats"}) {
			$entries{$entry_id}{'state'} = $state;
		}
	}

	my $max_size = ceil(scalar @all_entries / $num_panels);
	my $min_size = floor(scalar @all_entries/ $num_panels);
	my $remainder = (scalar @all_entries - ($num_panels * $min_size));

	$sth->finish();

	my $previous_round = Tab::Round->search(
		event => $event->id,
		name  => ($round->name - 1)
	)->first;
	my $previous_round_id;
	$previous_round_id = $previous_round->id if $previous_round;

	my %entries_by_section = ();

	$sth = $dbh->prepare("
		select
			ballot.id, ballot.entry, ballot.speakerorder, panel.id, round.id, round.name
		from ballot, panel, round
			where ballot.panel = panel.id
			and panel.round = round.id
			and round.type = 'prelim'
			and round.event = ?
			and round.id != ?
	");

	$sth->execute($event->id, $round->id);

	my %orders = map {$_ => 1} (1 .. $max_size);

	while (
		my (
			$ballot_id, $entry_id, $speakerorder, $panel_id, $round_id, $round_name
		) = $sth->fetchrow_array()
	) {

		unless ($entries{$entry_id}{"order_needs"}) {
			%{$entries{$entry_id}{"order_needs"}} = %orders;
		}

		push (@{$entries_by_section{$panel_id}}, $entry_id);
		push (@{$entries{$entry_id}{"sections"}}, $panel_id);

		$entries{$entry_id}{"order_count"}{$speakerorder}++;
		$entries{$entry_id}{"order_total"} += $speakerorder;

		delete $entries{$entry_id}{"order_needs"}{$speakerorder};

		$entries{$entry_id}{"order_string"} .= "-" if $entries{$entry_id}{"order_string"};
		$entries{$entry_id}{"order_string"} .= $speakerorder;

		if ($round_id == $previous_round_id) {
			$entries{$entry_id}{"last_order"} = $speakerorder;
		}
	}

	my $speaker_priority_first = $event_settings{"speaker_priority_first"};
	my @schools;

	$sth->finish();

	foreach my $entry_id (@all_entries) {

		foreach my $section_id (@{$entries{$entry_id}{"sections"}}) {

			foreach my $other_id (@{$entries_by_section{$section_id}}) {

				next if $other_id <= $entry_id;
				# Avoid myself and double counting

				my $other_school = $entries{$other_id}{"school"};
				my $other_region = $entries{$other_id}{"region"};

				next unless $other_school;

				$hits{$entry_id}{"entry"}{$other_id}++;

				$hits{$entry_id}{"school"}{$other_school}++;
				$hits{$entry_id}{"region"}{$other_region}++ if $other_region;

				if ($other_school == $entries{$entry_id}{"school"}) {
					$hits{$entry_id}{"ownschool"}++;
				}

				if ($other_region == $entries{$entry_id}{"region"}) {
					$hits{$entry_id}{"ownregion"}++;
				}

			}
		}
	}

	if ($hits{scores}{title} && $event_settings{"ask_for_titles"}) {

		my @titles = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "title"
		);

		foreach my $title (@titles) {
			my $value = $title->value;
			$value =~ s/[\W_]//g;
			$entries{$title->entry->id}{"title"} = $value;
		}
	}

	if ($limit_to > 0 && $limit_to != (scalar @all_entries)) {

		# Removes anyone who hasn't made it to this round; mostly for the
		# NSDA double-drop system.

		my @results = $m->comp(
			"/tabbing/results/order_entries.mas",
				round => $previous_round,
				auto  => 1
		) if $previous_round;

		$entries_ref = pop @results if @results;

		my $counter;
		my %cleared = ();

		if (${$entries_ref}{"by_place"}) {

			foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) {

				foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

					unless ($counter++ >= $limit_to) {
						$cleared{$entry_id}++;
					}
				}
			}
		}

		my @entries_temp;

		foreach my $entry_id (@all_entries) {
			push @entries_temp, $entry_id if $cleared{$entry_id};
		}

		@all_entries = @entries_temp;
	}


	if ($seed_basis) {

		my %pairing_seeds = ();

		if ($seed_basis eq "prelims") {

			%pairing_seeds =
				map {$_->entry->id => $_->value}

				$m->comp("/funclib/event_entry_settings.mas",
					event => $event->id,
					tag   => "pairing_seed"
				);

		} elsif ($previous_round) {

			my $seeding_protocol = Tab::Protocol->retrieve($seed_basis);

			my $entries_ref;

			if ($seeding_protocol) {

				my @seed_results = $m->comp(
					"/tabbing/results/order_entries.mas",
					round        => $previous_round,
					protocol => $seeding_protocol
				);

				$entries_ref = pop @seed_results if @seed_results;
			}

			foreach my $entry_id (keys %entries) {
				$entries{$entry_id}{"seed"} = ${$entries_ref}{"tiebreak"}{1}{$entry_id};
			}

		}

		my $total_seeds;
		my $seed_count;

		foreach my $entry_id (keys %entries) {
			next unless $entries{$entry_id}{"seed"};
			$total_seeds += $entries{$entry_id}{"seed"};
			$seed_count++;
		}

		$hits{"seed_average"} = $total_seeds / $seed_count if $seed_count;
	}

	my $second_round_id = $round_settings{"flight_b_round"};

	my $second_round =
		Tab::Round->retrieve($second_round_id)
		if $second_round_id;

	undef $second_round
		unless $second_round
		&& $second_round->event->id == $round->event->id;

    my $double_entry_sth = $dbh->prepare("

        select distinct thisentry.id,
			thatballot.entry,
			thatballot.speakerorder,
			thatsetting.value

        from (entry thisentry, entry_student thises, round thisround,
             round thatround, panel thatpanel, ballot thatballot, entry_student thates)

		left join event_setting thatsetting
			on thatsetting.event = thatround.event
			and thatsetting.tag = 'speaker_priority_first'

        where thisround.id = ?
        and thisround.event = thisentry.event
        and thisentry.id = thises.entry
        and thises.student = thates.student
        and thises.entry != thates.entry
        and thates.entry = thatballot.entry
        and thatballot.panel = thatpanel.id
        and thatpanel.round = thatround.id
        and thatround.timeslot = thisround.timeslot
	");

	$double_entry_sth->execute($round->id);

	while ( my ($this_entry, $that_entry, $that_order, $speaklate)
		= $double_entry_sth->fetchrow_array()
	) {

		$entries{$this_entry}{$round}{"order"} = $that_order;
		$entries{$this_entry}{$round}{"late"} = $speaklate;
	}

	if ($second_round) {

		$double_entry_sth->execute($second_round);

		while ( my ($this_entry, $that_entry, $that_order, $speaklate)
			= $double_entry_sth->fetchrow_array()
		) {
			$entries{$this_entry}{$round}{"order"} = $that_order;
			$entries{$this_entry}{$round}{"late"} = $speaklate;
		}

	}

	my %sseen = ();
	@schools = grep { ! $sseen{$_} ++ } @schools;
	@schools = sort {$size_of_school{$b} <=> $size_of_school{$a}} @schools;
	my %school_rank = ();

	my $ranker = 1;
	foreach (@schools) {
		$school_rank{$_} = $ranker++;
	}

	my %sections = ();
	my @keys =  shuffle( 1 .. $num_panels);

	my %forbidden_sections = ();

	if ($event_settings{"school_percent_limit"}) {

		my $limit_count =  (scalar @keys) * $event_settings{"school_percent_limit"} * .01;

		if ($limit_count > 0) {

			foreach my $school (@schools) {

				next if $size_of_school{$school} < $limit_count;

				my $counter;
				my $limited;

				foreach my $key (shuffle @keys) {
					next if $counter++ <= $limit_count;
					$forbidden_sections{$school}{$key}++;
					$limited++;
				}

			}

			@all_entries =
				sort { $size_of_school{$entries{$b}{"school"}}
					<=> $size_of_school{$entries{$a}{"school"}} }
				@all_entries;
		}
	}

	foreach my $entry_id (@all_entries) {

		my $score = "-1";   #Shut up.
		my $picked_key;

		KEY:
		foreach my $key (@keys) {

			next if $score == 0;
			next if $forbidden_sections{$entries{$entry_id}{"school"}}{$key};

			my @section = @{$sections{$key}} if $sections{$key};

			next KEY if (scalar @section) >= $max_size;

			if ((scalar @section) == $min_size) {
				next KEY unless $remainder > 0;
			}

			if (@section) {
				push (@section, $entry_id);

				my $new_score = score_section(
					\@section,
					\%hits,
					\%entries
				);

				if ($score == -1 || ($new_score < $score)) {
					$picked_key = $key;
					$score = $new_score;
					last KEY if $score == 0;
				}

			} else {

				$picked_key = $key;
				$score = 0;
				last KEY;
			}
		}

		$remainder-- if $sections{$picked_key}
			&& scalar @{$sections{$picked_key}} == $min_size;

		push (@{$sections{$picked_key}}, $entry_id);

		my $k = shift @keys;
		push (@keys, $k);

	}

	my @section_keys = sort {$a <=> $b} keys %sections;

	foreach my $section_key (@section_keys) {

		@{$sections{$section_key}} =
			sort {$school_rank{$entries{$a}{"school"}}
				<=> $school_rank{$entries{$b}{"school"}} }
				@{$sections{$section_key}};
	}

	my %score_cache;
	my $no_improvement;

	unless ($num_panels == 1) {

		foreach my $counter (1 .. 7) {

			foreach my $section_key (@section_keys) {

				my $string = &stringify($sections{$section_key});

				unless ($score_cache{$string}) {
					$score_cache{$string} = score_section(
						$sections{$section_key},
						\%hits,
						\%entries
					);
				}
			}

			my $total;
			$no_improvement++;

			SECTION:
			foreach my $section_key (@section_keys) {

				my $string = &stringify($sections{$section_key});

				if ($score_cache{$string} < 1) {
					next SECTION;
				}

				ENTRY:
				foreach my $entry_id (@{$sections{$section_key}}) {

					# Remove the candidate for a test array of original section
					my @section1 = @{$sections{$section_key}};
					my $index = 0;

					$index++ until $section1[$index] == $entry_id;
					splice(@section1, $index, 1);

					my $swap_section;
					my $swap_entry;
					my $current_diff = 0;
					my $current_squo = 0;
					my $current_swap = 0;

					OTHERPANEL:
					foreach my $other_key (@section_keys) {

						next if $forbidden_sections{$entries{$entry_id}{"school"}}{$other_key};

						# Can't switch to the same section
						next if $other_key == $section_key;

						my $other_string = &stringify($sections{$other_key});

						# Find the other section for scoring
						my @section2 = @{$sections{$other_key}};

						unless ($score_cache{$other_string}) {
							$score_cache{$other_string} = score_section(
								$sections{$other_key},
								\%hits,
								\%entries
							);
						}

						# Put me into this section for testing
						push (@section2, $entry_id);

						OTHERENTRY:
						foreach my $other_entry_id (@{$sections{$other_key}}) {

							next if $forbidden_sections{$entries{$other_entry_id}{"school"}}{$section_key};

							# Add swap candidate to original section
							push (@section1, $other_entry_id);
							my $new_string = &stringify(\@section1);

							unless ($score_cache{$new_string}) {
								$score_cache{$new_string} = score_section(
									\@section1,
									\%hits,
									\%entries
								);
							}

							# Take them back out now that the score is done
							my $index = 0;
							$index++ until $section1[$index] == $other_entry_id;
							splice(@section1, $index, 1);

							# Remove them from the destination section to test that with entry_id there
							$index = 0;
							$index++ until $section2[$index] == $other_entry_id;
							splice(@section2, $index, 1);

							my $new_other_string = &stringify(\@section2);

							unless ($score_cache{$new_other_string}) {
								$score_cache{$new_other_string} = score_section(
									\@section2,
									\%hits,
									\%entries
								);
							}

							# Put them back for now
							push @section2, $other_entry_id;

							my $squo_score = $score_cache{$string} + $score_cache{$other_string};
							my $swap_score = $score_cache{$new_string} + $score_cache{$new_other_string};
							my $diff = $squo_score - $swap_score;

							if ( $diff > 0 && $diff > $current_diff) {
								$current_diff = $diff;
								$current_squo = $squo_score;
								$current_swap = $swap_score;
								$swap_entry = $other_entry_id;
								$swap_section = $other_key;
								last OTHERENTRY if $swap_score < 0;
							}
						}
					}

					if ($swap_entry) {

						undef $no_improvement;  # Fail

						my $swapdex = 0;
						$swapdex++ until $sections{$swap_section}[$swapdex] == $swap_entry;
						splice(@{$sections{$swap_section}}, $swapdex, 1);
						push (@{$sections{$section_key}}, $swap_entry);

						$swapdex = 0;
						$swapdex++ until $sections{$section_key}[$swapdex] == $entry_id;
						splice(@{$sections{$section_key}}, $swapdex, 1);
						push (@{$sections{$swap_section}}, $entry_id);

						$string = &stringify($sections{$section_key});
						$score_cache{$string} = score_section(
							$sections{$section_key},
							\%hits,
							\%entries
						);

						my $other_string = &stringify($sections{$swap_section});
						$score_cache{$other_string} = score_section(
							$sections{$swap_section},
							\%hits,
							\%entries,
							"verbose"
						);

						if ($score_cache{$string} < 1) {
							next SECTION;
						}
					}
				}
			}

			last if $no_improvement;
		}
	}


	my @judges = $m->comp(
		"/funclib/round_judges.mas",
		round => $round
	);

	my @judge_keys;

	my %judge_section = ();

	foreach my $judge (@judges) {
		push (@{$judge_section{$judge->panelid}}, $judge->id);
		push (@judge_keys, $judge->panelid);
	}

	my %jseen = ();
	@judge_keys = grep { ! $jseen{$_} ++ } @judge_keys;

	my @rooms = $m->comp(
		"/funclib/round_rooms.mas",
		round => $round
	);

	my @clean_rooms = $m->comp(
		"/funclib/clean_rooms.mas",
		round => $round
	);

	my $letter = 1;
	$letter = "A" if $event_settings{"panel_labels"} eq "letters";

	# If I have a second flighted situation, track half my sections into the
	# second flight timeblock.

	my %section_second;

	if ($second_round) {

		my $switch;

		foreach my $section_key (@section_keys) {
			next if $switch++ % 2;
			$section_second{$section_key}++;
		}
	}

	#Set speaker order

	foreach my $section_key (@section_keys) {

		my @entries = @{$sections{$section_key}};

		@entries = shuffle(@entries);

		@entries = sort { $entries{$b}{"order_total"} <=> $entries{$a}{"order_total"} } @entries;

		my $size_of_section = scalar @entries;

		my $moved = 1;

		my $this_round = $round;
		$this_round = $second_round
			if $section_second{$section_key}
			&& $second_round;

		foreach (1 .. 15) {

			next unless $moved;

			undef $moved;
			my $position;

			foreach my $entry_id (@entries) {

				$position++;

				# If I've already spoken in this position move me please

				if ($entries{$entry_id}{"order_count"}{$position}) {

					# Remove from place in line

					my $place;

					# Find a new home

					$place = $position;

					while ($place == $position) {
						$place = int(rand($size_of_section));
					}

					$place--;
					$place = 1 if $place < 0;
					splice(@entries,($place - 1),0,$entry_id);
					$moved++;
				}
			}

			foreach my $entry_id (@entries) {

				$position++;

				# If I spoke in this position in the last round, definitely move me

				if ($entries{$entry_id}{"last_order"} == $position) {

					#Remove from place in line

					my $place;

					#Find a new home

					$place = $position;

					while ($place == $position) {
						$place = int(rand($size_of_section));
					}

					$place--;
					$place = 1 if $place < 0;
					splice(@entries,($place - 1),0,$entry_id);
					$moved++;
				}
			}

			my %seen;
			@entries = grep { ! $seen{$_} ++ } @entries;

			foreach my $entry_id (@entries) {

				if (
					$entries{$entry_id}{$this_round}{"order"}
					|| $entries{$entry_id}{$this_round}{"late"}
				) {

					my $speakdex = 0;
					$speakdex++ until $entries[$speakdex] == $entry_id;

					splice(@entries, $speakdex, 1);

					my $place;

					if ($speaker_priority_first) {
						$place = 1;
					} elsif ($entries{$entry_id}{$this_round}{"late"}) {
						$place = 7;
					} elsif ($entries{$entry_id}{$this_round}{"order"} > 3) {
						$place = 1;
					} else {
						$place = 7;
					}

					$place = 1 if $place < 0;

					splice(@entries,($place - 1),0,$entry_id);

				}
			}
		}

		@{$sections{$section_key}} = @entries;
	}

	foreach my $section_key (sort keys %sections) {

		my $room = shift @rooms if @rooms;
		my $room_id = 0;
		$room_id = $room->id if $room;

		my $jsection = shift @judge_keys if @judge_keys;
		my @judge_ids = @{$judge_section{$jsection}} if $jsection;
		@judge_ids = ("0") unless @judge_ids;

		my @section = @{$sections{$section_key}};

		my $score = score_section(
			\@section,
			\%hits,
			\%entries,
			"yup"
		);

		my $this_round = $round;
		$this_round = $second_round if $section_second{$section_key};

		my $section = Tab::Panel->create({
			round  => $this_round->id,
			room   => $room_id,
			letter => $letter,
			flight => 1
		});


		foreach my $judge_id (@judge_ids) {

			my $position;

			foreach my $entry_id (@section) {

				$position++;
				next unless $entry_id;

				my $ref = {
					panel        => $section->id,
					entry        => $entry_id,
					speakerorder => $position
				};

				if ($judge_id > 0) {
					$ref->{judge} = int($judge_id);
				}

				my $ballot = Tab::Ballot->create($ref);

			}
		}

		if ($letter eq "Z") {
			$letter = "AA";
		} else {
			$letter++;
		}
	}

	my $now = DateTime->now;
	$round->paired_at($now);
	$round->update;

	return;

	sub score_section {

		my ($panref, $hitsref, $entref, $verbose) = @_;

		my $score = 0;
		my $panel_total;
		my $reasons;

		foreach my $entry_id (@{$panref}) {

			$panel_total += $entref->{$entry_id}{"seed"};

			my $clash_count;

			foreach my $other (@{$panref}) {

				next if $other <= $entry_id;

				my $local_score;

				# Try not to hit the same school as mine

				if ($entref->{$other}{"school"} == $entref->{$entry_id}{"school"}) {
					$local_score += $hitsref->{scores}{school};
					#Double penalty if I've already had to hit my own school so someone else does
					$local_score += $hitsref->{scores}{school} if $hitsref->{$entry_id}{"ownschool"};

					if ($verbose) {
						$reasons .= "$other and $entry_id same school ";
					}
				} elsif (
					$hitsref->{scores}{region}
					&& $entref->{$entry_id}{"region"}
					&& $entref->{$other}{"region"} == $entref->{$entry_id}{"region"}
				) {
					$local_score += $hitsref->{scores}{region};
					#Double penalty if I've already had to hit my own region so someone else does
					$local_score += $hitsref->{scores}{region} if $hitsref->{$entry_id}{"ownregion"};
					if ($verbose) {
						$reasons .= "$other and $entry_id same state ";
					}
				} elsif (
					$hitsref->{scores}{state}
					&& $entref->{$entry_id}{"state"}
					&& $entref->{$other}{"state"} eq $entref->{$entry_id}{"state"}
				) {

					$local_score += $hitsref->{scores}{state};
					if ($verbose) {
						$reasons .= "$other and $entry_id same actual state ";
					}
				}

				# Try not to hit the same piece title as mine
				#if ($hitsref->{scores}{title} && $entref->{$entry_id}{"title"}) {
				#	if ($entref->{$other}{"title"} eq $entref->{$entry_id}{"title"}) {
				#		$local_score += $hitsref->{scores}{title};
				#	}
				#}

				# Try not to hit the same entry twice
				if ($hitsref->{scores}{repeat} && $hitsref->{$entry_id}{"entry"}{$other}) {
					$local_score += $hitsref->{scores}{repeat};
					if ($verbose) {
						$reasons .= "$other and $entry_id hit ".$hitsref->{$entry_id}{entry}{$other};
					}
				}

				# Try not to hit 2 different entries from the same school that often.
				#if ($hitsref->{scores}{repeat_school}) {
				#	my $other_school = $entref->{$other}{"school"};
				#	if ($hitsref->{$entry_id}{"school"}{$other_school}) {
				#		$local_score += $hitsref->{scores}{repeat_school}
				#	}
				#}

				# Try not to hit 2 different entries from the same region that often.
				#if ($hitsref->{scores}{repeat_region}) {
				#	my $other_region = $entref->{$other}{"region"};
				#	if ($hitsref->{$entry_id}{"region"}{$other_region}) {
				#		$local_score += $hitsref->{scores}{repeat_region}
				#	}
				#}

				# Repel entries who have spoken in the same speaker positions I have

				if ($hitsref->{scores}{order}) {
					foreach my $order (keys %{$entref->{$entry_id}{"order_count"}}) {
						if ($entref->{$other}{"order_count"}{$order}) {
							$local_score += $hitsref->{scores}{order};
						}
					}
				}
				$score += $local_score;
			}

			if ($verbose) {
				$reasons.= " Entry $entry_id Speaker order clash count is $clash_count";
			}
		}

		if ($hitsref->{seed_average} && $panel_total) {
			my $average = ($panel_total / (scalar @{$panref})) if $panel_total;
			$score += abs($average - $hitsref->{"seed_average"})  * $hitsref->{scores}{average};
		}

		return $score;
	}

	sub stringify {
		my $arr = shift;
		@{$arr} = sort {$a cmp $b} @{$arr};
		return join ('-', @{$arr});
	}

</%perl>
