<%args>
	$tourn
	$tourn_settings
	$round_id        => undef
	$protocol_id => undef
	$exclude         => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id)
		if $round_id
		&& $round_id == int($round_id);

	unless ($round) {
		$m->comp(
			"/funclib/abort.mas",
			message => "No valid round found for ID $round_id"
		);
	}

	my $event = $round->event;
	my $runoff = $round->runoff if $round->runoff > 0;

	unless ($runoff > 0) {
		undef $runoff;
		$round->runoff(0);
		$round->update();
	}

	my $protocol;

	my $roundstart = $round->timeslot->start;

	if ($protocol_id) {
		$protocol = Tab::Protocol->retrieve($protocol_id);
	} elsif ($tourn_settings->{"nsda_district"} && $round->type eq "final") {
		$protocol = $tourn->protocols(name => "Debate Elim")->first;
	}

	my %already_entries = map {$_->id => $_} $m->comp("/funclib/round_entries.mas", round => $runoff) if $runoff;

	my $now = DateTime->now();
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my (@results) = $m->comp(
		"/tabbing/results/order_entries.mas",
		round        => $round,
		protocol => $protocol
	);

	my $entries_ref = pop @results if @results;

    my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas",
			round => $round
		);

    my %entry_by_id =
        map {$_->id => $_} $event->entries();

	my @vacate_slots = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_vacate"
	);

	my %vacated = map {$_->entry->id => $_->value } @vacate_slots;

	my @priorities = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_priority"
	);

	my %priorities = map {$_->entry->id => $_->value } @priorities;

    my @tiebreak_keys =
		sort {$a <=> $b}
		keys %{$entries_ref->{"tier_description"}};

    my @ineligibles = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "no_elims"
	);

	my %ineligible = map {$_->entry->id => $_->value} @ineligibles;

	my @rounds;

	foreach my $round ($event->rounds()) {
		next if $round->panels;
		push @rounds, $round;
	}

	my %existing_rounds = map {$_->timeslot->id => 1} @rounds;

</%init>

	<div class="main">

		<h4><% $round->realname %>: Runoffs to break ties</h4>

		<form
			action = "runoff_schedule.mhtml"
			method = "post"
		>

		<input
			type  = "hidden"
			name  = "round_id"
			value = "<% $round->id %>"
		>

		<input
			type  = "hidden"
			name  = "protocol_id"
			value = "<% $protocol %>"
		>

		<script>
			function checkTs() {
				if ($("#timeslot_id").val()) {
					$(".newts").addClass("hidden");
				} else {
					$(".newts").removeClass("hidden");
				}
			}

			$(document).ready(function() {
				checkTs();
			});

		</script>

%		if ($tourn_settings->{"nsda_district"}) {
			<div class="centeralign">
				<span class="ninetenths leftalign">
					<h6 class="ltborderbottom leftalign">
						Note for NSDA District Tournaments
					</h6>

					<p>
						<span class='inline semibold redtext italic'>
							Do not use runoff rounds!
						</span>

						If you have a situation where you must have two
						losing semifinalists debate for a 3rd spot to Nationals,
						<span class="inline semibold orangetext">schedule another elim
						round as a final.</span>
					</p>

					<p>
						Tabroom will create a final round in which the
						semifinal winners bye through to Nationals, while the
						other two entries compete for the last spot to
						Nationals.
					</p>
				</span>
			</div>
%		}

		<div class="bordertop borderbottom row marbottommuchmore">

			<span class="tenth semibold">
				During
			</span>

			<span class="threetenths centeralign ltborderright">
				<select
					id       = "timeslot_id"
					name     = "timeslot_id"
					class    = "fixedmost"
					onChange = "checkTs();"
				>
					<option value="">New Timeslot:</option>
%					foreach my $timeslot ($tourn->timeslots) {
%						next if $existing_rounds{$timeslot->id};
%						next if $timeslot->start <= $roundstart;
						<option
							value="<% $timeslot->id %>"
							<% $runoff && $runoff->timeslot && $runoff->timeslot->id == $timeslot->id
								? "selected"
								: ""
							%>
						><% $timeslot->name %></option>
%					}
				</select>
			</span>

			<span class="eighth nospace semibold nowrap rightalign newts">
				Or, new timeslot
			</span>

			<span class="seventh centeralign newts">
				<select
					name  = "new_day"
					class = "fixedsmallest inline"
				>

					<option
						value="<% $now->mdy('/') %>"
					><%
						substr($now->day_name, 0, 3)
					%> <%
						$now->month %>/<% $now->day
					%></option>

%					foreach my $day ($m->comp("/funclib/tourn_days.mas", tourn => $tourn)) {

						<option
							value = "<% $day->mdy('/') %>"
						><%
							substr($day->day_name,0, 3)
						%> <%
							$day->month."/".$day->day
						%></option>
%					}
				</select>
			</span>

<%perl>

			$now->set_time_zone($tz);

			my $start = $now->clone();
			my $end = $now->clone();

			$start->add(minutes => 15);
			$end->add(minutes => 15, hours => 2);

			my $minutes = $start->minute;
			$minutes = Math::Round::nearest(5, $minutes);
			$minutes = 0 if $minutes > 55;

			$start->set(minute => $minutes);
			$end->set(minute => $minutes);

</%perl>

			<span class="third nospace newts">

				<span class="nospace half">
					<span class="semibold twofifths">
						<span class="halfspacer"></span>
						From
					</span>

					<span class="threefifths nospace">
						<& "/funclib/timepicker.mas",
							name => "new_start_time",
							size => 7,
							time => $start
						&>
					</span>
				</span>

				<span class="nospace half">
					<span class="semibold twofifths">
						<span class="halfspacer"></span>
						To
					</span>

					<span class="threefifths nospace">
						<& "/funclib/timepicker.mas",
							name => "new_end_time",
							size => 7,
							time => $end
						&>
					</span>
				</span>
			</span>

		</div>

%		unless ($tourn_settings->{"nsda_district"}) {

			<div class="row full marno">
				<span class="quarter semibold">
					Tiebreakers:
				</span>

				<span class="threequarters centeralign">
					<select name="runoff_protocol_id" class="fixedmed">
%						foreach my $protocol ($tourn->protocols()) {
							<option
								value="<% $protocol->id %>"
								<% $runoff
									&& $runoff->protocol
									&& $runoff->protocol->id == $protocol->id
									? "selected"
									: ""
								%>
							><% $protocol->name %></option>
%						}
					</select>
				</span>
			</div>

%		}

<%perl>

		if (${$entries_ref}{"by_place"}) {

			foreach my $key (
				sort {$a <=> $b}
				keys %{${$entries_ref}{"by_place"}}
			) {

				next unless (scalar @{${${$entries_ref}{"by_place"}}{$key}}) > 1;

				my @tied;

				ENTRY:
				foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

					next if $exclude && $exclude->{$entry_id};
					next if $vacated{$entry_id};

					push @tied, $entry_id;
				}

				next unless scalar @tied > 1;
</%perl>

				<h6 class="martopmore semibold bluetext">
					Tie for <% Lingua::EN::Numbers::Ordinate::ordinate($key) %>
				</h6>

				<table>

					<tr class="ltyellow semibold">

						<td>
							Entry
						</td>

%						if ($tourn_settings->{"nsda_district"}) {
							<td class="smallish">
								Nationals Single-Entry Priority
							</td>
%						}

%                       foreach my $key (@tiebreak_keys) {
                            <th class="smallish">
                                <span title="<% ${$entries_ref}{"tier_long_description"}{$key} %>">
                                    <% ${$entries_ref}{"tier_description"}{$key} %>
                                </span>
                            </th>
%                       }

						<td class="smaller bluetext">
							Create Runoff?
						</td>

					</tr>

%					my $first++;

%					foreach my $entry_id (@tied) {

						<tr class="row">

							<td class="nospace">
								<span class="marno full padleftmore padvertmore">
								<% $entries_ref->{"code"}{$entry_id} %>
								</span>
							</td>

%							if ($tourn_settings->{"nsda_district"}) {
%								my $es = Tab::EntryStudent->search( entry => $entry_id )->first;
								<td class="smallish centeralign">
									<% $priorities{$es->student->id}{$entry_id} %>
								</td>
%							}

<%perl>

							foreach my $key (@tiebreak_keys) {

								my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

								$value =~ s/\.(?:|.*[^0]\K)0*\z//;

								$value = sprintf("%.2f", $value)
									unless ${$entries_ref}{"tier_description"}{$key} eq "Rk"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Win"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Prev Win"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Rnds"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Loss"
									|| ${$entries_ref}{"tier_description"}{$key} eq "PO Pt"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Dwn"
									|| ${$entries_ref}{"tier_description"}{$key} eq "CDwn"
									|| ${$entries_ref}{"tier_description"}{$key} eq "H2H"
									|| ${$entries_ref}{"tier_description"}{$key} eq "JP"
									|| ${$entries_ref}{"tier_description"}{$key} eq "Bal";

</%perl>
								<td class="smallish nowrap centeralign">
									<% $value %>
								</td>

%							}

%							if ($first) {

%								undef $first;
								<td
									class="odd centeralign nospace"
									rowspan="<% scalar @tied %>">

%									if ($already_entries{$entry_id}) {

										<span class="semibold redtext">
											Already <br />Scheduled!
										</span>

%									} else {
										<label for="<% $key %>">
											<span class="padvertmore full hover">
												<input
													class = "bigger"
													type  = "checkbox"
													name  = "<% $key %>"
													id    = "<% $key %>"
													value = "1"
												>
											</span>
										</label>
%									}
								</td>
%							}

						</tr>

%					}

				</table>
%			}

			<span class="full libl rightalign marno">
				<span class="third centeralign">
					<input
						type  = "submit"
						value = "Schedule Runoffs"
					>
				</span>
			</span>
			</form>

%		}

	</div>

