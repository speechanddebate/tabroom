<%args>
	$tourn
	$tourn_settings
	$now
	$round_id           => undef
	$protocol_id        => undef
	$exclude            => undef
	$runoff_protocol_id => undef
	$timeslot_id        => undef
	$new_day            => undef
	$new_start_time     => undef
	$new_end_time       => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	# Setup stuff first

	# Round that originates everything:

	my $round = Tab::Round->retrieve($round_id)
		if $round_id
		&& $round_id == int($round_id);

	unless ($round) {
		$m->comp(
			"/funclib/abort.mas",
			message => "No valid round found for ID $round_id"
		);
	}

	my $event = $round->event;

	# Runoff timeslot

	my $runoff_timeslot;

	$runoff_timeslot = Tab::Timeslot->retrieve($timeslot_id)
		if $timeslot_id;

	unless ($runoff_timeslot) {

		my $start = eval {
			return Tab::dtme($new_day, $new_start_time, $tz);
		};

		my $end = eval {
			return Tab::dtme($new_day, $new_end_time, $tz);
		};

		my $err;

		unless ($start) {
			$err = "Invalid start datetime sent: $new_day $new_start_time. Please try again";
		}

		unless ($end) {
			$err .= "<br />" if $err;
			$err .= "Invalid end datetime sent: $new_day $new_end_time. Please try again";
		}

		if ($err) {

			$m->redirect("runoff.mhtml?round_id=$round_id&protocol_id=$protocol_id&err=$err");

		}
		$runoff_timeslot = Tab::Timeslot->search(
			start => $start,
			end   => $end
		)->first;

		$runoff_timeslot = Tab::Timeslot->create({
			tourn => $tourn->id,
			start => $start,
			end   => $end,
			name  => $event->abbr." Runoff"
		}) unless $runoff_timeslot;

	}

	# Runoff tiebreaker set
	my $runoff_protocol;

	$runoff_protocol = Tab::Protocol->retrieve($runoff_protocol_id)
		if $runoff_protocol_id;

	unless ($runoff_protocol) {

		if ($event->type eq "speech") {

			$runoff_protocol = Tab::Protocol->search(
				tourn => $tourn->id,
				name => "IE Runoff"
			)->first;

			unless ($runoff_protocol) {
				$runoff_protocol = Tab::Protocol->search(
					tourn => $tourn->id,
					name => "IE Runoffs"
				)->first;
			}

			unless ($runoff_protocol) {
				$runoff_protocol = Tab::Protocol->search(
					tourn => $tourn->id,
					name => "Speech Runoff"
				)->first;
			}

			unless ($runoff_protocol) {

				$runoff_protocol = Tab::Protocol->create({
					tourn => $tourn->id,
					name  => "IE Runoff"
				});

				Tab::Tiebreak->create({
					protocol => $runoff_protocol->id,
					name         => "ranks",
					count        => "previous",
					priority     => 1
				});

				Tab::Tiebreak->create({
					protocol => $runoff_protocol->id,
					name         => "reciprocals",
					count        => "previous",
					priority     => 2
				});
			}

		} else {

			$runoff_protocol = Tab::Protocol->search(
				tourn => $tourn->id,
				name => "Debate Elim"
			)->first;

			unless ($runoff_protocol) {
				$runoff_protocol = Tab::Protocol->search(
					tourn => $tourn->id,
					name => "Debate Elims"
				)->first;
			}

			unless ($runoff_protocol) {
				$runoff_protocol = Tab::Protocol->search(
					tourn => $tourn->id,
					name => "Debate Runoffs"
				)->first;
			}

			unless ($runoff_protocol) {

				$runoff_protocol = Tab::Protocol->create({
					tourn => $tourn->id,
					name  => "Debate Elim"
				});

				Tab::Tiebreak->create({
					protocol => $runoff_protocol->id,
					name         => "winloss",
					count        => "previous",
					priority     => 1
				});
			}
		}
	}

	# Create or update the runoff round itself
	# Is there an existing runoff already?

	my $runoff = $round->runoff if $round->runoff && $round->runoff->id;

	if ($runoff) {

		$runoff->timeslot($runoff_timeslot->id);
		$runoff->protocol($runoff_protocol->id);
		$runoff->update();

	} else {

		my $label = $round->label;
		$label = "R".$round->name unless $label;
		$label .= " Runoff";

		$runoff = Tab::Round->create({
			timeslot   => $runoff_timeslot,
			protocol   => $runoff_protocol,
			label      => $label,
			event      => $event->id,
			type       => 'runoff',
			flighted   => 1,
			site       => $round->site,
			paired_at  => $now,
			start_time => $runoff_timeslot->start,
		});

		$round->runoff($runoff->id);
		$round->update();
		$runoff->setting("num_judges", 3);

		$m->comp(
			"/funclib/renumber_rounds.mas",
			event_id => $event->id
		);
	}

	my %already_entries =
		map {$_->id => $_}
		$m->comp("/funclib/round_entries.mas", round => $runoff)
		if $runoff;

	my $protocol;

	$protocol = Tab::Protocol->retrieve($protocol_id)
		if $protocol_id
		&& $protocol_id == int($protocol_id);

	my (@results) = $m->comp(
		"/tabbing/results/order_entries.mas",
		round        => $round,
		protocol => $protocol
	);

	my $entries_ref = pop @results if @results;

    my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas",
			round => $round
		);

    my %entry_by_id =
        map {$_->id => $_} $event->entries();

	my @vacate_slots = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_vacate"
	);

	my %vacated = map {$_->entry->id => $_->value } @vacate_slots;

	my @priorities = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_priority"
	);

	my %priorities = map {$_->entry->id => $_->value } @priorities;

    my @tiebreak_keys =
		sort {$a <=> $b}
		keys %{$entries_ref->{"tier_description"}};

	my $msg;

	if (${$entries_ref}{"by_place"}) {

		foreach my $key ( sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) {

			next unless $ARGS{$key};
			next unless (scalar @{${${$entries_ref}{"by_place"}}{$key}}) > 1;

			my @tied;

			ENTRY:
			foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

				next if $exclude && $exclude->{$entry_id};
				next if $vacated{$entry_id};
				next if $already_entries{$entry_id};

				push @tied, $entry_id;
			}

			next unless scalar @tied > 1;

			if ($event->type eq "speech" || $event->type eq "congress") {

				my $section = Tab::Panel->create({
					round   => $runoff->id,
					letter  => $round->name.$key,
					bracket => $key
				});

				my $side;

				foreach my $entry_id (@tied) {

					$side++;

					my $ballot = Tab::Ballot->create({
						panel        => $section->id,
						entry        => $entry_id,
						side         => $side,
						speakerorder => $side,
						audit        => 0
					});

				}

				$msg .= "<br />" if $msg;
				$msg .= "Runoff scheduled for the tie for $key out of ".$round->realname;

			} else {

				my $pair;

				while (@tied) {

					$pair++;
					my $section = Tab::Panel->create({
						round   => $runoff->id,
						letter  => $round->name.$key.$pair,
						bracket => $key
					});

					my $side;
					my $aff = pop @tied;
					my $neg = shift @tied if @tied;

					my $bye = 0;
					$bye++ unless $neg;

					my $ballot = Tab::Ballot->create({
						panel => $section->id,
						entry => $aff,
						side  => 1,
						bye   => $bye,
						audit => 0
					});

					my $neg_ballot = Tab::Ballot->create({
						panel => $section->id,
						entry => $neg,
						side  => 2,
						bye   => $bye,
						audit => 0
					}) if $neg;
				}
			}
		}
	}

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$runoff->id."&msg=$msg");

</%init>
