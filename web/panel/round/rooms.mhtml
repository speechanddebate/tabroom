<%args>
	$tourn
	$tourn_settings
	$person
	$dbh
	$round_id => undef
	$round    => undef
	$return   => undef
</%args>
<%init>

	unless ($round) {
		$round = Tab::Round->retrieve($round_id);
	}

    if ($round->setting("timeslot_merge")) {
		my $msg = "Rooms were not placed because this is a timeslot-merged round";
		$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg");
	}

	my $event = $round->event;
	my %event_settings = $event->all_settings();

	$m->comp("/funclib/round_clean.mas",
		round  => $round,
		dbh    => $dbh,
		person => $person
	);

	unless ($round->setting("use_normal_rooms")) {

		if (
			( $event_settings{"online_mode"} eq "public_jitsi"
				|| $event_settings{"online_mode"} eq "public_jitsi_observers"
				|| $event_settings{"online_mode"} eq "nsda_campus"
				|| $event_settings{"online_mode"} eq "nsda_campus_observers"
			) && (not defined $event_settings{"online_hybrid"})
		) {

			my $msg = "Room placement is not necessary for online tournaments.  Skipped";

			if ($return) {
				return $msg;
			}

			$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg");
		}
	}

	my %hybrids;

	if (
		$event_settings{"online_hybrid"}
		&& $event_settings{"online_mode"} ne "nsda_campus"
		&& $event_settings{"online_mode"} ne "nsda_campus_observers"
	) {

		my $hybrid_sth = $dbh->prepare("
			select distinct(panel.id), panel.room
			from panel, ballot
			where panel.round = ?
			and panel.id = ballot.panel
			and (
				exists (
					select es.id
					from entry_setting es
					where es.tag = 'online_hybrid'
					and es.entry = ballot.entry
				)
				OR exists (
					select js.id
					from judge_setting js
					where js.tag = 'online_hybrid'
					and js.judge = ballot.judge
				)
			)
		");

		$hybrid_sth->execute($round->id);
		my $results = $hybrid_sth->fetchall_hash();
		%hybrids = map {$_ => $_->{room}} @{$results};
	}

	my @ties;
	if ($event->type eq "congress") {
		@ties = $m->comp("/funclib/congress_ties.mas", round => $round);
	}

	my %head_count;
	my %panel_count;

	if ($event->type eq "mock_trial") {

		my $headcount_sth = $dbh->prepare("
			select
				entry.id, count(distinct es.student) students, observers.value as observers

			from entry
				left join entry_student es on es.entry = entry.id
				left join entry_setting observers on observers.entry = entry.id and observers.tag = 'observers'

			where entry.event = ?
			and entry.active = 1
			group by entry.id
		");

		$headcount_sth->execute($event->id);
		my $headcounts = $headcount_sth->fetchall_hash();
		%head_count = map {$_->{id} => ($_->{students} + $_->{observers}) } @{$headcounts};
	}

	my $round_type = $round->type;
	my $num_judges = $round->setting('num_judges');
	$round->setting('disaster_checked', 0);

	$m->comp("/funclib/clear_empty_panels.mas", round => $round);

	my @panels = $m->comp(
		'/funclib/round_panels_ada.mas',
		round => $round
	);

	# Make sure we're actually in the right place for a single site tournament.
	my @sites = $tourn->sites;

	if (scalar @sites == 1) {
		my $site_sth = $dbh->prepare("
			update round, event
			set round.site = ?
			where round.event = event.id
			and event.id = ?
			and not exists (
				select es.id
				from event_setting es
				where es.tag = 'online_mode'
				and es.value in ('async', 'nsda_campus', 'nsda_campus_observers', 'public_jitsi', 'public_jitsi_observers')
				and es.event = event.id
			)
		");
		$site_sth->execute($sites[0]->id,  $event->id);
	}

	my @rooms = $m->comp(
		"/funclib/clean_rooms.mas",
		round => $round
	);

	my %room_by_id = map {$_->id => $_ } @rooms;

	my @reserve;
	my %in_last_round;

	my $last_round = Tab::Round->search(
		event => $event,
		name => ($round->name - 1)
	)->first;

	if ($event_settings{"repeat_rooms"}) {

		my @all_rounds = $event->rounds;

		foreach my $oround (@all_rounds) {
			next if $oround->name >= $round->name;
		}

		if ($last_round) {

			my %in_round =
				map {$_->id => 1}
				$m->comp("/funclib/round_rooms.mas", round => $last_round);

			my @base = @rooms;
			undef @rooms;

			foreach my $room (@base) {
				if ($in_round{$room->id}) {
					push @rooms, $room;
				} else {
					push @reserve, $room;
				}
			}
		}
	}

	my %room_strikes = $m->comp(
		"/funclib/room_strikes.mas",
		round => $round,
		tourn => $tourn
	);

	my %previous_rooms = ();
	my %brackets = ();

	if ($last_round) {

		unless ($round->setting("reset_room_moves")) {
			%previous_rooms = $m->comp(
				"/funclib/round_entry_rooms.mas",
				round => $last_round
			);
		} else {
			%previous_rooms = $m->comp(
				"/funclib/round_entry_rooms.mas",
				ada   => 1,
				round => $last_round
			);
		}
	}

	if ($last_round && $last_round->type eq "elim") {

		my $sth = $dbh->prepare("
			select entry.id, panel.id, panel.bracket
			from entry, ballot, panel
			where panel.round = ?
				and panel.id = ballot.panel
				and ballot.entry = entry.id
			order by panel.bracket
		");

		$sth->execute($last_round->id);

		while (
			my (
				$entry_id, $panel_id, $panel_bracket
			) = $sth->fetchrow_array()
		) {
			$brackets{$entry_id} = $panel_bracket;
		}

		$sth->finish();
	}

	my %rpool_count;

	my $sth = $dbh->prepare("
		select room.id, rpool_room.rpool
		from room, rpool_room, rpool_round, round, timeslot,
			round tround, timeslot ttimeslot

		where tround.id = ?
		and tround.timeslot = ttimeslot.id

			and ttimeslot.tourn = timeslot.tourn
			and ttimeslot.start < timeslot.end
			and ttimeslot.end > timeslot.start

			and timeslot.id = round.timeslot
			and round.id = rpool_round.round
			and rpool_round.rpool = rpool_room.rpool
			and rpool_room.room = room.id

		group by rpool_room.id
		order by room.id
	");

	$sth->execute($round->id);

	my %rpools;

	while (
		my ($room_id, $rpool_id) = $sth->fetchrow_array()
	) {
		$rpools{$room_id}{$rpool_id}++;
	}

	foreach my $room (keys %rpools) {
		$rpool_count{$room} = scalar(keys %{$rpools{$room}});
	}

	my %judge_already = ();
	my %room_count = ();
	my %room_avail = map {$_->id => $_} @rooms;

	my @undone;
	my $flights = $round->flighted;
	$flights = 1 unless $flights;

	my @first_set = @rooms;

	my %panels;
	my %judge_count;

	my $reserved_sth = $dbh->prepare("
		select judge.id, room_reserved.value
			from (judge, ballot, panel, judge_setting room_reserved)
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and judge.id = room_reserved.judge
			and room_reserved.tag = 'room_reserved'
	");

	$reserved_sth->execute($round->id);
	my $reservations = $reserved_sth->fetchall_hash();
	my %judge_reservations = map {$_->{id} => $_->{value} } @{$reservations};
	my %room_reserved;

	foreach my $res (@{$reservations}) {
		$room_reserved{$res->{value}}++;
	}

	if ($round->setting("same_room_timeslot")) {

		my $previous_sth = $dbh->prepare("
			select judge.id, room.id room_id
				from judge, panel, ballot, round, round_setting rs, room,
					round r2, panel p2, ballot b2,
					event, timeslot

				where round.id = ?
					and panel.round = round.id
					and panel.id = ballot.panel
					and ballot.judge = judge.id
					and rs.tag = 'same_room_timeslot'
					and rs.round = round.id
					and rs.value = timeslot.id

					and r2.timeslot = timeslot.id
					and r2.event    = event.id
					and r2.id       = p2.round
					and p2.id       = b2.panel
					and b2.judge    = judge.id
					and p2.room     = room.id
			group by judge.id
		");

		$previous_sth->execute($round->id);
		my $previous = $previous_sth->fetchall_hash();

		foreach my $ref (@{$previous}) {
			$judge_reservations{$ref->{id}} = $ref->{room_id};
			$room_reserved{$ref->{room_id}}++;
		}
	}


	my @new;
	foreach my $room (@rooms) {
		unless ($room_reserved{$room}) {
			push @new, $room;
		}
	}

	@rooms = @new;
	undef @new;

	foreach my $room (@reserve) {
		next if $room_reserved{$room};
		push @new, $room;
	}

	@reserve = @new;

	PANEL:
	foreach my $panel (@panels) {

		next if $panel->room > 0;
		next if $panel->bye > 0;

		if ($panel->flight > $flights) {
			$panel->flight($flights);
			$panel->update();
		}

		@{$panels{$panel->id}{"judges"}} = $m->comp(
			"/funclib/panel_judges.mas",
			panel => $panel
		);

		@{$panels{$panel->id}{"entries"}} = $m->comp(
			"/funclib/panel_entries.mas",
			panel => $panel
		);

		unless ($round_type eq "elim"
			|| $round_type eq "final"
			|| $round_type eq "runoff"
		) {
			foreach my $judge (@{$panels{$panel->id}{"judges"}}){
				if ($judge_reservations{$judge} && $room_by_id{$judge_reservations{$judge}}) {
					$panel->room($judge_reservations{$judge});
					$panel->update();
					next PANEL;
				}
			}
		}
	}

	@panels = sort {$panels{$b->id}{reserved} <=> $panels{$a->id}{reserved}} @panels;

	my %room_pod;
	my %pod_rooms;

	if ($event_settings{"round_robin"}) {

		foreach my $entry (keys %previous_rooms) {

			next unless $previous_rooms{$entry}{"room"};
			next if $room_reserved{$previous_rooms{$entry}{"room"}};

			$room_pod{$previous_rooms{$entry}{"room"}}
				= $previous_rooms{$entry}{"pod"};

			push @{$pod_rooms{$previous_rooms{$entry}{"pod"}}},
				$previous_rooms{$entry}{"room"};
		}
	}

	my %room_already = ();

	if ($round->setting("roomlock_against")) {

		my $other_round = Tab::Round->retrieve($round->setting("roomlock_against"));

		if ($other_round) {

			my $sth = $dbh->prepare("
				select judge.id, room.id
					from judge, panel, room, ballot
				where panel.round = ?
					and panel.id = ballot.panel
					and ballot.judge = judge.id
					and panel.room = room.id
				group by panel.id
			");

			$sth->execute($other_round->id);

			while (
				my ($judge_id, $room_id) = $sth->fetchrow_array()
			) {
				next if $room_reserved{$room_id};
				$room_already{$judge_id} = $room_id;
			}
		}
	}

	my $reset_room_moves = $round->setting("reset_room_moves");

	foreach my $panel (@panels) {

		next if $panel->room > 0;
		next if $panel->bye > 0;

		foreach my $judge (@{$panels{$panel->id}{"judges"}}){
			$judge_count{$judge->id}++;

			$panels{$panel->id}{"ada"}++ if $judge->ada;
			$judge_reservations{$judge->id} = $room_already{$judge->id}
				if $room_already{$judge->id};
		}

		if ($last_round && $last_round->type eq "elim") {
			@{$panels{$panel->id}{"entries"}}  =
				sort {$brackets{$a} <=> $brackets{$b}}
				@{$panels{$panel->id}{"entries"}};
		}

		foreach my $entry (@{$panels{$panel->id}{"entries"}}) {

			if ($event->type eq "mock_trial") {
				$panel_count{$panel->id} += $head_count{$entry};
			}

			if ($entry->ada) {

				$panels{$panel->id}{"ada"}++;
				undef $panels{$panel->id}{"preferred"} if $panels{$panel->id}{"preferred"};

				if ($previous_rooms{$entry->id}{"room"}
					&& $room_avail{$previous_rooms{$entry->id}{"room"}}
				) {
					push (@{$panels{$panel->id}{"preferred"}}, $previous_rooms{$entry->id}{"room"});
				}

			} elsif ($last_round && $last_round->type eq "elim") {

				unless ($panels{$panel->id}{"preferred"}) {
					push @{$panels{$panel->id}{"preferred"}}, $previous_rooms{$entry->id}{"room"};
				}

			} elsif (not defined $reset_room_moves) {

				push @{$panels{$panel->id}{"preferred"}}, $previous_rooms{$entry->id}{"room"}
					if $previous_rooms{$entry->id}{"room"}
					&& $room_avail{$previous_rooms{$entry->id}{"room"}}
					&& $previous_rooms{$entry->id}{"side"} == 2;

				unshift @{$panels{$panel->id}{"preferred"}}, $previous_rooms{$entry->id}{"room"}
					if $previous_rooms{$entry->id}{"room"}
					&& $room_avail{$previous_rooms{$entry->id}{'room'}}
					&& $previous_rooms{$entry->id}{"side"} == 1;

				unshift @{$panels{$panel->id}{"preferred"}}, @{$pod_rooms{$previous_rooms{$entry->id}{"pod"}}}
					if $previous_rooms{$entry->id}{"pod"}
					&& $pod_rooms{$previous_rooms{$entry->id}{"pod"}};
			}
		}
	}

	foreach my $panel (@panels) {

		next if $panel->bye > 0;
		next if $panel->room > 0;

		foreach my $judge (@{$panels{$panel->id}{"judges"}}){
			$panels{$panel->id}{"judgecount"} += $judge_count{$judge->id};
		}
	}

	if ($event->type eq "mock_trial") {

		@panels = sort {$b->bracket <=> $a->bracket} @panels;
		@panels = sort {$panel_count{$b} <=> $panel_count{$a}} @panels;
		@rooms = sort {$a->quality <=> $b->quality} @rooms;
		@rooms = sort {$b->capacity <=> $a->capacity} @rooms;
		@first_set = sort {$b->quality <=> $a->quality} @first_set;
		@first_set = sort {$b->capacity <=> $a->capacity} @first_set;
		@reserve = sort {$a->quality <=> $b->quality} @reserve;

	} elsif ($event_settings{"bracket_rooms"} > 0) {

		@panels = sort {$b->bracket <=> $a->bracket} @panels;
		@panels = sort {$a->bracket <=> $b->bracket} @panels if $round->type eq "elim";
		@rooms = sort {$a->quality <=> $b->quality} @rooms;
		@reserve = sort {$a->quality <=> $b->quality} @reserve;
		@panels = sort {$panels{$b->id}{judgecount} <=> $panels{$a->id}{judgecount}} @panels;

	} else {
		@panels = sort {$a->letter <=> $b->letter} @panels;
		@panels = sort {$panels{$b->id}{judgecount} <=> $panels{$a->id}{judgecount}} @panels;
	}

	@panels = sort {$a->flight <=> $b->flight} @panels;
	@panels = sort {$panels{$b->id}{"ada"} <=> $panels{$a->id}{"ada"}} @panels;
	@panels = sort {$panels{$b->id}{reserved} <=> $panels{$a->id}{reserved}} @panels;

	unless ($event->type eq "mock_trial" || $tourn_settings->{avoid_others_rooms}) {
		@reserve = sort {$rpool_count{$a} <=> $rpool_count{$b}} @reserve;
		@rooms = sort {$rpool_count{$a} <=> $rpool_count{$b}} @rooms;
		@first_set = sort {$rpool_count{$a} <=> $rpool_count{$b}} @first_set;

		@reserve   = sort {$a->ada <=> $b->ada} @reserve;
		@rooms     = sort {$a->ada <=> $b->ada} @rooms;
		@first_set = sort {$a->ada <=> $b->ada} @first_set;
	}

	my %used;
	my %ada_used;
	my %panel_room;

	foreach my $panel (@panels) {

		next if $panel->bye > 0;
		next if $panel->room > 0;

		unless (@rooms) {
			@rooms = @reserve;
			undef @reserve;
		}

		my $room;
		my @judges = @{$panels{$panel->id}{"judges"}} if $panels{$panel->id}{"judges"};

		foreach my $judge (@judges) {
			if ($judge_reservations{$judge->id}) {
				$room = $room_avail{$judge_reservations{$judge->id}};
			}
		}

		unless ($room) {
			if ($panels{$panel}{"ada"}) {
				if ($panels{$panel}{"preferred"}) {
					foreach my $pref (@{$panels{$panel->id}{"preferred"}}) {
						next unless $room_avail{$pref};
						next unless $room_avail{$pref}->ada;
						next if $used{$pref} > 0;
						next if $room_reserved{$pref};

						if ($hybrids{$panel}) {
							next unless $room_avail{$pref}->url;
						}

						$room = $room_avail{$pref};
						last if $room;
					}
				}
			}
		}

		if ($room) {
			$panel_room{$panel} = $room;
		}
	}

	my @ada_rooms;

	foreach my $room (@rooms) {
		next if $used{$room->id};
		next if $room_reserved{$room->id};
		push @ada_rooms, $room if $room->ada;
	}

	foreach my $panel (@panels) {

		next if $panel->bye > 0;
		next if $panel->room > 0;

		unless (@rooms) {
			@rooms = @reserve;
			undef @reserve;
		}

		my $room = $panel_room{$panel};
		my @judges = @{$panels{$panel->id}{"judges"}} if $panels{$panel->id}{"judges"};

		if ($panels{$panel}{"ada"} && (not defined $hybrids{$panel})) {

			if (@ada_rooms && ((not defined $room) || $room->ada < 1)) {
				$room = shift @ada_rooms;
			}

		} elsif ($panels{$panel}{"preferred"}) {

			foreach my $pref (@{$panels{$panel->id}{"preferred"}}) {
				next if $room;
				next if $used{$pref};
				next unless $room_avail{$pref};
				next if $room_reserved{$pref};
				if ($hybrids{$panel}) {
					next unless $room_avail{$pref}->url;
				}
				$room = $room_avail{$pref};
			}
		}

		foreach my $judge (@judges) {

			my $already = $judge_already{$judge->id};

			if ($already) {

				if ($used{$already}) {
					my $count = $used{$already};
					if ($count < $flights) {
						$count++;
						unless ($num_judges > 1) {

							unless ($ada_used{$already}) {
								$panel->flight($count);
								$panel->update;
							}
						}
						$room = $already;
					}
				} else {
					unless ($ada_used{$already} && $num_judges > 1) {
						$panel->flight(1);
						$panel->update;
					}
					$room = $already;
				}
			}
		}

		unless ($room) {
			while (@first_set) {
				$room = shift @first_set;
				next if $used{$room->id};
				next if $room_reserved{$room->id};
				last if $room;
			}
			undef $room if $room && $used{$room->id};
		}

		next if $room && $room_reserved{$room->id};
		$used{$room}++ if $room;

		if ($panels{$panel->id}{"ada"}) {
			$ada_used{$room} = $panel;
		}

		next if $room && $room_count{$room->id} >= $flights;
		next if $room && $room_strikes{$panel->id}{$room->id};

		if ($hybrids{$panel}) {
			next unless $room->url;
		}

		if ($room && $room->id) {

			$room_count{$room->id}++;
			$panel->room($room->id) if $room;

			if ($panel->flight != $room_count{$room->id}) {

				unless ($num_judges > 1 || $ada_used{$room}) {
					$panel->flight($room_count{$room->id})
				}
			}

			$panel->update();

			foreach my $judge (@judges) {
				$judge_already{$judge->id} = $room;
			}

		} else {
			push @undone, $panel;
		}
	}

	my $oh_crap_ran_out;

	PANEL:
	foreach my $panel (@undone) {

		next if $panel->room > 0;
		next if $panel->bye > 0;

		$oh_crap_ran_out++;

		if ($panels{$panel}{"ada"}) {

			foreach my $room (@ada_rooms) {
				next if $room_count{$room->id} >= $flights;
				next if $room_strikes{$panel->id}{$room->id};
				next if $room_reserved{$room->id};
				if ($hybrids{$panel}) {
					next unless $room->url
				}

				$panel->room($room->id);
				$room_count{$room->id}++;
				if ($panel->flight != $room_count{$room->id}) {
					unless ($num_judges > 1 || $ada_used{$room}) {
						$panel->flight($room_count{$room->id})
					}
				}


				$panel->update;
				$oh_crap_ran_out--;
				next PANEL;
			}
		}

		foreach my $room (@rooms, @reserve) {
			next if $room_count{$room->id} >= $flights;
			next if $room_strikes{$panel->id}{$room->id};
			next if $room_reserved{$room->id};
			if ($hybrids{$panel}) {
				next unless $room->url;
			}

			$panel->room($room->id);
			$room_count{$room->id}++;

			if ($panel->flight != $room_count{$room->id}) {
				unless ($num_judges > 1 || $ada_used{$room}) {
					$panel->flight($room_count{$room->id})
				}
			}

			$panel->update;
			$oh_crap_ran_out--;
			next PANEL;
		}
	}

	if ($round->setting("letter_start")) {

		eval { @panels = sort {$a->room->name cmp $b->room->name}  @panels; };
		eval { @panels = sort {$a->flight <=> $b->flight}  @panels; };

		my $letter = $round->setting("letter_start");
		$letter =~ s/[\W_]//g;

		if ($letter) {
			foreach my $panel (@panels) {
				next unless $panel > 0;
				$panel->letter($letter);
				$panel->update();
				$letter++;
			}
		}
	}

	foreach my $tie (@ties) {

		my %room_letter = map {$_->letter => $_->room} @panels;

		foreach my $opanel ($tie->panels) {
			$opanel->room($room_letter{$opanel->letter});
			$opanel->update();
		}
	}

	if ($event_settings{"online_hybrid"}) {
		$m->comp("/funclib/hybrid_panels.mas", round => $round);
	}

	my $description = "Assigned Rooms in ".$round->realname." of ".$event->abbr;

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $event->id,
		tourn       => $tourn->id,
		person      => $person,
		description => $description
	);

	my $msg = "Rooms have been assigned";
	return $msg if $return;

	my $full_err = "Insufficent rooms were available.  Some rounds do not have rooms!"
		if $oh_crap_ran_out > 0;

	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg&fullmsg=$full_err");

</%init>
