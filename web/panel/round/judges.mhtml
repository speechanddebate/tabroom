<%args>
	$tourn
	$tourn_settings
	$person
	$round_id   => undef
	$round      => undef
	$parlis     => undef
	$return     => undef
	$num_judges => undef
	$dbh
</%args>
<%init>

	use List::Util qw(shuffle);

	unless ($round) {
		$round = Tab::Round->retrieve($round_id);
	}

	unless ($round) {
		$m->comp(
			"/funclib/abort.mas",
			err => "No round found for ID ".$round->id
		);
	}

	my $event    = $round->event;
	my $event_id = $event->id;
	my $category = $event->category;

	my %round_settings    = $round->all_settings;
	my %event_settings    = $event->all_settings();
	my %category_settings = $category->all_settings();

	my @panels = sort {
		$b->bracket <=> $a->bracket
		|| $a->letter <=> $b->letter
	} $round->panels(bye => 0);

	unless ($num_judges) {
		$num_judges = $round_settings{"num_judges"};
		$num_judges = 1 unless $num_judges;
		$num_judges = 1 if $parlis == 1;
		$num_judges++ if $parlis == 3;
	}

	my $num_flights = $round->flighted;
	$num_flights = 1 unless $num_flights;

	unless (
		$event_settings{'online_mode'} eq "nsda_campus"
		|| $event_settings{'online_mode'} eq "nsda_campus_observers"
	) {
		$num_flights = 1 if $event_settings{"flight_rooms_only"};
	}

	$m->comp(
		"/funclib/round_clear_judges.mas",
		round        => $round,
		person       => $person,
		erase_chairs => $parlis,
	);

	$m->comp("/funclib/round_clean.mas",
		round  => $round,
		dbh    => $dbh,
		person => $person
	);

	my %panels_by_letter = ();
	my $last_round;

	if ( ( $parlis == 1 || $parlis == 3 )&& $event->type eq "congress" ) {

		foreach my $oround ($m->comp("/funclib/congress_ties.mas", round => $round)) {

			my $didit;

			foreach my $panel ($oround->panels) {
				push @{$panels_by_letter{$panel->letter}}, $panel;
				$didit++;
			}

			if ($didit) {
				$m->comp(
					"/funclib/round_clear_judges.mas",
					round        => $oround,
					person       => $person,
					erase_chairs => $parlis,
				);
			}

			$last_round = $oround unless $last_round;
			$last_round = $oround if $oround->name > $last_round->name;
		}
	}

	my $description = "Reassigned the judges in round ".$round->realname." of ".$event->abbr." using judges.mhtml";

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $event_id,
		tourn       => $event->tourn->id,
		person      => $person,
		description => $description
	);

	my %judge_settings = $m->comp(
		"/funclib/category_judge_settings.mas",
		category => $category,
		value    => 1,
		all      => 1
	);

	if ($event->type eq "wudc") {

		my %panel_judges;
		my %panel_already_judges;
		my %used_judges;

		foreach my $panel (@panels) {

			%{$panel_judges{$panel->id}} = $m->comp(
				"/funclib/clean_judges.mas",
					panel             => $panel,
					wudc              => "true",
					autopanel         => 1,
					event_settings    => \%event_settings,
					category_settings => \%category_settings,
			);

			@{$panel_already_judges{$panel->id}} = $m->comp(
				"/funclib/panel_judges.mas",
				panel => $panel
			);
		}

		my $order_string = $round_settings{"tab_rating_priority"};
		my @orders = split(/\,/, $order_string);

		unless (
			$category_settings{"coach_ratings"}
			|| $category_settings{"tab_ratings"}
		) {
			undef @orders;
		}

		my %used;

		if (@orders) {

			foreach my $order (@orders) {
				foreach my $panel (@panels) {

					next unless $panel->bracket == $order;
					my $judge;

					JUDGE:
					foreach my $can (keys %{$panel_judges{$panel->id}}) {

						next if $used_judges{$judge};

						unless ($category_settings{"allow_school_panels"}) {
							if ( $panel_judges{$panel->id}{$can}{"school"}
								&& $used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$can}{"school"}}
							) {
								next;
							}
						}

						if ($event_settings{"region_judge_forbid"}) {
							if ( $panel_judges{$panel->id}{$can}{"region"}
								&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
							) {
								next;
							}
						}

						if ($event_settings{"region_avoid"}) {
							if ( $panel_judges{$panel->id}{$can}{"region"}
								&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
							) {
								next;
							}

							if ( $panel_judges{$panel->id}{$can}{"area"}
								&& $used{"areas"}{$panel->id}{$panel_judges{$panel->id}{$can}{"area"}}
							) {
								next;
							}
						}

						if ($can) {
							$judge = $can;
							last JUDGE;
						}
					}

					unless ($judge) {

						foreach my $can (keys %{$panel_judges{$panel->id}}) {

							next if $used_judges{$judge};

							unless ($category_settings{"allow_school_panels"}) {
								if ( $panel_judges{$panel->id}{$can}{"school"}
									&& $used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$can}{"school"}}
								) {
									next;
								}
							}

							if ($event_settings{"region_judge_forbid"}) {
								if ( $panel_judges{$panel->id}{$can}{"region"}
									&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
								) {
									next;
								}
							}
							if ($can) {
								$judge = $can;
								last JUDGE;
							}
						}
					}

					if ($judge) {

						$m->comp("/funclib/panel_judgeadd.mas",
							panel    => $panel,
							judge_id => $judge
						);

						$used_judges{$judge}++;

						if ($judge && $panel_judges{$panel->id}{$judge}{"school"}) {
							$used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"school"}}++;
						}

						if ($judge && $panel_judges{$panel->id}{$judge}{"area"}) {
							$used{"areas"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"area"}}++;
						}

						if ($judge && $panel_judges{$panel->id}{$judge}{"region"}) {
							$used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"region"}}++;
						}
					}
				}

				@panels = reverse(@panels);
			}

		} else {

			$num_judges = 3 unless $num_judges;
			my %chair_done;

			foreach (1 .. $num_judges ) {
				foreach my $panel (@panels) {

					my $judge;

					JUDGE:
					foreach my $can (keys %{$panel_judges{$panel->id}}) {

						next if $used_judges{$judge};

						unless ($category_settings{"allow_school_panels"}) {
							if ( $panel_judges{$panel->id}{$can}{"school"}
								&& $used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$can}{"school"}}
							) {
								next;
							}
						}

						if ($event_settings{"region_judge_forbid"}) {
							if ( $panel_judges{$panel->id}{$can}{"region"}
								&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
							) {
								next;
							}
						}

						if ($event_settings{"region_avoid"}) {
							if ( $panel_judges{$panel->id}{$can}{"region"}
								&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
							) {
								next;
							}

							if ( $panel_judges{$panel->id}{$can}{"area"}
								&& $used{"areas"}{$panel->id}{$panel_judges{$panel->id}{$can}{"area"}}
							) {
								next;
							}
						}

						if ($can) {
							$judge = $can;
							last JUDGE;
						}
					}

					unless ($judge) {

						foreach my $can (keys %{$panel_judges{$panel->id}}) {

							next if $used_judges{$judge};

							unless ($category_settings{"allow_school_panels"}) {
								if ( $panel_judges{$panel->id}{$can}{"school"}
									&& $used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$can}{"school"}}
								) {
									next;
								}
							}

							if ($event_settings{"region_judge_forbid"}) {
								if ( $panel_judges{$panel->id}{$can}{"region"}
									&& $used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$can}{"region"}}
								) {
									next;
								}
							}
							if ($can) {
								$judge = $can;
								last JUDGE;
							}
						}
					}

					if ($judge) {

						my $chair = 0;

						if ($event_settings{"auto_chairs"}) {
							unless ($chair_done{$panel}++) {
								$chair = 1;
							}
						}

						$m->comp("/funclib/panel_judgeadd.mas",
							panel    => $panel,
							judge_id => $judge,
							chair    => $chair
						);

						$used_judges{$judge}++;

						if ($judge && $panel_judges{$panel->id}{$judge}{"school"}) {
							$used{"schools"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"school"}}++;
						}

						if ($judge && $panel_judges{$panel->id}{$judge}{"area"}) {
							$used{"areas"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"area"}}++;
						}

						if ($judge && $panel_judges{$panel->id}{$judge}{"region"}) {
							$used{"regions"}{$panel->id}{$panel_judges{$panel->id}{$judge}{"region"}}++;
						}
					}

				}
				@panels = reverse(@panels);
			}
		}

	} else {

		my %rating_by_judge = ();
		my $ratings_exist;

		if (
			($category_settings{"coach_ratings"} || $category_settings{"tab_ratings"})
			&& (
				(not defined $category_settings{"elim_only_ratings"})
				|| ($round->type ne "prelim")
			)
		) {

			my $rating_sth = $dbh->prepare("
				select
					judge.id, rating_tier.name, subrt.name, tab_rating.value

				from (judge, round, event)

					left join rating on rating.judge = judge.id and rating.type = 'coach'
					left join rating_tier on rating_tier.id = rating.rating_tier

					left join rating_subset on rating_subset.id = event.rating_subset
					left join rating subrating on subrating.rating_subset = rating_subset.id
						and subrating.judge = judge.id
						and subrating.type = 'coach'

					left join rating_tier subrt on subrt.id = subrating.rating_tier

					left join judge_setting tab_rating
						on tab_rating.judge = judge.id
						and tab_rating.tag = 'tab_rating'

				where round.id = ?
					and round.event = event.id

			        and exists (
						select category.id
						from category
						where category.id = judge.category
						and category.tourn = event.tourn
					)

					and (
						judge.category = event.category
						or judge.alt_category = event.category
						or exists (
							select jpj.id
							from jpool_judge jpj, jpool_round jpr
							where jpj.judge = judge.id
							and jpj.jpool = jpr.jpool
							and jpr.round = round.id
						)
					)
			");

			$rating_sth->execute($round->id);

			while (
				my ( $judge_id, $rating_tier, $better_rating_tier, $tab_rating) = $rating_sth->fetchrow_array()
			) {

				$ratings_exist = 1;
				$rating_by_judge{$judge_id} = $rating_tier;
				$rating_by_judge{$judge_id} = $better_rating_tier if $better_rating_tier;
				$rating_by_judge{$judge_id} = $tab_rating if $tab_rating;
			}
		}

		my $judge_use = $m->comp("/funclib/judge_use.mas", round => $round);

		my %panel_judges = ();

		foreach my $panel (@panels) {
			%{$panel_judges{$panel->id}} = $m->comp(
				"/funclib/clean_judges.mas",
					panel             => $panel,
					event_settings    => \%event_settings,
					category_settings => \%category_settings,
					autopanel         => 1,
					parlis            => $parlis
			);
		}

		my %buddies;
		my %lf;
		my %notfirst;

		my $order_string = $round_settings{"tab_rating_priority"};
		my @orders = split(/\,/, $order_string);

		unless (
			$category_settings{"coach_ratings"}
			|| $category_settings{"tab_ratings"}
		) {
			undef @orders;
		}

		if ($num_flights > 1) {

			my @others = shuffle @panels;

			if (@orders) {
				my %ranks;
				my $next = 1;
				foreach my $order (@orders) {
					next if $ranks{$order};
					$ranks{$order} = $next++;
				}
				@panels = sort { $ranks{$a->bracket} <=> $ranks{$b->bracket} } @panels;
			}

			foreach my $panel (@panels) {

				next if $lf{$panel}++;
				my $count = 1;

				while ( (scalar @others > 0) && ($count < $num_flights)) {

					my $candidate = shift @others;

					unless ($lf{$candidate}) {
						$count++;
						$candidate->flight($count);
						$candidate->update();
						push @{$buddies{$panel->id}}, $candidate;
						$lf{$candidate}++;
						$notfirst{$candidate}++;
					}
				}
			}
		}

		my %done = ();
		my %all_judged = ();
		my %chaired;
		my %already = ();

		foreach my $tick (1 .. $num_judges) {

			@panels = reverse(@panels);

			if (@orders) {
				my %ranks;
				my $next = 1;
				foreach my $order (@orders) {
					next if $ranks{$order};
					$ranks{$order} = $next++;
				}
				@panels = sort { $ranks{$a->bracket} <=> $ranks{$b->bracket} } @panels;
			}

			foreach my $panel (@panels) {

				next if $notfirst{$panel};

				my @judges;

				if ($panel_judges{$panel->id}) {

					my @raw_judges = sort {
						$judge_use->{$a}{"everything"} <=> $judge_use->{$b}{"everything"}
					} shuffle(keys %{$panel_judges{$panel->id}});

					foreach my $flight ($panel, @{$buddies{$panel->id}}) {
						my @cand = @raw_judges;
						undef @raw_judges;

						foreach my $judge (@cand) {
							next unless $panel_judges{$flight->id}{$judge};
							push @raw_judges, $judge;
						}
					}

					@judges = @raw_judges;

					if ($category_settings{"rounds_per"}
						&& $round->type ne "elim"
						&& $round->type ne "final"
						&& $round->type ne "runoff"
					) {
						@judges = sort { $judge_use->{$b}{"left"} <=> $judge_use->{$a}{"left"} } @judges;
					}

					if (
						$ratings_exist
						&& (
							(not defined $category_settings{"elim_only_ratings"})
							|| $round->type eq "elim"
							|| $round->type eq "final"
							|| $round->type eq "runoff"
						)
					) {

						if ($event_settings{"invert_ratings"}) {
							@judges = sort {
								length($rating_by_judge{$b}) <=> length($rating_by_judge{$a})
								|| $rating_by_judge{$b} cmp $rating_by_judge{$a}
							} @judges;
						} else {
							@judges = sort {
								length($rating_by_judge{$a}) <=> length($rating_by_judge{$b})
								|| $rating_by_judge{$a} cmp $rating_by_judge{$b}
							} @judges;
						}
					}
				}

				next if $done{"P-".$panel->id} && $parlis == 1;
				my $chosen;

				# This sorts the parlis to the bottom; the steps that require
				# them will go and get them, but then scorers will be drawn
				# first from non-parlis so as not to absorb them all where not
				# needed.

				JUDGE:
				foreach my $judge (@judges) {

					next if $done{"J-".$judge};

					my $region = $panel_judges{$panel->id}{$judge}{"region"};
					my $area   = $panel_judges{$panel->id}{$judge}{"area"};
					my $school = $panel_judges{$panel->id}{$judge}{"school"};

					if (not defined $category_settings{"allow_school_panels"}) {
						if ($school > 0 && $already{'school'}{$panel}{$school}) {
							next JUDGE;
						}
					}

					if ($tourn_settings->{regions}
						&& (not defined $category_settings{"allow_school_panels"})
					) {
						if ($region > 0 && $already{'region'}{$panel}{$region}) {
							next JUDGE;
						}

						if ($area > 0 && $already{'area'}{$panel}{$area}) {
							next JUDGE;
						}
					}

					if ($parlis == 1) {

						if (not defined $judge_settings{$judge}{"parli"}) {
							next JUDGE
						}

						$done{$panel->id}{"parli"}++;

					} elsif ($parlis == 3) {
						if (
							(not defined $judge_settings{$judge}{"parli"})
							&& (not defined $done{$panel->id}{"parli_done"})
						) {
							next JUDGE;
						}
					}

					$already{"school"}{$panel}{$school}++ if $school;
					$already{"region"}{$panel}{$region}++ if $region;
					$already{"area"}{$panel}{$area}++ if $area;

					$chosen = $judge;
					last JUDGE;
				}

				# Loosen some of the regional restrictions if there are no clean judges
				unless ($chosen) {

					JUDGE:
					foreach my $judge (@judges) {

						next if $done{"J-".$judge};

						my $region = $panel_judges{$panel->id}{$judge}{"region"};
						my $area   = $panel_judges{$panel->id}{$judge}{"area"};
						my $school = $panel_judges{$panel->id}{$judge}{"school"};

						if (not defined $category_settings{"allow_school_panels"}) {
							if ($school > 0 && $already{'school'}{$panel}{$school}) {
								next JUDGE;
							}
						}

						if ($tourn_settings->{regions}
							&& (not defined $category_settings{"allow_school_panels"})
						) {
							if ($region > 0 && $already{'region'}{$panel}{$region} > 1) {
								next JUDGE;
							}
						}

						if ($parlis == 1) {

							if (not defined $judge_settings{$judge}{"parli"}) {
								next JUDGE
							}

							$done{$panel->id}{"parli"}++;

						} elsif ($parlis == 3) {
							if (
								(not defined $judge_settings{$judge}{"parli"})
								&& (not defined $done{$panel->id}{"parli_done"})
							) {
								next JUDGE;
							}
						}

						$already{"school"}{$panel}{$school}++ if $school;
						$already{"region"}{$panel}{$region}++ if $region;
						$already{"area"}{$panel}{$area}++ if $area;

						$chosen = $judge;
						last JUDGE;
					}
				}

				my $chair;

				if (
					($parlis || $event_settings{"auto_chairs"})
					&& (not defined $chaired{$panel})
					&& $parlis != 2
				) {

					if ($event_settings{"auto_chairs"}) {
						unless ($done{$panel->id}{"chair"}++) {
							$chair++;
						}
					}

					if ($parlis == 1) {
						$chair++;
					}

					if ($parlis == 3) {
						$chair++ if $judge_settings{$chosen}{"parli"}
							&& (not defined $done{$panel->id}{"parli_done"});
					}

					$done{$panel->id}{"parli_done"}++;
				}

				foreach my $flight ($panel, @{$buddies{$panel}}) {

					if ($parlis && $chair) {

						if ($event->type eq "congress") {

							foreach my $ochamber (@{$panels_by_letter{$flight->letter}}) {

								my $audited++ if $ochamber->round->id != $last_round->id;

								$m->comp(
									"/funclib/panel_judgeadd.mas",
									panel    => $ochamber,
									judge_id => $chosen,
									chair    => $chair,
									done     => $audited
								) if $chosen;
							}

							$done{"P-".$flight->id}++;

						} elsif ($event->type eq "mock_trial") {

							$m->comp(
								"/funclib/panel_judgeadd.mas",
								panel    => $flight,
								judge_id => $chosen,
								chair    => $chair
							) if $chosen;

						}

					} else {

						$m->comp(
							"/funclib/panel_judgeadd.mas",
							panel    => $flight,
							judge_id => $chosen,
							chair    => $chair
						) if $chosen;

					}

					$done{"J-".$chosen}++;
				}
			}
		}
	}

	my $msg = "Judges have been assigned";

	if ($parlis == 1) {
		if ($tourn_settings->{"mock_trial_registrations"}) {
			$msg = "Judges have been assigned in all rounds";
		} else {
			$msg = "Parliamentarians have been assigned in all rounds";
		}
	}

	return $msg if $return;

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&msg=$msg");

</%init>
