<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$perms
	$dbh
	$event_id   => undef
	$round_id   => undef
	$all        => undef
	$dostring   => undef
	$doroom     => undef
	$dojudge    => undef
	$certain    => undef
	$whoami     => undef
	$limit_to   => undef
	$seed_basis => undef
	$clone      => undef
</%args>
<%init>

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas",
		tourn => $tourn,
		perms => $perms
	);

	my @allowed_events = @{$eventref};
	my %allowed = map {$_->id => $_} @allowed_events;

	my @rounds;
	my @events;

	my %event_rounds = ();
	my %num_panels_by_event = ();
	my %num_panels_by_round = ();

	my %do_it = map {$_ => 1} split(/\,/, $dostring) if $dostring;
	my %do_room = map {$_ => 1} split(/\,/, $doroom) if $doroom;
	my %do_judge = map {$_ => 1} split(/\,/, $dojudge) if $dojudge;

	my $round;
	my $event;

	if ( $tourn_settings->{"nsda_district"} ) {

		my $round_type = $ARGS{"round_type"};

		if ($ARGS{"new_round"}) {
			$event = Tab::Event->retrieve($event_id);
		} elsif ($round_id) {
			$round = Tab::Round->retrieve($round_id);
			$event = $round->event;
		} elsif ($event_id) {
			$event = Tab::Event->retrieve($event_id);
		}

		unless ($event) {
			$m->print("No valid event or round ID sent  Event $event_id round $round_id");
			$m->abort();
		}
	}

	my $undo_doom;

	if ($all) {

        my $description = "Sectioned/paired all events";

		$m->comp("/funclib/log.mas",
            type        => 'tabbing',
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        );

		if ($dostring) {

			foreach my $event (@allowed_events) {

				foreach my $eround ($event->rounds) {

					if ($event->type eq "congress") {
						next if $eround->type ne "prelim";
					} else {
						next if $eround->type eq "elim";
						next if $eround->type eq "final";
						next if $eround->type eq "snaked_prelim";
						next if $eround->type eq "runoff";
					}

					push @rounds, $eround if $do_it{$eround->id};

					push @{$event_rounds{$event->id}}, $eround
						if $do_it{$eround->id};

					push @events, $event if $do_it{$eround->id};
				}

			}

		} elsif ($round_id) {

			my $round = Tab::Round->retrieve($round_id);
			my $event = $round->event;

			if ($allowed{$event->id}) {

				push (@events, $event);

				my $round_type = $round->type if $round;
				$round_type = "prelim" unless $round_type;

				$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$round->id};

				foreach my $eround ($event->rounds) {

					next if $eround->type ne $round_type;
					push (@rounds, $eround);
					push @{$event_rounds{$event->id}}, $eround;

					$m->comp("/funclib/round_dump.mas",
						person => $person,
						round  => $eround
					) if $ARGS{"wipe"} || $ARGS{"wipe_".$eround};

				}

				$undo_doom++;

			} elsif ($ARGS{"congress_method"}) {
				push @{$event_rounds{$event->id}}, $m->comp('/funclib/congress_ties.mas', round => $round);

			}

		} else {

			my @clear;

			foreach my $event (@allowed_events) {

				next unless $ARGS{"do_".$event->id};

				push (@clear, $event);

				foreach my $eround ($event->rounds) {

					next if $eround->type eq "elim";
					next if $eround->type eq "final";
					next if $eround->type eq "snaked_prelim";
					next if $eround->type eq "runoff";

					push (@rounds, $eround);
					push @{$event_rounds{$event->id}}, $eround;
				}

				$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$event->id};

				$num_panels_by_event{$event->id} = $ARGS{"num_panels_override_".$event->id}
					if $ARGS{"num_panels_override_".$event->id};

			}
			@events = @clear;
		}

	} elsif ($round || $round_id) {

		unless ($round) {
			$round = Tab::Round->retrieve($round_id);
		}

		if ($round && not defined $event) {
			$event = $round->event;
		}

		if (
			($event->type eq "debate"  || $event->type eq "mock_trial")
			&& $tourn_settings->{"nsda_district"}
		) {
			unless ($event->setting("district_mode")) {
				my $err = "You must select one of the three District debate modes (at top left) before continuing.";
				$m->redirect("/setup/events/sectioning.mhtml?event_id=".$event->id."&err=$err");
			}
		}

		if ($round && ($allowed{$event->id} || $ARGS{'congress_method'})) {

			my $description = "Sectioned round ".$round->realname." of ".$event->abbr;

			if ($ARGS{"num_panels_".$round->id}) {

				$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};

			} elsif ($ARGS{"num_panels"}) {

				$num_panels_by_round{$round->id} = $ARGS{"num_panels"};

			} elsif ($round->panels) {

				$num_panels_by_round{$round->id} = scalar $round->panels;

			}

			push (@rounds, $round);
			push @{$event_rounds{$event->id}}, $round;
			push (@events, $event);

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);
		}

	} else {

		unless (defined $event) {
			$event = Tab::Event->retrieve($event_id);
		}

		$m->abort unless $event;
		$m->abort unless $allowed{$event->id};

        my $description = "Sectioned all of ".$event->abbr;

		$m->comp("/funclib/log.mas",
            type        => 'tabbing',
            event       => $event->id,
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        );

		push (@events, $event);

		foreach my $round ($event->rounds) {

			next if $round->type eq "elim";
			next if $round->type eq "final";
			next if $round->type eq "snaked_prelim";
			next if $round->type eq "runoff";

			next unless $ARGS{"do_".$round->id};

			push (@rounds, $round);
			push @{$event_rounds{$event->id}}, $round;

			$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};

			$num_panels_by_round{$round->id} = $ARGS{"num_panels_override_".$round->id}
				if $ARGS{"num_panels_override_".$round->id};

		}
	}

	my %seen = ();
	@events = grep { ! $seen{$_->id} ++ } @events;

	my %rseen = ();
	@rounds = grep { ! $rseen{$_->id} ++ } @rounds;

	my $doom_and_destruction;
	my $even_more_doom_and_destruction;

	$undo_doom++ if $tourn_settings->{"nsda_nats"};
	undef $undo_doom if $ARGS{"redo"};

	unless (scalar @events) {
		$m->comp("/funclib/abort.mas", message => "No valid events appeared in your selection.");
	}

	# This check has already been done for the NSDA
	unless ($undo_doom) {

		foreach my $round (@rounds) {
			my @judges = $m->comp("/funclib/round_judges.mas", round => $round);

			if (scalar @judges) {
				$doom_and_destruction++;
			}

			my @scores = $m->comp("/funclib/round_scores.mas", round => $round);

			if (scalar @scores) {
				$even_more_doom_and_destruction++;
			}
		}
	}

	if ($doom_and_destruction && $certain ne "I am quite certain") {

		my @ties;
		my $event;

		if ($round) {
			$event = $round->event;
			@ties = $m->comp("/funclib/congress_ties.mas", round => $round);
		}

		my $origin;

		if (@ties) {
			$origin = $ties[0];
		}

</%init>

		<div
			class = "padno blankfull centeralign"
			style = "text-align: center !important; min-height: 650px; padding-top: 20px;"
		>

			<div style="margin: auto; width: 700px; padding: none;">

				<&  "/funclib/warning.mas", person => $person &>

%				if ($round && $event->type eq "congress" && @ties) {
					<p class="semibold bluetext centeralign">
						This process will delete and re-assign <% scalar @ties %> sessions:
					</p>

%					if ($ARGS{'congress_method'} eq 'single') {
						<div class="full redtext centeralign">
							<h5 class="marno padless">
								<% $event->name %>
								<% $round->realname %>
							</h5>
						</div>
%					} elsif ($ARGS{'congress_method'} eq 'realign') {
						<div class="full redtext centeralign">
							<h5 class="marno padless">
								<% $event->name %>
<%perl>
								my $notfirst;
								foreach my $round (@ties) {
									next if $round == $origin;
									if ($notfirst++) {
   										$m->print(", ");
									}
   									$m->print($round->realname);
								}
</%perl>
							</h5>
						</div>
%					} else {
						<div class="full redtext centeralign">
							<h5 class="marno padless">
								<% $event->name %>
<%perl>
								my $notfirst;
								foreach my $round (@ties) {
									if ($notfirst++) {
   										$m->print(", ");
									}
   									$m->print($round->realname);
								}
</%perl>
							</h5>
						</div>
%					}

%				} else {

					<p class="semibold bluetext centeralign">
						This process will delete and re-assign rounds
					</p>

%					foreach my $round (@rounds) {
						<div class="full redtext centeralign">
							<h5 class="marno padless">
								<% $round->event->name %>
								<% $round->realname %>
							</h5>
						</div>
%					}
%				}

				<p class="semibold bluetext centeralign">
					You have assigned judges to those rounds!
				</p>

%				if ($even_more_doom_and_destruction) {
					<p class="warning centeralign" style="font-size: 180%">
						AND YOU HAVE ENTERED BALLOTS?!  EEK!
					</p>
%				}

				<p class="centeralign">
					All right.  Level with me here.  If you want to delete them
					and re-assign them, I guess I'll let you.  I get it, things
					happen at a tournament, you want to start from scratch.
				</p>

%				if ($round) {
					<p class="centeralign">
						Please consider
							<a href="/panel/schemat/show.mhtml?round_id=<% $round %>&default=settings"
								class="dkblue underline inline"
							>taking a backup of the round data</a>
						before you
						do this.  Or better still,
							<a href="/setup/events/follow.mhtml?event_id=<% $round->event->id %>"
								class="dkblue underline inline"
							>enable auto-backups</a>
						so you get them mailed to
						you whenever you finish or delete a round.
					</p>

%				} else {
					<p class="centeralign">
						Please consider
							<a href="/register/data/export_data.mhtml"
								class="dkblue underline inline"
							>taking a backup of the tournament data</a>
						before you
						do this.  Or better still,
							<a href="/setup/tourn/backups.mhtml"
								class="dkblue underline inline"
							>enable auto-backups</a>
						so you get them mailed to
						you whenever you finish or delete a round.
					</p>
%				}

				<p class="centeralign">
					But you're not going to get these back.  There's no undo
					here, there's no retreat; you're committing yourself.  I
					don't want you to come crying to me as if it's my fault,
					because it's not going to be.
				</p>

				<p class="centeralign">
					So if you do mean this, you have to type "I am quite
					certain" in the box below.  Not just "I am certain" like
					usual.  I want to check to be sure you're actually paying
					attention and not just going through the motions before,
					y'know, blowing away entire rounds of your tournament.
				</p>

%       		if ($certain) {
					<p class="warning centeralign">
						You did not type "I am quite certain", exactly like
						that.  Try again
					</p>
%       		}

<%perl>
				my $dostring;

				foreach my $round (@rounds) {
					$dostring .= "," if $dostring;
					$dostring .= $round->id;
				}

				my $doroom;

				foreach my $event (@events) {
					if ($ARGS{"room_".$event->id}) {
						$doroom .= "," if $doroom;
						$doroom .= $event->id;
					}
				}

				my $dojudge;

				foreach my $event (@events) {
					if ($ARGS{"judge_".$event->id}) {
						$dojudge .= "," if $dojudge;
						$dojudge .= $event->id;
					}
				}

</%perl>
				<form
					action="panel_master.mhtml"
					method="post"
				>

				<input
					type  = "hidden"
					value = "<% $ARGS{"all"} %>"
					name  = "all"
				>

				<input
					type  = "hidden"
					value = "<% $ARGS{"po_contest"} %>"
					name  = "po_contest"
				>

				<input
					type  = "hidden"
					value = "<% $dostring %>"
					name  = "dostring"
				>

				<input
					type  = "hidden"
					value = "<% $ARGS{'congress_method'} %>"
					name  = "congress_method"
				>

				<input
					type  = "hidden"
					value = "<% $ARGS{"num_panels"} %>"
					name  = "num_panels"
				>

				<input
					type  = "hidden"
					value = "<% $whoami %>"
					name  = "whoami"
				>

				<input
					type  = "hidden"
					value = "<% $round_id %>"
					name  = "round_id"
				>

				<p class="centeralign">
					<input
						type           = "text"
						name           = "certain"
						size           = "20"
						autocomplete   = "off"
						autocorrect    = "off"
						autocapitalize = "off"
						spellcheck     = "false"
						class          = "martop notfirst"
					>
				</p>

		        <p class="centeralign">
					<input
						type  = "submit"
						value = "Re-Assign Rounds"
					>
					</form>
				</p>

				<div class="martopmore marbottom full">
				</div>

			</div>

		</div>

%	} else {

		<div class="main">

			<h2>Creating rounds for <% scalar @events %> events:</h2>
<%perl>

			my $snaked;

			EVENT:
			foreach my $event (@events) {

				my $num_panels = $num_panels_by_event{$event->id};

				if ($event->type eq "speech") {

					my @event_rounds = @{$event_rounds{$event->id}}
						if $event_rounds{$event->id}
						&& @{$event_rounds{$event->id}};

					if (@event_rounds) {
						$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>");
						$m->print("<h6>".scalar @event_rounds." rounds</h6>");
					}

					$m->flush_buffer() unless $round_id;

					foreach my $eround (@event_rounds) {

						next unless $eround->event->id == $event->id;

						next if $eround->type eq "elim";
						next if $eround->type eq "snaked_prelim";
						next if $eround->type eq "final";
						next if $eround->type eq "runoff";

						$m->comp(
							"/funclib/round_dump.mas",
							person => $person,
							round  => $eround
						);

						if ($num_panels_by_round{$eround->id}) {
							$num_panels = $num_panels_by_round{$eround->id};
						}

						unless ($num_panels) {

							my $defaultpanelsize = $event->setting("default_panel_size");
							$defaultpanelsize = 6 unless $defaultpanelsize;

							my $num_entries = scalar $event->entries(
								active => 1
							);

							$num_panels = POSIX::ceil($num_entries / $defaultpanelsize);
						}

						unless ($round_id) {
							$m->print("<br />Creating $num_panels sections of ".$eround->realname);
							$m->flush_buffer();
						}

						if ($eround->type eq "prelim" && $event->setting("seed_presets")) {

							$m->comp("/panel/round/snake_speech.mas",
								round          => $eround,
								num_panels     => $num_panels,
								tourn          => $tourn,
								person         => $person,
								tourn_settings => $tourn_settings
							);
							$snaked++;

						} elsif ($num_panels && ($eround->type eq "snaked_prelim")) {

							if ($whoami ne "california.mhtml")  {

								$m->comp("/panel/round/snake_speech.mas",
									round          => $round,
									num_panels     => $num_panels,
									limit_to       => $limit_to,
									tourn          => $tourn,
									person         => $person,
									tourn_settings => $tourn_settings
								);
								$snaked++;

							} else {

								$m->comp("/panel/round/nsda/california.mhtml",
									round          => $round,
									tourn_settings => $tourn_settings,
									tourn          => $tourn,
									person         => $person,
									num_panels     => $num_panels
								);
							}

						}  else {
							if ($eround && $num_panels) {
								$m->comp("pair_speech.mas",
									round          => $eround,
									num_panels     => $num_panels,
									tourn_settings => $tourn_settings,
									limit_to       => $ARGS{"limit_to"},
									seed_basis     => $ARGS{"seed_basis"}
								);
							}
						}
					}

					if ($tourn_settings->{nsda_nats} && $event->type eq "speech") {
						foreach my $eround (@event_rounds) {
							my $last   = 0;
							my $return = -1;
							my $tick   = 1;

							while ($return != 0 && $return != $last) {
								$last = $return;
								$return = $m->comp("/panel/round/nsda/nats_speakerorder.mhtml",
									dbh            => $dbh,
									tourn          => $tourn,
									tourn_settings => $tourn_settings,
									event_id       => $event->id,
									improve_me     => 1,
									return         => 1
								);
							}
						}
					}

					my $online_mode = $event->setting("online_mode");


					if ($do_judge{$event->id} || $ARGS{"judge_".$event->id}) {

						foreach my $eround (@event_rounds) {

							if (
								$event->setting("online_hybrid")
								|| $eround->setting("use_normal_rooms")
							) {
								$online_mode = "sync";
							}

							unless ($round_id) {
								$m->print("<br />Now assigning judges to round ".$eround->name);
								$m->flush_buffer();
							}

							my $msg = $m->comp("mass_judges.mhtml",
								round           => $eround,
								dbh             => $dbh,
								return          => 1,
								person          => $person,
								person_settings => $person_settings,
								tourn           => $tourn,
								tourn_settings  => $tourn_settings
							);

							unless ($round_id) {
								$m->print('<br />'.$msg);
								$m->flush_buffer();
							}
						}
					}

					unless ($online_mode eq "nsda_campus" || $online_mode eq "nsda_campus_observers") {

						if ($do_room{$event->id} || $ARGS{"room_".$event->id}) {

							foreach my $eround (@event_rounds) {

								unless ($round_id) {
									$m->print("<br/>Now assigning rooms to Round ".$eround->name);
									$m->flush_buffer();
								}

								my $msg = $m->comp("rooms.mhtml",
									round           => $eround,
									dbh             => $dbh,
									return          => 1,
									person          => $person,
									person_settings => $person_settings,
									tourn           => $tourn,
									tourn_settings  => $tourn_settings
								);

								unless ($round_id) {
									$m->print('<br />'.$msg);
									$m->flush_buffer();
								}
							}
						}
					}

					unless ($round_id) {
						$m->print("<br />Done with ".$event->abbr."</span>");
						$m->flush_buffer();
					}

				} elsif ($event->type eq "congress") {

					my $congress_method = $ARGS{"congress_method"};

					unless ($congress_method eq "wipe") {
						undef $ARGS{"parliamentarians"};
						undef $ARGS{"scorers"};
						undef $ARGS{"rooms"};
					}

					my @rounds;

					if ($round) {
						@rounds = ($round);
					} elsif ($event_rounds{$event->id}) {
						@rounds = @{$event_rounds{$event->id}}
					}

					my $num_panels = $num_panels_by_round{$rounds[0]->id} if @rounds;

					unless ($num_panels) {
						$num_panels = $num_panels_by_event{$event->id};
					}

					my $all_wipe;

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>")
						if @rounds;
					$m->flush_buffer() unless $round_id;

					foreach my $round (@rounds) {

						#they keep messing this one up lol
						$round->setting('student_vote_open', 0);

						if (
							( $round->type eq "elim"
							|| $round->type eq "final"
							|| $round->type eq "runoff"
							) &&
							(not defined $ARGS{"clone"})
						) {

							$m->comp("/funclib/round_dump.mas",
								person => $person,
								round  => $round
							);

							unless ($limit_to) {
								my $previous_round = $event->rounds( name => ($round->name - 1))->first;
								my $num_chambers = scalar($previous_round->panels);
								$limit_to = $ARGS{"advance"} * $num_chambers;
							}

							$m->comp("/panel/round/nsda/snake_congress.mas",
								round           => $round,
								tourn           => $tourn,
								person          => $person,
								tourn_settings  => $tourn_settings,
								num_panels      => $num_panels,
								limit_to        => $limit_to,
								congress_method => $congress_method
							);

						} else {

							if ($round->name == 1 && $ARGS{"wipe_".$round->id}) {
								$congress_method = "wipe";
								$all_wipe++;
							} elsif ($all && (not defined $all_wipe) ) {
								$congress_method = "wipe";
								$all_wipe++;
							} elsif ($all) {
								$congress_method = "realign";
							} elsif (not defined ($congress_method)) {
								$congress_method = "single";
							}

							if ($ARGS{"po_contest"}) {
								$m->comp("/funclib/round_dump.mas",
									person => $person,
									round  => $round
								);
							}

							$m->print("<p class='smaller padvertop'>Assigning ".$round->realname." into chambers");
							$m->flush_buffer() unless $round_id;

							$m->comp("pair_congress.mas",
								round           => $round,
								tourn           => $tourn,
								person          => $person,
								clone           => $ARGS{"clone"},
								po_contest      => $ARGS{"po_contest"},
								num_panels      => $num_panels,
								tourn_settings  => $tourn_settings,
								congress_method => $congress_method
							);

							$m->print(" </p>");
							$m->flush_buffer() unless $round_id;
						}

						if ($ARGS{"parliamentarians"}) {

							$m->comp("judges.mhtml",
								dbh            => $dbh,
								round_id       => $round->id,
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								person         => $person,
								parlis         => 1,
								return         => 1
							);
						}

						if ($ARGS{"scorers"} && $ARGS{"num_judges"}) {

							if ($ARGS{"num_judges"} > 1) {
								$round->setting('num_judges', $ARGS{"num_judges"});
							} else {
								$round->setting('num_judges', 0);
							}

							$m->comp("judges.mhtml",
								dbh            => $dbh,
								round_id       => $round->id,
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								person         => $person,
								parlis         => 2,
								return         => 1
							);
						}

						if ($ARGS{"rooms"}) {
							$m->comp("rooms.mhtml",
								dbh             => $dbh,
								round           => $round,
								return          => 1,
								person          => $person,
								person_settings => $person_settings,
								tourn           => $tourn,
								congress_method => $congress_method,
								tourn_settings  => $tourn_settings
							);
						}
					}

				} elsif ($event->type eq "wudc") {

					my @event_rounds = @{$event_rounds{$event->id}}
						if $event_rounds{$event->id}
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>")
						if @event_rounds;

					foreach my $round (@event_rounds) {

						$m->print("Assigning ".$round->realname." into debates") unless $round_id;
						$m->comp("pair_wudc.mas", round => $round);
						$m->print(" <br />");
					}

					$m->print("....Done.</span>");

				} else {

					my @event_rounds = @{$event_rounds{$event->id}}
						if $event_rounds{$event->id}
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>")
						if @event_rounds;

					unless (@event_rounds) {
						@event_rounds = $event->rounds(type => "prelim");
					}

					my $done;

					foreach my $round (@event_rounds) {

						next if $done;

						if ($num_panels_by_round{$round->id}) {
							$num_panels = $num_panels_by_round{$round->id};
						}

						$m->comp("/funclib/round_dump.mas",
							person => $person,
							round  => $round
						);

						$m->print("Assigning ".$round->realname." into debates") unless $round_id;

						if ($tourn_settings->{"nsda_district"} && $round->name < 3) {

							$m->comp("pair_preset.mas",
								round  => $round,
								person => $person,
								debug  => $ARGS{"debug"}
							);

						} elsif (
							$tourn_settings->{"nsda_nats"}
							&& ($round->type eq "elim"
								|| $round->type eq "final"
								|| $round->type eq "runoff")
						) {

							$m->comp("/panel/round/nsda/auto_debate.mas",
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								round          => $round,
								person         => $person,
								limit_to       => $ARGS{"limit_to"},
								debug          => $ARGS{"debug"},
							);

						} elsif ($round->type eq "prelim") {

							$m->comp("pair_preset.mas",
								round  => $round,
								person => $person,
								debug  => $ARGS{"debug"}
							);

						} else {

							$m->comp("pair_debate.mas",
								round  => $round,
								person => $person,
								debug  => $ARGS{"debug"}
							);
						}

						$m->print(" <br />");
					}

					$m->print("....Done.</span>");
				}
			}

			if ($round_id) {

				my $round = Tab::Round->retrieve($round_id);

				if (
					$tourn_settings->{"nsda_nats"}
					&& $round->type eq "elim"
					&& (not defined $clone)
				) {
					my $msg = $round->realname." has been sectioned.";
					$m->redirect("/panel/round/nsda/".$whoami."?round_id=".$round_id."&msg=".$msg);
				}

				if ($snaked) {
					my $msg = $round->realname." has been snaked.";
					$m->redirect("/panel/schemat/show_snake.mhtml?round_id=".$round->id."&msg=$msg");
				}

				$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1")
					unless $ARGS{"debug"};

			}
</%perl>
		</div>

		<div class="menu">
			<div class="sidenote">
				<h4>Entry assignment done</h4>
					<a
						class  = "yellow full"
						href   = "/panel/report/disasters.mhtml"
						target = "_blank"
					>
						Check for Disasters
					</a>

					<a
						class = "green full martopmore"
						href  = "/panel/judge/index.mhtml">
						Panel Judges
					</a>
			</div>

			<div class="sidenote">
				<h4>View pairings/schematics:</h4>
%				foreach my $round (@rounds) {
					<a
						class="blue full"
						href="/panel/schemat/show.mhtml?round_id=<% $round->id %>"
					>
						<% $round->realname %> of <% $round->event->abbr %>
					</a>
%				}
			</div>

		<& "menu.mas",
			tourn          => $tourn,
			tourn_settings => $tourn_settings,
			whoami         => "mass",
			nodiv          => 1,
			perms          => $perms
		&>
		</div>

%	}
