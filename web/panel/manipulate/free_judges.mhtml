<%args>
	$dbh
	$tourn
	$tourn_settings
	$round_id
	$flight => 1
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $flights = $round->flighted;
	my $category = $event->category;

	my %category_settings = $category->all_settings();
	my %event_settings = $event->all_settings();

	my $round_type  = $round->type;
	my $rounds_per  = $category_settings{"rounds_per"};
	my $no_codes    = $category_settings{"no_codes"};
	my $prefs       = $category_settings{"prefs"};

	my %ratings;

	if ($prefs) {
		%ratings = $m->comp("/funclib/judge_averages.mas", category => $category, prefs => $prefs);
	}

	my %strikes;

	foreach my $rating ($category->rating_tiers) {
		$strikes{$rating->name}++ if $rating->strike || $rating->conflict;
	}

	undef $prefs if $prefs eq "none";

	my $round_name = $round->name;

	my $debate++;

	undef $debate if $event->type eq "speech";
	undef $debate if $event->type eq "congress";

	my $flight_limit = "and panel.flight = $flight" if $flights;

	unless (
		$event_settings{'online_mode'} eq "nsda_campus"
		|| $event_settings{'online_mode'} eq "nsda_campus_observers"
	) {
		if ($event_settings{"flight_rooms_only"}) {
			undef $flight_limit;
			undef $flights;
		}
	}

	my $blind_mode = $event_settings{"blind_mode"};
	undef $blind_mode if $round->published > 0;

	$no_codes++ if $blind_mode;

	my %anonymize = ();

	if ($blind_mode) {
		%anonymize = $m->comp("/funclib/blind_mode.mas", round => $round);
	}

	my $mutuality = $category_settings{"mutuality"};
	my $preference = $category_settings{"preference"};
	my $standin = $category_settings{"default_mjp"};

	my $max_pref = $event_settings{"max_pref"};
	my $max_nobreak = $event_settings{"max_nobreak_pref"};
	my $break_point = $event_settings{"break_point"};

	my @jpools = $round->jpools;

	my $jpool_limit = "
		and jpool_judge.judge = judge.id
		and jpool_judge.jpool = jpool_round.jpool
		and jpool_round.round = round.id"
	if @jpools;

	my $jpool_table = "jpool_judge, jpool_round, " if @jpools;

	my $judge_use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);
	my %judge_use = %{$judge_use_ref} if $judge_use_ref;

	my %judges;

	my $sth = $dbh->prepare("
		select
			judge.id, judge.code, judge.first, judge.last, judge.obligation, judge.hired,
			school.id, school.name,
			region.id, region.code, region.name,
			area.value area,
			person.id, person.email,
			tab_rating.value as tab_rating,
			diverse.value as diverse
		from (judge, event, round, $jpool_table timeslot)

		left join judge_setting as tab_rating
			on tab_rating.judge = judge.id
			and tab_rating.tag = 'tab_rating'

		left join judge_setting as diverse
			on diverse.judge = judge.id
			and diverse.tag = 'diverse'

		left join region_setting area
			on area.region = region.id
			and area.tag = 'area'

		left join school on school.id = judge.school
		left join region on region.id = school.region
		left join person on person.id = judge.person

		where judge.category = event.category
		and judge.active = 1
		and event.id = round.event
		and round.timeslot = timeslot.id
		".$jpool_limit."
		and round.id = ?

		and not exists (
			select strike.id from strike
			where strike.type = 'event'
			and strike.event = event.id
			and strike.judge = judge.id
		)

		and not exists (
			select strike.id from strike
			where strike.type = 'time'
			and strike.judge = judge.id
			and strike.start < timeslot.end
			and strike.end > timeslot.start
		)

		and not exists (
			select panel.id
			from panel, ballot, timeslot othertimeslot, round
			where ballot.judge = judge.id
			and ballot.panel = panel.id
			".$flight_limit."
			and panel.round = round.id
			and round.timeslot = othertimeslot.id
			and othertimeslot.start < timeslot.end
			and othertimeslot.end > timeslot.start
		)

		order by tab_rating.value, judge.last
	");

	$sth->execute($round->id);

	while (
		my (
			$judge_id, $judge_code, $judge_first, $judge_last, $judge_obligation, $judge_hired,
			$school_id, $school_name,
			$region_id, $region_code, $region_name,
			$person_id, $person_email,
			$tab_rating, $diverse
		) = $sth->fetchrow_array()
	) {

		$judges{$judge_id}{"code"} = $judge_code;
		$judges{$judge_id}{"first"} = $judge_first;
		$judges{$judge_id}{"last"} = $judge_last;
		$judges{$judge_id}{"obligation"} = ($judge_obligation + $judge_hired);

		$judges{$judge_id}{"school"} = $school_id;
		$judges{$judge_id}{"school_name"} = $school_name;
		$school_name =  s/^The //g;
		$judges{$judge_id}{"school_sort"} = $school_name;

		$judges{$judge_id}{"region"} = $region_id;
		$judges{$judge_id}{"region_code"} = $region_code;
		$judges{$judge_id}{"region_name"} = $region_name;

		$judges{$judge_id}{"person"} = $person_id;
		$judges{$judge_id}{"email"} = $person_email;
		$judges{$judge_id}{"tab_rating"} = $tab_rating;
		$judges{$judge_id}{"diverse"} = $diverse;
	}

	$sth->finish();

	my @panels = Tab::Panel->search_like( round => $round->id, {order_by => 'bracket'});

	my $this_round_sth = $dbh->prepare("
		select panel.id, panel.letter, panel.bye, panel.bracket,
			ballot.chair, ballot.judge, ballot.entry, entry.code,
			ballot.side, ballot.speakerorder,
			judge.first, judge.last

		from (panel)
			left join ballot on panel.id = ballot.panel
			left join entry on entry.id = ballot.entry
			left join judge on judge.id = ballot.judge
		where panel.round = ?
			and panel.flight = ?
		group by ballot.id
		order by ballot.side
	");

	my %panels;
	my %entries;

	$this_round_sth->execute($round->id, $flight);

	while (
		my (
			$panel, $letter, $bye, $bracket, $chair, $judge, $entry, $code, $side, $order,
			$judge_first, $judge_last
		) = $this_round_sth->fetchrow_array()
	) {

		$panels{$panel}{"judges"}{$judge}{"name"} = $judge_last.", ".$judge_first;
		$panels{$panel}{"entries"}{$entry}{"code"} = $code;

		$panels{$panel}{"bracket"} = $bracket;
		$panels{$panel}{'letter'} = $letter;
		$panels{$panel}{"bye"}     = $bye;

		$entries{$entry}{"code"} = $code;

	}

	my %judge_constraints = $m->comp(
		"/funclib/judge_cannotsee.mas",
		category => $category,
		round    => $round
	);

	my %judge_ratings = $m->comp(
		"/funclib/event_judgeprefs.mas",
		event => $event,
		style => "individual"
	);

    my @all_rounds;
	my %events;

    if ($round->setting("timeslot_merge")) {
#        my $merge_ref = JSON::decode_json($round->setting("timeslot_merge"));
        @all_rounds = $round->timeslot->rounds();

		my %done;

		foreach my $ar (@all_rounds) {
			next if $done{$ar->event->id}++;

			my %alt_ratings = $m->comp(
				"/funclib/event_judgeprefs.mas",
				event => $ar->event,
				style => "individual"
			);

			%judge_ratings = (%judge_ratings, %alt_ratings);
		}
    }

</%init>

	<div class="main">

		<span class="threequarters">
			<h2><% $round->realname %> Unused Judges</h2>
		</span>

		<span
			id    = "unused_judges_buttonarea"
			class = "quarter rightalign"
		></span>

		<& "/funclib/tablesorter.mas",
			table => "unused_judges"
		&>

		<table id="unused_judges">

			<thead>
				<tr class="yellowrow">

%					unless ($no_codes) {
						<th class="smaller">
							Code
						</th>
%					}

					<th class="smaller">
						Judge
					</th>

%					unless ($blind_mode) {
						<th class="smaller">
							School
						</th>
%					}

					<th class="smaller centeralign" title="Linked to online accounts?">
						<span class="nospace fa fa-sm fa-link">
						</span>
					</th>
%					if ($tourn_settings->{ncfl} ) {
						<th class="smaller">
							Diocese
						</th>

						<th class="smaller">
							Region
						</th>
%					}

%					if ($tourn_settings->{nsda_nats} ) {
						<th class="smaller">
							State
						</th>
%					}

%					if ($category_settings{"tab_ratings"}) {
						<th class="smaller" title="Tab Rating">
							Rate
						</th>
%					}

%					if ($category_settings{"track_diversity"}) {
						<th class="smaller" title="Diversity-enhancing judge">
							Div
						</th>
%					}

%					if ($rounds_per) {
						<th title="Percentage of available rounds committed for"
							class="smaller"
						>
							%age
						</th>
%					}

					<th class="smaller">
						Rds
					</th>

%					if ($prefs) {
						<th class="smaller">
							Avg Pref
						</th>
%					}

					<th class="smallish">
						Fits
					</th>

					<th class="nosort smallish">
					</th>
				</tr>
			</thead>

			<tbody>

<%perl>
			my $first;

			foreach my $judge_id (
				sort {
					$judge_use{$b}{"left"} <=> $judge_use{$a}{"left"}
					|| $judge_use{$a}{"judged_already"} <=> $judge_use{$b}{"judged_already"}
					|| $judges{$a}{"last"} cmp $judges{$b}{"last"}
				} keys %judges
			) {

				my $class_warfare;
				my $class_struggle;

				unless ($round_type eq "elim"
					|| $round_type eq "final"
					|| $round_type eq "runoff"
					|| (not defined $rounds_per)
					|| $judge_use{$judge_id}{'left'}
				) {
					$class_warfare = 'redtext semibold"';
					unless ($first++) {
						$class_struggle = 'redbordertop';
					}
				}
</%perl>

				<tr class="<% $class_struggle %>">
%					unless ($no_codes) {
						<td class=" smallish">
							<% $judges{$judge_id}{code} %>
						</td>
%					}

					<td class="smallish">
						<a
							class  = "plain full hover"
							target = "_blank"
							href   = "/register/judge/edit.mhtml?judge_id=<% $judge_id %>"
						><% $blind_mode ? $anonymize{"judge"}{$judge_id} : $judges{$judge_id}{"last"}.", ".$judges{$judge_id}{"first"} %></a>
					</td>

%					unless ($blind_mode) {
						<td class=" smallish">
							<span class="hidden"><% $judges{$judge_id}{"school_sort"} ? $judges{$judge_id}{"school_sort"} : "AAAAAAA" %></span>
							<% $judges{$judge_id}{"school_name"} ? $judges{$judge_id}{"school_name"} : "Hired" %>
						</td>
%					}

					<td class="centeralign smallish redtext semibold nospace">
						<% $judges{$judge_id}{"person"}
							? ""
							: "<span class='full marno hover' title='LUDDITE!  NOT LINKED ONLINE!'>L</span>"
						%>
					</td>

%					if ($tourn_settings->{ncfl} || $tourn_settings->{nsda_nats}) {

						<td class="smallish centeralign">
							<% $judges{$judge_id}{"region_code"} ? $judges{$judge_id}{"region_code"} : "Hired" %>
						</td>
%					}

%					if ($tourn_settings->{ncfl}) {
						<td class="centeralign smallish">
						</td>
%					}

%					if ($category_settings{"track_diversity"}) {
						<td class="centeralign greentext semibold smallish">
							<% $judges{$judge_id}{"diverse"} ? "D" : "" %>
						</td>
%					}

%					if ($category_settings{"tab_ratings"}) {
						<td class=" smallish centeralign">
							<% $judges{$judge_id}{"tab_rating"} %>
						</td>
%					}

%					if ($rounds_per) {
						<td class="centeralign nowrap <% $class_warfare %> smallish">
							<% $judge_use{$judge_id}{percentage} %>
						</td>
%					}

					<td class="centeralign nowrap <% $class_warfare %> smallish">
%						if ($rounds_per) {
							<% $judge_use{$judge_id}{'left'}."/".($judge_use{$judge_id}{'judged_already'} + $judge_use{$judge_id}{'will_judge'})."/".$judge_use{$judge_id}{'oblig'} %>
%						} else {
							<% $judge_use{$judge_id}{'judged_already'} %>
%						}
					</td>

%					if ($prefs) {
						<td class="centeralign nowrap <% $class_warfare %> smallish">
							<% $ratings{$judge_id} %>
						</td>
%					}

					<td class="centeralign smallish">
<%perl>
							my %entry_string;
							my %rating_string;
							my %judge_string;
							my @judge_panels;

							my %pref_score;
							my %done;

							PANEL:
							foreach my $panel (keys %panels) {

								next if $panels{$panel}{"bye"};
								next if $done{$panel."p"}++;

								my $diff;
								my $over_mendoza;
								my $mendoza_penalty = $max_pref;

								if (($round_name - $panels{$panel}{"bracket"}) > $break_point) {
									$mendoza_penalty = $max_nobreak;
								}

								foreach my $entry (keys %{$panels{$panel}{"entries"}}) {

									next PANEL if $judge_constraints{$judge_id}{$entry};

									next if $done{$entry."e"}++;

									if ($debate) {
										$entry_string{$panel} .= " vs " if $entry_string{$panel};

										if ($blind_mode) {
											$entry_string{$panel} .= $anonymize{"entry"}{$entry}." ";
										} else {
											$entry_string{$panel} .= $entries{$entry}{"code"}." ";
										}

									} else {
										$entry_string{$panel} = "Section ".$panels{$panel}{"letter"};
									}

									if ($prefs) {

										$over_mendoza++ if $mendoza_penalty > 0
											&& ($mendoza_penalty < $judge_ratings{$entry}{$judge_id});

										$rating_string{$panel} .= "-" if $rating_string{$panel};
										$rating_string{$panel} .= $judge_ratings{$entry}{$judge_id};
										$rating_string{$panel} .= "x" unless $judge_ratings{$entry}{$judge_id};

										$judge_ratings{$entry}{$judge_id} = $standin
											unless $judge_ratings{$entry}{$judge_id};

										$diff = abs($judge_ratings{$entry}{$judge_id} - $pref_score{$panel} )
											if $pref_score{$panel}
											&& $judge_ratings{$entry}{$judge_id};

										$pref_score{$panel} += $judge_ratings{$entry}{$judge_id};

										if ($strikes{$judge_ratings{$entry}{$judge_id}}) {
											$pref_score{$panel} = $pref_score{$panel} * 10000;
										}
									}
								}

								my %done;

								if ($prefs) {
									$pref_score{$panel} = $pref_score{$panel} * $preference;
									$pref_score{$panel} += $diff * $mutuality;

									if ($over_mendoza) {
										$pref_score{$panel} += 1000000000;
									}
								}

								push @judge_panels, $panel;

							}

							@judge_panels = sort {$pref_score{$a} <=> $pref_score{$b}} @judge_panels if ($prefs);
</%perl>

						<form action="replace_judge.mhtml">

						<input
							type  = "hidden"
							name  = "judge_id"
							value = "<% $judge_id %>"
						>

						<select
							name="swap_with"
							class="fixedbig larger plain"
						>
<%perl>

							foreach my $panel (@judge_panels) {

								foreach my $judge_id (sort keys %{$panels{$panel}{"judges"}}) {

									next if $done{$judge_id."-".$panel}++;

									my $judge_string .= substr($panels{$panel}{"judges"}{$judge_id}{"name"},0,11);

									foreach (length($judge_string) .. 12 ) {
	                                   	$judge_string .= "&nbsp;";
									}

									my $avail_string;

									unless ($round_type eq "elim"
										|| $round_type eq "final"
										|| $round_type eq "runoff"
									) {

										if ($rounds_per) {
											$avail_string  = $judge_use{$judge_id}{'left'}."/";
											$avail_string .= ($judge_use{$judge_id}{'judged_already'} + $judge_use{$judge_id}{'will_judge'});
											$avail_string .= "/".$judge_use{$judge_id}{'oblig'};
	       	 		                   } else {
											$avail_string = ($judge_use{$judge_id}{'judged_already'} + $judge_use{$judge_id}{'will_judge'});
		        	                   }
	        	                   }

									my $rated;
									foreach my $entry (sort keys %{$panels{$panel}{"entries"}}) {
										next if $done{$judge_id."-".$entry."-".$panel}++;
										$judge_string .= "-" if $rated++;
										$judge_string .= $judge_ratings{$entry}{$judge_id};
										$judge_string .= "x" unless $judge_ratings{$entry}{$judge_id};
									}
</%perl>
									<option
										value="<% $panel %>-<% $judge_id %>"
									>
										<% $rating_string{$panel} %>
										[<% $avail_string %> <% $judge_string %>]
										<% $panels{$panel}{"bracket"}."-".($round_name - 1 - $panels{$panel}{"bracket"}) %>
										<% $entry_string{$panel} %>
									</option>
%								}
%							}
						</select>

					</td>

					<td class="centeralign">
						<input
							type  = "submit"
							value = "Swap"
							class = "thin">
						</form>
					</td>

				</tr>
%			}

			</tbody>
		</table>
	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>Round</h4>

			<a class="blue full"
				href="/panel/schemat/show.mhtml?round_id=<% $round_id %>"
			>
				Return to <% $round->realname %> pairing
			</a>

%			if ($flights > 1) {
				<h4>Flights</h4>

%				foreach my $aflight (1 .. $flights) {
					<a class="<% $aflight == $flight ? "dk" : "" %>yellow full"
						href="free_judges.mhtml?round_id=<% $round->id %>&flight=<% $aflight %>"
					>
						Flight <% $aflight %>
					</a>
%				}

%			}

		</div>

	</div>

