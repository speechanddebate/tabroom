<%args>
	$tourn
	$perms
	$session
	$defaults
	$jpool_id  => undef
	$parent_id => undef
</%args>
<%init>

	my %cats = $m->comp(
		"/funclib/perms/categories.mas",
		tourn   => $tourn,
		perms   => $perms,
		limited => 1
	);

	my $categories = \%cats;

	my $dbh = Tab::DBI->db_Main();
	my $category;

	unless ($parent_id || $ARGS{"no_default"} eq "jpool") {
		$parent_id = $defaults->{tourns}{$tourn}{parent};
	}

	if ($ARGS{"category_id"} && $categories->{$ARGS{"category_id"}}) {

		$category = $categories->{$ARGS{"category_id"}};

		unless ($defaults->{tourns}{$tourn}{category} == $ARGS{"category_id"}) {
			$defaults->{tourns}{$tourn}{category} = $ARGS{"category_id"};
			$session->default($defaults);
			$session->update();
		}

	} elsif ($jpool_id || $parent_id ) {

		my $sth = $dbh->prepare("select jpool.id, jpool.category from jpool where jpool.id = ? ");
		$sth->execute($jpool_id || $parent_id);

		my $results = $sth->fetchall_hash();
		my $ref = eval { return shift @{$results}; };

		if ($ref && $categories->{$ref->{category}}) {

			unless ($defaults->{tourns}{$tourn}{category} == $ref->{category}) {
				$defaults->{tourns}{$tourn}{category} = $ref->{category};
				$session->default($defaults);
				$session->update();
			}

			$category = $categories->{$ref->{category}};
		}

	} elsif ($categories->{$defaults->{tourns}{$tourn}{category}}) {

		$category = $categories->{$defaults->{tourns}{$tourn}{category}};

	} else {

		my $id;
		my @keys = sort {
			($cats{$b}{name} eq "Main Tournament") <=> ($cats{$a}{name} eq "Main Tournament")
			|| $a <=> $b
		} keys %cats;

		if (@keys) {
			$id = shift @keys;
		}

		$category = $categories->{$id};
	}

	if ($category != $defaults->{tourns}{$tourn}{category}) {
		$defaults->{tourns}{$tourn}{category} = $category->{id};
		$session->default($defaults);
		$session->update();
	}

	unless ($category) {
		$m->comp("/funclib/abort.mas",
			message => "You do not have sufficient tournament access to view this section of Tabroom."
		);
	}

	my $sth = $dbh->prepare("
		select
			jpool.id, jpool.name name,
			parent.id parent_id, parent.name parent_name,
			site.id site_id, site.name site_name,
			registrant.value registrant,
			no_swaps.value no_swaps,
			show_judges.value show_judges,
			publish.value publish,
			standby.value standby,
			standby_timeslot.value timeslot,
			rounds.value rounds,
			site_choices.value_text site_choices,
			standby_timeslot.value timeslot,
			message.value_text message,
			MIN(timeslot.start) as start,
			child.id child

		from jpool

			left join jpool parent on parent.id = jpool.parent
			left join site on jpool.site = site.id
			left join jpool_round jpr on jpr.jpool = jpool.id
			left join round on jpr.round = round.id
			left join timeslot on round.timeslot = timeslot.id
			left join jpool child on child.parent = jpool.id

			left join jpool_setting publish
				on publish.jpool = jpool.id
				and publish.tag = 'publish'

			left join jpool_setting show_judges
				on show_judges.jpool = jpool.id
				and show_judges.tag = 'show_judges'

			left join jpool_setting no_swaps
				on no_swaps.jpool = jpool.id
				and no_swaps.tag = 'no_swaps'

			left join jpool_setting registrant
				on registrant.jpool = jpool.id
				and registrant.tag = 'registrant'

			left join jpool_setting site_choices
				on site_choices.jpool = jpool.id
				and site_choices.tag = 'site_choices'

			left join jpool_setting rounds
				on rounds.jpool = jpool.id
				and rounds.tag = 'rounds'

			left join jpool_setting standby
				on standby.jpool = jpool.id
				and standby.tag = 'standby'

			left join jpool_setting standby_timeslot
				on standby_timeslot.jpool = jpool.id
				and standby_timeslot.tag = 'standby_timeslot'

			left join jpool_setting message
				on message.jpool = jpool.id
				and message.tag = 'message'

		where jpool.category = ?
		group by jpool.id
	");

	$sth->execute($category->{id});
	my $results = $sth->fetchall_hash();
	my %jpools = map {$_->{id} => $_} @{$results};

	my $jpool;
	my $parent;

	unless ($jpool_id || $ARGS{"no_default"} eq "jpool") {
		$jpool_id = $defaults->{tourns}{$tourn}{jpool};
	}

	if ($jpool_id) {
		$jpool = $jpools{$jpool_id};

		unless ($jpool->{id} == $defaults->{tourns}{$tourn}{jpool}) {
			$defaults->{tourns}{$tourn}{jpool} = $jpool->{id};
			$session->default($defaults);
			$session->update();
		}
	}

	if ($parent_id) {
		$parent = $jpools{$parent_id};

		unless ($parent->{id} == $defaults->{tourns}{$tourn}{parent}) {
			$defaults->{tourns}{$tourn}{parent} = $parent->{id};
			$session->default($defaults);
			$session->update();
		}
	}

	return {
		category   => $category,
		categories => $categories,
		jpool      => $jpool,
		parent     => $parent,
		jpools     => \%jpools
	};

</%init>
