<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$session
	$supps       => undef
	$defaults    => undef
	$category_id => undef
	$clear       => undef
	$panelsize   => undef
	$round_type  => undef
	$timeslot_id => undef
</%args>
<%init>

	unless ($category_id) {
		$m->print("No judge category sent.  Hit back and try again");
		$m->abort();
	}

	my @events = $m->comp("/funclib/perms/events.mas",
		tourn => $tourn,
		perms => $perms
	);

	my %events_by_id = map {$_->id => $_} @events;

	my @categories = $m->comp("/funclib/perms/categories.mas",
		tourn => $tourn,
		perms => $perms
	);

	my %cats_by_id = map {$_->id => $_} @categories;

	unless ($cats_by_id{$category_id}) {
		$m->comp("/funclib/abort.mas",
			message => "No valid judge category found with ID $category_id.  Do you have permissions to view that category?"
		);
	}

	my $category = $cats_by_id{$category_id};
	my %events;
	my %category_settings = $category->all_settings();
	my @keepers;

	EVENT:
	foreach my $event ($category->events) {

		next unless $events_by_id{$event->id};

		if ($supp && (not defined $events_by_id{$event->id}{supp})) {
			next EVENT;
		}

		if (
			$event->type ne "speech"
			&& $event->type ne "congress"
			&& (not defined $event->setting("round_robin"))
		) {
			next EVENT;
		}

		push @keepers, $event;
		%{$events{$event->id}{"settings"}} = $event->all_settings;
	}

	$m->print('<div class="main">');
	$m->print('<h2>Assigning judges in '.$category->abbr.'</h2>');
	$m->flush_buffer;

	my @panels;
	my @ballots;

	my $same_school++ if $category_settings{"allow_school_panels"};
	my $ncfl++ if $tourn->setting("ncfl");

	my $timeslot =
		Tab::Timeslot->retrieve($timeslot_id)
		if $timeslot_id
		&& $timeslot_id ne "all";

    my $description = $person->first." ".$person->last." (".$person->email.")";
	$description .= " has repaneled the judges in category ".$category->abbr;
	$description .= " timeslot ".$timeslot->name if $timeslot;
	$description .= " (all timeslots) " if $timeslot_id eq "all";
	$description .= " round type ".$round_type if $round_type;
	$description .= ".  Existing judge assignments were wiped out." if $clear;
	$description .= ".  Existing judge assignments were preserved." unless $clear;
	$m->flush_buffer();

	$m->comp("/funclib/log.mas",
        type        => 'tabbing',
        tourn       => $category->tourn->id,
        person      => $person->id,
        description => $description
    );

	$m->print('<p>'.$description.'</p>');

	if ($clear) {

		my $limit;

		unless ($timeslot_id eq "all") {
			$limit .= " and round.timeslot = ".$timeslot_id;
		}

		unless ($round_type eq "all") {
			$limit .= " and round.type = '".$round_type."'"
		}

		$m->print("<P>Clearing out existing judge assignments...");
		$m->flush_buffer;

		Tab::Ballot->set_sql( remove_judges_rtts => "
			update ballot, panel, round, event, entry
				set ballot.judge = NULL
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
				and event.type = 'speech'
				and event.id = entry.event
				and entry.id = ballot.entry
				$limit
		");

		Tab::Score->set_sql( remove_scores_rtts => "
			delete score.*
				from score, ballot, panel, round, event
				where score.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
				and event.type = 'speech'
				$limit
		");

		Tab::Ballot->set_sql( dedupe_ballots_rtts => "
			delete b2.*
				from ballot b1, ballot b2, panel, round, event
				where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.category = ?
					and event.type = 'speech'
				$limit
		");

		Tab::Ballot->sql_dedupe_ballots_rtts->execute($category->id);
		Tab::Ballot->sql_remove_judges_rtts->execute($category->id);
		Tab::Score->sql_remove_scores_rtts->execute($category->id);
		Tab::Ballot->sql_dedupe_ballots_rtts->execute($category->id);

		$m->print("...<span class='semibold greentext inline'>done</span></p>");
		$m->flush_buffer();

	}

    my %judge_rating = ();

	unless ($round_type eq "prelim" && $category_settings{"elim_only_ratings"}) {

		if ($category_settings{"coach_ratings"}) {

			$m->print("<P>Sorting judges by coach rating...");
			$m->flush_buffer;

			my %tier_names = map {$_->id => $_->name} $category->rating_tiers;

			foreach my $event (@keepers) {

				my @ratings = $m->comp("/funclib/category_ratings.mas", event => $event);

				foreach my $rating (@ratings) {
					$judge_rating{$rating->judgeid}{$event->id}
						= $tier_names{$rating->ratingtierid}
						if $rating && $rating->ratingtierid;
				}
			}

			$m->print("...<span class='semibold greentext inline'>done</span></p>");
			$m->flush_buffer;
		}
	}

	# Get an array of the panels with a score that is the number of kids who
	# belong to the teams represented in the panel.  This is a rough idea of
	# how struck the panel is.

	$m->print("<P>Scoring panels by difficulty of finding a judge...");
	$m->flush_buffer;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select panel.id, judge.id, ballot.id,
			round.type, round.name, timeslot.id, event.id, round.id,
			event.type,
			round_setting.value,
			count(distinct schooljudge.id), count(distinct entry.id),
			jpool_round.jpool
		from (panel, round, event, timeslot, ballot)

		left join judge on ballot.judge = judge.id
		left join entry on entry.id = ballot.entry
		left join judge schooljudge
			on schooljudge.category = event.category
			and schooljudge.school = entry.id

		left join school on judge.school = school.id
		left join region on school.region = region.id

		left join jpool_round on jpool_round.round = round.id

		left join round_setting on round_setting.round = round.id
			and round_setting.tag = 'num_judges'

		where event.category = ?
			and event.type = 'speech'
			and event.id = round.event
			and round.id = panel.round
			and round.timeslot = timeslot.id
			and ballot.panel = panel.id

		group by ballot.id
	");

	$sth->execute($category->id);

	my %panels;
	my %rounds;

	while (
		my ($panel_id, $judge_id, $ballot_id,
			$local_type, $round_name, $local_timeslot_id, $event_id, $round_id,
			$event_type,
			$num_judges,
			$judgecount, $entrycount,
			$jpool
		) = $sth->fetchrow_array()
	) {

		next if $timeslot_id ne "all" && $local_timeslot_id != $timeslot_id;
		next if $round_type ne "all" && $local_type ne $round_type;

		$panels{$panel_id}{"score"}      = $judgecount;
		$panels{$panel_id}{"num_judges"} = $num_judges;
		$panels{$panel_id}{"num_judges"} = 1 unless $num_judges;
		$panels{$panel_id}{"entries"}    = $entrycount;

		$panels{$panel_id}{"judges"}{$judge_id}++ if $judge_id > 0;
		$panels{$panel_id}{"ballots"}{$ballot_id}++;
		$panels{$panel_id}{"event"}      = $event_id;
		$panels{$panel_id}{"event_type"} = $event_type;
		$panels{$panel_id}{"round"}      = $round_id;
		$panels{$panel_id}{"round_type"} = $local_type;
		$panels{$panel_id}{"round_name"} = $round_name;
		$panels{$panel_id}{"jpool"}      = $jpool;

		$rounds{$round_id}{"yo"}++;
	}

	foreach my $round_id (keys %rounds) {
		 %{$rounds{$round_id}{"standby"}} = $m->comp("/funclib/judge_standby.mas", round => $round_id);
		 $rounds{$round_id}{"standby"} = 0 unless $rounds{$round_id}{"standby"};
	}

	$m->print("...<span class='semibold greentext inline'>done</span></p>");
	$m->print("<p>Finding ".$panelsize." clean judge(s) each for ".scalar(keys %panels)." sections.");
	$m->print(" The process will take a little while.</p>");
	$m->flush_buffer();

	my $empty_panels = 0;
	my $count;

	PANEL:
	foreach my $panel_id (keys %panels) {

		$count++;

		$m->print("<p class='marleftmore semibold greentext'>".$count." panels done...</p>")
			unless $count % 50;

		$m->flush_buffer();

		my $event_id = $panels{$panel_id}{"event"};
		my $round_id = $panels{$panel_id}{"round"};

		my $num_judges = $panels{$panel_id}{"num_judges"};
		$num_judges = 1 unless $num_judges;
		$num_judges = $panelsize if $num_judges < $panelsize;

		# Skip if the panel already has enough judges
		my $already = scalar(keys %{$panels{$panel_id}{"judges"}});
		next PANEL if $already >= $num_judges;
		$already++;

		my %round_data = (
			id   => $panels{$panel_id}{"round"},
			name => $panels{$panel_id}{"round_name"},
			type => $panels{$panel_id}{"round_type"},
		);

		my %event_data = (
			id   => $panels{$panel_id}{"event"},
			type => $panels{$panel_id}{"event_type"},
		);

		my %judges = $m->comp("/funclib/clean_judges.mas",
			panel_id          => $panel_id,
			round_id          => $round_id,
			round_data        => \%round_data,
			event_data        => \%event_data,
			jpool             => $panels{$panel_id}{"jpool"},
			not_preset        => 1,
		 	standby           => $rounds{$round_id}{"standby"},
			category_settings => \%category_settings,
			tourn_settings    => $tourn_settings,
			event_settings    => $events{$event_id}{"settings"}
		);

		my @clean_judges = keys %judges;

		# Most constrained to the top
	    @clean_judges =
			sort {$judges{$b}{"strikes"} <=> $judges{$a}{"strikes"}}
			@clean_judges;

		# Most used to the bottom
		@clean_judges =
			sort {$judges{$a}{"ballots"} <=> $judges{$b}{"ballots"}}
			@clean_judges;

		#Best rated to the top if that's what we're doing

		unless (
			$panels{$panel_id}{"round_type"} eq "prelim"
			&& $category_settings{"elim_only_ratings"}
		) {
			@clean_judges =
				sort {$judge_rating{$a}{$event_id} cmp $judge_rating{$b}{$event_id}}
				@clean_judges;
		}

		#Standbys to the bottom
		@clean_judges =
			sort {$judges{$a}{"standby"} <=> $judges{$b}{"standby"}}
			@clean_judges;

		# Ths will become the region (diocese) if we're running NCFLs.
		my %schools_used = ();
		my %judges_used = ();

		NEED:
		foreach ($already .. $num_judges) {

			unless (@clean_judges) {
				$empty_panels++;
				next PANEL;
			}

			my $chosen_judge;

			JUDGE:
			foreach my $clean_judge (@clean_judges) {

				next if $judges_used{$clean_judge};

				# If that school or region is on this panel already, move to
				# the next candidate.

				my $school_id = $judges{$clean_judge}{"school_id"};
				my $region_id = $judges{$clean_judge}{"region_id"};

				unless ($same_school) {

					next JUDGE if $schools_used{"dio-".$region_id};

					next JUDGE if $schools_used{"region-".$region_id}
						&& $region_id
						&& ($events{$event_id}{"region_judge_forbid"} || $tourn_settings->{"nsda_nats"});

					next JUDGE if $schools_used{"school-".$school_id}
						&& $school_id
						&& (not defined $events{$event_id}{"allow_judge_own"});
				}

				# Otherwise, we've found our judge.
				$chosen_judge = $clean_judge;

				$schools_used{"school-".$school_id}++;
				$schools_used{"dio-".$region_id}++ if $ncfl && $region_id;

				if ($region_id) {
					$schools_used{"region-".$region_id}++;
				}

				last JUDGE;
			}

			$judges_used{$chosen_judge}++;

			unless ($chosen_judge) {
				$empty_panels++;
				next PANEL;
			}

			$m->comp(
				"/funclib/panel_judgeadd.mas",
				judge_id => $chosen_judge,
				panel_id => $panel_id
			);

		}
	}

</%init>

		<h4>Judge paneling done</h4>

		<p class="bluetext semibold">
			There were <% $empty_panels %> sections that I couldn't find judges for.
		</p>

		<div class="centeralign full">
			<span class="third centeralign">
				<a
					target = "blank"
					class  = "fourfifths buttonwhite bluetext hover invert padvert"
					href   = "/panel/round/category_check.mhtml?category_id=<% $category->id %>"
				>
					Check for Disasters
				</a>
			</span>

			<span class="third centeralign">
				<a
					target = "blank"
					class = "fourfifths buttonwhite bluetext hover invert padvert"
					href  = "/panel/judge/chart.mhtml?category_id=<% $category->id %>"
				>
					See Judge Chart
				</a>
			</span>
		</div>

	</div>

	<& menu.mas,
		tourn          => $tourn,
		category       => $category,
		categories     => \%cats_by_id,
		whoami         => "index",
		perms          => $perms,
		tourn_settings => $tourn_settings,
	&>

