<%args>
	$tourn
	$person
	$perms
	$tourn_settings
	$round_id      => undef
	$property_name  => undef
	$setting_name   => undef
	$property_value => 0
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($round_id) {
		$m->print('{ "error": true, "message": "No Round ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->print('{ "error": true, "message": "No round found for ID '.$round_id.'"}');
		$m->abort();
	}

	my $message;

	if ($property_name eq "published") {

		if ($property_value eq "5") {

			$round->setting("publish_prelim_chamber", 1);
			$message = "Prelim chambers are visible to entries";

		} else {

			$round->setting("publish_prelim_chamber", 0);

			if ($property_value eq "1") {

				$m->comp("/funclib/docshare_rooms.mas", round => $round);

				$m->comp("/funclib/online_usage.mas",
					round    => $round,
					env      => \%ENV,
					district => $tourn_settings->{"nsda_district"}
				);

				$m->comp("/funclib/publish_flips.mas", round => $round);
				$message = "Round is fully published";
			} elsif ($property_value eq "2") {
				$message = "Round is published without judges";
			} else {
				$message = "Round is not published";
			}

			$round->published($property_value);
			$round->update();
		}

	} else {

		$round->$property_name($property_value);

		$message = $property_name;
		$message =~ s/post_//g;
		$message = ucfirst($message);

		if ($message ne "Feedback") {
			$message .= " results";
		}

		if ($property_value == 0) {
			$message .= " removed from posting";
		} elsif ($property_value == 1) {
			$message .= " posted to coaches";
		} elsif ($property_value == 2) {
			$message .= " posted to coaches & competitors";
		} elsif ($property_value == 3) {
			$message .= " posted publicly";
		}

		eval {
			$round->update();
		};
	}

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $round->event,
		round       => $round->id,
		tourn       => $tourn->id,
		person      => $person,
		description => $message
	);

	$m->print('{
		"error"   : false,
		"message" : "'.$message.'"
	}');

	$m->abort();

</%init>

