<%args>
	$dbh
	$rpr_id      => undef
	$property_name  => undef
	$property_value => undef
	$round_id       => undef
	$rpool_id       => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	if ($round_id && $rpool_id) {

		my $sth = $dbh->prepare('
			delete rpr.* from rpool_round rpr
			where rpr.round = ?
			and rpr.rpool = ?
		');

		$sth->execute(int($round_id), int($rpool_id));

		my $response =	({
			error   => \0,
			message => "Round removed from pool",
			destroy => $round_id."_".$rpool_id
		});

		$m->print(JSON::encode_json($response));
		$m->abort();
	}

	unless ($rpr_id) {
		$m->print('{ "error": true, "message": "No room pool round connection ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $rpool_round = Tab::RPoolRound->retrieve($rpr_id);

	unless ($rpool_round) {
		$m->print('{ "error": true, "message": "No room pool round connection found for ID '.$rpr_id.'"}');
		$m->abort();
	}

	my $message;

	if ($property_name eq "delete") {
		if ($rpool_round->round > 0 && $rpool_round->rpool > 0) {
			$message = "Round ".$rpool_round->round->name." removed from pool ".$rpool_round->rpool->name;
		}
		$rpool_round->delete();
	} else {

		$m->print('{ "error": true, "message": "Unsupported action"}');
		$m->abort();
	}

	$m->print('{ "error": false, "destroy" : "'.$rpr_id.'", "message": "'.$message.'"}');

	$m->abort();

</%init>

