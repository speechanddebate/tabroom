<%args>
	$person
	$perms
	$entry_id      => undef
	$property_name  => undef
	$setting_name   => undef
	$related_thing  => undef
	$property_value => 0
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	my $entry = eval {
		return Tab::Entry->retrieve($entry_id);
	};

	unless ($entry) {
		$m->print('{ "error": true, "message": "No valid entry found for ID '.$entry_id.'"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No chamber ID sent"}');
		$m->abort();
	}

	my $panel = eval {
		return Tab::Panel->retrieve($property_name);
	};

	unless ($panel) {
		$m->print('{ "error": true, "message": "No valid chamber found for ID '.$property_name.'"}');
		$m->abort();
	}

	unless ($setting_name) {
		$m->print('{ "error": true, "message": "No tag to change sent"}');
		$m->abort();
	}

	my $message;
	my $now = DateTime->now();

	if ($setting_name eq "nominee") {

		my $existing = Tab::StudentVote->search(
			entry => $entry->id,
			panel => $panel->id,
			tag   => "nominee"
		)->first;

		if ($property_value == 1) {

			if ($existing) {
				$existing->value(1);
				$existing->entered_by($person->id);
				$existing->update();
			} else {
				$existing = Tab::StudentVote->create({
					entry      => $entry->id,
					panel      => $panel->id,
					tag        => "nominee",
					entered_by => $person->id,
					entered_at => $now,
					voter      => $related_thing,
					value      => 1
				});
			}

			$message = $entry->code." added to student vote ballot";

		} elsif ($existing) {
			$existing->delete();
			$message = $entry->code." removed from student vote ballot";
		}

		$m->print('{
			"error"     : false,
			"message"   : "'.$entry->name.' '.$message.'",
			"norefresh" : true
		}');

	} elsif ($setting_name eq "rank" && $property_value > 0) {

		my $existing = Tab::StudentVote->search(
			entry => $entry->id,
			panel => $panel->id,
			tag   => "rank",
			voter => $related_thing
		)->first;

		my @others = Tab::StudentVote->search(
			panel => $panel->id,
			tag   => "rank",
			value => $property_value,
			voter => $related_thing
		);

		my $collision;

		while (@others) {
			my $test = shift @others;
			next if $test->entry->id == $entry->id;
			$collision++;
		}

		if ($collision) {
			$m->print('{ "error": true, "message": "Another competitor was given the same rank in that chamber.  Try again"}');
			$m->abort();
		}

		if ($property_value > 0) {

			if ($existing) {
				$existing->value($property_value);
				$existing->entered_by($person->id);
				$existing->update();
			} else {
				$existing = Tab::StudentVote->create({
					entry      => $entry->id,
					panel      => $panel->id,
					tag        => "rank",
					entered_by => $person->id,
					entered_at => $now,
					value      => $property_value,
					voter      => $related_thing
				});
			}

			$message = $entry->code." was given rank of $property_value";

		} elsif ($existing) {
			$existing->delete();
		}

		$m->print('{
			"error"     : false,
			"message"   : "'.$entry->name.' '.$message.'",
			"norefresh" : true
		}');

	}

	$m->abort();

</%init>

