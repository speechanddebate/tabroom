<%args>
	$person
	$panel_id  => undef
	$judge_id  => undef
	$panel_bye => undef
	$dbh
</%args>
<%init>

	my $panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	unless ($panel) {
		$m->print('<div class="main">');
		$m->print("No such panel/section.  Hit back and try again");
		$m->print("</div>");
		$m->abort;
	}

	$panel_bye = $panel->bye unless $panel_bye;
	my $round = $panel->round;
	my $event = $round->event;

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas",
		round => $round
	);

	my $now = DateTime->now;
	my %event_settings = $event->all_settings();

    my $subscores;
	if ($event->type eq "wsdc") {
		$subscores = $event_settings{"wsdc_subtotal_ballot"};
	}

    my %max_categories = ();
    my %min_categories = ();

    my @scores = ("Content", "Style", "Strategy", "POI");
	my $change;

    foreach my $key (@scores) {
        $min_categories{$key} = $event_settings{"min_".lc($key)."_points"};
        $max_categories{$key} = $event_settings{"max_".lc($key)."_points"};
        $min_categories{$key} = 0 unless $min_categories{$key};
        $min_categories{"total"} += $min_categories{$key} unless $key eq "POI";
        $max_categories{"total"} += $max_categories{$key} unless $key eq "POI";
    }

    my $trash = pop @scores unless $max_categories{"POI"};

	if ($panel_bye && (
		$round->type eq "elim"
		|| $round->type eq "final"
		|| $round->type eq "runoff")
	) {

		my @ballots = Tab::Ballot->search(
			judge => $judge_id,
			panel => $panel->id
		) if $judge_id;

		@ballots = Tab::Ballot->search(
			panel => $panel->id
		) unless $judge_id;

		foreach my $ballot (@ballots) {
			foreach my $value ($ballot->values) {
				$value->delete unless $value->tag eq "rfd"
				|| $value->tag eq "comments"
				|| $value->tag eq "subpoints";
			}
		}
	}

	$panel->bye($panel_bye);
	$panel->update();

	my $wudc++ if $event->type eq "wudc";
	my $studpoints++ if $event->type ne "congress" &&  $event->type ne "speech";

	my $team_points;
	$team_points++ if $event_settings{"team_points"};
	$team_points++ if $event_settings{"ballot_rubric"};

	undef $studpoints if $team_points;

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my %student_ballot = ();
	my $audit;
	my $no_audit;

	Tab::Student->set_sql(by_panel => "
		select distinct student.*
		from student, score, ballot
		where ballot.panel = ?
			and ballot.id = score.ballot
			and score.student = student.id
			and ballot.entry = ?
	");

	my @entries = $m->comp("/funclib/panel_entries.mas",
		panel  => $panel,
		person => $person
	);

	my @all_ballots;

	foreach my $entry (@entries) {

		my @ballots = Tab::Ballot->search(
			judge => $judge->id,
			panel => $panel->id,
			entry => $entry->id
		) if $judge;

		@ballots = Tab::Ballot->search(
			panel => $panel->id,
			entry => $entry->id
		) unless $judge;

		next unless @ballots;
		my $ballot = shift @ballots;
		my $score_delta;

		foreach my $spare (@ballots) { $spare->delete; }

		push @all_ballots, $ballot;

		my $win;
		my $best_po;
		my $rank;
		my $po;
		my $rubric;
		my $points;
		my %student_points = ();
		my %student_ranks = ();
		my %student_subpoints = ();
		my %rank_done;
		my %points_done;

		my @students = $entry->students;
		push @students, Tab::Student->search_by_panel($panel->id, $entry->id);

		my %seen = ();
		@students = grep { ! $seen{$_->id} ++ } @students;

		foreach my $student (@students) {

			$student_ballot{$student->id} = $ballot;

    		if ($subscores) {

				foreach my $score (@scores) {
					$score = lc($score);

					if ($ARGS{$student->id."_".$score}) {
						$student_subpoints{$student->id}{"speech"}{$score} = $ARGS{$student->id."_".$score};
					}

					if ($ARGS{$entry->id."_reply_student"} == $student->id) {
						$student_subpoints{$student->id}{"reply"}{$score} = $ARGS{$entry->id."_reply_".$score};
					}
				}
			}
		}

		my $bye = 0;
		$bye = 1 if $ARGS{"bye_".$ballot->id} > 0;

		my $forfeit = 0;
		$forfeit = 1 if $ARGS{"forfeit_".$ballot->id} > 0;

		SCORE:
		foreach my $score ($ballot->scores) {

			if ($score->tag eq "rank") {

				if ($studpoints && not defined $wudc && $score->student > 0) {

					if ($rank_done{$score->student->id}++) {
						$score->delete;
						next SCORE;
					}

					if ($score->student && $ARGS{"ranks_".$score->student->id}) {
						if ($score->value ne $ARGS{"ranks_".$score->student->id}) {
							$score->value($ARGS{"ranks_".$score->student->id});
							$student_ranks{$score->student->id}++;
							$change = "Rank change for ".$score->student->last;
						}
					} else {
						$score->delete();
						next SCORE;
					}

				} else {

					if ($rank_done{$ballot->id}++) {
						$score->delete;
						next SCORE;
					}

					if ($ARGS{"rank_".$ballot->id}) {

						if ($score->value ne $ARGS{"rank_".$ballot->id}) {
							$score->value($ARGS{"rank_".$ballot->id});
							$change = "Rank change for ".$ballot->entry->code;
						}
						$rank++ if $score->tag eq "rank";
					} else {
						$score->delete();
						next SCORE;
					}
				}

			} elsif ($score->tag eq "point") {

				if ($score->student > 0) {

					my $points = $ARGS{"points_".$score->student->id};
					my $position = $ARGS{"position_".$score->student->id};

					$position = 0 unless $position;
					$points = $ARGS{"points_".$ballot->id} if $team_points;

					if ($points_done{$score->student->id}++) {
						$score->delete();
						next SCORE;
					}

					if (length($points) == 0) {
						$score->delete;
						next SCORE;
					}

					if ($score->value ne $points) {
						$score->value($points) if $score->student;
						$change .= "\n" if $change;
						$change .= "Points changed for ".$score->student->last;
					}

					$score->position($position);
					$student_points{$score->student->id}++;

				} elsif ($event->type eq "debate" || $event->type eq "wsdc") {

					$score->delete();
					next SCORE;

				} else {

					if ($points_done{$ballot->id}++) {
						$score->delete();
						next SCORE;
					}

					if ($score->value ne $ARGS{"points_".$ballot->id}) {
						$score->value($ARGS{"rank_".$ballot->id});
						$score->value($ARGS{"points_".$ballot->id});
						$change .= "\n" if $change;
						$change .= "Points change for ".$ballot->entry->code;
					}

					$points++ if $score->tag eq "point";
				}

			} elsif ($score->tag eq "refute" && $studpoints) {

				my $refute = $ARGS{"refute_".$score->student->id};

				if ($points_done{$score->student->id."_rebuttal"}++) {
					$score->delete;
					next SCORE;
				}

				if (length($refute) == 0) {
					$score->delete;
					next SCORE;
				}

				if ($score->student && $score->value ne $refute) {
					$score->value($refute);
					$change .= "\n" if $change;
					$change .= "Refutation points changed for ".$score->student->last;
				}

				$student_points{$score->student->id."_rebuttal"}++;

			} elsif ($score->tag eq "best_po") {

				unless ($ARGS{"best_po_".$ballot->id}) {
					$score->delete();
					next SCORE;
				} else {
					$best_po++;
				}

			} elsif ($score->tag eq "winloss") {

				if ($bye > 0 || $forfeit > 0) {
					$score->delete;
					next SCORE;

				} elsif ($tb_types{"winloss"}) {

					if ($ARGS{$entry->id."_winloss"} || ($ARGS{"winloss"} == $entry->id)) {
						if ($score->value ne 1) {
							$change .= "\n" if $change;
							$change .= "Winner changed to ".$entry->code;
							$score_delta++;
							$score->value("1")
						}
					} else {
						if ($score->value > 0) {
							$change .= "\n" if $change;
							$change .= "Win removed from ".$entry->code;
							$score_delta++;
							$score->value("0");
						}
					}
					$win++;
				} else {
					$score->delete();
					next SCORE;
				}

			} elsif ($score->tag eq "subpoints" && $score->student) {

				my $json = eval {
					JSON::encode_json($student_subpoints{$score->student->id});
				};

				if ($json) {
					unless ($score->content eq $json) {
						$score->content($json);
					}
					delete $student_subpoints{$score->student->id};
				} else {
					$score->delete();
					next SCORE;
				}

			} elsif ($score->tag eq "rubric") {

				$rubric = eval {
					return JSON::decode_json($rubric->content);
				};

				my $haz_points;

	            foreach my $order (sort {$a <=> $b} keys %{$event_settings{"ballot_rubric"}{$ballot->side}}) {

					my $row = $event_settings{"ballot_rubric"}{$ballot->side}{$order};

					if ($ARGS{$ballot->id."_".$order}) {
						$haz_points++;
						$rubric->{$order}{"speaker"} = $ARGS{$ballot->id."_".$order."_speaker"};
						$rubric->{$order}{"points"}  = $ARGS{$ballot->id."_".$order};
						$rubric->{$order}{"label"}   = $row->{"label"};
						$rubric->{$order}{"order"}   = $order;
					}
				}

				if ($haz_points) {
					$score->content(JSON::encode_json($rubric));
				} else {
					$score->delete();
					undef $score;
				}

			} elsif ($score->tag eq "po") {
				$po++;

				Tab::debuglog("Checking PO status with argument ".$ARGS{$ballot->id."_po"});
				unless ($ARGS{$ballot->id."_po"} > 0) {
					Tab::debuglog("Deleting score $score");
					$score->delete();
				}

			}

			if ($score) {
				eval {
					$score->update();
				};
			}
		}

		if ($event_settings{"ballot_rubric"} && (not defined $rubric)) {

			my $haz_points;

	        foreach my $order (sort {$a <=> $b} keys %{$event_settings{"ballot_rubric"}{$ballot->side}}) {

				my $row = $event_settings{"ballot_rubric"}{$order};

				if ($ARGS{$ballot->id."_".$order}) {
					$rubric->{$order}{"speaker"} = $ARGS{$ballot->id."_".$order."_speaker"};
					$rubric->{$order}{"points"}  = $ARGS{$ballot->id."_".$order};
					$rubric->{$order}{"label"}   = $row->{"label"};
					$rubric->{$order}{"order"}   = $row->{"order"};
					$haz_points++;
				}
			}

			if ($haz_points) {
				my $json = eval {
					return JSON::encode_json($rubric);
				};

				if ($json) {
					eval {
						Tab::Score->create({
							ballot  => $ballot->id,
							tag     => "rubric",
							value   => 0,
							content => $json
						});
					};
				}
			}
		}

		if ($event_settings{"roles_rubric"}) {

			my $wipe_role = $dbh->prepare("
				delete score.*
				from score, ballot
				where ballot.panel = ?
					and ballot.id      = score.ballot
					and score.tag      = 'speaker'
					and score.position = ?
			");

	        foreach my $order (sort {$a <=> $b} keys %{$event_settings{"roles_rubric"}} ) {

				if ($ARGS{"role_".$order}) {

					$wipe_role->execute($panel->id, $order);

					Tab::Score->create({
						ballot   => $ballot->id,
						tag      => 'speaker',
						position => $order,
						student  => $ARGS{"role_".$order},
						value    => $ARGS{"role_".$order."_points"}
					});
				}
			}
		}

		if ($ARGS{$ballot->id."_po"} > 0 && (not defined $po)) {

			Tab::debuglog("Creating PO status with argument ".$ARGS{$ballot->id."_po"});

			Tab::Score->create({
				ballot   => $ballot->id,
				tag      => "po",
				value    => $ARGS{$ballot->id."_po"},
				student  => 0
			});
		}

		if ($ARGS{"rank_".$ballot->id} > 0 && (not defined $rank)) {
			$score_delta++;
			Tab::Score->create({
				ballot   => $ballot->id,
				tag      => "rank",
				value    => $ARGS{"rank_".$ballot->id},
				student  => 0
			});
		}

		if ($tb_types{"best_po"}) {
			unless ($best_po) {
				if ($ARGS{"best_po_".$ballot->id}) {
					$score_delta++;
					Tab::Score->create({
						ballot   => $ballot->id,
						tag      => "best_po",
						value    => 1,
						student  => 0
					});
				}
			}
		}

		if ($tb_types{"winloss"}) {

			unless ($win || $bye || $forfeit) {

				my $tigersblood = 0;
				my $make_win;

				if ($ARGS{$entry->id."_winloss"} || ($ARGS{"winloss"} == $entry->id)) {

					$tigersblood++;
					$make_win++;

				} else {
					foreach my $other (@entries) {
						if ($ARGS{$other->id."_winloss"} || ($ARGS{"winloss"} == $other->id)) {
							$make_win++;
						}
					}
				}

				if ($make_win) {

					eval {
						Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "winloss",
							value    => $tigersblood,
							student  => 0
						});
						$score_delta++;
					};
				}

			} elsif ($wudc) {
				Tab::Score->create({
					ballot   => $ballot->id,
					tag      => "winloss",
					student  => 0,
					value    => 0
				});
			}
		}

		if (
			($ARGS{"points_".$ballot->id} > 0)
			&& (not defined $points)
			&& ($event->type eq "debate" || $event->type eq "wsdc")
			&& (not defined $studpoints)
		) {

			foreach my $student (@students) {

				my $already = Tab::Score->search(
					ballot  => $ballot->id,
					tag     => "point",
					student => $student
				)->first;

				if ($already) {
					unless ($already->value eq $ARGS{"points_".$ballot->id}) {
						$already->value($ARGS{"points_".$ballot->id});
						$already->update();
						$score_delta++;
					}
				} else {
					Tab::Score->create({
						ballot   => $ballot->id,
						tag      => "point",
						value    => $ARGS{"points_".$ballot->id},
						student  => $student->id,
					});
					$score_delta++;
				}
			}

		} elsif ($ARGS{"points_".$ballot->id} > 0 && (not defined $points)) {

			$score_delta++;

			Tab::Score->create({
				ballot   => $ballot->id,
				tag      => "point",
				value    => $ARGS{"points_".$ballot->id},
				student  => 0
			});
		}

		if (
			($ARGS{"refute_".$ballot->id} > 0)
			&& (not defined $points)
			&& (not defined $team_points)
		) {
			my $already = Tab::Score->search(
				ballot => $ballot->id,
				tag    => "refute"
			)->first;

			if ($already) {
				unless ($already->value eq $ARGS{"refute_".$ballot->id}) {
					$already->value($ARGS{"refute_".$ballot->id});
					$already->update();
					$score_delta++;
				}
			} else {
				Tab::Score->create({
					ballot   => $ballot->id,
					tag      => "refute",
					value    => $ARGS{"refute_".$ballot->id},
					student  => 0
				});
				$score_delta++;
			}
		}

		if ($subscores) {

			foreach my $student (@students) {

				my $position = $ARGS{"position_".$student->id};

				my $json = eval {
					JSON::encode_json($student_subpoints{$student->id});
				};

				if ($json) {

					$position = 0 unless $position;

					eval {
						Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "subpoints",
							position => $position,
							content  => $json,
							student  => $student->id
						});
					};
				}
			}
		}

		if ($studpoints) {

			foreach my $student (@students) {

				my $points = $ARGS{"points_".$student->id};
				my $position = $ARGS{"position_".$student->id};
				$points = $ARGS{"points_".$ballot->id} if $team_points;
				$position = 0 unless $position;

				if (length($points) > 0 && not defined $student_points{$student->id}) {
					my $score = eval {
						return Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "point",
							position => $position,
							value    => $points,
							student  => $student->id
						});
					};
				}

				my $refute = $ARGS{"refute_".$student->id};

				if (length($refute) > 0 && not defined $student_points{$student->id."_rebuttal"}) {
					Tab::Score->create({
						ballot   => $ballot->id,
						tag      => "refute",
						position => 4,
						value    => $points,
						student  => $student->id
					});
				}

				if ($ARGS{"ranks_".$student->id} > 0 && not defined $student_ranks{$student->id}) {
					eval { Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "rank",
							value    => $ARGS{"ranks_".$student->id},
							student  => $student->id
						});
					};
				}
			}
		}

		if ($event->category->setting('ballot_times')) {

			my $time = $ARGS{"time_".$ballot->id};
			my $deja = $ballot->scores( tag => "time" )->first;

			if ($time && $time ne "0" && $time ne "") {

				if ($deja) {
					$deja->content($time);
					$deja->update();
				} else {
					eval {
						Tab::Score->create({
							ballot  => $ballot->id,
							tag     => "time",
							content => $time
						});
					};
				}
			} elsif ($deja) {
				$deja->delete();
			}
		}

		$ARGS{"tv_".$ballot->id} = 0 unless $ARGS{"tv_".$ballot->id};
		$ARGS{"audit_".$ballot->id} = 0 unless $ARGS{"audit_".$ballot->id};
		$ARGS{"forfeit_".$ballot->id} = 0 unless $ARGS{"forfeit_".$ballot->id};
		$ARGS{"bye_".$ballot->id} = 0 unless $ARGS{"bye_".$ballot->id};

		unless ($ARGS{"tv_".$ballot->id} eq $ballot->tv) {
			$change .= "\n" if $change;
			$change .= "Violation marked for ballot for ".$ballot->entry->code;
			$ballot->tv($ARGS{"tv_".$ballot->id});
		}

		unless ($ARGS{"audit_".$ballot->id} eq $ballot->audit) {
			$change .= "\n" if $change;
			$change .= "Ballot for ".$ballot->entry->code." marked as audited";
			$ballot->audit($ARGS{"audit_".$ballot->id});
			$ballot->audited_by($person->id);
		}

		if ($ARGS{"audit_".$ballot->id}) {
			$audit++;
		} else {
			$no_audit++;
		}

		unless ($forfeit eq $ballot->forfeit) {
			$change .= "\n" if $change;
			$change .= "Ballot for ".$ballot->entry->code." marked as a forfeit";
			$ballot->forfeit($forfeit);
		}
		unless ($ARGS{"forfeit_".$ballot->id} eq $ballot->forfeit) {
			$change .= "\n" if $change;
			$change .= "Ballot for ".$ballot->entry->code." marked as a forfeit";
			$ballot->forfeit($ARGS{"forfeit_".$ballot->id});
		}

		unless ($bye eq $ballot->bye) {
			$change .= "\n" if $change;
			$change .= "Ballot for ".$ballot->entry->code." marked as a bye";
			$ballot->bye($bye);
		}

		if ($score_delta) {
			$ballot->entered_by($person->id);
		}

		my $reply = $ballot->update();
	}

	if ($event_settings{"speakers_rubric"} && $judge) {

		my $sth = $dbh->prepare("
			delete score.*
				from score, ballot
			where ballot.panel = ?
				and ballot.judge = ?
				and score.tag = 'speaker'
				and score.ballot = ballot.id
		");

		$sth->execute($panel->id, $judge->id);

		foreach my $order (keys %{$event_settings{"speakers_rubric"}}) {

			my $student_id = $ARGS{"speaker_".$order};

			if ($student_id) {
				my $ballot = $student_ballot{$student_id};
				if ($ballot) {
					eval {
						Tab::Score->create({
							ballot  => $ballot,
							student => $student_id,
							tag     => "speaker",
							speech  => $order,
							value   => $event_settings{"speakers_rubric"}{$order}->{"points"}
						});
					};
				}
			}
		}
	}

	my $err;

	if ($audit && $no_audit) {
		$err = "You've marked one ballot as done and not the other one.";
		$err .= "The round won't be marked as complete unless both ballots are marked done";
	}

	if ($change) {
		$m->comp("/funclib/round_done.mas",
			round      => $round,
			panel      => $panel,
			change     => $change,
			person     => $person,
			admin_done => 1,
			not_first  => 1
		);
	}

	my $empty_sth = $dbh->prepare("
		delete ballot.*
			from ballot
		where 1=1
			and ballot.panel = ?
			and ballot.entry = 0
	");

	$empty_sth->execute($panel_id);

	my $msg = "Panel scores saved forcibly.  I hope you know what you are doing.  Panel $panel";
	$m->redirect("panel.mhtml?panel_id=".$panel_id."&judge_id=".$judge_id."&err=$err&msg=$msg");

</%init>
