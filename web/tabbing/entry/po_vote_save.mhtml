<%args>
	$person
	$tourn
	$target_id => undef
	$panel_id => undef
</%args>
<%init>

	my $panel = Tab::Panel->retrieve($panel_id);
	my $target = Tab::Panel->retrieve($target_id);

	unless (
		$panel
		&& $target
		&& $panel->round->event->tourn == $target->round->event->tourn
	) {
		$m->comp("/funclib/abort.mas", message => "Your panel and target were not in the same tournament.");
	}

	my @pos = $m->comp("/funclib/panel_entries.mas", panel => $panel);

	my $now = DateTime->now();

	foreach my $voter ($m->comp("/funclib/panel_entries.mas", panel => $target)) {

		my %votes = map { $_->entry->id => $_} Tab::StudentVote->search(
			voter => $voter->id,
			panel => $panel->id
		);

		my %done;

		PO:
		foreach my $po (@pos) {

			my $value = 0;

			if ($ARGS{"vote_".$voter->id} == $po) {
				$value = 1;
			} elsif ($ARGS{"vote_".$voter->id} eq "NULL") {
				if ($votes{$po}) {
					$votes{$po}->delete;
				};
				next PO;
			}

			if ($votes{$po}) {

				if ($votes{$po}->value == $value) {
					next PO;
				}

				$votes{$po}->tag("winloss");
				$votes{$po}->entered_by($person->id);
				$votes{$po}->entered_at($now);
				$votes{$po}->value($value);
				$votes{$po}->update();

				delete $votes{$po};

			} else {

				my $vote = Tab::StudentVote->create({
					tag        => 'winloss',
					panel      => $panel->id,
					voter      => $voter->id,
					value      => $value,
					entry      => $po,
					entered_by => $person,
					entered_at => $now
				});

			}
		}

	}

	my $msg = "Votes have been re-recorded";

	$m->redirect("panel.mhtml?panel_id=".$panel->id."&msg=$msg");


</%init>
