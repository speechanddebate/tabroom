<%args>
	$tourn
	$tourn_settings
	$result_type
	$perms      => undef
	$round_type => undef
	$round_name => undef
	$event_id   => undef
	$event      => undef
	$session    => undef
	$publish    => 0
	$mailbids   => undef
	$limit      => undef
	$circuit_id => undef
	$dbh
</%args>
<%init>

	my @events;
	my $msg;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now( time_zone => $tz);

	if ($event_id eq "all") {

		@events = $tourn->events;

	} elsif ($event_id =~ /type/) {

		my $type = $event_id;
		$type =~ s/type_//g;

		@events = Tab::Event->search(
			tourn => $tourn->id,
			type  => $type
		);

	} elsif ($event) {
		push @events, $event;
	} else {
		push @events, Tab::Event->retrieve($event_id);
	}

	my $breakout;
	my $breakout_label;
	my %limit_entries = ();
	my %limit_students = ();
	my %es;

	foreach my $event (@events) {

		unless ($es{$event} && keys %{$es{$event}}) {
			%{$es{$event}} = $event->all_settings();
		}

		my $event_settings = $es{$event->id};

		foreach my $key (1 .. $event_settings->{"breakouts"}) {

			next unless $ARGS{"breakout_".$event->id."-".$key};
			next if $event_settings->{"breakout_".$key."_delete"};
			my $label =  $event_settings->{"breakout_".$key."_label"};

			$breakout_label .= " and " if $breakout_label;
			$breakout_label = "(" unless $breakout_label;
			$breakout_label .= $label;
			$breakout = $key;

			my $flagged_students = JSON::decode_json($event_settings->{'breakout_'.$key.'_students'})
				if $event_settings->{'breakout_'.$key."_students"};

			my @entries = $m->comp(
				"/funclib/event_entries.mas",
				event    => $event,
				perms    => $perms,
				breakout => $key
			);

			foreach my $entry (@entries) {
				$limit_entries{$entry->id}++;
			}

			foreach my $student_id (keys %{$flagged_students}) {
				$limit_students{$student_id}++;
			}
		}
	}

	Tab::ResultValue->set_sql( rm_label => "
		delete result_value.*
			from result, result_value, result_set
		where result_value.result = result.id
			and result.result_set = result_set.id
			and result_set.event = ?
			and result_set.label = ?
	");

	Tab::Result->set_sql( rm_label => "
		delete result.*
			from result, result_set
		where result.result_set = result_set.id
			and result_set.event = ?
			and result_set.label = ?
	");

	Tab::ResultSet->set_sql( rm_label => "
		delete
			from result_set
		where event = ?
			and label = ?
	");

	$breakout_label .= ")" if $breakout_label;

	if ($result_type eq "ndca") {

		foreach my $event (@events) {

			my $event_settings = $es{$event->id};

			if ($event_settings->{"baker"}
				|| $event_settings->{"dukesandbailey"}
				|| $event_settings->{"ndca_public_forum"}
			) {

				$m->comp("/tabbing/report/ndca/points.mhtml",
					event_id => $event->id,
					publish  => $publish,
					perms    => $perms,
					generate => 1,
					tourn    => $tourn
				);

				$msg .= "NDCA points generated for ".$event->abbr." <br />";
			}
		}

	} elsif ($result_type eq "toc") {

		foreach my $event (@events) {

			my $event_settings = $es{$event->id};

			if ($event_settings->{"bid_round"}) {

				$msg .= $m->comp("/tabbing/report/toc/post_bids.mhtml",
					event_id       => $event->id,
					publish        => $publish,
					generate       => 1,
					perms          => $perms,
					mailbids       => $mailbids,
					tourn          => $tourn,
					tourn_settings => $tourn_settings,
					session        => $session);
			}
		}

	} elsif ($result_type eq "bracket") {

		foreach my $event (@events) {

			my $event_settings = $es{$event->id};

			my $bracket = $m->comp("generate_bracket.mas",
				event    => $event,
				breakout => $breakout,
				perms    => $perms,
				label    => "Bracket ".$breakout_label
			);

			$bracket->published($publish);
			$bracket->update;
			$msg .= "Bracket for ".$event->abbr." regenerated";
		}

	} elsif ($result_type eq "chamber") {

		foreach my $event (@events) {

			my @rounds =
				sort {$b->name <=> $a->name}
				$m->comp("/funclib/event_rounds.mas",
					event    => $event,
					perms    => $perms,
					breakout => $breakout,
					done     => "yes"
				);

			my %buckets;
			my %contents;
			my %done;

			ROUND:
			foreach my $round (@rounds) {

				unless ($done{$round->id}) {

					my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);

					if (@ties) {
						my $label = $ties[0]->label;

						if ($ties[0]->type eq "prelim") {
							$label = "Prelims"
						} elsif (not defined ($label)) {
							foreach my $tie (@ties) {
								$label .= ", " if $label;
								$label .= $tie->name;
							}
						}

						foreach my $tie (@ties) {
							push @{$contents{$label}}, $tie;
							$done{$tie->id}++;
						}

						$buckets{$label} = pop @ties;
					}
				}
			}

			foreach my $key (keys %buckets) {

				my $round = $buckets{$key};
				my $label = $round->label;

				if ($round_name && $round->name != $round_name) {
					next;
				}

				if ($round_type && $round->type != $round_type) {
					next;
				}

				if ($breakout && $round->setting("use_for_breakout") != $breakout) {
					next;
				} elsif ($round->setting("use_for_breakout") && (not defined $breakout)) {
					next;
				}

				if ($label) {
					$label =~ s/\d//g;
				} else {
					$label = ucfirst($round->type);
				}

				$label .= " Chamber Results";

				Tab::ResultValue->sql_rm_label->execute($event->id, $label);
				Tab::Result->sql_rm_label->execute($event->id, $label);
				Tab::ResultSet->sql_rm_label->execute($event->id, $label);

				my $set = Tab::ResultSet->create({
					tourn     => $tourn->id,
					event     => $event->id,
					label     => $label,
					generated => $now,
					published => $publish
				});

				my %keys = map {$_->tag => $_} $set->result_keys();

				my %seed;
				my $protocol = $round->protocol;

				my @results = $m->comp(
					"/tabbing/results/order_entries.mas",
					round        => $round,
					section_rank => 1,
					perms        => $perms,
					return       => $ARGS{"return"}
				);

				my $limiter;

				foreach my $round (@{$contents{$key}}) {
					$limiter .= ", " if $limiter;
					$limiter .= $round->id;
				}

				$limiter = " and round.id IN (".$limiter.")";

				my %scores = $m->comp("/funclib/round_ballot_json.mas",
					perms    => $perms,
					round   => $round,
					limiter => $limiter
				);

				my $entries = pop @results if @results;

				my $round_id = $round->id;
				my %chambers;

				foreach my $panel_id (sort keys %{$entries->{"by_section"}}) {

					my $rank = 1;
					my %used;
					my $park;

					foreach my $key (sort {$a <=> $b} keys %{$entries->{"by_place"}}) {

						my @entries;

						foreach my $entry ( @{${$entries->{"by_place"}}{$key}} ) {
							next unless $entries->{"by_section"}{$panel_id}{$entry};
							next if $breakout && (not defined $limit_entries{$entry});
							next if $used{$entry}++;
							push @entries, $entry
						}

						next unless @entries;

						my $tie++ if scalar @entries > 1;

						foreach my $entry (@entries) {

							$park++;

							$seed{$entry} = $rank;
							my $key_value = $rank;
							$key_value .= "-T" if $tie;

							my $result = Tab::Result->create({
								entry      => $entry,
								rank       => $rank,
								result_set => $set->id,
								panel      => $panel_id,
								round      => $round_id,
								place      => $key_value
							});

							foreach my $key (sort {$a <=> $b} keys %{$entries->{tier_description}}) {

								my $tag = ${$entries->{tier_description}}{$key};
								my $description = ${$entries->{tier_long_description}}{$key};

								my $sort_desc = 0;
								$sort_desc = 1 if ${$entries->{tier_direction}}{$key} eq "down";

								my $value = ${$entries->{tbs}}{$entry}{$key};
								$value = sprintf("%.2f", $value);

								unless ($keys{$tag}) {
									$keys{$tag} = Tab::ResultKey->create({
										result_set  => $set->id,
										tag         => $tag,
										description => $description,
										sort_desc   => $sort_desc
									});
								}

								Tab::ResultValue->create({
									result       => $result->id,
									value        => $value,
									priority     => $key,
									result_key   => $keys{$tag},
									protocol => $protocol
								});
							}

							unless ($keys{"Ballots"}) {
								$keys{"Ballots"} = Tab::ResultKey->create({
									result_set  => $set->id,
									tag         => "Ballots",
									description => "Unadjusted Raw Scores",
									no_sort     => 1
								});
							}

							my $json = eval {
								return JSON::encode_json($scores{$entry});
							};

							if ($json) {
								my $rv = Tab::ResultValue->create({
									result_key => $keys{"Ballots"},
									result     => $result->id,
									value      => $json,
									protocol   => $protocol,
									priority   => 999
								});
							}
						}

						$rank += $park;
						undef $park;
					}
				}
			}
		}

	} else {

		my $label = "Prelim Seeds" if ($result_type eq "prelim_seed");
		$label = "Final Places" if ($result_type eq "final");
		$label = "Speaker Awards" if ($result_type eq "speakers");
		$label = "Prelims Table" if ($result_type eq "prelims_table");

		$label .= $breakout_label if $breakout;

		foreach my $event (@events) {

			my $event_settings = $es{$event->id};
			my $novice++ if $event_settings->{"top_novice"};
			my $honmen++ if $event_settings->{"honorable_mentions"};
			my $event_type = $event->type;

			my @rounds = sort {$b->name <=> $a->name}
				$m->comp("/funclib/event_rounds.mas",
					perms => $perms,
					event => $event,
					done  => "yes"
				);

			my $top_novice = $m->comp(
				"/tabbing/results/top_novice.mas",
					event  => $event,
					perms  => $perms,
					return => $ARGS{"return"}
			) if $novice;

			my %used;
			my $final;
			my @elims;
			my $last_prelim;

			foreach my $round (@rounds) {

				$final = $round if $round->type eq "final";
				push (@elims, $round) if $round->type eq "elim";

				$last_prelim = $round if $round->type ne "elim"
					&& $round->type ne "final"
					&& not defined $last_prelim;
			}

			my $rank = 1;

			Tab::ResultValue->sql_rm_label->execute( $event->id, $label );
			Tab::Result->sql_rm_label->execute( $event->id, $label );
			Tab::ResultSet->sql_rm_label->execute( $event->id, $label );

			my $set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event->id,
				label     => $label,
				generated => $now,
				published => $publish
			});

			my %keys = map {$_->tag => $_} $set->result_keys();

			my %prelim_seed;

			if ($result_type eq "prelims_table") {

				my %data;

				my $result_sth = $dbh->prepare('
					select
						panel.id panel_id,
						ballot.id ballot_id, ballot.entry entry_id, ballot.judge judge_id,
						score.id, score.tag, score.value score_value, score.student,
						student.last student_last, student.id student_id, student.first student_first,
						round.id round_id, round.name round_name, round.label round_label, round.type round_type

					from (round, panel, ballot, score)
						left join student on student.id = score.student

					where round.event = ?
						and round.id = panel.round
						and round.type NOT IN ("final", "runoff", "elim")
						and panel.id = ballot.panel
						and ballot.id = score.ballot
						and score.tag IN ("winloss", "point", "rank")
				');

				$result_sth->execute($event->id);

				my $results = $result_sth->fetchall_hash();

				foreach my $ref (@{$results}) {

					next if $ref->{round_type} eq "final";
					next if $ref->{round_type} eq "elim";
					next if $ref->{round_type} eq "runoff";

					my $total_result = $data{results}{$ref->{panel_id}}{$ref->{entry_id}}{'total'};
					my $judge_result = $data{results}{$ref->{panel_id}}{$ref->{entry_id}}{$ref->{'judge_id'}};

					$judge_result->{$ref->{tag}} += $ref->{score_value};
					$total_result->{$ref->{tag}} += $ref->{score_value};

					if ($ref->{tag} eq "winloss" && $ref->{score_value} == 0) {
						$judge_result->{loss}++;
						$total_result->{loss}++;
					}

					if ($ref->{student}) {
						$judge_result->{speakers}{$ref->{student}}{$ref->{tag}} += $ref->{score_value};
						$total_result->{speakers}{$ref->{student}}{$ref->{tag}} += $ref->{score_value};
						$judge_result->{speakers}{$ref->{student}}{name} = $ref->{student_last}." ".$ref->{student_first};
					}

					$data{results}{$ref->{panel_id}}{$ref->{entry_id}}{'total'} = $total_result;
					$data{results}{$ref->{panel_id}}{$ref->{entry_id}}{$ref->{'judge_id'}} = $judge_result;

					unless ($data{"rounds"}{$ref->{round_id}}) {
						$data{rounds}{$ref->{'round_id'}} = ({
							name     => $ref->{round_name},
							type     => $ref->{round_type},
							label    => $ref->{round_label},
							realname => $ref->{round_label} || "Round ".$ref->{round_name},
						});
					}

					$data{has_scores}{$ref->{entry_id}}++;
				}

				my $sth = $dbh->prepare('
					select
						event.id event_id, event.abbr event_abbr, event.name event_name, event.type event_type,
						aff_label.value aff, neg_label.value neg,
						entry.id entry_id, entry.code entry_code, entry.name entry_name,
						school.id school_id, school.code school_code, school.name school_name,
						region.id region_id, region.code region_code, region.name region_name,
						school.state state, chapter.state cstate,
						round.id round_id, round.name round_name, round.label round_label, round.type round_type,
						panel.id panel_id, panel.letter, panel.bye pbye,
						ballot.id ballot_id, ballot.side, ballot.speakerorder, ballot.bye, ballot.forfeit,
						judge.id judge_id, judge.first judge_first, judge.last judge_last, judge.code judge_code,
						jschool.id jschool_id, jschool.name jschool_name, jschool.code jschool_code, jschool.state jschool_state,
						GROUP_CONCAT(CONCAT(student.last, ", ", student.first) ORDER BY student.last SEPARATOR "<br />") students,
						COUNT(student.id) student_count,
						show_totals.value show_totals

					from (entry, school, round, panel, ballot, event)
						left join region on school.region = region.id
						left join chapter on chapter.id = school.chapter
						left join judge on ballot.judge = judge.id
						left join school jschool on jschool.id = judge.school
						left join entry_student es on es.entry = entry.id
						left join student on es.student = student.id
						left join event_setting show_totals on show_totals.tag = "show_totals" and show_totals.event = event.id
						left join event_setting aff_label on aff_label.tag = "aff_label" and aff_label.event = event.id
						left join event_setting neg_label on neg_label.tag = "neg_label" and neg_label.event = event.id

					where event.id = ?
						and entry.event = event.id
						and entry.school = school.id
						and entry.id = ballot.entry
						and ballot.panel = panel.id
						and panel.round = round.id
						and round.event = event.id
					group by ballot.id
				');

				$sth->execute($event->id);

				my $rounds = $sth->fetchall_hash();

				foreach my $ref (@{$rounds}) {

					next unless $data{rounds}{$ref->{'round_id'}};

					unless ($data{"event"}) {
						$data{event} = ({
							id          => $ref->{event_id},
							name        => $ref->{event_name},
							type        => $ref->{event_type},
							abbr        => $ref->{event_abbr},
							show_totals => $ref->{show_totals}
						});
					}

					unless ($data{"rounds"}{$ref->{round_id}}) {
						$data{rounds}{$ref->{'round_id'}} = ({
							name     => $ref->{round_name},
							type     => $ref->{round_type},
							label    => $ref->{round_label},
							realname => $ref->{round_label} || "Round ".$ref->{round_name},
						});
					}

					unless ($data{"judges"}{$ref->{judge_id}}) {
						$data{judges}{$ref->{'judge_id'}} = ({
							name         => $ref->{judge_last}.", ".$ref->{judge_first}." ".$ref->{judge_middle},
							first        => $ref->{judge_first},
							last         => $ref->{judge_last},
							school       => $ref->{jschool_id},
							school_name  => $ref->{jschool_name},
							school_code  => $ref->{jschool_code},
							school_state => $ref->{jschool_state},
						});
					}

					unless ($data{"entries"}{$ref->{entry_id}}) {
						$data{entries}{$ref->{'entry_id'}} = ({
							code         => $ref->{entry_code},
							name         => $ref->{entry_name},
							school       => $ref->{school_id},
							school_name  => $ref->{school_name},
							school_code  => $ref->{school_code},
							school_state => $ref->{school_state},
						});

						unless ($event->{type} eq "mock_trial") {
							$data{entries}{$ref->{'entry_id'}}{students} = $ref->{students};
							$data{entries}{$ref->{'entry_id'}}{student_count} = $ref->{student_count};
						}
					}

					my $side_string = " ";

					if ($ref->{side} == 1) {
						$side_string = $ref->{aff} || "Aff";
					} elsif ($ref->{side} == 2) {
						$side_string = $ref->{neg} || "Neg";
					}

					$data{entries}{$ref->{'entry_id'}}{$ref->{round_id}} = ({
						panel       => $ref->{panel_id},
						letter      => $ref->{panel_letter},
						bye         => $ref->{pbye}  || $ref->{bye},
						forfeit     => $ref->{forfeit},
						side        => $ref->{side},
						side_string => $side_string,
						order       => $ref->{speakerorder},
					});

					$data{panels}{$ref->{panel_id}}{entries}{$ref->{entry_id}}++;
					$data{panels}{$ref->{panel_id}}{judges}{$ref->{judge_id}}++;
				}

				my @round_ids = sort {$data{rounds}{$b}{"name"} <=> $data{rounds}{$a}{"name"}} keys %{$data{rounds}};

				unless (@round_ids) {
					$set->delete();
					return $msg;
				}

				my @results = $m->comp(
					"/tabbing/results/order_entries.mas",
					round  => Tab::Round->retrieve($round_ids[0]),
					return => 1,
				);

				my $results_ref = pop @results if @results;
				$data{tiebreak_keys} = $results_ref->{tier_description};
				$data{tiebreak_desc} = $results_ref->{tier_long_description};

				foreach my $key (sort {$a <=> $b} keys %{$results_ref->{"by_place"}}) {

					my $tie++ if scalar @{${$results_ref}{"by_place"}{$key}} > 1;

					foreach my $entry_id (@{${$results_ref}{"by_place"}{$key}}) {

						$data{entries}{$entry_id}{"seed"} = $key;
						$data{entries}{$entry_id}{"seed_string"} = Lingua::EN::Numbers::Ordinate::ordinate($key);

						if ($tie) {
							$data{entries}{$entry_id}{"seed_string"} = "T-".$data{entries}{$entry_id}{"seed_string"};
						}

						foreach my $tb_key (keys %{$data{tiebreak_keys}}) {
							$data{entries}{$entry_id}{tiebreaks}{$tb_key} = $results_ref->{tiebreak}{$tb_key}{$entry_id};
						}
					}
				}

				my $json = eval {
					return JSON::encode_json(\%data);
				};

				$set->cache(Tab::Utils::compress($json));
				$set->update();

			} elsif ($result_type eq "speakers") {

				my %student_ballots = ();
				my $protocol_id = $event_settings->{"speaker_protocol"};

				my $protocol = Tab::Protocol->retrieve($protocol_id)
					if $protocol_id;

				unless ($protocol) {

					my $err = "Event ".$event->name." does not have a speaker ";
					$err .= "awards tiebreaker set applied to it.  Please pick one ";
					$err .= "and try again";

					return $err if $ARGS{"return"};
					$m->redirect("/setup/events/tabbing.mhtml?event_id=".$event->id."&err=$err");

				}

				if ($last_prelim) {

					my %tiebreak_types = $m->comp(
						"/funclib/tiebreak_types.mas",
						protocol => $protocol,
						round    => $last_prelim
					);

					my $type = $event->type;

					my $sth = $dbh->prepare("

						select score.id, score.tag, score.value, score.student,
							student.id, ballot.entry, ballot.judge,
							panel.bye, ballot.bye, ballot.forfeit, ballot.chair,
							round.name

						from (ballot, panel, round, entry_student, student)

						left join score on score.ballot = ballot.id
							and (
									score.tag    = 'winloss'
									or score.tag = 'rank'
									or score.tag = 'point'
								)

						where ballot.panel = panel.id
							and panel.round = round.id
							and round.name <= ?
							and round.event = ?
							and ballot.entry = entry_student.entry
							and entry_student.student = student.id

							and not exists (
								select round_setting.id from round_setting
								where round_setting.tag = 'ignore_results'
								and round_setting.round = round.id
							)
						order by round.name, ballot.entry, ballot.chair, ballot.judge,
							CASE score.tag
								WHEN 'winloss' 	then 1
								when 'rank' 	then 2
								when 'point' 	then 3
								when 'refute' 	then 4
							end
					");

					$sth->execute($last_prelim->name, $event->id);

					my %student_round;

					while (
						my (
							$id, $tag, $value, $value_student, $student,
							$entryid, $judge, $pbye, $bye, $fft, $chair, $roundname
						) = $sth->fetchrow_array()
					) {

						next if $tag eq "categories";
						next if $tag eq "rfd";
						next if $tag eq "comments";

						next unless $tiebreak_types{$tag};

						next if $tag ne "winloss" && $value_student != $student;
						next if $breakout && not defined $limit_students{$student};

						if ($student_round{$student}
							&& $student_ballots{$student}
							&& $roundname != $student_round{$student}) {
							$student_ballots{$student} .= " &nbsp; ";
						}

						unless ($tag) {
							if ($pbye || $bye) {
								$student_ballots{$student} .= " B ";
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"point"};
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"rank"};
							} elsif ($fft) {
								$student_ballots{$student} .= " F ";
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"point"};
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"rank"};
							}

						} elsif ($tag eq "winloss") {
							if ($pbye || $bye) {
								$student_ballots{$student} .= " B ";
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"point"};
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"rank"};
							} elsif ($fft) {
								$student_ballots{$student} .= " F ";
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"point"};
								$student_ballots{$student} .= "&nbsp;" if $tiebreak_types{"rank"};
							} else {
								$student_ballots{$student} .= " W " if $value > 0;
								$student_ballots{$student} .= " L " if $value < 1;
							}
						} else {
							$student_ballots{$student} .= $value." ";
						}

						$student_round{$student} = $roundname;

					}

					my (
						$students_ref, $tbs_ref, $desc_ref, $forfeit_ref,
						$tier_dir, $long_desc_ref, $novice_ref, $name_ref,
						$code_ref, $school_ref, $entry_ref
					) = $m->comp("/tabbing/results/order_speakers.mas",
						perms => $perms,
						round => $last_prelim
					);

					my $counter = 1;

					foreach my $key (sort {$a <=> $b} keys %{$students_ref}) {

						next if $limit && $counter > $limit;

						my @students;

						if ($breakout) {
							foreach my $student (@{${$students_ref}{$key}}) {
								push @students, $student if $limit_students{$student};
							}
						} else {
							@students = @{${$students_ref}{$key}};
						}

						my $park;
						my $tie++ if scalar @students > 1;

						my $key_value = $rank;
						$key_value .= "-T" if $tie;

						foreach my $student (@students) {

							$prelim_seed{$student} = $rank;
							$park++;

							my $result = Tab::Result->create({
								student    => $student,
								entry      => ${$entry_ref}{$student},
								rank       => $rank,
								result_set => $set->id,
								place      => $key_value
							});

							foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

								my $tag = ${$desc_ref}{$key};
								my $description = ${$long_desc_ref}{$key};

								my $sort_desc = 0;
								$sort_desc = 1 if ${$tier_dir}{$key} eq "down";

								my $value = ${$tbs_ref}{$student."-".$key};
								$value = sprintf("%.2f", $value);

								unless ($keys{$tag}) {
									$keys{$tag} = Tab::ResultKey->create({
										result_set  => $set->id,
										tag         => $tag,
										description => $description,
										sort_desc   => $sort_desc
									});
								}

								Tab::ResultValue->create({
									result       => $result->id,
									value        => $value,
									result_key   => $keys{$tag},
									priority     => $key,
									protocol => $protocol
								});
							}

							unless ($keys{"Ballots"}) {
								$keys{"Ballots"} = Tab::ResultKey->create({
									result_set  => $set->id,
									tag         => "Ballots",
									description => "Unadjusted Raw Scores",
									no_sort     => 1
								});
							}

							Tab::ResultValue->create({
								result       => $result->id,
								value        => $student_ballots{$student},
								result_key   => $keys{"Ballots"},
								priority     => 999,
								protocol => $protocol
							});

						}

						$counter += scalar @students if $park;
						$rank += $park;
					}
				}

			} elsif ($last_prelim || $final) {

				my @results;

				if ($last_prelim) {
					@results = $m->comp("/tabbing/results/order_entries.mas",
						round  => $last_prelim,
						perms  => $perms,
						return => $ARGS{"return"}
					);
				} elsif ($final) {
					$last_prelim = $final;
					@results = $m->comp("/tabbing/results/order_entries.mas",
						round => $final,
						perms  => $perms,
						return => $ARGS{"return"}
					);
				}

				my $entries = pop @results;

				my $protocol = $last_prelim->protocol();

				my %entry_ballots = $m->comp(
					"/funclib/round_ballot_strings.mas",
					round => $last_prelim);

				my $counter = 1;

				foreach my $key (sort {$a <=> $b} keys %{$entries->{"by_place"}}) {

					next if $limit && $counter > $limit;

					my @entries;

					if ($breakout) {
						foreach my $entry ( @{${$entries->{"by_place"}}{$key}} ) {
							push @entries, $entry if $limit_entries{$entry};
						}
					} else {
						@entries = @{${$entries->{"by_place"}}{$key}};
					}

					my $tie++ if scalar @entries > 1;

					my $park;

					foreach my $entry (@entries) {

						$prelim_seed{$entry} = $rank;
						next unless $result_type eq "prelim_seed";
						next if $used{$entry}++;

						$park++;

						my $key_value = $counter;
						$key_value .= "-T" if $tie;

						my $result = Tab::Result->create({
							entry      => $entry,
							rank       => $rank,
							result_set => $set->id,
							place      => $key_value
						});

						foreach my $key (sort {$a <=> $b} keys %{$entries->{tier_description}}) {

							my $tag = ${$entries->{tier_description}}{$key};
							my $description = ${$entries->{tier_long_description}}{$key};

							my $sort_desc = 0;
							$sort_desc = 1 if ${$entries->{tier_direction}}{$key} eq "down";

							my $value = ${$entries->{tbs}}{$entry}{$key};
							$value = sprintf("%.2f", $value);

							unless ($keys{$tag}) {
								$keys{$tag} = Tab::ResultKey->create({
									result_set  => $set->id,
									tag         => $tag,
									description => $description,
									sort_desc   => $sort_desc
								});
							}

							eval {
								Tab::ResultValue->create({
									result       => $result->id,
									value        => $value,
									priority     => $key,
									result_key   => $keys{$tag},
									protocol => $protocol
								});
							};
						}

						unless ($keys{"Ballots"}) {
							$keys{"Ballots"} = Tab::ResultKey->create({
								result_set  => $set->id,
								tag         => "Ballots",
								description => "Unadjusted Raw Scores",
								no_sort     => 1
							});
						}

						eval {
							Tab::ResultValue->create({
								result_key   => $keys{"Ballots"},
								result       => $result->id,
								value        => $entry_ballots{$entry},
								protocol => $protocol,
								priority     => 999
							});
						};

					}

					$counter += scalar @entries if $park;
					$rank += $park;
				}

				if ($result_type eq "final") {

					undef $rank;

					foreach my $round ($final, @elims, $last_prelim) {

						next unless $round;
						my $type = $round->type;

						next if ($round->label eq "Student Vote");
						next if ($round->label eq "StudentVote");

						my $label = substr($round->label, 0, 8);

						my @results = $m->comp("/tabbing/results/order_entries.mas",
							round  => $round,
							perms  => $perms,
							return => $ARGS{"return"}
						);
						my $entries = pop @results if @results;

						my $protocol = $round->protocol;

						my %entry_ballots = $m->comp(
							"/funclib/round_ballot_strings.mas",
							round => $round
						);

						foreach my $key (sort {$a <=> $b} keys %{$entries->{"by_place"}}) {

							my $tie++ if scalar @{${$entries->{"by_place"}}{$key}} > 1;

							@{${$entries->{"by_place"}}{$key}} =
								sort {
									$prelim_seed{$a} <=> $prelim_seed{$b}
								} @{${$entries->{"by_place"}}{$key}};

							foreach my $entry (@{${$entries->{"by_place"}}{$key}}) {

								next if $breakout && not defined $limit_entries{$entry};
								next if $used{$entry}++;

								$rank++;
								my $key_value = Lingua::EN::Numbers::Ordinate::ordinate($key)
									if $type eq "final";

								$key_value .= "-T" if $tie && $type eq "final";

								if ($key_value eq "1st-T") {
									$key_value = "Co-Champion"
								}

								$key_value = $label if $type eq "elim";
								$key_value = "Prelim" if $type ne "elim" && $type ne "final";

								my $result = Tab::Result->create({
									entry      => $entry,
									rank       => $rank,
									round      => $round,
									result_set => $set->id,
									place      => $key_value
								});

								foreach my $key (sort {$a <=> $b} keys %{$entries->{tier_description}}) {

									if (
										($type eq "elim" || $type eq "final")
										&& $event_type ne "speech"
										&& $event_type ne "congress"
									) {

										my $tag = "Round";
										my $description = "Last round competed in";
										my $sort_desc = 0;

										my $value = $round->realname;

										unless ($keys{$tag}) {
											$keys{$tag} = Tab::ResultKey->create({
												result_set  => $set->id,
												tag         => $tag,
												description => $description,
												sort_desc   => $sort_desc
											});
										}

										Tab::ResultValue->create({
											result     => $result->id,
											value      => $value,
											priority   => $key,
											result_key => $keys{$tag},
											protocol   => $protocol
										});

									} else {

										my $tag = ${$entries->{tier_description}}{$key};
										my $description = ${$entries->{tier_long_description}}{$key};
										my $sort_desc = 0;
										$sort_desc = 1 if ${$entries->{tier_direction}}{$key} eq "down";

										unless ($keys{$tag}) {
											$keys{$tag} = Tab::ResultKey->create({
												result_set  => $set->id,
												tag         => $tag,
												description => $description,
												sort_desc   => $sort_desc
											});
										}

										eval {
											Tab::ResultValue->create({
												result     => $result->id,
												value      => ${$entries->{tbs}}{$entry}{$key},
												priority   => $key,
												result_key => $keys{$tag},
												protocol   => $protocol
											});
										};
									}
								}

								unless ($keys{"Ballots"}) {
									$keys{"Ballots"} = Tab::ResultKey->create({
										result_set  => $set->id,
										tag         => "Ballots",
										description => "Unadjusted Raw Scores",
										no_sort     => 1
									});
								}

								Tab::ResultValue->create({
									result       => $result->id,
									value        => $entry_ballots{$entry},
									result_key   => $keys{"Ballots"},
									priority     => 999,
									protocol => $protocol
								});

								# Mark the tournament champion if we have one
								if ($type eq "final") {

									Tab::Result->set_sql( delete_final => "
										delete result.*
										from (result_set, result)
										where result.result_set = result_set.id
										and result_set.id = ?
										and result.round = ?
										and result.entry = ?
										and result_set.label = 'Final Places'
									");

									Tab::Result->sql_delete_final->execute($set->id, $entry, $round);
									my $place = Lingua::EN::Numbers::Ordinate::ordinate($key);

									if ($tie) {
										$place = "Co-Champion";
									}

									Tab::Result->create({
										result_set => $set->id,
										entry      => $entry,
										round      => $round->id,
										rank       => $key,
										place      => $place
									});
								}
							}
						}
					}
				}
			}

			Tab::Result->set_sql( update_percentile =>
				"update result set percentile = ( ( (? - rank + 1) / ? ) * 100)
				where result_set = ? ");

			Tab::Result->sql_update_percentile->execute( $rank, $rank, $set->id);

			$msg .= $event->name." results published " if $publish;
			$msg .= $event->name." results calculated " unless $publish;

		}
	}

	if ($ARGS{'return'}) {
		return $msg;
	}

	$m->redirect("/user/circuit/tourn_results.mhtml?circuit_id=$circuit_id&msg=$msg") if $circuit_id;
	$m->redirect("index.mhtml?msg=$msg");

</%init>
