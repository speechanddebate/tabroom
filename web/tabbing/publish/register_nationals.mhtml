<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$perms
	$confirmation => undef
</%args>
<%init>

	my $district =
		Tab::District->retrieve($tourn_settings->{"nsda_district"})
		if $tourn_settings->{"nsda_district"};

	my $nationals = $m->comp("/funclib/current_nationals.mas",
		time     => $tourn->start,
		max_year => $tourn->end->year
	);

	my $dbh = Tab::DBI->db_Main();
	my $now = DateTime->now();

	my %nationals_settings = $nationals->all_settings;

	my $gap = $nationals->start - $tourn->end;

	if ($gap->months > 8) {
		$m->comp("/funclib/abort.mas",
			message => "The current national tournament is more than a year away from this tournament.  You are probably trying to post a previous year's districts?"
		);
	}

	unless ($district || ($person->site_admin && $tourn_settings->{"nsda_district"} > 150)) {
		$m->comp("/funclib/abort.mas",
			message => "Your district could not be loaded"
		);
	}

	unless ($nationals) {
		$m->comp("/funclib/abort.mas",
			message => "The current national tournament could not be found"
		);
	}

	Tab::Event->set_sql( undone_events => "
		select event.*
			from event, event_setting, weekend
		where event.tourn = ?
			and event.id = event_setting.event
			and event_setting.tag = 'weekend'
			and event_setting.value = weekend.id
			and weekend.end > NOW()
	");

	my @undone_events = Tab::Event->search_undone_events($tourn->id);

	my @unaudited_events;

	if (
		$tourn_settings->{"nsda_district_questions"}{"nsda_tabbing_software"} ne "speechwire"
	) {

		Tab::Event->set_sql( unaudited_events => "
			select event.*
			from event
			where event.tourn = ?
			and not exists (
				select event_setting.id
				from event_setting
				where event_setting.event = event.id
				and event_setting.tag = 'nsda_audited'
			)

			and not exists (
				select weekend.id
				from event_setting weekend
				where weekend.event = event.id
				and weekend.tag = 'weekend'
				and weekend.value = 'nope'
			)
		");

		@unaudited_events = Tab::Event->search_unaudited_events($tourn->id);
	}

	undef @unaudited_events;

	Tab::Event->set_sql( unposted_events => "
		select event.*
		from event
		where event.tourn = ?
		and not exists (
			select result_set.id
			from result_set
			where result_set.event = event.id
			and result_set.label like 'District Qualifiers%'
		)
		and not exists (
			select weekend.id
			from event_setting weekend
			where weekend.event = event.id
			and weekend.tag = 'weekend'
			and weekend.value = 'nope'
		)
	");

	my @unposted_events = Tab::Event->search_unposted_events($tourn->id);

	my @district_entries;

	Tab::Entry->columns(TEMP => "source_entry");

	if ($district) {

		 @district_entries = $m->comp("/funclib/nsda/nats_district_entries.mas",
			district => $district,
			tourn    => $nationals
		);

	} elsif ($person->site_admin) {

		Tab::Entry->set_sql(lastchance => "
			select entry.*, source_entry.value as source_entry
			from (entry, event, entry_setting es)
				left join entry_setting source_entry
					on entry.id = source_entry.entry
					and source_entry.tag = 'source_entry'
			where event.tourn = ?
				and event.id = entry.event
				and entry.id = es.entry
				and es.tag = 'lastchance'
		");

		 @district_entries = Tab::Entry->search_lastchance($nationals);
	}

	my %nationals_events = map {$_->abbr => $_} $nationals->events();
	my %existing_entries  = map {$_->source_entry => $_} @district_entries;

	my $full_msg;

	my %district_autoquals;
	my %autoquals;

	if ($district) {
		%autoquals =
			%{JSON::decode_json($nationals->setting('autoquals'))}
			if $nationals->setting('autoquals');


		foreach my $aq_id (keys %autoquals) {
			next unless $autoquals{$aq_id}{'district'} == $tourn_settings->{"nsda_district"};
			push @{$district_autoquals{$autoquals{$aq_id}{'event'}}}, $aq_id;
		}
	}

	my %national_events = map {$_->abbr => $_} $nationals->events;

	if ($confirmation == 1) {

		unless (
			@unposted_events
			|| @undone_events
			|| @unaudited_events
		) {

			my @posted_schools;

			foreach my $event ( $tourn->events() ) {

				next if $nationals->end < $now;

				my %qualifiers = $m->comp(
					"/funclib/district_qualifiers.mas",
					event => $event
				);

				my $posted = 0;
				next unless keys %qualifiers;

				RESULT:
				foreach my $key (
					sort {$a <=> $b}
					keys %qualifiers
				) {

					next unless ($nationals_events{$event->abbr});

					next if $key eq "tags";
					next if $key eq "descs";
					next if $key eq "ties";

					next if $qualifiers{$key}{"vacated"};
					next if $qualifiers{$key}{"ineligible"};
					next unless $qualifiers{$key}{"entry"};

					my $entry = $qualifiers{$key}{"entry"};
					next if $existing_entries{$entry->id};

					my $rank = $qualifiers{$key}{"rank"};
					my @ties;

					if ($qualifiers{"ties"}{$rank}) {
						@ties = @{$qualifiers{"ties"}{$rank}};
						$full_msg .= "<br />" if $full_msg;
						$full_msg .= " There are ".((scalar @ties) + 1)." tied for the last slot in ".$event->abbr;
						$full_msg .= " Ties must be resolved before posting can continue ";
						next RESULT;
					}

					my $entry_string;

					my $new_entry = $m->comp(
						"/funclib/transfer_entry.mas",
						person   => $person,
						entry    => $entry,
						event    => $nationals_events{$event->abbr},
						district => $district
					);

					if ($new_entry && $new_entry eq int($new_entry)) {
						$posted++;
						$entry_string .= " ".$new_entry->id." ".$new_entry->name;

						push @posted_schools, $new_entry->school;

						my $msg = "Posted $entry_string into ".$nationals_events{$event->abbr}->abbr;

						$m->comp("/funclib/log.mas",
							tourn       => $tourn,
							event       => $event,
							type        => "tabbing",
							person      => $person,
							description => $msg
						);

					} else {
						$full_msg .= "<br/> $new_entry ";
					}
				}

				if ($posted > 0) {
					$full_msg .= "<br />" if $full_msg;
					$full_msg .= "$posted Qualifiers posted in ".$event->abbr;
				}
			}

			if (@posted_schools) {

				my %done;
				my $string;

				foreach my $school (@posted_schools) {

					next if $done{$school->id}++;

					my $tourn_name = $nationals->start->year." ".$nationals->name;
					my $subject = $school->name."'s registration to NSDA Nationals is ready!";
					my $text = $nationals->setting("nats_open_message");

					my $sender = $person;

					if ($tourn_settings->{"nsda_district"} == 999) {
						$subject = $school->name."'s Last Chance Qualifiers posted!";
						$text = "<p>Your school qualified entries at the ".$tourn->name.".  Congratulations!<p>";
						$text .= "<p>These qualifiers have been posted to Tabroom.com and may now be registerted to attend Nationals</p>";
						$sender = 0;
					}

					my @emails = $m->comp(
						"/funclib/school_contacts.mas",
						school => $school
					);

					$m->comp( "/funclib/send_email.mas",
						from          => $sender,
						from_string   => "nsda",
						district      => $district,
						array         => \@emails,
						subject       => $subject,
						no_footer     => 1,
						is_html       => 1,
						body          => $text,
						nsda_reply_to => $sender
					);
				}

				my $tabbing = uc($tourn_settings->{"nsda_district_questions"}{"nsda_tabbing_software"});
				my $description;

				if ($district) {
					$description = "Registration open email sent for ".$district->name." ($tabbing) to $string";
				} else {
					$description = "Last Chance Qualifier posted";
				}

				$m->comp("/funclib/log.mas",
					tourn       => $nationals,
					type        => "notification",
					person      => $person,
					description => $description
				);
			}
		}


		EVENT:
		foreach my $event ($tourn->events()) {

			my $nats_event = $national_events{$event->abbr};

			my @event_autoquals = @{$district_autoquals{$nats_event->id}}
				if $nats_event
				&& $district_autoquals{$nats_event->id};

			AQ:
			foreach my $aq (@event_autoquals) {

				my @students;
				my $chapter = Tab::Chapter->retrieve($autoquals{$aq}{"chapter"});

				my $chapter_school = $nationals->schools(
					chapter => $chapter->id
				)->first;

				my $err;

				unless ($chapter_school) {
					($chapter_school, $err) = $m->comp(
						"/funclib/school_create.mas",
							person         => $person,
							chapter        => $chapter,
							tourn          => $nationals,
							nodeadlines    => 1,
							district       => $district,
							tourn_settings => \%nationals_settings
					);
				}

				if ($err) {
					$full_msg .= $err;
					next AQ;
				}

				if ($autoquals{$aq}) {
					foreach my $student_id (@{$autoquals{$aq}{"students"}}) {
						push @students, Tab::Student->retrieve($student_id);
					}
				}

				my $existing_key = "autoqual-";

				foreach my $student (sort @students) {
					$existing_key .= $student->id."-";
				}

				my $existing = $existing_entries{$existing_key};
				next AQ if $existing;

				unless ($existing) {

					my $chapter_school_id = $chapter_school->id;
					my $nats_event_id     = $nats_event->id;
					my $nationals_id      = $nationals->id;

					my $new_entry = Tab::Entry->create({
						code          => "",
						name          => "PENDING!",
						event         => $nats_event_id,
						tourn         => $nationals_id,
						school        => $chapter_school_id,
						unconfirmed   => 1,
						waitlist      => 0,
						registered_by => $person->id
					});

				    $new_entry->setting("autoqual", 1);
					$new_entry->setting("source_entry", $existing_key);

					foreach my $student (@students) {

						unless (
							Tab::EntryStudent->search(
								entry   => $new_entry->id,
								student => $student->id
							)
						) {
							eval {
								Tab::EntryStudent->create({
									entry   => $new_entry->id,
									student => $student->id
								});
							};
						}
					}

				    $new_entry->name(
				        $m->comp("/funclib/entry_name.mas", entry => $new_entry)
				    );

					$new_entry->update();
				}
			}

			if ($tourn_settings->{"nsda_district"} == 999) {

				my $sth = $dbh->prepare("
					select
						entry.id entry, entry.code, entry.name,
						chapter.name school,
						student.id, student, student.first, student.last, student.nsda,
						chapter.id chapter
					from (entry, event, entry_student es, student, chapter, entry_setting me)

					where event.id = ?
						and event.id = entry.event
						and entry.id = es.entry
						and es.student = student.id
						and student.chapter = chapter.id
						and entry.id = me.entry
						and me.tag = 'lcq_bonus'
				");

				$sth->execute($event->id);

				my $results = $sth->fetchall_hash();

				my %bonuses;

				foreach my $result (@{$results}) {

					$bonuses{$result->{entry}}{"code"}    = $result->{code};
					$bonuses{$result->{entry}}{"name"}    = $result->{name};
					$bonuses{$result->{entry}}{"chapter"} = $result->{chapter};

					$bonuses{$result->{entry}}{"student"}{$result->{student}} = {(
						first => $result->{first},
						last  => $result->{last},
						nsda  => $result->{nsda}
					)};
				}

				my $posted;

				BONUS:
				foreach my $bonus_id (keys %bonuses) {

					my $bonus = $bonuses{$bonus_id};

					my $chapter_school = $nationals->schools(
						chapter => $bonus->{"chapter"}
					)->first;

					my $err;

					unless ($chapter_school) {
						($chapter_school, $err) = $m->comp(
							"/funclib/school_create.mas",
								person         => $person,
								chapter        => Tab::Chapter->retrieve($bonus->{chapter}),
								tourn          => $nationals,
								nodeadlines    => 1,
								district       => $district,
								tourn_settings => \%nationals_settings
						);
					}

					if ($err) {
						$full_msg .= $err;
						next BONUS;
					}

					my @students;
					foreach my $student_id (keys %{$bonus->{student}}) {
						push @students, Tab::Student->retrieve($student_id);
					}

					my $existing_key = "bonus-";

					foreach my $student (sort @students) {
						$existing_key .= $student->id."-";
					}

					my $existing = $existing_entries{$existing_key};
					next BONUS if $existing;

					unless ($existing) {

						my $chapter_school_id = $chapter_school->id;
						my $nats_event_id     = $nats_event->id;
						my $nationals_id      = $nationals->id;

						my $new_entry = Tab::Entry->create({
							code          => "",
							name          => "PENDING!",
							event         => $nats_event_id,
							tourn         => $nationals_id,
							school        => $chapter_school_id,
							unconfirmed   => 1,
							waitlist      => 0,
							registered_by => $person->id
						});

						$new_entry->setting("lastchance", 1);
						$new_entry->setting("source_entry", $existing_key);

						$posted++;

						foreach my $student (@students) {

							unless (
								Tab::EntryStudent->search(
									entry   => $new_entry->id,
									student => $student->id
								)
							) {
								eval {
									Tab::EntryStudent->create({
										entry   => $new_entry->id,
										student => $student->id
									});
								};
							}
						}

						$new_entry->name($m->comp("/funclib/entry_name.mas", entry => $new_entry));
						$new_entry->update();

					}
				}

				if ($posted > 0) {
					$full_msg .= "<br />" if $full_msg;
					$full_msg .= "$posted LCQ Bonus entries posted in ".$event->abbr;
				}
			}
		}

		undef @district_entries;
		undef %existing_entries;

		# Refresh it
		@district_entries = $m->comp("/funclib/nsda/nats_district_entries.mas",
			district => $district,
			tourn    => $nationals
		);

		%existing_entries  = map {$_->source_entry => $_} @district_entries;

		unless ($tourn_settings->{"nsda_registered"}) {
			$tourn->setting("nsda_registered", $person->id);
		}

		if ($district) {
			my $chair = $district->permissions( tag => "chair" )->first;

			eval {
				foreach my $perm ($tourn->permissions()) {
					next if $perm->person->id == $person->id;
					next if $perm->person->id == $chair->person->id;
					$perm->delete();
				}
			};

			$full_msg .= "<br />" if $full_msg;
			$full_msg .= "District tournament access has been revoked from everyone except the district chair";
		}
	}

</%init>

	<script>

%		if ($full_msg) {
			$(document).ready( function(){
				alertify.alert("<% $full_msg %>");
			});
%		}

		function toggleSubmit() {
			if ($("#confirmation").prop("checked")) {
				$("#submit_confirmed").removeAttr('disabled');
			} else {
				$("#submit_confirmed").attr('disabled', "true");
			}
		}

	</script>

%	unless ($ARGS{"includeme"}) {
		<div class="main">
%	}

		<h2 class="normalweight nospace">
			<% $nationals->start->year %> <% $nationals->name %>
		</h2>

<%perl>
		unless (
			@unposted_events
			|| @undone_events
			||	@unaudited_events
		) {
</%perl>

			<span class="fourfifths">
				<h4 class="marvert nospace padvert">
					<% $district ? $district->name : "Last Chance" %> qualifiers
				</h4>
			</span>

			<span
				id    = "qualifiers_buttonarea"
				class = "fifth nospace rightalign"
			></span>

			<& "/funclib/tablesorter.mas", table => "qualifiers" &>

			<table id="qualifiers">

				<thead>

					<tr class="yellowrow smallish semibold padvert">

						<th>
							Status
						</th>

						<th>
							Event
						</th>

%						if ($person->site_admin) {
							<th>
								TR ID
							</th>
%						}

						<th>
							Code
						</th>

						<th>
							Name
						</th>

						<th>
							School
						</th>

						<th>
							Place
						</th>

						<th class="nosort">
							Tiebreakers
						</th>

						<th
							title= "This indicates that the entry has refused the spot to nationals, either because of single entry intents or because the coach dropped the spot on registration"
						>
							Vacate
						</th>
					</tr>
				</thead>

				<tbody>
<%perl>
				foreach my $event ( $tourn->events() ) {

					my %qualifiers = $m->comp(
						"/funclib/district_qualifiers.mas",
						event => $event
					);

					my $nats_event = $national_events{$event->abbr};

					next unless $nats_event;

					my @event_autoquals = @{$district_autoquals{$nats_event->id}}
						if $nats_event
						&& $district_autoquals{$nats_event->id};

					next unless ( (keys %qualifiers) || @event_autoquals );

					my $posted;

					foreach my $key (
						sort {$a <=> $b}
						keys %qualifiers
					) {

						my $entry_id = $qualifiers{$key}{"entry"};
						$posted++ if $existing_entries{$entry_id};
					}

					foreach my $key (
						sort {$a <=> $b}
						keys %qualifiers
					) {

						next if $key eq "tags";
						next if $key eq "ties";
						next if $key eq "descs";

						my $entry_id = $qualifiers{$key}{"entry"};
						my $rank = $qualifiers{$key}{"rank"};
						my $tied++ if $qualifiers{"ties"}{$rank};
</%perl>
						<tr class="smallish
							<% $tied ? "orangetext semibold" : "" %>
							<% $qualifiers{$key}{"vacated"} ? "strike" : "" %>
							<% $qualifiers{$key}{"ineligible"} ? "redtext" : "" %>
						">
							<td class="centeralign">
<%perl>
								if ($existing_entries{$entry_id}) {
									if ($qualifiers{$key}{"vacated"}) {
</%perl>
										<div
											title="This entry was vacated by the district"
											class="full redtext semibold padless marless"
										>
											VACATED
										</div>

%									} elsif ($existing_entries{$entry_id}->setting("rejected_by")) {

										<div
											title="This entry was dropped or rejected by the school/coach"
											class="full redtext semibold padless marless"
										>
											REJECTED
										</div>

%									} elsif ($qualifiers{$key}{"ineligible"}) {

										<div
											title="This entry does not have a linked NSDA membership"
											class="full orangetext semibold padless marless"
										>
											INELIGIBLE
										</div>

%									} elsif ($existing_entries{$entry_id}->unconfirmed) {
										<div
											title="This entry is eligble for acceptance by the school/coach"
											class="full bluetext semibold padless marless">
											POSTED
										</div>
%									} else {
										<div
											title="This entry was accepted by the school/coach"
											class="full greentext semibold padless marless">
											ACCEPTED
										</div>
%									}
%								} elsif ($qualifiers{$key}{"ineligible"}) {
									<div
										title="This entry does not have a linked NSDA membership"
										class="full orangetext semibold padless marless"
									>
										INELIGIBLE
									</div>
%								} elsif ($tied) {
%									undef $posted;
									<div class="full biggish semibold padless marless">
										TIED
									</div>
%								} elsif ($qualifiers{$key}{"vacated"}) {
%								} elsif ($nationals->end < $now) {
									<div class="full graytext semibold padless marless">
										NATIONALS PASSED
									</div>

%								} else {
									<div class="full graytext semibold padless marless">
										NOT POSTED
									</div>
%								}

							</td>

							<td>
								<% $event->abbr %>
							</td>

%							if ($person->site_admin) {
								<td>
									<% $entry_id %>
								</td>
%							}

							<td>
								<% $qualifiers{$key}{"entry"}
								 	?  $qualifiers{$key}{"entry"}->code
									: ""
								%>
							</td>

							<td>
								<% $qualifiers{$key}{"entry"}
								 	?  $qualifiers{$key}{"entry"}->name
									: ""
								%>
							</td>

							<td>
								<% $qualifiers{$key}{"entry"}
								 	?  $qualifiers{$key}{"entry"}->school->name
									: ""
								%>
							</td>

							<td class="rightalign">
								<% $rank %>
							</td>

							<td class="nospace centeralign">
<%perl>
								foreach my $priority (
									sort {$a <=> $b}
									keys %{$qualifiers{$key}{"results"}}
								) {

									my $tag = $qualifiers{$key}{"tag"}{$priority};
									my $score = $qualifiers{$key}{"results"}{$priority};

									next if $tag ne "Place";

									if (
										$tag =~ m/Win/
										|| $tag =~ m/Rnd/
										|| $tag =~ m/H2H/
										|| $tag =~ m/Bal/
										|| $tag =~ m/Rk/
									) {
										$score = sprintf('%d', $score);
									}
</%perl>
									<span class="eighth centeralign ltborderright nospace"
										title = "<% $tag %>"
									><% $score %></span>
%								}
							</td>

							<td class="padless centeralign">
%								if ($posted) {
%									if ($qualifiers{$key}{"vacated"}) {
										<span class="redtext semibold normalsize">
											Y
										</span>
%									} else {
										<span class="graytext semibold normalsize">
											N
										</span>
%									}
%								} else {

									<span class="hidden"><% $qualifiers{$key}{"vacated"} %></span>
									<label class="switch smaller">
										<input
											type         = "checkbox"
											value        = "1"
											id           = "<% $entry_id %>_nsda_vacate"
											setting_name = "nsda_vacate"
											target_type  = "entry"
											on_success   = "refresh"
											target_id    = "<% $entry_id %>"
											onChange     = "postSwitch(
												this,
												'/register/entry/entry_switch.mhtml'
											);"

											<% $qualifiers{$key}{"vacated"} ?  'checked="checked"' : "" %>
										>
										<div class="onred slider"></div>
									</label>
%								}
							</td>
						</tr>
<%perl>
					}

					if ($tourn_settings->{"nsda_district"} == 999) {

						my $sth = $dbh->prepare("
							select
								entry.id entry, entry.code, entry.name,
								student.id, student, student.first, student.last, student.nsda,
								chapter.name school,
								chapter.id chapter
							from (entry, event, entry_student es, student, chapter, entry_setting me)
								left join school on entry.school = school.id

							where event.id = ?
								and event.id = entry.event
								and entry.id = es.entry
								and es.student = student.id
								and student.chapter = chapter.id
								and entry.id = me.entry
								and me.tag = 'lcq_bonus'
						");

						$sth->execute($event->id);

						my $results = $sth->fetchall_hash();
						my %bonuses;

						foreach my $result (@{$results}) {

							$bonuses{$result->{entry}}{"code"}    = $result->{code};
							$bonuses{$result->{entry}}{"name"}    = $result->{name};
							$bonuses{$result->{entry}}{"cname"}   = $result->{school};
							$bonuses{$result->{entry}}{"chapter"} = $result->{chapter};

							$bonuses{$result->{entry}}{"student"}{$result->{student}} = {(
								first => $result->{first},
								last  => $result->{last},
								nsda  => $result->{nsda}
							)};
						}

						BONUS:
						foreach my $bonus_id (keys %bonuses) {

							my $bonus = $bonuses{$bonus_id};
							my @students;

							my $existing_key = "bonus-";

							foreach my $student_id (sort (keys %{$bonus->{student}})) {
								push @students, Tab::Student->retrieve($student_id);
								$existing_key .= $student_id."-";
							}

							my $existing = $existing_entries{$existing_key};
</%perl>
							<tr class="smallish">
								<td class="centeralign">
%									if ($existing) {
%										if ($existing->setting("rejected_by")) {
											<div
												title="This entry was rejected by the school/coach"
												class="full redtext semibold padless marless"
											>
												REJECTED
											</div>
%										} elsif ($existing->unconfirmed) {
											<div
												title="This entry is eligble for acceptance by the school/coach"
												class="full bluetext semibold padless marless">
												POSTED
											</div>
%										} else {
											<div
												title="This entry was accepted by the school/coach"
												class="full greentext semibold padless marless">
												ACCEPTED
											</div>
%										}
%									} else {
										<div class="full graytext semibold padless marless">
											NOT POSTED
										</div>
%									}
								</td>

								<td>
									<% $event->abbr %>
								</td>

								<td>
									<% $bonus_id %>
								</td>
								<td>
									<% $bonus->{code} %>
								</td>

								<td>
									<% $bonus->{name} %>
								</td>

								<td>
									<% $bonus->{cname} %>
								</td>

								<td class="rightalign">
<%perl>
									my $result_sth = $dbh->prepare("
										select
											result.id, result.rank, result.place

										from result, result_set
											where result.entry = ?
											and result.result_set = result_set.id
											and result_set.label = 'District Qualifiers'
									");

									$result_sth->execute($bonus_id);
									my $finish = $result_sth->fetchall_hash();
									my $ref = shift @{$finish} if $finish;
</%perl>
									<% $ref ? $ref->{'rank'} : "" %>
								</td>

								<td colspan="3" class="centeralign semibold bluetext">
									LCQ Bonus Entry
								</td>
							</tr>
<%perl>
						}
					}

					foreach my $aq (@event_autoquals) {

						my @students;
						my $chapter = Tab::Chapter->retrieve($autoquals{$aq}{"chapter"});

						if ($autoquals{$aq}) {
							foreach my $student_id (@{$autoquals{$aq}{"students"}}) {
								my $student = Tab::Student->retrieve($student_id);
								push @students, $student if $student;
							}
						}

						my $existing_key = "autoqual-";

						foreach my $student (sort @students) {
							$existing_key .= $student->id."-";
						}

						my $existing = $existing_entries{$existing_key};
</%perl>
						<tr class="smallish">
							<td class="centeralign">
%								if ($existing) {
%									if ($existing->setting("rejected_by")) {
										<div
											title="This entry was dropped or rejected by the school/coach"
											class="full redtext semibold padless marless"
										>
											REJECTED
										</div>
%									} elsif ($existing->unconfirmed) {
										<div
											title="This entry is eligble for acceptance by the school/coach"
											class="full bluetext semibold padless marless">
											POSTED
										</div>
%									} else {
										<div
											title="This entry was accepted by the school/coach"
											class="full greentext semibold padless marless">
											ACCEPTED
										</div>
%									}
%								} else {
									<div class="full graytext semibold padless marless">
										NOT POSTED
									</div>
%								}

							</td>

							<td>
								<% $event->abbr %>
							</td>

							<td>
							</td>

							<td>
%								foreach my $student (@students) {
									<% $student->first." ".$student->last %>
%								}
							</td>

							<td>
								<% $chapter ? $chapter->name : "" %>
							</td>

							<td colspan="3" class="centeralign semibold bluetext">
								Autoqualifier from previous Nationals
							</td>
						</tr>
%					}
%				}
				</tbody>
			</table>

			<h5 class="martopmore">
				Confirm registration for Nationals
			</h5>

			<form
				action = "register_nationals.mhtml"
				method = "post"
			>

			<div class="odd" title = "Pinky swear?">

				<span class = "fourfifths semibold redtext bigger italic rightalign">
					I have inspected and audited the above results
					and they are true to the best of my knowledge:
					<span class="spacer"></span>
				</span>

				<label for="confirmation">
					<span class="fifth centeralign hover padvertmore">
						<input
							type    = "checkbox"
							class   = "bigger"
							name    = "confirmation"
							id      = "confirmation"
							value   = "1"
							onClick = "toggleSubmit();"
						>
					</span>
				</label>

			</div>

			<div class="libl full rightalign marno padvertmore">
				<span class="centeralign third">
					<input
						id    = "submit_confirmed"
						type  = "submit"
						value = "Post Nationals Registration"
						disabled
					>
				</span>
			</div>

%		}

%	unless ($ARGS{"includeme"}) {

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>Status checks:</h4>

			<div class="row">

				<span class="threequarters semibold bluetext">
					All events have run
				</span>

				<span class="quarter centeralign nospace">
%					if (@undone_events) {
						<a class=" redtext fa fa-lg fa-times"></a>
%					} else {
						<a class=" greentext fa fa-lg fa-check"></a>
%					}
				</span>
			</div>

%			if (@undone_events) {
				<div class="row borderredvert">
					<span class="third redtext semibold bigger">
						Undone:
					</span>

					<span class="twothirds semibold bigger centeralign">
%						foreach my $event (@undone_events) {
							<% $event->abbr %>
%						}
					</span>
				</div>
%			}

			<div class="row">
				<span class="threequarters semibold bluetext">
					All events were audited
				</span>

				<span class="quarter centeralign nospace">
%					if (@unaudited_events) {
						<a class=" redtext fa fa-lg fa-times"></a>
%					} else {
						<a class=" greentext fa fa-lg fa-check"></a>
%					}
				</span>
			</div>

%			if (@unaudited_events) {
				<div class="row borderredvert">
					<span class="third redtext semibold bigger">
						Unaudited:
					</span>

					<span class="twothirds semibold bigger centeralign">
%						foreach my $event (@unaudited_events) {
							<% $event->abbr %>
%						}
					</span>
				</div>
%			}

			<div class="row">
				<span class="threequarters semibold bluetext">
					Results lists created
				</span>

				<span class="quarter centeralign nospace">
%					if (@unposted_events) {
						<a class=" redtext fa fa-lg fa-times"></a>
%					} else {
						<a class=" greentext fa fa-lg fa-check"></a>
%					}
				</span>
			</div>

%			if (@unposted_events) {

				<div class="row borderredvert">
					<span class="third redtext semibold bigger">
						Unposted
					</span>

					<span class="twothirds semibold bigger centeralign">
%						foreach my $event (@unposted_events) {
							<% $event->abbr %>
%						}
					</span>

					<div class="full">
						<span class="centeralign semibold bigger full">
							Create results lists from the <br />Results &rarr; Qualifiers page:
						</span>

						<a
							class  = "yellow full martop marbottommore"
							href   = "nsda_qualifiers.mhtml"
							target = "_blank"
						>Create Results Postings</a>

					</div>
				</div>
%			}
		</div>

		<div class="sidenote">

			<h4>What is "vacated"?</h4>

			<p class="bigger">
				<span class="redtext inline semibold">Vacated entries</span>
				are entries that have given up their spot to Nationals for any
				reason.  That can include entrants who have qualified and
				preferred another event, or entries that dropped from Nationals
				registration, or so on.
			</p>

			<p class="bigger">
				When an entry is vacated, the next spot in the qualifier list
				moves up and is eligible for promotion to Nationals.  You
				cannot change an entry's vacated status after you have posted
				your Nationals reg; contact the office if there's a problem.
			</p>

			<h4>If these results are wrong</h4>

			<p class="bigger">
				If you spot an ordering mistake or issue in these results,
				check the Qualifiers list for the event/category in question
				(Results &rarr; Qualifiers in the menu above).   If the
				Qualifiers list is correct, hit the orange up arrow next to the
				event name on the top right to regenerate the Qualifiers list.
				If the Qualifiers list is incorrect and you are unable to fix
				it, please send the details to help@tabroom.com.
			</p>
		</div>
	</div>

%	}
