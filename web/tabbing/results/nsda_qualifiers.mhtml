<%args>
	$tourn
	$tourn_settings
	$person          => undef
	$perms           => undef
	$person_settings => undef
	$event_id        => undef
	$format          => undef
	$all             => undef
	$full            => undef
	$session         => undef
	$defaults        => undef
</%args>
<%init>

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas",
		tourn => $tourn,
		perms => $perms,
		type  => "admin"
	);

	my $label = "District Qualifiers";
	$label = "Final Places" if $tourn_settings->{"nsda_nats"};

	my @events;
	my @all_events;

	unless ($eventref) {
		$m->comp('/funclib/abort.mas',
			message => "You do not appear to have access to any events at this tournament"
		);
	}

	if ($tourn_settings->{"nsda_districts"}) {
		foreach my $ev (@{$eventref}) {
			unless ($ev->setting("weekend") eq "nope") {
				push @all_events, $ev;
			}
		}
	} else {
		@all_events = @{$eventref};
	}

	my %ev_by_id = map {$_->id => $_} @all_events;
	my $one_event = Tab::Event->retrieve($event_id) if $event_id;

	if ($all || $event_id eq "all") {
		undef $event_id;
		@events = @all_events;
	} elsif ($one_event) {
		@events = ($one_event);
	} elsif ($ev_by_id{$defaults->{tourns}{$tourn}{event}}) {
		$one_event = $ev_by_id{$defaults->{tourns}{$tourn}{event}};
		push @events, $one_event;
	} elsif (scalar @all_events == 1) {
		$one_event = $all_events[0];
		push @events, $one_event;
	}

	my $limit = 24
		if $tourn_settings->{"nsda_nats"}
		&& $full < 1;

	$limit = 16 if $one_event && $one_event->setting("usa_wsdc");

	my $year = &Tab::school_year();
	my $school_year = $year->year + 1;

	my $district = Tab::District->retrieve($tourn_settings->{"nsda_district"});
	#LCQ
	$district++ if $tourn_settings->{"nsda_district"} == 999;
	my $nsda_districts++ if $district;


	my $qual_string = "Qualifier";
	$qual_string = "Places" if $tourn_settings->{"nsda_nats"};

	my %results;

	my $now = DateTime->now();

	my %all;

	my $name = $tourn->name;
	$name .= "-".$one_event->name if $one_event;
	$name =~ s/[\W_]//g;
	my $filename = "NSDA-".$qual_string."s-$name";

	$qual_string = "Top ".$limit." Place" if $limit;

	if ($format eq 'csv' || $format eq 'simplecsv') {

		$filename = $filename.".csv";
		$m->clear_buffer;

		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	} elsif ($format eq "pdf") {

		$m->comp("/funclib/printout.mas",
			tourn    => $tourn,
			filename => $filename,
			wide     => 1,
			head     => 1
		);
	} elsif ($format eq "return") {

	} else {
		$m->print('<div class="blankfull">');
	}

	my $headers_print;
	my $msg;
	my $err;

	EVENT:
	foreach my $event (@events) {

		next unless $event;

		my %event_settings = $event->all_settings();

		if ($ARGS{"sweeps"}) {

			if ($event_settings{'weekend'} eq "nope") {
				next EVENT;
			}

		} elsif ($event_settings{'weekend'} eq "nope") {
			$m->print("<p class='redtext centeralign semibold'>");
			$m->print($event->name." is not scheduled to be held by this district.  To change, go to Settings");
			$m->print(" &rarr; Tournament, then the Dates and Deadlines tab, to assign it to a weekend");
			$m->print("</p>");
			next EVENT;
		};

		my $hidden;

		unless ($format eq "return") {

			unless ($tourn_settings->{'nsda_nats'}) {

				$hidden = "hidden" unless $event_settings{"nsda_audited"};

				if ($hidden && $format eq "post") {
					$err .= '<br />' if $err;
					$err .= "Results for ".$event->abbr." are not marked audited under Results -> Qualifiers.  Sheet not generated";
					next;
				}
			}

			undef $hidden if $person && $person->site_admin;
			undef $hidden if $person && $person_settings->{"nsda_admin"};
		}

		my @rounds = sort {$b->name <=> $a->name}
			$m->comp(
				"/funclib/event_rounds.mas",
					event      => $event,
					had_rounds => 1
				);

		my $final;
		my $semi;
		my $last_nonelim;
		my $first_nonelim;
		my @prelims;
		my @elims;

		my $runoffs;

		foreach my $round (@rounds) {

			if ($round->type eq "runoff") {
				$runoffs++;
				next;
			}

			if ($round->type eq "final" && (not defined $final) ) {

				$final = $round;

			} elsif ($round->type eq "elim" && (not defined $semi)){

				$semi = $round;

			} elsif ($round->type eq "elim") {

				push @elims, $round;

			} else {

				$last_nonelim = $round if (not defined $last_nonelim);
				$first_nonelim = $round;
				push @prelims, $round;
			}
		}

		@prelims = ($last_nonelim);

		if ($event->abbr eq "HSE" || $event->abbr eq "SEN") {
			unless ($semi || $final) {
				$final = $last_nonelim;
				undef @prelims;
			} else {

				#Only finalists may qualify or become alternates
				undef $semi;
				undef @prelims;
			}
		}

		my $final_tiebreaks = $final->protocol if $final;

		if (
			$event->type eq "speech"
			&& (not defined $final)
			&& (scalar @elims) < 1
		) {

			my @entries = $event->entries(active => 1);

			if ((scalar @entries) < 8 && $last_nonelim) {

				$final = $last_nonelim;
				my $protocol = $final->protocol;

				unless (
					$protocol->name eq "IE No Elims"
					|| $protocol->name eq "IE R4 No Elims"
				) {

					my $protocol = $tourn->protocols(name => "IE No Elims")->first;

					unless ($protocol) {
						$protocol = $tourn->protocols(name => "IE R4 No Elims")->first;
					}

					if ($protocol) {
						$final->protocol($protocol);
						$final->update();
						$final_tiebreaks = $protocol;
					}
				}

				$final_tiebreaks = $protocol;

			} else {

				$err = "You have no final round marked on your schedule for ".$event->abbr."! <br /> ";
				$err .= "All speech events with 8 or more competitors need their terminal round ";
				$err .= "on the schedule marked as a final, not an elim.";
			}

		} elsif ($event->type eq "speech") {

			unless ($final_tiebreaks && $final_tiebreaks->name eq "IE Final") {
				$err = "Your final round has the incorrect tiebreaker protocol.  Please change ";
				$err .= "it to 'IE Final' before you proceed!!";
			}
		}


		if ($event->type eq "debate"
		    && (not defined $tourn_settings->{"nsda_nats"})
			&& ($event_settings{"round_robin"})
		) {

			$final_tiebreaks = Tab::Protocol->search(
				tourn => $tourn->id,
				name  => "Round Robin"
			)->first;

			foreach my $prelim (@prelims) {
				next unless $prelim;
				$prelim->protocol($final_tiebreaks);
				$prelim->update();
			}
			$final = $prelims[-1];
			undef @prelims;
		}

		if ($event->type eq "debate"
		    && (not defined $tourn_settings->{"nsda_nats"})
		    && (not defined $event_settings{"round_robin"})
		) {

			if (not defined $final) {
				next EVENT if $ARGS{'sweeps'};
				$err = " There is no final round marked in ".$event->abbr." which means we cannot ";
				$err .= "yet calculate results & qualifiers for it. <br />";

				$err .= "Edit your schedule so the terminal round is marked as type 'final'.<br />";
				$err .= "This step is necessary even if there is more than one debate in that round!";

			} elsif ((not defined $final_tiebreaks)
				|| ($final_tiebreaks->name ne "Debate Final Seed" && $final_tiebreaks->name ne "Debate Final Runoff")
			) {
				next EVENT if $ARGS{'sweeps'};
				$err = "You have incorrect tiebreaker protocols set for ".$event->abbr.".  They must either be Debate Final ";
				$err .= "Runoff or Debate Final Seed for Districts debate qualifiers.";

			} elsif (
				$final_tiebreaks->name ne "Debate Final Runoff"
				&& $final_tiebreaks->name ne "Debate Final Seed"
			) {
				next EVENT if $ARGS{'sweeps'};
				$err = "Your tiebreakers for the ".$event->abbr." final round are set incorrectly to '".$final_tiebreaks->name;
				$err .= " They must either be Debate Final Runoff or Debate Final Seed for Districts debate qualifiers.";
			}
		}

		my ($num_qualifiers, $num_alternates, $num_active) = $m->comp("/funclib/nsda/qualifier_count.mas", event => $event);

		my $count_quals = $num_qualifiers;
		my $count_alts = $num_alternates;

		my @final_results = $m->comp(
			"/tabbing/results/order_entries.mas",
				round        => $final,
				all_entries  => 1,
				runoffs      => $runoffs
			) if $final;

		my %entry_ballots = $m->comp(
			"/funclib/round_ballot_strings.mas",
			round => $final
	   ) if $final;

		my @schools = $m->comp(
			"/funclib/round_schools.mas",
			round => $first_nonelim
		) if $first_nonelim;

		my @vacate_slots = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "nsda_vacate"
		);

		my %vacate_slot = map {$_->entry->id => $_->value } @vacate_slots;

		my %school_name =
			map {$_->id => &Tab::short_name($_->name)}
			@schools if @schools;

		my $final_entries_ref = pop @final_results if @final_results;

		my %qualifiers = ();
		my %alternates = ();
		my %others = ();
		my %vacated = ();

		my %in_finals = ();
		my %in_elims = ();
		my %unique_to_elim = ();
		my %in_round = ();
		my %round_count = ();

		my %last_prelim = ();

		my $alt = 1;

		if (${$final_entries_ref}{"by_place"}) {

			foreach my $key (sort {$a <=> $b} keys %{${$final_entries_ref}{"by_place"}}) {

				my $tie++ if scalar @{${${$final_entries_ref}{"by_place"}}{$key}} > 1;

				foreach my $entry_id (@{${${$final_entries_ref}{"by_place"}}{$key}}) {

					next if $in_elims{$entry_id};

					$in_finals{$entry_id} = $key;
					$in_elims{$entry_id} = $key;
					$unique_to_elim{$final}++;

					next if $all{$entry_id} && $all{$entry_id}{"place"};
					$all{$entry_id}{"place"} = $key;

					next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
					next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};
					next if $others{$entry_id} && $others{$entry_id}{"place"};

					if ($vacate_slot{$entry_id}) {

						$vacated{$entry_id}{"tie"}++ if $tie;
						$vacated{$entry_id}{"place"} = $key;
						$vacated{$entry_id}{"last_round"} = $final->name;

					} elsif ($count_quals > 0) {

						$qualifiers{$entry_id}{"tie"}++ if $tie;
						$qualifiers{$entry_id}{"place"} = $key;

						$count_quals--;

					} elsif ($count_alts > 0) {

						$alternates{$entry_id}{"tie"}++ if $tie;
						$alternates{$entry_id}{"place"} = $alt++;
						$count_alts--;

					} else {

						$others{$entry_id}{"tie"}++ if $tie;
						$others{$entry_id}{"place"} = $key;

					}
				}
			}
		}

		if ($event->type eq "debate"
			&& $tourn_settings
			&&
			($tourn_settings->{"nsda_district"} || $tourn_settings->{"nsda_nats"})
		) {

			foreach my $elim ($semi, @elims) {

				my @elim_results = $m->comp(
					"/tabbing/results/order_entries.mas",
					round       => $elim,
					protocol    => $final_tiebreaks,
					runoffs     => $runoffs,
					all_entries => 1
				);

				my $elim_entries_ref = pop @elim_results
					if @elim_results;

				if (${$elim_entries_ref}{"by_place"}) {

					foreach my $key (sort {$a <=> $b} keys %{${$elim_entries_ref}{"by_place"}}) {

						my $tie++ if scalar @{${${$elim_entries_ref}{"by_place"}}{$key}} > 1;

						my $delayed_alt;

						foreach my $entry_id (@{${${$elim_entries_ref}{"by_place"}}{$key}}) {

							next if $in_elims{$entry_id};
							$in_elims{$entry_id} = $key;
							$unique_to_elim{$elim}++;

							next if $all{$entry_id} && $all{$entry_id}{"place"};
							$all{$entry_id}{"place"} = $key;
							next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
							next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};

							next if $others{$entry_id} && $others{$entry_id}{"place"};
							next if $vacated{$entry_id} && $others{$entry_id}{"place"};

							if ($vacate_slot{$entry_id}) {

								$vacated{$entry_id}{"tie"}++ if $tie;
								$vacated{$entry_id}{"place"} = $key;

							} elsif ($count_quals > 0) {

								$qualifiers{$entry_id}{"tie"}++ if $tie;
								$qualifiers{$entry_id}{"place"} = $key;
								$count_quals--;

							} elsif ($count_alts > 0) {

								$alternates{$entry_id}{"tie"}++ if $tie;
								$alternates{$entry_id}{"place"} = $alt;

								$delayed_alt++;
								$count_alts--;

							} else {

								$others{$entry_id}{"tie"}++ if $tie;
								$others{$entry_id}{"place"} = $key;

							}
						}

						$alt += $delayed_alt;
					}
				}

			}

		} elsif ($final && $semi)  {

			my @semi_results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round       => $semi,
				protocol    => $final_tiebreaks,
				runoffs     => $runoffs,
				all_entries => 1
			);

			my $semi_entries_ref = pop @semi_results
				if @semi_results;

			if (${$semi_entries_ref}{"by_place"}) {

				foreach my $key (sort {$a <=> $b} keys %{${$semi_entries_ref}{"by_place"}}) {

					my $tie++ if scalar @{${${$semi_entries_ref}{"by_place"}}{$key}} > 1;

					my $delayed_alt;

					foreach my $entry_id (@{${${$semi_entries_ref}{"by_place"}}{$key}}) {

						next if $in_elims{$entry_id};
						$in_elims{$entry_id} = $key;
						$unique_to_elim{$semi}++;

						next if $all{$entry_id} && $all{$entry_id}{"place"};
						$all{$entry_id}{"place"} = $key;
						next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
						next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};

						next if $others{$entry_id} && $others{$entry_id}{"place"};
						next if $vacated{$entry_id} && $others{$entry_id}{"place"};

						if ($vacate_slot{$entry_id}) {

							$vacated{$entry_id}{"tie"}++ if $tie;
							$vacated{$entry_id}{"place"} = $key;

						} elsif ($count_quals > 0) {

							$qualifiers{$entry_id}{"tie"}++ if $tie;
							$qualifiers{$entry_id}{"place"} = $key;
							$count_quals--;

						} elsif ($count_alts > 0) {

							$alternates{$entry_id}{"tie"}++ if $tie;
							$alternates{$entry_id}{"place"} = $alt;

							$delayed_alt++;
							$count_alts--;

						} else {

							$others{$entry_id}{"tie"}++ if $tie;
							$others{$entry_id}{"place"} = $key;

						}
					}

					$alt += $delayed_alt;
				}
			}
		}

		unless ($event->abbr eq "HSE" || $event->abbr eq "SEN") {

			if ($final && @prelims) {

				my $final_protocol;

				if ($event->type eq "debate"
					&& $tourn_settings
					&& $event_settings{"round_robin"}
				) {
					$final_protocol = $event->tourn->protocols(name => "Round Robin")->first;
				} elsif (
					$event->type eq "debate"
					&& $tourn_settings
				) {
					$final_protocol = $event->tourn->protocols(name => "Debate")->first;
				} else {
					$final_protocol = $final_tiebreaks;
				}

				foreach my $prelim (@prelims) {

					next unless $prelim && $prelim > 0 && $prelim->id;

					my @previous_results = $m->comp(
						"/tabbing/results/order_entries.mas",
							round        => $prelim,
							runoffs      => $runoffs,
							protocol => $final_protocol
					);

					my $previous_entries_ref =
						pop @previous_results
						if @previous_results;

					$results{$prelim->name} = $previous_entries_ref;

					if (${$previous_entries_ref}{"by_place"}) {

						foreach my $key (
							sort {$a <=> $b}
							(keys %{${$previous_entries_ref}{"by_place"}})
						) {

							my $tie++
								if scalar @{${${$previous_entries_ref}{"by_place"}}{$key}} > 1;

							my $delayed_alt;

							foreach my $entry_id (@{${${$previous_entries_ref}{"by_place"}}{$key}}) {

								unless ($in_finals{$entry_id}) {
									unless ($in_elims{$entry_id}) {
										unless ($in_round{$entry_id}) {
											$in_round{$entry_id} = $prelim->name;
											$round_count{$prelim->name}++;
										}
									}
								}

								next if $all{$entry_id} && $all{$entry_id}{"place"};
								$all{$entry_id}{"place"} = $key;

								next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
								next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};
								next if $others{$entry_id} && $others{$entry_id}{"place"};
								next if $vacated{$entry_id} && $others{$entry_id}{"place"};

								$last_prelim{$entry_id} = $prelim->name;

								if ($vacate_slot{$entry_id}) {

									$vacated{$entry_id}{"tie"}++ if $tie;
									$vacated{$entry_id}{"place"} = $key;

								} elsif ($count_quals > 0) {

									$qualifiers{$entry_id}{"tie"}++ if $tie;
									$qualifiers{$entry_id}{"place"} = $key;
									$count_quals--;

								} elsif ($count_alts > 0) {

									$alternates{$entry_id}{"tie"}++ if $tie;
									$alternates{$entry_id}{"place"} = $alt;

									$delayed_alt++;
									$count_alts--;

								} else {
									$others{$entry_id}{"tie"}++ if $tie;
									$others{$entry_id}{"place"} = $key;
								}
							}

							$alt += $delayed_alt;
						}
					}
				}
			}
		}

		if ($format eq "return") {
			foreach my $key (keys %qualifiers) {
				$all{$key}{"status"} = "Q";
			}

			foreach my $key (keys %alternates) {
				$all{$key}{"status"} = "A";
			}

			foreach my $key (keys %others) {
				$all{$key}{"status"} = "O";
			}

			foreach my $key (keys %vacated) {
				$all{$key}{"status"} = "V";
			}

			return %all;

		} elsif ($format eq "csv" || $format eq "simplecsv") {

			if ($district && $tourn_settings->{"nsda_district"}) {

				$m->print("\n");
				$m->print('"'.$district->name.'"');
				$m->print("\n");
				$m->print('"'.$event->name.'"');
				$m->print("\n");

			} else {

				$m->print(",,,,");
				$m->print('"'.$event->name.'"');
				$m->print(",");
				$m->print('"'.$qual_string.'"');
				$m->print("\n");
			}

			my $simplecsv++ if $format eq "simplecsv";

			if ($simplecsv) {

				Tab::Entry->set_sql(event_spoke => "
					select distinct entry.id
					from entry, ballot, score
					where entry.event = ?
					and entry.id = ballot.entry
					and ballot.id = score.ballot
				");

				my @total_entries = Tab::Entry->search_event_spoke($event->id);

				$m->print('"Entries: '.scalar @total_entries.'"');
				$m->print("\n");

			}

			$m->flush_buffer();

			$m->comp("results_csv.mas",
				round          => $final,
				filename       => $filename,
				nsda_districts => $nsda_districts,
				nsda_nats      => $tourn_settings->{"nsda_nats"},
				qualifiers     => \%qualifiers,
				vacated        => \%vacated,
				alternates     => \%alternates,
				others         => \%others,
				nofinish       => "Yes",
				contact        => $ARGS{"contact"},
				limit          => $limit,
				simple         => $simplecsv
			);

			my $placement = scalar( keys %in_finals) + 1;

			my $limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			$m->comp("results_csv.mas",
				round           => $semi,
				filename        => $filename,
				protocol        => $final_tiebreaks,
				nsda_districts  => $nsda_districts,
				nsda_nats       => $tourn_settings->{"nsda_nats"},
				qualifiers      => \%qualifiers,
				vacated         => \%vacated,
				alternates      => \%alternates,
				others          => \%others,
				exclude         => \%in_finals,
				noheader        => "Yes",
				nofinish        => "Yes",
				limit           => $limit,
				contact         => $ARGS{"contact"},
				start_placement => $placement,
				simple          => $simplecsv
			) if $limit_done > 0;

			$placement = scalar( keys %in_elims) + 1;

			$limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			foreach my $prelim (@prelims) {

				$m->comp("results_csv.mas",
					round           => $prelim,
					filename        => $filename,
					protocol        => $final_tiebreaks,
					nsda_districts  => $nsda_districts,
					nsda_nats       => $tourn_settings->{"nsda_nats"},
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_elims,
					none_above      => \%last_prelim,
					start_placement => $placement,
					noheader        => "Yes",
					nofinish        => "Yes",
					limit           => $limit,
					contact         => $ARGS{"contact"},
					simple          => $simplecsv
				) if $limit_done > 0;
			}

			$m->print("\n\n");

		} elsif ($format eq "pdf") {

			my $filepath = $Tab::file_root."tmp/".$filename;

			open (TEXOUT, ">>$filepath.tex");

			my $logo_file = $tourn_settings->{"logo"};

			if ($logo_file) {

				unless (-e "$Tab::file_root/tmp/".$logo_file) {
					system("cd $Tab::file_root/tmp;
					$Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo_file);
				}
			}

			if ($logo_file && -e "$Tab::file_root/tmp/".$logo_file) {

				print TEXOUT "\\begin{minipage}[c]{3.65in}\n";
				print TEXOUT "\\includegraphics[height=1.2in,width=1.2in,keepaspectratio]{".$logo_file."}\n";
				print TEXOUT "\\end{minipage}\n";

			} else {

				print TEXOUT "\\vspace{-4mm}\n";
				print TEXOUT "\\begin{minipage}[c]{4.2in}\n";
				print TEXOUT "{\\bf \\LARGE \\color{black!64} ".&Tab::texify($tourn->name)." }\n";
				print TEXOUT "\\end{minipage}\n";

			}

			print TEXOUT "\\begin{minipage}[c]{3.4in}\n";
			print TEXOUT "\\strut \\hfill {\\Large\\bf ".uc(&Tab::texify($event->name))." } \n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\noindent\n";
			print TEXOUT "\\strut \\hfill {\\large \\color{black!64} ".uc($qual_string)."S }\n";
			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "\\vspace{5mm}\n";
			print TEXOUT "\\newline\n";

			close TEXOUT;

			$m->comp("/tabbing/report/results_table_print.mas",
				round          => $final,
				filename       => $filename,
				nsda_districts => $nsda_districts,
				nsda_nats      => $tourn_settings->{"nsda_nats"},
				qualifiers     => \%qualifiers,
				vacated        => \%vacated,
				alternates     => \%alternates,
				limit          => $limit,
				ballots        => $ARGS{"ballots"},
				others         => \%others
			);

			my $placement = scalar( keys %in_finals) + 1;
			my $limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			$m->comp("/tabbing/report/results_table_print.mas",
				round           => $semi,
				filename        => $filename,
				protocol        => $final_tiebreaks,
				nsda_districts  => $nsda_districts,
				nsda_nats       => $tourn_settings->{"nsda_nats"},
				qualifiers      => \%qualifiers,
				vacated         => \%vacated,
				alternates      => \%alternates,
				others          => \%others,
				exclude         => \%in_finals,
				ballots         => $ARGS{"ballots"},
				limit           => $limit,
				start_placement => $placement,
				noheader        => $tourn_settings->{"nsda_nats"},
				nofinish        => "Yes"
			) if ($limit_done > 0);

			my $noheaders;
			$noheaders++ unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

			$placement = scalar( keys %in_elims) + 1;
			$limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			foreach my $prelim (@prelims) {

				next if $limit_done < 1;

				$m->comp("/tabbing/report/results_table_print.mas",
					round           => $prelim,
					filename        => $filename,
					protocol        => $final_tiebreaks,
					nsda_districts  => $nsda_districts,
					nsda_nats       => $tourn_settings->{"nsda_nats"},
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					limit           => $limit,
					ballots         => $ARGS{"ballots"},
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_elims,
					none_above      => \%last_prelim,
					start_placement => $placement,
					noheader        => $noheaders++,
					nofinish        => 1
				);

			}

			open (TEXOUT, ">>$filepath.tex");
			print TEXOUT "\\newpage\n";
			close TEXOUT;

		} elsif ($format eq "post" && $final) {

			my $description;

			if ($tourn_settings->{"nsda_nats"}) {
				$description = "National final result sheet regenerated";
			} else {
				$description = "National qualifiers result sheet regenerated";
			}

			$m->comp("/funclib/log.mas",
				type        => "tabbing",
				person      => $person,
				description => $description,
				event       => $event,
				tourn       => $tourn
			);

			my $result_set  = Tab::ResultSet->search(
				label => $label,
				tourn => $tourn,
				event => $event
			)->first;

			unless ($result_set) {

				$result_set  = Tab::ResultSet->create({
					label     => $label,
					tourn     => $tourn,
					event     => $event,
					generated => $now
				});

			} else {
				$result_set->generated($now);
				$result_set->update();
			}

			my %keys = map {$_->tag => $_} $result_set->result_keys;

			Tab::ResultSet->set_sql(delete_results => "delete from result where result_set = ?");

			Tab::ResultSet->sql_delete_results->execute(
				$result_set->id
			);

			@prelims = sort {$b->name <=> $a->name} @prelims;

			my %entry_done;
			my $current_rank = 1;

			foreach my $round ($final, $semi, @elims, @prelims) {

				next unless $round
					&& $round > 0
					&& $round->id;

				my $debate_all++ if $event->type eq "debate";

				my $section_rank++
					if $final_tiebreaks
					&& $final_tiebreaks->setting("equal_elims");

				my $final_protocol = $final_tiebreaks;

				my (@results) = $m->comp(
					"order_entries.mas",
						long_names   => 1,
						round        => $round,
						protocol => $final_protocol,
						all_entries  => $debate_all,
						runoffs      => $runoffs,
						section_rank => $section_rank
				);

				my $entries_ref = pop @results if @results;

				my @tiebreak_keys =
					sort {$a <=> $b}
					keys %{$entries_ref->{"tier_description"}};

				if (${$entries_ref}{"by_place"}) {

					foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) {

						my $did;

						foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

							next if $entries_ref->{"dq"}{$entry_id};

							next if $entry_done{$entry_id}++;
							my $entry = Tab::Entry->retrieve($entry_id);
							$did++;

							my $result = Tab::Result->create({
								rank       => $current_rank,
								place      => Lingua::EN::Numbers::Ordinate::ordinate($current_rank),
								result_set => $result_set->id,
								entry      => $entry_id,
								school     => $entry->school->id
							});

							if ($vacated{$entry_id}{"place"}) {

								unless ($keys{"vacated"}) {
									$keys{"vacated"} = Tab::ResultKey->create({
										result_set  => $result_set->id,
										tag         => "vacated",
										no_sort     => 1,
										description => "Entry Slot Vacated or Dropped",
									});
								}

								Tab::ResultValue->create({
									result       => $result->id,
									result_key   => $keys{"vacated"},
									priority     => 0,
									protocol => $final_protocol,
									value        => 1
								});
							}

							unless ($keys{"Rnd"}) {
								$keys{"Rnd"} = Tab::ResultKey->create({
									result_set  => $result_set->id,
									tag         => "Rnd",
									description => "Last Round Competed",
									sort_desc   => 0
								});
							}

							Tab::ResultValue->create({
								result_key   => $keys{"Rnd"},
								value        => $round->name,
								priority     => 2,
								protocol => $final_protocol,
								result       => $result->id
							});

							foreach my $key (@tiebreak_keys) {

								my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

								my $sort_desc = 0;
								$sort_desc = 1 if $ARGS{"threshold_direction"};

								$value =~ s/\.(?:|.*[^0]\K)0*\z//;

								my $tag = ${$entries_ref}{"tier_description"}{$key};

								unless ($keys{$tag}) {

									my $description = ${$entries_ref}{"tier_long_description"}{$key};

									$keys{$tag} = Tab::ResultKey->create({
										result_set  => $result_set->id,
										tag         => $tag,
										sort_desc   => $sort_desc,
										description => $description
									});
								}

								Tab::ResultValue->create({
									value        => $value,
									result       => $result->id,
									priority     => ($key + 2),
									protocol => $final_protocol,
									result_key   => $keys{$tag}
								})
							}
						}

						$current_rank += $did;
					}
				}
			}

		} else {
</%init>
			<script>
				function confirmAudit(event_id) {
					$("."+event_id).removeClass('hidden');
					$("#"+event_id).addClass('hidden');
					$('table').trigger('applyWidgets');
				}
			</script>

			<div class="full nospace borderbottom flexrow">

				<span class="quarter nospace">
					<h4><% $qual_string %>s</h4>
				</span>

				<span class="quarter">

					<form
						action = "nsda_qualifiers.mhtml"
						method = "post"
					>

					<input
						type  = "hidden"
						name  = "full"
						value = "<% $full %>"
					>

					<select
						name     = "event_id"
						class    = "fixedbig"
						onChange = "this.form.submit();"
					>
%						foreach my $oevent (@all_events) {
							<option
								value="<% $oevent->id %>"
								<% $oevent == $event ? 'selected="true"' : "" %>
							><% $oevent->name %></option>
%						}

					</select>

					</form>
				</span>

%				if ($err) {
					<span>
					</span>

					</div>

					<div class="centeralign full marvertmore">
						<span class="ninetenths leftalign biggish">
							<h5 class="redtext semibold">
								Alert: Your Schedule Is Misconfigured in <% $event->abbr %>
							</h5>

							<p class="huge martopmore">
								<% $err %>
							</p>

							<p class="centeralign martopmuchmore">
								<a
									class="buttonwhite bluetext invert"
									href="/setup/schedule/event.mhtml?event_id=<% $event->id %>"
								>Edit <% $event->abbr %> Schedule</a>
							</p>

						</span>
					</div>

%					$m->abort();
%				}

				<span class="half rightalign <% $hidden %> <% $event->id %>">

					<% $event->abbr %>:

%					if ($event->abbr eq "HOU" || $event->abbr eq "HSE" || $event->abbr eq "SEN") {

						<a
							title = "Congress Speech Scores"
							class = "buttonwhite fa fa-lg fa-sort-numeric-asc orangetext hover"
							href  = "/tabbing/report/congress_scores.mhtml?event_id=<% $event->id %>"
							target = "_blank"
						></a>
%					}

					<a
						title = "PDF Printout Report"
						class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=pdf&full=<% $full %>"
						target = "_blank"

					></a>

					<a
						title = "Full Excel Report"
						class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=csv&full=<% $full %>"
					></a>
<%perl>
					if (
						$tourn_settings->{'nsda_district'}
					) {
</%perl>

						<a
							title = "Finalize for Publication and Nationals Registration"
							class = "buttonwhite fa fa-lg fa-arrow-circle-up orangetext hover"
							href  = "nsda_qualifiers.mhtml?format=post&event_id=<% $event->id %>&full=<% $full %>"
						></a>

%					}

%					unless ($tourn_settings->{"nsda_nats"}) {

						ALL:

						<a
							title = "PDF Printout Report"
							class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
							href  = "nsda_qualifiers.mhtml?format=pdf&all=1"
							target = "_blank"

						></a>

						<a
							title = "Full Excel Report"
							class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
							href  = "nsda_qualifiers.mhtml?format=csv&all=1"
						></a>

						<a
							title = "Excel Download for NSDA"
							class = "buttonwhite fa fa-lg fa-file-excel-o purpletext hover"
							href  = "nsda_qualifiers.mhtml?format=simplecsv&all=1"
						></a>

						<a
							title = "Finalize for Publication and Nationals Registration"
							class = "buttonwhite fa fa-lg fa-arrow-circle-up orangetext hover"
							href  = "nsda_qualifiers.mhtml?format=post&all=1"
						></a>
<%perl>
					} elsif ($person_settings->{"nsda_admin"}
						|| $person->site_admin
					) {
</%perl>
						<a
							title = "Full Report Excel Download"
							class = "buttonwhite fa fa-lg fa-file-excel-o purpletext hover"
							href  = "nsda_qualifiers.mhtml?format=csv&event_id=<% $event->id %>&contact=1"
						></a>

%						if ($full) {
							<a
								title = "View Only Top 14"
								class = "buttonwhite fa fa-lg fa-asterisk orangetext hover invert"
								href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>"
							></a>
%						} else {
							<a
								title = "View All Qualifiers"
								class = "buttonwhite fa fa-lg fa-asterisk orangetext hover"
								href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&full=1"
							></a>
%						}
%					}
				</span>
			</div>

%			my $confirmer;

%			unless ($event_settings{"nsda_audited"} || $tourn_settings->{nsda_nats}) {

				<div
					id    = "<% $event->id %>"
					class = "cover centeralign padtopmore"
				>

					<div class="padmuchmore full padtopmore padbottommore marbottommore">
					</div>

					<h3 class="centeralign nospace">
						Confirm Audit &amp; Doublecheck
					</h3>

					<p class="strong bluetext padtopmore martopmore">
						To post qualifiers for <% $event->name %>, please first confirm the following:
					</p>

					<p>
						1.  The ballot entry process has been double checked, and ballots
						have been made available to attending coaches for confirmation.
					</p>

					<p>
						2.  You pledge to check the system's results and calculations
						before announcing or reporting qualifiers.
					</p>

					<div class="padmuchmore centeralign martopmore">

						<button
							id           = "event_<% $event->id %>"
							class        = "buttonwhite redtext invert padmuchmore"
							target_id    = "<% $event->id %>"
							setting_name = "nsda_audited"
							value        = "<% $person->id %>"
							onClick      = "
								postSwitch(this, '/setup/events/setting_switch.mhtml');
								confirmAudit(<% $event->id %>);
							"
						>
							Mark As Confirmed by <% $person->first." ".$person->last %>
						</button>
					</div>
				</div>
<%perl>

				unless ($person->site_admin
					|| $person_settings->{"nsda_admin"}
					|| $tourn_settings->{"nsda_nats"}
				) {

					$hidden = "hidden";
				}

			} else {

				$confirmer = Tab::Person->retrieve($event_settings{"nsda_audited"});
			}

</%perl>
			<div class = "mask <% $hidden %> <% $event->id %>">

%			unless ($tourn_settings->{'nsda_nats'}) {
				<div class="explain nospace martop centeralign">
					<span class="smallish explain nospace replybucket confirmed">
%						if ($confirmer) {
							Audit confirmed by
							<% $confirmer ? $confirmer->first." ".$confirmer->last : "" %>
%						} else {
							Audit not yet confirmed
%						}
					</span>
				</div>
<%perl>
			}

</%perl>
			<div class="full flexrow martop">
				<span class="third nospace">
					<h5 class="nospace">Finalists</h5>
				</span>

				<span class="third semibold bluetext centeralign">
					Basis: <% $final_tiebreaks ? $final_tiebreaks->name : "FINAL TB SET NOT FOUND" %>
				</span>

%				if ($final > 0 && $final_tiebreaks > 0) {
					<span class="third rightalign">
						<a
							class="buttonblue whitetext smallish padless"
							href="/panel/round/runoff.mhtml?round_id=<% int($final) %>&nsda=1&protocol_id=<% $final_tiebreaks->id %>"
						>Schedule Runoffs</a>

					</span>
%				}
			</div>

%			unless ($final_tiebreaks) {
				<div class="centeralign full marvertmore">
					<span class="ninetenths leftalign biggish">
						<h5 class="redtext semibold">
							Alert: Your Schedule Is Misconfigured
						</h5>

						<p class="bigger">
							All events in Districts, except for Debate round
							robins, Speech events with 7 or fewer entries or
							Congress events with only one chamber, are required
							to have their last round marked as type FINAL.
						</p>

						<p class="bigger">
							The tiebreak protocol for this round must be one of
							"IE Final", "Debate Final Seed", "Debate Final
							Runoff", or "Congress Elim".
						</p>

					</span>
				</div>
%			}


			<&
				"results_table.mas",
					round          => $final,
					nsda_districts => $nsda_districts,
					nsda_nats      => $tourn_settings->{"nsda_nats"},
					qualifiers     => \%qualifiers,
					vacated        => \%vacated,
					alternates     => \%alternates,
					others         => \%others,
					limit          => $limit,
					tourn_settings => $tourn_settings,
					vacate_option  => $nsda_districts
			&>
<%perl>

			my $placement = scalar( keys %in_finals) + 1;
			my $limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			my $finals_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_finals));
			my $semis_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_elims));

			my $both = 1 if $semi && $last_nonelim;

			if ($final && ($semi || @elims ||  @prelims)) {

				my $runoff = $semi if $semi;
				$runoff = $prelims[0] unless $runoff;

				undef $runoff if $tourn_settings->{"nsda_nats"};

				undef $both unless $semis_left > 0;

				if ($limit_done > 0) {

					my $so_far = $placement;

					$m->print('<h5>Others</h5>');

					foreach my $elim ($semi, @elims) {

						next unless $elim;
						next unless $unique_to_elim{$elim};
						next if $limit && ($so_far > $limit);
</%perl>
						<span class="half nospace semibold bigger bluetext martopless">
							<% $elim->realname %>
						</span>

%						if ($runoff) {
							<span class="half rightalign">
								<a
									class="buttonblue whitetext smallish padless"
									href="/panel/round/runoff.mhtml?round_id=<% $elim->id %>&nsda=1&protocol_id=<% $final_tiebreaks->id %>"
								>Schedule <% $elim->realname %> Runoffs</a>
							</span>
%						}

						<&
							"results_table.mas",
							round           => $elim,
							protocol    => $final_tiebreaks,
							nsda_districts  => $nsda_districts,
							nsda_nats       => $tourn_settings->{"nsda_nats"},
							qualifiers      => \%qualifiers,
							vacated         => \%vacated,
							alternates      => \%alternates,
							limit           => $limit,
							others          => \%others,
							exclude         => \%in_finals,
							start_placement => $so_far,
							tourn_settings  => $tourn_settings,
							vacate_option   => $nsda_districts
						&>

%						$so_far += $unique_to_elim{$elim};

%					}
<%perl>

					my $in_elims = scalar (keys %in_elims);

					if ($tourn_settings->{nsda_nats} && $event->type ne "debate") {

						if ($in_elims < $limit) {

							my $last_prelim = $prelims[1];

							my @round_results = $m->comp(
								"/tabbing/results/order_entries.mas",
									round        => $last_prelim
								);

							my $quarter_results = pop @round_results;

							foreach my $key (sort {$a <=> $b} keys %{${$quarter_results}{"by_place"}}) {

								foreach my $entry_id (@{${${$quarter_results}{"by_place"}}{$key}}) {

									next if $in_elims{$entry_id};
									next if $in_finals{$entry_id};
								}

								last if $in_elims >= $limit;
							}
</%perl>

							<&
								"results_table.mas",
								round           => $last_prelim,
								nsda_districts  => $nsda_districts,
								nsda_nats       => $tourn_settings->{"nsda_nats"},
								qualifiers      => \%qualifiers,
								vacated         => \%vacated,
								alternates      => \%alternates,
								limit           => $limit,
								others          => \%others,
								exclude         => \%in_elims,
								start_placement => ($in_elims + 1),
								tourn_settings  => $tourn_settings,
								vacate_option   => $nsda_districts,
								nofinish        => "Yes"
							&>
<%perl>
						}
					}
				}

				$placement = scalar( keys %in_elims) + 1;
				$limit_done = $limit - $placement;
				$limit_done = 1 unless $limit;

				my $noheaders;
				my $notfirst;

				$noheaders++ unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

				if ($event->type eq "debate"
					&& $nsda_districts
					&& $event_settings{"double_elimination"}
				) {
					undef ($noheaders);
				}

				foreach my $prelim (@prelims) {

					next unless $prelim > 0;
					next if $limit_done < 1;
					$noheaders++ if $tourn_settings->{"nsda_nats"};

					unless ($notfirst++) {
</%perl>
						<div class="full semibold bigger bluetext nospace padvert marvert">
							Prelims (after Round <% $prelim->name %>)
						</div>
<%perl>
					}

					$m->comp("results_table.mas",
						round           => $prelim,
						protocol        => $final_tiebreaks,
						nsda_districts  => $nsda_districts,
						nsda_nats       => $tourn_settings->{"nsda_nats"},
						qualifiers      => \%qualifiers,
						vacated         => \%vacated,
						alternates      => \%alternates,
						others          => \%others,
						exclude         => \%in_elims,
						start_placement => $placement,
						noheader        => $noheaders++,
						vacate_option   => $nsda_districts,
						tourn_settings  => $tourn_settings,
						limit           => $limit,
						nofinish        => "Yes"
					);

					if ($prelim) {
						$placement += $round_count{$prelim->name};
					}
				}
</%perl>
				</tbody>
			</table>
			</div>
<%perl>
			}
		}
	}

	if ($format eq "return") {

		return;

	} elsif ($format eq "csv" || $format eq "simplecsv") {

		$m->flush_buffer();
		$m->abort();

	} elsif ($format eq "pdf") {

		$m->comp("/funclib/printout.mas",
			tourn    => $tourn,
			filename => $filename,
			tail     => 1
		);

	} elsif ($format eq "post") {

		return if $ARGS{"return"};

		$msg .= '<br />' if $msg;
		$msg .= scalar @events." events posted for publication or Nationals registration";
		$m->redirect("/tabbing/publish/index.mhtml?err=$err&msg=$msg");

	} else {

		unless (@events) {
</%perl>
			<div class="centeralign full nospace flexrow">

				<span class="rightalign semibold bluetext bigger padrightmore quarter">
					Choose an event or division
				</span>

				<span class="padleft quarter">
					<form
						action = "nsda_qualifiers.mhtml"
						method = "post"
					>

					<input
						type  = "hidden"
						name  = "full"
						value = "<% $full %>"
					>

					<select
						name             = "event_id"
						class            = "fixedbig"
						onChange         = "this.form.submit();"
						data-placeholder = "Choose an event"
					>
						<option value=""></option>
%						foreach my $oevent (@all_events) {
							<option
								value="<% $oevent->id %>"
							><% $oevent->name %></option>
%						}

					</select>

					</form>
				</span>
			</div>
<%perl>
		}

		unless ($format eq "return") {
			$m->print("</div>");
			$m->print("</div>");
		}
	}

</%perl>

