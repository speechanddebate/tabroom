<%args>
	$tourn
	$sweep_set
	$perms => undef
</%args>
<%init>

	my %tourn_settings = $tourn->all_settings();
	my $districts      = $tourn_settings{"nsda_district"};

	return unless $sweep_set && $sweep_set->id;

	my $dbh = Tab::DBI->db_Main();

	my %rules;
	my @sweep_rules = $sweep_set->rules;

	my %ok_rules = (
		novice_only        => 1,
		multiply_entrysize => 1,
		multiplier         => 1,
		skip_rounds        => 1,
		exclude_breakouts  => 1,
	);

	my %ignore_round;

	foreach my $rule (@sweep_rules) {
		if ($ok_rules{$rule->tag}) {
			$rules{$rule->tag} = $rule->value;
		}

		if ($rule->tag eq "ignore_round") {
			$rules{skip_rounds}{$rule->value}++;
			$ignore_round{$rule->value}++;
		}
	}

	my @events;
	foreach my $event ($sweep_set->events()) {
		next unless $event;
		push @events, $event;
	}

	my $type_limit;
	my $level_limit;

	foreach my $sweep_event ($sweep_set->sweep_events()) {

		next unless $sweep_event->event_type || $sweep_event->event_level;

		if ($sweep_event->event_type && $sweep_event->event_type ne "all") {
			$type_limit .= "," if $type_limit;
			$type_limit .= "'".$sweep_event->event_type."'";
		}

		if ($sweep_event->event_level && $sweep_event->event_level ne "all") {
			$level_limit .= "," if $level_limit;
			$level_limit .= "'".$sweep_event->event_level."'";
		}
	}

	my $limit;

	if ($type_limit) {
		$limit .= "and event.type in (".$type_limit.") ";
	}

	if ($level_limit) {
		$limit .= "and event.level in (".$level_limit.") ";
	}

	if ($limit) {
		Tab::Event->set_sql(by_type => "
			select event.*
			from event
			where event.tourn = ?
			$limit
		");

		my @levels = Tab::Event->search_by_type($tourn->id);
		push @events, @levels if @levels;
	}

	my %events = map {$_->id => $_} @events;
	return unless (keys %events);

	my %entries;

	my $student_sth = $dbh->prepare("
		select
			student.id, student.nsda, student.novice, entry.id entry, entry.event
		from student, entry_student, entry, event
		where event.tourn = ?
			and event.id = entry.event
			and entry.unconfirmed = 0
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			order by student.novice
	");

	$student_sth->execute($tourn->id);

	my $results = $student_sth->fetchall_hash();

	$student_sth->finish();

	foreach my $ref (@{$results}) {

		next unless $events{$ref->{event}};

		if ($ref->{"novice"}) {
			$entries{$ref->{'entry'}}{"novice"}++;
			$entries{$ref->{'entry'}}{"students"}{$ref->{"student"}}{"novice"}++;
		} else {
			$entries{$ref->{'entry'}}{"not_novice"}++;
			$entries{$ref->{'entry'}}{"students"}{$ref->{"student"}}{"not_novice"}++;
		}

		if ($ref->{"nsda"}) {
			$entries{$ref->{"entry"}}{"students"}{$ref->{"student"}}{"nsda"} = $ref->{"nsda"};
		}
	}

	my %event_count;

	my $entry_sth = $dbh->prepare("
		select entry.id, entry.code, entry.name,
			entry.event, event.abbr, event.type,
			entry.school,
			school.name as schoolname, chapter.state as state, chapter.nsda as nsda,
			district.id as districtid, district.name as districtname,
			region.id, region.name, region.code,
			student.id, student.first, student.middle, student.last,
			studentschool.id, studentschool.name
		from (entry, event)
			left join school on entry.school  = school.id
			left join chapter on chapter.id   = school.chapter
			left join district on district.id = school.district
			left join region on region.id = school.region
			left join entry_student es on es.entry = entry.id
			left join student on student.id = es.student

			left join chapter studentchapter
				on studentchapter.id = student.chapter
				and studentchapter.id != school.chapter

			left join school studentschool
				on studentschool.tourn = event.tourn
				and studentschool.chapter = studentchapter.id

		where entry.event = event.id
			and event.tourn  = ?
			and entry.unconfirmed = 0
			and entry.active

			and not exists (
				select entry_setting.id
				from entry_setting
				where entry_setting.entry = entry.id
				and entry_setting.tag = 'exclude_from_sweeps'
				and entry_setting.value > 0
			)
		order by entry.code
	");

    $entry_sth->execute($tourn->id);

    while (
		my (
			$entry_id, $code, $name,
			$event, $event_abbr, $event_type,
			$school, $schoolname,
			$state, $nsda,
			$districtid, $districtname,
			$region_id, $region_name, $region_code,
			$student_id, $student_first, $student_middle, $student_last,
			$studentschool_id, $studentschool_name
		) = $entry_sth->fetchrow_array()
	) {

		next unless $events{$event};

		next if $rules{novice_only} && $entries{$entry_id}{"not_novice"};

		unless ($entries{$entry_id}{"code"}) {

			$entries{$entry_id}{"code"} = $code;
			$entries{$entry_id}{"name"} = $name;
			$entries{$entry_id}{"event"} = $event;
			$entries{$entry_id}{"event_abbr"} = $event_abbr;
			$entries{$entry_id}{"event_type"} = $event_type;

			$entries{$entry_id}{"school"}     = $school;
			$entries{$entry_id}{"schoolname"} = $schoolname;

			$entries{$entry_id}{"state"}      = $state;
			$entries{$entry_id}{"regionname"} = $region_name;
			$entries{$entry_id}{"regioncode"} = $region_code;
			$entries{$entry_id}{"regionid"}   = $region_id;

			$entries{$entry_id}{"districtid"} = $districtid;
			$entries{$entry_id}{"nsda_school_id"} = $nsda;
			$entries{$entry_id}{"districtname"} = $districtname;
			$event_count{$event}++;
		}

		if ($studentschool_id) {
			$entries{$entry_id}{"hybrid"} = $studentschool_id;
			$entries{$entry_id}{"hybrid_name"} = $studentschool_name;
		}

		unless ($entries{$entry_id}{students}{$student_id}) {
			$entries{$entry_id}{student_count}++;

			$entries{$entry_id}{students}{$student_id}{"first"}   = $student_first;
			$entries{$entry_id}{students}{$student_id}{"middle"}  = $student_middle;
			$entries{$entry_id}{students}{$student_id}{"last"}    = $student_last;
			$entries{$entry_id}{students}{$student_id}{"full"}    = $student_first." ";
			$entries{$entry_id}{students}{$student_id}{"full"}   .= $student_middle." " if $student_middle;
			$entries{$entry_id}{students}{$student_id}{"full"}   .= $student_last." " if $student_last;
		}
	}

	foreach my $event_id (keys %events) {
		my $event = $events{$event_id};

		my @manual_sweeps = $m->comp(
			"/funclib/event_entry_settings.mas",
				event => $event,
				tag   => "sweeps"
			);

		foreach my $manual (@manual_sweeps) {
			$entries{$manual->entry->id}{manual} = $manual->value;
		}
	}

	my $skip_rounds;

	foreach my $key (keys %{$rules{skip_rounds}}) {
		$skip_rounds .= "," if $skip_rounds;
		$skip_rounds .= $key;
	}

	my $skip_limit = " and round.id NOT IN ( $skip_rounds ) ";

	my $sth = $dbh->prepare("
		select score.id, entry.id, event.id,
			round.type, round.id, round.name,
			score.tag, score.value,
			panel.id, breakout.value

		from (score, ballot, panel, round, event, entry)
			left join student on student.id = score.student
			left join round_setting breakout
				on breakout.round = round.id
				and breakout.tag = 'use_for_breakout'

		where 1=1
			and score.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and event.tourn = ?
			and ballot.entry = entry.id
			and entry.active = 1

			$skip_limit

		and not exists (
			select entry_setting.id
			from entry_setting
			where entry_setting.entry = entry.id
			and entry_setting.tag = 'exclude_from_sweeps'
			and entry_setting.value > 0
		)

		group by score.id
		order by event.id, round.name
	");

    $sth->execute($tourn->id);

	my %scores;

    while (
		my (
			$score_id, $entry, $event,
			$round_type, $round_id, $round_name,
			$tag, $value, $panel,
			$breakout
		) = $sth->fetchrow_array()
	) {

		next if $round_type eq "runoff";
		next unless $events{$event};
		next if $rules{skip_rounds}{$round_id};
		next if $breakout && $rules{"exclude_breakouts"};

		$entries{$entry}{"rounds"}{$round_id}++;
		$entries{$entry}{"scores"}{$score_id}++;
		$entries{$entry}{"scoretag"}{$tag}{$score_id}++;
		$entries{$entry}{"round_panel"}{$round_id} = $panel;

		$scores{$score_id}{"tag"} = $tag;

		$round_type = "prelim"
			if $round_type eq "preset"
			|| $round_type eq "highhigh"
			|| $round_type eq "highlow";

		$scores{$score_id}{"round_type"} = $round_type;
		$scores{$score_id}{"round_name"} = $round_name;

		$scores{$score_id}{"entry"}    = $entry;
		$scores{$score_id}{"value"}    = $value;
		$scores{$score_id}{"panel_id"} = $panel;
		$scores{$score_id}{"round_id"} = $round_id;

		$entries{$entry}{"present_type"}{$round_type}++;
		$entries{$entry}{"present_name"}{$round_name}++;

	}

	$sth->finish();

	my %entry_round;

	if ($tourn_settings{nsda_nats}) {

		$sth = $dbh->prepare("
			select entry.id, panel.id, round.id, round.name, round.type
			from (entry, school, ballot, panel, round)

			where school.tourn = ?
			and school.id = entry.school
			and entry.unconfirmed = 0
			and not exists (
				select dq.id
				from entry_setting dq
				where dq.entry = entry.id
				and dq.tag = 'dq'
			)
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
		");

		$sth->execute($tourn->id);

		while (
			my (
				$entry_id, $panel_id, $round_id, $round_name, $round_type
			) = $sth->fetchrow_array()
		) {

			next if $rules{skip_rounds}{$round_id};
			$entry_round{$entry_id}{$round_id}{"name"} = $round_name;
			$entry_round{$entry_id}{$round_id}{"type"} = $round_type;
			$entry_round{$entry_id}{$round_id}{"panel"} = $panel_id
		}
	}

	my $bye_sth = $dbh->prepare("
		select entry.id, event.id,
			round.type, round.id, round.name,
			panel.id, panel.bye, ballot.bye,
			score.value
		from (panel, round, event, entry, ballot)
			left join score on score.ballot = ballot.id and score.tag = 'winloss'

		where ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and event.tourn = ?
			and ballot.entry = entry.id
			and entry.active = 1
			and (ballot.bye = 1 or panel.bye = 1)

		and not exists (
			select entry_setting.id
			from entry_setting
			where entry_setting.entry = entry.id
			and entry_setting.tag = 'exclude_from_sweeps'
			and entry_setting.value > 0
		)

		group by ballot.id
		order by event.id, round.name
	");

    $bye_sth->execute($tourn->id);

    while (
		my (
			$entry_id, $event,
			$round_type, $round_id, $round_name,
			$panel, $panel_bye, $ballot_bye,
			$advanced
		) = $bye_sth->fetchrow_array()
	) {

		next if $rules{skip_rounds}{$round_id};
		next unless $events{$event};
		next unless $panel_bye || $ballot_bye;

		$entries{$entry_id}{"byes"}++;
		$entries{$entry_id}{"round_bye"}{$round_id}++;
		$entries{$entry_id}{"advanced"}{$round_id} = $advanced;

		$round_type = "prelim"
			if $round_type eq "preset"
			|| $round_type eq "highhigh"
			|| $round_type eq "highlow";

		$entries{$entry_id}{"bye_type"}{$round_type}++;
		$entries{$entry_id}{"round_panel"}{$round_id} = $panel;
	}

	$bye_sth->finish();

	my %seeding;
	my %by_seed;
	my $minimum;

	foreach my $rule (@sweep_rules) {

		my $rule_tag    = $rule->tag;
		my $rule_id     = $rule->id;
		my $count       = $rule->count;
		my $count_round = $rule->count_round;
		my $points      = $rule->value;
		my $place       = $rule->place;
		my $truncate    = $rule->truncate;
		my $rev_min     = $rule->rev_min;

		my $rule_protocol = $rule->protocol;

		unless ($rule_protocol > 0) {
			undef $rule_protocol;
		}

		my %target_rounds;
		my %target_seeds;

		foreach my $event_id (keys %events) {
			my $event = $events{$event_id};
			my @target_rounds = &target_rounds($event, $rule, \%rules);
			%{$target_rounds{$event_id}} = map {$_->id => $_} @target_rounds;

			@target_rounds = &target_seeds($event, $rule, \%rules);
			%{$target_seeds{$event_id}} = map {$_->id => $_} @target_rounds;
		}

		if ($rule_tag eq "points_per") {

			foreach my $entry_id (keys %entries) {

				my %panels;
				my %used;
				my $event_id = $entries{$entry_id}{"event"};

				if ($tourn_settings{nsda_nats}) {
					foreach my $round_id (keys %{$entry_round{$entry_id}}) {
						next unless $target_rounds{$event_id}{$round_id};
						$panels{$entry_round{$entry_id}{$round_id}{"panel"}}++;
					}
				} else {

					SCORE:
					foreach my $score_id (keys %{$entries{$entry_id}{"scores"}}) {
						my $round_id = $scores{$score_id}{"round_id"};
						next unless $target_rounds{$event_id}{$round_id};
						$panels{$scores{$score_id}{"panel_id"}}++;
						$used{$round_id}++;
					}

					BYE:
					foreach my $round_id (keys %{$entries{$entry_id}{"round_bye"}}) {
						next unless $target_rounds{$event_id}{$round_id};
						next if $used{$round_id};
						$panels{"bye-".$round_id}++;
					}
				}

				$entries{$entry_id}{$rule_id}+= (scalar(keys %panels) * $points);
			}
		}

		if ($rule_tag eq "points_per_rank" || $rule_tag eq "points_per_rank_above") {

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scoretag"}{"rank"}}) {

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};

					if ($rule_tag eq "points_per_rank") {
						next SCORE if $scores{$score_id}{"value"} != $place;
					} elsif ($rule_tag eq "points_per_rank_above") {
						next SCORE if $scores{$score_id}{"value"} > $place;
					}

					$entries{$entry_id}{$rule_id} += $points;
				}
			}
		}

		if ($rule_tag eq "rev_per_rank") {

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scoretag"}{"rank"}}) {

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};

					my $local_points;
					$local_points = $place - $scores{$score_id}{"value"};
					$local_points = $rev_min if $local_points < $rev_min;
					$entries{$entry_id}{$rule_id} += $local_points;
				}
			}
		}

		if ($rule_tag eq "cume" || $rule_tag eq "cume_above") {

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};
				next unless $events{$event_id};
				my $total;

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scoretag"}{"rank"}}) {
					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};

					$scores{$score_id}{"value"} = $truncate if
						$scores{$score_id}{"value"} > $truncate
						&& $truncate > 0;

					$total += $scores{$score_id}{"value"};
				}

				next unless $total > 0;

				if ($rule_tag eq "cume") {
					$entries{$entry_id}{$rule_id} += $points if $total == $place;
				} elsif ($rule_tag eq "cume_above") {
					$entries{$entry_id}{$rule_id} += $points unless $total > $place;
				}
			}
		}

		if ($rule_tag eq "points_per_comp_rank" || $rule_tag eq "points_per_comp_rank_above") {

			foreach my $event_id (keys %events) {

				my $event = $events{$event_id};

				foreach my $round_id (keys (%{$target_rounds{$event_id}})) {

					my $round = $target_rounds{$event_id}{$round_id};

					my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
						= $m->comp("/tabbing/results/order_entries.mas",
							round         => $round,
							perms         => $perms,
							composite_set => $rule_protocol
					);

					my %panel_place;

					foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

						foreach my $entry_id (@{${$entries_ref}{$key}}) {

							my $panel = $entries{$entry_id}{"round_panel"}{$round->id};
							$panel_place{$panel}++;

							if ($rule_tag eq "points_per_comp_rank") {
								next if $panel_place{$panel} != $place;
							} elsif ($rule_tag eq "points_per_comp_rank_above") {
								next if $panel_place{$panel} > $place;
							}

							$entries{$entry_id}{$rule_id} += $points;
						}
					}
				}
			}
		}

		#Composite ranks (ranks in a round)

		if ($rule_tag eq "rev_per_comp_rank") {

			foreach my $event_id (keys %events) {

				my $event = $events{$event_id};

				foreach my $round_id (keys %{$target_rounds{$event_id}}) {

					my $round = $target_rounds{$event_id}{$round_id};

					my @results = $m->comp(
						"/tabbing/results/order_entries.mas",
							round        => $round,
							perms        => $perms,
							protocol     => $rule_protocol,
							section_rank => 1
					);

					my $entries_ref = pop @results;
					my %panel_place;

					foreach my $entry_id (sort {$a <=> $b} keys %{$entries_ref->{"section_rank"}}) {

						my $rank = $entries_ref->{"section_rank"}{$entry_id};
						next unless $rank;

						my $score = $place - $rank;
						$score = $rev_min if $score < $rev_min;
						$entries{$entry_id}{$rule_id} += $score;

					}
				}
			}
		}

		# Formulas based on seeding location

		my $seed_sth = $dbh->prepare("
			select entry.id, result.rank
			from entry, result, result_set
			where (
				result_set.label = 'Final Places'
				or result_set.label = 'District Qualifiers'
			)
				and result_set.event = ?
				and result_set.id = result.result_set
				and result.entry = entry.id
			group by result.id
		");

		if (
			$rule_tag eq "seed"
			|| $rule_tag eq "seed_above"
			|| $rule_tag eq "seed_above_percent"
			|| $rule_tag eq "rev_seed"
			|| $rule_tag eq "nsda_place"
		) {

			EVENT:
			foreach my $event_id (keys %events) {

				my $event = $events{$event_id};
				next unless $event;

				my $tag = "default";
				$tag = $rule_protocol->id if $rule_protocol > 0;

				my $field = $event_count{$event};
				my $cap;

				if ($rule_tag eq "seed_above_percent") {
					$cap = POSIX::ceil($field * $place / 100);
				}

				if ($tag == "0" && (scalar (keys %{$seeding{$event_id}{$tag}}) == 0)) {

					$seed_sth->execute($event_id);

					while (
						my (
							$entry_id, $seed
						) = $seed_sth->fetchrow_array()
					) {

						next unless $entries{$entry_id};
						$seeding{$event_id}{$tag}{$entry_id} = $seed;
						$by_seed{$event_id}{$tag}{$seed}{$entry_id}++;
					}
				}

				unless (keys %{$seeding{$event_id}{$tag}}) {

					if ($tourn_settings{"nsda_nats"}) {

						my $result_entries = $m->comp(
							"/tabbing/report/nsda/final_placement.mas",
								event          => $event,
								tourn          => $tourn,
								perms          => $perms,
								tourn_settings => \%tourn_settings
						);

						foreach my $entry_id (keys %{$result_entries}) {
							my $place = $result_entries->{$entry_id}{"place"};
							$seeding{$event_id}{$tag}{$entry_id} = $place;
							$by_seed{$event_id}{$tag}{$place}{$entry_id}++;
						}

					} elsif ($districts) {

						my %result_entries = $m->comp("/tabbing/results/nsda_qualifiers.mhtml",
							event_id       => $event_id,
							format         => "return",
							sweeps         => 1,
							perms          => $perms,
							tourn          => $tourn,
							tourn_settings => \%tourn_settings
						);

						foreach my $entry_id (keys %result_entries) {
							my $place = $result_entries{$entry_id}{"place"};
							$seeding{$event_id}{$tag}{$entry_id} = $place;
							$by_seed{$event_id}{$tag}{$place}{$entry_id}++;
						}

					} else {

						my $current_seed;

						ROUND:
						foreach my $round_id (
							sort {
								$target_seeds{$event_id}{$b}->name <=> $target_seeds{$event_id}{$a}->name
							} keys %{$target_seeds{$event_id}}
						) {

							my $round = $target_seeds{$event_id}{$round_id};

							my (@results) = $m->comp(
								"/tabbing/results/order_entries.mas",
								round    => $round,
								perms    => $perms,
								protocol => $rule_protocol
							);

							my $fullref = pop @results if @results;
							my $counter;

							foreach my $order (sort {$a <=> $b} keys %{$fullref->{"by_place"}}) {

								foreach my $entry_id (@{$fullref->{"by_place"}{$order}}) {

									next if $seeding{$event_id}{$tag}{$entry_id};

									my $seed = $order + $current_seed;
									$seeding{$event_id}{$tag}{$entry_id} = $seed;
									$by_seed{$event_id}{$tag}{$seed}{$entry_id}++;
									$counter++;
								}
							}

							$current_seed = scalar(keys %{$seeding{$event_id}{$tag}});
						}
					}
				}

				if ($rule_tag eq "seed") {

					foreach my $entry_id (sort {$a <=> $b} keys %{$by_seed{$event_id}{$tag}{$place}}) {
						$entries{$entry_id}{$rule_id} += $points;
					}

				} elsif ($rule_tag eq "seed_above") {

					foreach my $seed (sort {$a <=> $b} keys %{$by_seed{$event_id}{$tag}}) {

						next if $seed > $place;

						foreach my $entry_id (keys %{$by_seed{$event_id}{$tag}{$seed}}) {
							$entries{$entry_id}{$rule_id} += $points;
						}
					}

				} elsif ($rule_tag eq "seed_above_percent") {

					my $counter;

					foreach my $seed (sort {$a <=> $b} keys %{$by_seed{$event_id}{$tag}}) {

						foreach my $entry_id (keys %{$by_seed{$event_id}{$tag}{$seed}}) {

							$entries{$entry_id}{$rule_id} += $points;
							$counter++;
						}
						last if $counter > $cap;
					}

				} elsif ($rule_tag eq "rev_seed") {

					my $event_place = $place;

					unless ($event_place) {
						$event_place = $event_count{$event_id} + 1;
					}

					foreach my $seed (sort {$a <=> $b} keys %{$by_seed{$event_id}{$tag}}) {

						my $score = $event_place - $seed;
						$score = $rev_min if $score < $rev_min;

						ENTRY:
						foreach my $entry_id (keys %{$by_seed{$event_id}{$tag}{$seed}}) {

							if ($count eq "all") {

							} elsif ($count eq "specific" || $count eq "before_end") {
								next ENTRY unless $entries{$entry_id}{"present_name"}{$count};
							} else {
								next ENTRY unless $entries{$entry_id}{"present_type"}{$count};
							}

							$entries{$entry_id}{$rule_id} += $score;
						}
					}

				} elsif ($rule_tag eq "nsda_place") {

					my $event_type = $event->type;
					my $max_entry = $event->setting("max_entry") || 1;
					my $baseline_score = 10;

					$baseline_score-- if $event_type eq "speech";
					$baseline_score-- if $event_type eq "congress";
					my $field_size = $event_count{$event_id};

					unless ($event_type eq "congress") {
						if ($max_entry > 1) {
							$baseline_score-- if $field_size < 50;
							$baseline_score-- if $field_size < 30;
						} else {
							$baseline_score-- if $field_size < 58;
							$baseline_score-- if $field_size < 38;
						}
					}

					foreach my $entry_id (
						sort {
							$seeding{$event_id}{$tag}{$a}
							<=>
							$seeding{$event_id}{$tag}{$b}
						} keys %{$seeding{$event_id}{$tag}}
					) {

						next unless $seeding{$event_id}{$tag}{$entry_id} > 0;
						next unless $seeding{$event_id}{$tag}{$entry_id} < 7;

						my $local_points = 0;
						$local_points = $baseline_score - $seeding{$event_id}{$tag}{$entry_id};
						$entries{$entry_id}{$rule_id} += $local_points;
					}
				}
			}
		}

		if ($rule_tag eq "prorated_ballots") {

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};

				my %entry_rounds;

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scoretag"}{"winloss"}}) {

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};
					next unless $scores{$score_id}{"tag"} eq "winloss";

					if ($scores{$score_id}{"value"} == 1) {
						$entry_rounds{$round_id}{"win"}++;
					} else {
						$entry_rounds{$round_id}{"loss"}++;
					}
				}

				foreach my $round_id (keys %entry_rounds) {

					if ( ($entry_rounds{$round_id}{"win"} + $entry_rounds{$round_id}{"loss"}) == 1) {
						$entries{$entry_id}{$rule_id} += ($points * $entry_rounds{$round_id}{"win"});
					} else {

						if ($entry_rounds{$round_id}{"loss"} == 0) {

							$entries{$entry_id}{$rule_id} += ($points * 3);

						} elsif ($entry_rounds{$round_id}{"win"} == 0) {

						} elsif ($entry_rounds{$round_id}{"win"} > $entry_rounds{$round_id}{"loss"}) {

							$entries{$entry_id}{$rule_id} += ($points * 2);

						} elsif ($entry_rounds{$round_id}{"win"} < $entry_rounds{$round_id}{"loss"}) {

							$entries{$entry_id}{$rule_id} += $points;
						}
					}
				}
			}
		}

		if ($rule_tag eq "coachover_advance") {
			foreach my $entry_id (keys %entries) {
				my $event_id = $entries{$entry_id}{"event"};

				foreach my $round_id (keys %{$entries{$entry_id}{"round_bye"}}) {
					next unless $target_rounds{$event_id}{$round_id};
					next unless $entries{$entry_id}{"advanced"}{$round_id};
					$entries{$entry_id}{$rule_id} += $points;
				}
			}
		}

		if ($rule_tag eq "ballot_win" || $rule_tag eq "ballot_loss" ) {

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scoretag"}{"winloss"}}) {

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};
					next unless $scores{$score_id}{"tag"} eq "winloss";

					if ($rule_tag eq "ballot_win" && ($scores{$score_id}{"value"} == 1)) {
						$entries{$entry_id}{$rule_id} += $points;
					}

					if ($rule_tag eq "ballot_loss" && ($scores{$score_id}{"value"} == 0)) {
						$entries{$entry_id}{$rule_id} += $points;
					}
				}
			}
		}

		if ($rule_tag eq "round_win" || $rule_tag eq "round_loss" ) {

			my %wins;
			my %totals;

			foreach my $entry_id (keys %entries) {

				my $event_id = $entries{$entry_id}{"event"};
				next unless $events{$event_id};

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scores"}}) {

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};
					next unless $scores{$score_id}{"tag"} eq "winloss";

					$totals{$entry_id}{$round_id}++;

					if ($rule_tag eq "round_win" && ($scores{$score_id}{"value"} == 1)) {
						$wins{$entry_id}{$round_id}++;
					}

					if ($rule_tag eq "round_loss" && ($scores{$score_id}{"value"} == 0)) {
						$wins{$entry_id}{$round_id}++;
					}
				}
			}

			foreach my $entry_id (keys %entries) {
				foreach my $round_id (keys %{$wins{$entry_id}}) {
					if ($wins{$entry_id}{$round_id} >= ($totals{$entry_id}{$round_id} / 2)) {
						$entries{$entry_id}{$rule_id} += $points;
					}
				}
			}
		}

		if ($rule_tag eq "round_bye") {

			foreach my $entry_id (keys %entries) {
				my $event_id = $entries{$entry_id}{"event"};

				my %done;
				foreach my $score_id (keys %{$entries{$entry_id}{"scores"}}) {
					$done{$scores{$score_id}{"round_id"}}++;
				}

				foreach my $round_id (keys %{$entries{$entry_id}{"round_bye"}}) {
					next unless $target_rounds{$event_id}{$round_id};
					next if $done{$round_id};
					$entries{$entry_id}{$rule_id} += $points;
				}
			}
		}

		if ($rule_tag eq "points_per_po_round") {

			foreach my $entry_id (keys %entries) {

				my %was_po;
				my $event_id = $entries{$entry_id}{"event"};

				SCORE:
				foreach my $score_id (keys %{$entries{$entry_id}{"scores"}}) {
					next unless $scores{$score_id}{"tag"} eq "po";

					my $round_id = $scores{$score_id}{"round_id"};
					next unless $target_rounds{$event_id}{$round_id};
					$was_po{$round_id}++;
				}

				$entries{$entry_id}{$rule_id} += ($points * (scalar (keys %was_po)));
			}
		}

		if ($rule_tag eq "manual") {
			foreach my $entry_id (keys %entries) {
				$entries{$entry_id}{$rule_id} += $entries{$entry_id}{"manual"};
			}
		}

		if ($rule_tag eq "minimum")  {
			$minimum = $rule_id;
			foreach my $entry_id (keys %entries) {
				if (keys %{$entries{$entry_id}{"scoretag"}}) {
					$entries{$entry_id}{"minimum"} = $points;
				}
			}
		}

		unless ($rules{$rule_id}{"tag"}) {

			$rules{$rule_id}{"short_tag"} = ucfirst($rule_tag);
			$rules{$rule_id}{"short_tag"} =~ s/points_per_po_round/PO/g;
			$rules{$rule_id}{"short_tag"} =~ s/points_per/Rnd/g;
			$rules{$rule_id}{"short_tag"} =~ s/place_above/Plc/g;
			$rules{$rule_id}{"short_tag"} =~ s/_/ /g;
			$rules{$rule_id}{"short_tag"} .= "  ".Lingua::EN::Numbers::Ordinate::ordinate($place) if $place;

			$rules{$rule_id}{"short_tag"} =~ s/Round win/Win/g;
			$rules{$rule_id}{"short_tag"} =~ s/Round loss/Loss/g;
			$rules{$rule_id}{"short_tag"} =~ s/Ballot win/BalWin/g;
			$rules{$rule_id}{"short_tag"} =~ s/Ballot loss/BalLoss/g;

			$rules{$rule_id}{"tag"} = ucfirst($rule_tag);
			$rules{$rule_id}{"tag"} =~ s/points_per_po_round/Elected PO/g;
			$rules{$rule_id}{"tag"} =~ s/points_per/In a round/g;
			$rules{$rule_id}{"tag"} =~ s/place_above/Placed above/g;
			$rules{$rule_id}{"tag"} =~ s/_/ /g;
			$rules{$rule_id}{"tag"} .= "  ".Lingua::EN::Numbers::Ordinate::ordinate($place) if $place;

			if ($count eq "last_prelims") {

				$rules{$rule_id}{"tag"} .= " in the last ".$count_round." prelims";
				$rules{$rule_id}{"short_tag"} .= " last ".$count_round." prelims";
				$rules{$rule_id}{"short_tag"} =~ s/round//g;

			} elsif ($count && $count ne "all") {

				$rules{$rule_id}{"tag"} .= " in ".ucfirst($count)."s";
				$rules{$rule_id}{"tag"} =~ s/Debate round//g;

				$rules{$rule_id}{"short_tag"} .= " in ".ucfirst($count)."s";
				$rules{$rule_id}{"short_tag"} =~ s/round//g;
				$rules{$rule_id}{"short_tag"} =~ s/Minimum/Min/g;
			}
		}

		foreach my $entry_id (keys %entries) {
			$entries{$entry_id}{"points"} += $entries{$entry_id}{$rule_id};
		}
	}

	foreach my $entry_id (keys %entries) {

		if ($minimum) {
			if ($entries{$entry_id}{"points"} < $entries{$entry_id}{"minimum"}) {
				$entries{$entry_id}{"points"} = $entries{$entry_id}{"minimum"};
				$entries{$entry_id}{$minimum} = $entries{$entry_id}{"minimum"};
			}
		}

		if ($rules{multiply_entrysize} > 0) {
			$entries{$entry_id}{"points"} = $entries{$entry_id}{"student_count"} * $entries{$entry_id}{"points"};
		}

		if ($rules{multiplier} > 0) {
			$entries{$entry_id}{"points"} = $rules{multiplier} * $entries{$entry_id}{"points"};
		}

		next if $ARGS{'all_entries'};
		next if $entries{$entry_id}{"points"} > 0;
		delete $entries{$entry_id};
	}

	return \%rules, \%entries;

	sub target_rounds {

		my @targets;
		my ($event, $rule, $rules) = @_;

		my $count = $rule->count;
		my $count_round = $rule->count_round;

		if ($count eq "all") {
			foreach my $round ($event->rounds()) {
				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}
		} elsif ($count eq "specific") {
			foreach my $round ($event->rounds(name => $count_round)) {
				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}
		} elsif ($count eq "last_prelims" && ($count_round > 0)) {

			my @rounds = sort {$a->name <=> $b->name} $event->prelims();

			while ($count_round < scalar @rounds) {
				my $trash = shift @rounds;
			}

			push @targets, @rounds;

		} elsif ($count eq "before_end") {

			my @rounds = sort {$b->name <=> $a->name} $event->rounds();
			my $target_round = shift @rounds;

			while ($count_round > 0) {

				if (@rounds) {
					$target_round = shift @rounds;
				} else {
					undef $target_round;
				}
				$count_round--;
			}

			if ($target_round) {
				push @targets, $target_round;
			}

		} else {

			foreach my $round ($event->rounds()) {
				if ($count eq "prelim") {
					next unless (
						$round->type eq "prelim"
						|| $round->type eq "highhigh"
						|| $round->type eq "highlow"
					);

				} else {
					next unless $round->type eq $count;
				}

				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}
		}

		return @targets;
	}

	sub target_seeds {

		my ($event, $rule, $rules) = @_;
		my $count = $rule->count;
		my $count_round = $rule->count_round;

		my @targets;

		if ($count eq "all" || (not defined $count)) {

			foreach my $round (
				sort {$b->name <=> $a->name}
				$event->rounds()
			) {
				next if $round->type eq "runoff";
				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}

		} elsif ($count eq "specific") {

			foreach my $round (
				sort {$b->name <=> $a->name}
				$event->rounds(name => $count_round)
			) {
				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}

		} else {

			foreach my $round (
				sort {$b->name <=> $a->name}
				$event->rounds()
			) {

				if ($count eq "prelim") {
					next unless (
						$round->type eq "prelim"
						|| $round->type eq "highhigh"
						|| $round->type eq "highlow"
					);

				} else {
					next unless $round->type eq $count;
				}

				next if $rules->{skip_rounds}{$round};
				push @targets, $round;
			}
		}

		my @clean_rounds;

		foreach my $round (@targets) {
			push @clean_rounds, $round;
			last if $round->type eq "prelim";
			last if $round->type eq "highhigh";
			last if $round->type eq "highlow";
		}

		return @clean_rounds;
	}

</%init>
