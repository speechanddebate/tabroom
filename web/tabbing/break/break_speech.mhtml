<%args>
	$tourn
	$tourn_settings
	$from_id         => undef
	$into_id         => undef
	$label           => undef
	$panels          => undef
	$start           => undef
	$end             => undef
	$type            => undef
	$breakout        => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $from = Tab::Round->retrieve($from_id) if $from_id;
	my $into = Tab::Round->retrieve($into_id) if $into_id;

	unless ($from)  {
		$m->print("You must specify which round you're advancing students from");
		$m->abort;
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my $previous_id;
	my $event = $from->event;

	if ($from && $into && ($from->name != ($into->name -1))) {
		my $previous = $event->rounds( name => ($into->name -1) )->first;
		$previous_id = $previous->id if $previous;
	} else {
		$previous_id = $from->id;
	}

	my %event_settings = $event->all_settings;
	my $method = $event_settings{"elim_method"};

	my $ncfl++ if $tourn->setting("ncfl");
	$ncfl++ if $event_settings{"region_avoid"};

	my $protocol = eval { return Tab::Protocol->retrieve($ARGS{protocol_id}); };
	my $site = eval { return Tab::Site->retrieve($ARGS{site_id}); };
	my $timeslot = eval { return Tab::Timeslot->retrieve($ARGS{timeslot_id}); };

	if ($into) {

		my $err = "You must specify the number of sections to be used  " unless $panels;
		$err .= "You must specify the starting position of whom to break  " unless $start;
		$err .= "You must specify the ending position of whom to break  " unless $end;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from->id."&preset_id=".$into->id."&err=".$err) if $err;

		$into->protocol($protocol) if $protocol;
		$into->timeslot($timeslot) if $timeslot;
		$into->label($label) if $label;
		$into->site($site) if $site;
		$into->type($type) if $type;
		$into->update;

	} else {

		my $err = " Missing timeslot " 		unless $timeslot;
		$err .= " Missing site " 			unless $site;
		$err .= " Missing starting entry " 	unless $start;
		$err .= " Missing ending entry " 	unless $end;
		$err .= " Missing tiebreaker set " 	unless $protocol;
		$err .= " Missing round type " 		unless $type;
		$err .= " Missing number of sections " unless $panels;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from_id."&preset_id=".$into_id."&err=".$err) if $err;

		my $judges = 1;
		$judges = 3 if $type eq "elim";
		$judges = 3 if $type eq "final";
		$judges = 5 if $type eq "final" && $ncfl;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from->id."&err=".$err) if $err;

		$into = Tab::Round->create({
			event      => $event->id,
			timeslot   => $timeslot->id,
			start_time => $timeslot->start,
			protocol   => $protocol,
			label      => $label,
			type       => $type,
			paired_at  => $now,
		});

		$into->setting("num_judges", $judges);
		$into->setting('use_for_breakout', $breakout);

		$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);
	}

	my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) =
		$m->comp("/tabbing/results/order_entries.mas",
			round    => $from,
			breakout => $breakout
		);

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			entry.id,
			school.id,
			region.id,
			district.id,
			school.state

		from (entry, school, panel, ballot)
		left join region on region.id = school.region
		left join district on district.id = school.district

		where entry.event = ?
			and entry.active = 1
			and panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.school = school.id

			and not exists (
				select no_elims.id
				from entry_setting no_elims
				where no_elims.entry = entry.id
				and no_elims.tag = 'no_elims'
			)
		group by entry.id
	");

	my %entries;
	$sth->execute($event->id, $from->id);

	while (
		my (
			$entry_id, $school_id, $region_id, $district_id, $school_state
		) = $sth->fetchrow_array()
	) {
		$entries{$entry_id}{"school"}   = $school_id;
		$entries{$entry_id}{"region"}   = $region_id;
		$entries{$entry_id}{"district"} = $district_id;
		$entries{$entry_id}{"state"}    = $school_state;
	}

	$sth->finish();
	$entries{settings}{school_score} = 100;

	if ($tourn_settings->{nsda_nats}) {

		$method = "nsda_snake";
		$entries{settings}{school_score} = 10000000;

		if ($from->name < 9) {
			$entries{settings}{region_score} = 1000000;
		} else {
			$entries{settings}{region_score}   = 0;
		}

		$entries{settings}{top_seed_score} = 100000;
		$entries{settings}{average_score}  = 1000;
		$entries{settings}{last_hit_score} = 1000;
		$entries{settings}{hit_score}      = 10;

		$sth = $dbh->prepare("
			select
				entry.id, group_concat(other.entry SEPARATOR ','),
				round.name, round.id,
				panel.letter

			from entry, ballot, ballot other, panel, round

			where entry.event = ?
				and entry.active = 1
				and entry.id = ballot.entry
				and ballot.panel = other.panel
				and ballot.panel = panel.id
				and panel.round = round.id
				and ballot.entry != other.entry
			group by ballot.id
		");

		$sth->execute($event->id);

		while (
			my (
				$entry_id, $opponents, $round_name, $round_id,
				$panel_letter
			) = $sth->fetchrow_array()
		) {

			next unless $entries{$entry_id};

			foreach my $other_id (split(/\,/, $opponents)) {
				$entries{$entry_id}{"hits"}{$other_id}++;
			}

			if ($previous_id && $round_id == $previous_id) {
				foreach my $other_id (split(/\,/, $opponents)) {
					$entries{$entry_id}{"last_hit"}{$other_id}++;
					$entries{$entry_id}{"last_section"} = $panel_letter;
				}
			}
		}
	}

	my $count;
	my @breaks;

	foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {

		foreach my $entry_id (@{${$entries_ref}{$seed}}) {
			next unless $entries{$entry_id};

			$count++;
			next if $count > $end;
			next if $count < $start;

			push @breaks, $entry_id;
			$entries{$entry_id}{"seed"} = $seed;
		}
	}

	if ($ncfl && $from->type eq "elim") {

		$m->comp("ncfl_snake.mhtml",
			breakref   => \@breaks,
			into       => $into,
			type       => $type,
			site       => $site,
			num_panels => $panels,
			return     => $ARGS{'return'}
		);

		return if $ARGS{"return"};
	}

	my $total_strength;
	my $count_strength;

	foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {

		foreach my $entry_id (@{${$entries_ref}{$seed}}) {

			next unless $entries{$entry_id};
			my $notfirst;

			foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

				next if $seed > $end;

				next if $notfirst++;
				$entries{$entry_id}{"first_tb"} = ${$tbs_ref}{$entry_id}{$key};

				$total_strength += ${$tbs_ref}{$entry_id}{$key};
				$count_strength++;

				if ($seed <= $panels) {
					$entries{$entry_id}{"top_seed"} = 1;
				}
			}
		}
	}

	our $average_strength;
	if ($count_strength > 0) {
		$average_strength = $total_strength / $count_strength;
	}

	$entries{settings}{average_strength} = $average_strength;

	my @existing_panels = $into->panels;
	my @use_panels;

    my $letter = 1;
	$letter = "A" if $event_settings{"panel_labels"} eq "letters";

	foreach my $count (1 .. $panels) {

		my $existing = shift @existing_panels if @existing_panels;

		if ($existing) {

			push @use_panels, $existing;

		} else {

			my $new = Tab::Panel->create({
				flight => 1,
				round  => $into->id,
				letter => $letter,
			});

			push @use_panels, $new;
		}
		$letter++;
	}

	foreach my $ep (@existing_panels) {
		$ep->delete();   #KILL THE SPARES
	}

	my @snake_panels = @use_panels;
	my %panel_entries = ();

	$count = 1;

	if (scalar @use_panels == 1) {

		@{$panel_entries{$use_panels[0]->id}} = @breaks;

	} else {

		foreach my $entry_id (@breaks) {

			if ($method eq "ky_semis_snake") {

				unless (@snake_panels) {
					@use_panels = reverse (@use_panels) unless $count % 3;
					@snake_panels = @use_panels unless @snake_panels;
					$count++;
				}

			} else {

				unless (@snake_panels) {
					@snake_panels = reverse (@use_panels) if $count % 2;
					@snake_panels = @use_panels unless @snake_panels;
					$count++;
				}

			}

			my $panel = shift @snake_panels;
			push @{$panel_entries{$panel->id}}, $entry_id if $panel;

		}

		if ($method eq "snake_school"
			|| $method eq "snake_school_rank"
			|| $method eq "snake_school_prelim_cume"
			|| $method eq "snake_school_overall_cume"
			|| $method eq "snake_school_force"
			|| $method eq "ky_semis_snake"
			|| $method eq "nsda_snake"
		) {

			foreach my $pass (1 .. 2) {

				foreach my $panel (sort @use_panels) {

					my $panel_id = $panel->id;
					my $initial_score = score_panel(\@{$panel_entries{$panel_id}}, \%entries);

					next unless $initial_score > 0;

					foreach my $entry_id (@{$panel_entries{$panel_id}}) {

						my @test = @{$panel_entries{$panel_id}};

						my $index = 0;
						$index++ until $test[$index] == $entry_id;
						splice(@test, $index, 1);

						my $test_score = score_panel(\@test, \%entries);

						if ($test_score < $initial_score) {

							my $swap_seed_dist = 99;
							my $swap_tb_dist = 99;
							my $swap_entry;
							my $swap_panel;
							my $swap_score = -99;

							foreach my $other_panel (@use_panels) {

								# Can't switch to the same panel
								next if $other_panel == $panel_id;

								# Find the other panel for scoring
								my @other_panel = @{$panel_entries{$other_panel}};

								my $other_score = score_panel(\@other_panel, \%entries);

								# Put me into this panel for testing
								push (@other_panel, $entry_id);

								foreach my $other_entry (@{$panel_entries{$other_panel}}) {

									my $seed_dist = abs($entries{$other_entry}{seed} - $entries{$entry_id}{"seed"});
									my $tb_dist = abs($entries{$other_entry}{"first_tb"} - $entries{$entry_id}{"first_tb"});

									next if ($seed_dist > 2 && $method eq "snake_school");
									next if ($seed_dist > 2 && $method eq "ky_semis_snake");

									next if ($tb_dist > 0 && $method eq "snake_school_rank");
									next if ($tb_dist > 0 && $method eq "snake_school_prelim_cume");
									next if ($tb_dist > 0 && $method eq "snake_school_overall_cume");

									# Remove swap candidate from the panel
									$index = 0;

									$index++ until $other_panel[$index] == $other_entry;
									splice(@other_panel, $index, 1);

									push (@test, $other_entry);

									my $new_initial_score = score_panel(\@test, \%entries);
									my $new_other_score = score_panel(\@other_panel, \%entries);

									my $diff = ($other_score + $initial_score) - ( $new_other_score + $new_initial_score);

									if ( $diff > 0 && $diff > $swap_score) {

										$swap_entry     = $other_entry;
										$swap_score     = $diff;
										$swap_seed_dist = $seed_dist;
										$swap_tb_dist   = $tb_dist;
										$swap_panel     = $other_panel;

									}

									if ( ($diff > 0
											&& $diff == $swap_score
											&& $seed_dist < $swap_seed_dist
											&& (
												$method eq "snake_school"
												|| $method eq "ky_semis_snake"
											)
										)
									||
										($diff > 0
											&& $diff == $swap_score
											&& $tb_dist < $swap_tb_dist
											&& ($method eq "snake_school_rank"
												|| $method eq "snake_school_prelim_cume"
												|| $method eq "snake_school_overall_cume")
											)

									) {

										$swap_entry     = $other_entry;
										$swap_score     = $new_other_score;
										$swap_seed_dist = $seed_dist;
										$swap_tb_dist   = $tb_dist;
										$swap_panel     = $other_panel;

									}

									# Reset the table

									if ( grep( /^$other_entry/, @test ) ) {
										$index = 0;
										$index++ until $test[$index] == $other_entry;
										splice(@test, $index, 1);
									}

									push (@other_panel, $other_entry);

								}

								if ( grep( /^$entry_id/, @other_panel ) ) {
									$index = 0;
									$index++ until $other_panel[$index] == $entry_id;
									splice(@other_panel, $index, 1);
								}
							}

							if ($swap_entry) {

								my @panel2 = @{$panel_entries{$swap_panel}};
								my @panel1 = @{$panel_entries{$panel_id}};

								push (@panel1, $swap_entry);

								my $swapdex = 0;
								$swapdex++ until $panel1[$swapdex] == $entry_id;
								splice(@panel1, $swapdex, 1);

								$swapdex = 0;
								$swapdex++ until $panel2[$swapdex] == $swap_entry;
								splice(@panel2, $swapdex, 1);

								push (@panel2, $entry_id);

								@{$panel_entries{$panel_id}} = @panel1;
								@{$panel_entries{$swap_panel}} = @panel2;

								$initial_score = score_panel(\@panel1, \%entries);

							}
						}
					}
				}
			}
		}
	}

	my $limit;

	if ($tourn_settings->{nsda_nats}) {
		$limit = " and round.type = 'elim' ";
	}

	$sth = $dbh->prepare("
		select ballot.entry, ballot.speakerorder
		from ballot, panel, round
		where round.event = ?
		and round.id = panel.round
		$limit
		and panel.id = ballot.panel
	");

	$sth->execute($event->id);

	while (
		my ($entry_id, $order) = $sth->fetchrow_array()
	) {
		$entries{$entry_id}{'order'}{$order}++;
		$entries{$entry_id}{'order_sum'} += $order;
	}

	#Set speaker order
	foreach my $key (keys %panel_entries) {

		my @entries = @{$panel_entries{$key}};
		@entries = shuffle(@entries);

		if ($tourn_settings->{nsda_nats} && $into->type eq "final") {

			# Finals at NSDA nationals are totally random.

		} else {

			@entries = sort {$entries{$b}{"order_sum"} <=> $entries{$a}{"order_sum"}} @entries;

			my $size_of_panel = scalar @entries;
			my $moved = 1;

			foreach (1 .. 10) {

				next unless $moved;
				undef $moved;
				my $position;

				unless ($ncfl) {

					foreach my $entry_id (@entries) {

						$position++;

						if ($entries{$entry_id}{"order"}{$position}) {

							#Remove from place in line
							my $speakdex = 0;
							$speakdex++ until $entries[$speakdex] == $entry_id;
							splice(@entries, $speakdex, 1);

							my $place;
							foreach my $attempt (shuffle( 1 .. $size_of_panel)) {
								next if $entries{$entry_id}{"order"}{$position};
								$place = $attempt;
								last;
							}

							unless ($place) {
								#Find a new home at random since it's impossible
								$place = $position;
								while ($place == $position) {
									$place = int(rand($size_of_panel));
								}
							}

							$place--;
							$place = 1 if $place < 0;
							splice(@entries,($place - 1),0,$entry_id);
							$moved++;
						}
					}
				}
			}
		}
		@{$panel_entries{$key}} = @entries;
	}

	foreach my $panel (@use_panels) {

		my @entries = @{$panel_entries{$panel->id}} if $panel_entries{$panel->id};
		next unless @entries;

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

		foreach my $ballot ($panel->ballots) {
			$ballot->delete;
		}

		if (@judges) {

			foreach my $judge (@judges) {
				my $position;

				foreach my $entry_id (@entries) {
					$position++;

					next unless $entry_id;

					my $ballot = Tab::Ballot->create({
						panel        => $panel->id,
						judge        => $judge->id,
						entry        => $entry_id,
						speakerorder => $position
					})
				}
			}

		} else {

			my $position;

			foreach my $entry_id (@entries) {
				$position++;
				next unless $entry_id;
				my $ballot = Tab::Ballot->create({
					panel        => $panel->id,
					entry        => $entry_id,
					speakerorder => $position
				})
			}
		}
	}

	$into->paired_at($now);
	$into->post_primary(0);  # People always do this
	$into->post_secondary(0);  # People always do this
	$into->post_feedback(0);  # People always do this
	$into->update();

	if ($into->type eq "elim") {
		my $msg = "Elim round paneled";
		return $msg if $ARGS{'return'};
		$m->redirect("/panel/schemat/show_snake.mhtml?round_id=".$into->id."&msg=$msg");
	}

	my $msg = "Final round paneled" if $into->type eq "final";
	return $msg if $ARGS{'return'};
	$m->redirect("/panel/schemat/show.mhtml?round_id=".$into->id."&msg=$msg");

	sub score_panel {

		my ($panel, $entries) = @_;

		my $score = 0;
		my $strength_score = 0;
		my $strength_count = 0;

		foreach my $entry_id (@$panel) {

			foreach my $other_id (@$panel) {

				if ($entries->{settings}{school_score}) {
					if (
						$entries->{$entry_id}{school} > 0
						&& $entries->{$entry_id}{school} == $entries->{$other_id}{school}
					) {
						$score += $entries->{settings}{school_score};
					}
				}

				if ($entries->{settings}{state_score}) {
					if (
						$entries->{$entry_id}{state}
						&& $entries->{$entry_id}{state} == $entries->{$other_id}{state}
					) {
						$score += $entries->{settings}{state_score};
					}
				}

				if ($entries->{settings}{district_score}) {
					if (
						$entries->{$entry_id}{district} > 0
						&& $entries->{$entry_id}{district} == $entries->{$other_id}{district}
					) {
						$score += $entries->{settings}{district_score};
					}
				}

				if ($entries->{settings}{region_score}) {
					if (
						$entries->{$entry_id}{region} > 0
						&& $entries->{$entry_id}{region} == $entries->{$other_id}{region}
					) {
						$score += $entries->{settings}{region_score};
					}
				}

				if ($entries->{settings}{top_seed_score}) {
					if (
						$entries->{$entry_id}{top_seed} > 0
						&& $entries->{$entry_id}{top_seed} == $entries->{$other_id}{top_seed}
					) {
						$score += $entries->{settings}{top_seed_score};
					}
				}

				if ($entries->{settings}{last_hit_score}) {
					if (
						$entries->{$entry_id}{last_section} > 0
						&& $entries->{$entry_id}{last_section} == $entries->{$other_id}{last_section}
					) {
						$score += $entries->{settings}{last_hit_score};
					}
				}

				if ($entries->{settings}{hit_score}) {
					if ($entries->{$entry_id}{"hits"}{$other_id}) {
						$score += $entries->{settings}{hit_score};
					}
				}
			}

			if ($entries->{settings}{average_score}) {
				$strength_score += $entries->{$entry_id}{"first_tb"};
				$strength_count++;
			}
		}

		if ($entries->{settings}{average_score}) {
			my $section_average;
			if ($strength_count) {
				$section_average = $strength_score / $strength_count;
			}

			my $strength_dist = abs($entries->{settings}{average_strength} - $section_average);
			$score += $strength_dist * $entries->{settings}{average_score};
		}

		return $score;
	}

</%init>
