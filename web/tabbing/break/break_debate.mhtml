<%args>
	$tourn
	$tourn_settings
	$person
	$dbh
	$now
	$perms
	$from_id  => undef
	$into_id  => undef
	$label    => undef
	$start    => undef
	$end      => undef
	$type     => undef
	$breakout => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $from = Tab::Round->retrieve($from_id) if $from_id;
	my $into = Tab::Round->retrieve($into_id) if $into_id;

	unless($from) {
		$m->comp("/funclib/abort.mas", message => "You did not specify a valid round to break out of.");
	}

	my %events = $m->comp("/funclib/perms/events.mas",
		tourn   => $tourn,
		perms   => $perms,
		limited => 1
	);

	if ($from && (not defined $events{$from->event})) {
		$m->comp("/funclib/abort.mas",
			message => "You do not have permission for event ".$from->event->abbr
		);
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $event = $from->event;
	my %event_settings = $event->all_settings;

	if ($ARGS{"override"} > 0) {
		$end = $ARGS{"override"};
	}

	my $ignore_schools = $event_settings{"school_debates_self"} if $from && $event;
	my $err;

	my $protocol = eval { return Tab::Protocol->retrieve($ARGS{protocol_id}); };
	my $site = eval { return Tab::Site->retrieve($ARGS{site_id}); };
	my $timeslot = eval { return Tab::Timeslot->retrieve($ARGS{timeslot_id}); };

	if ($into) {

		if (not defined $events{$into->event}) {
			$m->comp("/funclib/abort.mas",
				message => "You do not have permission for event ".$into->event->abbr
			);
		}

		if ($from->event != $into->event) {
			$m->comp("/funclib/abort.mas",
				message => "You cannot break one event into another!"
			);
		}

		if ($from->type ne "elim") {
			$err .= "You must specify the starting seed of whom to break  " unless $start;
			$err .= "You must specify the ending seed of whom to break  " unless $end;
		}

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from_id."&into_id=".$into_id."&err=".$err) if $err;

		foreach my $tag ('protocol', 'site', 'timeslot', 'label', 'type') {
			if ($tag && $ARGS{$tag}) {
				$into->$tag($ARGS{$tag});
				$into->update();
			};
		}

	} else {

		my $err = " Missing timeslot " unless $ARGS{timeslot};
		$err .= " Missing site " unless ($site || $event_settings{"online_mode"});

		if ($from->type ne "elim") {
			$err .= " Missing starting entry " unless $start;
			$err .= " Missing ending entry " unless $end;
		}

		$err .= " Missing tiebreaker set " unless $protocol > 0;
		$err .= " Missing round type " unless $type;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from."&preset_id=".$into."&err=".$err) if $err;

		my $judges = 1;
		$judges    = 3 if $type eq "elim";
		$judges    = 3 if $type eq "final";

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from."&err=".$err) if $err;

		my $timeslot = Tab::Timeslot->retrieve($ARGS{timeslot});

		$into = Tab::Round->create({
			event      => $event->id,
			timeslot   => $timeslot->id,
			start_time => $timeslot->start,
			protocol   => $protocol->id,
			site       => $site->id,
			label      => $label,
			type       => $type,
			paired_at  => $now
		});

		$into->setting('num_judges', $judges);
		$into->setting("use_for_breakout", $breakout);
		$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);

	}

	unless($into) {
		$m->comp("/funclib/abort.mas", message => "You did not specify a valid round to break into");
	}

	$protocol = $into->protocol unless $protocol;
	$site = $into->site unless $site;
	$timeslot = $into->timeslot unless $timeslot;

	if ($from->id == $into->id) {
		my $err = "This would break ".$from->realname." into....".$into->realname;
		$err .= " You cannot advance a round into itself, or things get very strange very fast.";
		$err .= " Ask Mikaela Malsin how that goes. Try again.";
		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from."&preset_id=".$into."&err=".$err) if $err;
	}

	my $bracket_label = "Bracket";

	if ($breakout > 0) {
		$bracket_label = $into->event->setting("breakout_".$breakout."_label")." Bracket";
	}

	my $bracket = Tab::ResultSet->search(
		event => $event->id,
		label => $bracket_label
	)->first;

	unless ($bracket) {
		$bracket = Tab::ResultSet->create({
			tourn     => $tourn->id,
			event     => $event->id,
			label     => $bracket_label,
			generated => $now,
			bracket   => 1
		});
	}

	my $num_quals;

	if ($tourn_settings->{'nsda_district'}
		&& $event->type eq "debate"
	) {

		my @junque;
		($num_quals, @junque) =
			$m->comp("/funclib/nsda/qualifier_count.mas", event => $event);
	}

	my %keys = map {$_->tag => $_} $bracket->result_keys();

	if ($into->panels) {
		#Clear whatever is in this round
		$m->comp("/funclib/round_dump.mas",
			round  => $into,
			person => $person
		);
	}

    Tab::Result->set_sql(
		rm_bracket => "delete from result where round = ? and result_set = ? "
	);

	Tab::Result->sql_rm_bracket->execute($into->id, $bracket->id );

	my @results = $m->comp(
		"/tabbing/results/order_entries.mas",
			round    => $from,
			breakout => $breakout
	);

	my $entries = pop @results;

	my %breaks;
	my %losers;
	my $max_loser;

	my $ineligibles = $m->comp(
		"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "no_elims",
			hash  => 1
	);

	my $count = 1;

	if ($from->type ne "elim" && $from->type ne "final") {

		SEED:
		foreach my $seed (sort {$a <=> $b} keys %{$entries->{"by_place"}}) {
			foreach my $entry (@{$entries->{"by_place"}{$seed}}) {

				next if $ineligibles->{$entry};
				if ($count >= $start && $count <= $end) {
					$breaks{$count} = $entry;
				} elsif ($count > $end) {
					last SEED;
				}
				$count++;
			}
		}

	} else {

		# Seeding elim to elim is determined by the bracket position from the
		# last elim.  If you defeat the 1 seed you become the 1 seed, etc

		my $sth = $dbh->prepare("
			select entry.id, panel.bracket
				from entry, ballot, panel
			where entry.id = ballot.entry
				and ballot.panel = panel.id
				and panel.round = ?
		");

		$sth->execute($from->id);

		while(
			my (
				$entry_id, $panel_bracket
			) = $sth->fetchrow_array()
		) {

			unless ($panel_bracket) {

				my $msg = "Your elim panels are horked.  There are no bracket numbers listed ";
				$msg .= "for each section so Tabroom cannot advance to the next debate.";

				return $msg if $ARGS{'return'};
				$m->comp("/funclib/abort.mas", message => $msg);
			}

			$entries->{bracket}{$entry_id} = $panel_bracket;
		}

		my $num_advancers;
		my $num_winners;

		if ($event_settings{"double_elimination"}) {

			my $previous_bracket = &bracket(scalar(keys %{$entries->{"tbs"}}));
			$previous_bracket = $previous_bracket / 2;

			foreach my $entry_id (sort keys %{$entries->{"tbs"}}) {
				if ($entries->{tbs}{$entry_id}{1} == 0) {

					# I advance to the winners bracket if I have no losses
					$breaks{$entries->{bracket}{$entry_id}} = $entry_id;
					$num_advancers++;
					$num_winners++;
				}
			}

			foreach my $entry_id (sort keys %{$entries->{"tbs"}}) {

				if ($entries->{tbs}{$entry_id}{1} == 1) {

					my $losers_seed = $entries->{bracket}{$entry_id};

					if ($losers_seed <= $num_winners) {
						$losers_seed = (($num_winners * 2) + 1) - $losers_seed;
					}

					# I advance to the losers bracket if I have 1 loss
					$losers{$losers_seed} = $entry_id;
					$num_advancers++;
				}
			}

		} else {

			foreach my $entry_id (sort keys %{$entries->{"tbs"}}) {
				# I advance if I won the last round
				if ($entries->{tbs}{$entry_id}{1} == 1) {
					$breaks{$entries->{bracket}{$entry_id}} = $entry_id;
				}
			}
		}

		if ($num_advancers == 2) {

			#Time for finals
			my %replace;

			foreach my $seed (keys %breaks, keys %losers) {

				my $entry_id = $breaks{$seed};
				$entry_id = $losers{$seed} unless $entry_id;
				next unless $entry_id;

				$seed = 2 if $seed > 2;

				$replace{$seed} = $entry_id;
			}

			%breaks = %replace;
			%losers = ();
		}
	}

	# Do the winner's bracket first.
	my $num_winners = scalar(keys %breaks);
	my $num_advancers = $num_winners + scalar(keys %losers);

	if (
		((scalar (keys %losers)) == 1)
		&& $num_winners == 1
	) {
		#Final round time
		%breaks = (%breaks, %losers);
		%losers = ();
	}

	# The target number must always be a power of 2 or else promoted up to the
	# next power of 2 and byes filled in.

	my $target_bracket = &bracket($num_winners);
	my $master_seed = $target_bracket + 1;

	my %byes;
	my %debates;
	my %done;
	my $break_count;

	foreach my $seed (sort {$a <=> $b} keys %breaks) {

		my $entry_id = $breaks{$seed};

		my $result = Tab::Result->create({
			result_set => $bracket->id,
			entry      => $entry_id,
			round      => $into->id,
			rank       => $seed,
			place      => $seed
		});

		my $target = $master_seed - $seed;

		unless ($done{$entry_id}++) {

			my $debate_seed = $target;
			$debate_seed = $seed if $seed < $debate_seed;

			if ($breaks{$target} && $target != $seed) {

				# I have an opponent which adds up to my target!
				$debates{$debate_seed}{1} = $entry_id;
				$debates{$debate_seed}{0} = $breaks{$target};
				$done{$breaks{$target}}++;

			} else {

				if ($debate_seed < 1) {
					$debate_seed = $seed;
				}
				# I have no such opponent which means this is a partial
				$byes{$debate_seed} = $entry_id;

			}
		}
	}

	if ($event_settings{"double_elimination"} && keys %losers) {

		# To find out the pairing bracket factor you have to start with the
		# power of two above the number of entries who initially cleared;

		my @elims = sort {$a->name <=> $b->name} $event->rounds(type => "elim");

		my $first_elim = shift @elims;
		my @first_elim_breaks = $m->comp("/funclib/round_entries.mas", round => $first_elim);
		my $first_elim_target = &bracket( scalar @first_elim_breaks);

		my $exponent = 0;
		my $multiplier = 2;

		foreach my $elim (@elims) {

			if ($multiplier == 2) {
				$multiplier = 1.5;
			} else {
				$multiplier = 2;
				$exponent++;
			}

			last if $elim->id == $into->id;
		}

		my $bracket_target = (($first_elim_target / (2 ** $exponent)) * $multiplier) + 1;

		# This is the target bracket of the previous debate plus the best seed in
		# the current losers' bracket

		my @seeds = sort {$a <=> $b} keys %losers;

		foreach my $seed (keys %losers) {
			my $result = Tab::Result->create({
				result_set => $bracket->id,
				entry      => $losers{$seed},
				round      => $into->id,
				rank       => $seed,
				place      => $seed
			});
		}

		# Next we have to check for repeat debates in elims.  If a loser's
		# bracket round is going to be repeated the bracket is reversed,
		# otherwise it goes through.

		my $elim_sth = $dbh->prepare("
			select aff.id, neg.id, round.name

			from entry aff, entry neg, ballot ba, ballot bn, panel, round

			where round.event = ?
				and round.type = 'elim'
				and round.id = panel.round
				and panel.id = ba.panel
				and panel.id = bn.panel
				and ba.side = 1
				and bn.side = 2
				and ba.entry = aff.id
				and bn.entry = neg.id
		");

		$elim_sth->execute($event->id);

		my %repeats;

		while (
			my (
				$aff, $neg, $round_name
			) = $elim_sth->fetchrow_array()
		) {
			$repeats{$aff}{$neg} = $round_name;
		}

		my $repeated;

		foreach my $seed (@seeds) {

			my $entry_id = $losers{$seed};
			my $target_id = $losers{($bracket_target - $seed)};

			if ($repeats{$entry_id}{$target_id}	|| $repeats{$target_id}{$entry_id}) {
				$repeated++;
				last;
			}
		}

		my $loser_debates;

		foreach my $seed (@seeds) {

			my $entry_id = $losers{$seed};
			next if $done{$entry_id}++;

			my $target_id;

			# Flip the brackets by aiming for the target seed to be one off;
			# only one possible matchup will exist.

			if ($repeated) {

				if ($seed % 2) {
					$target_id = $losers{($bracket_target - $seed - 1)};
				} else {
					$target_id = $losers{($bracket_target - $seed + 1)};
				}

			} else {

				#Otherwise pull the usual target
				$target_id = $losers{$bracket_target - $seed};
			}

			$loser_debates++;

			if ($target_id) {

				$done{$target_id}++;
				$debates{$seed}{0} = $entry_id;
				$debates{$seed}{1} = $target_id;
				$done{$target_id}++;

			} else {

				$byes{$seed} = $entry_id;
			}
		}

		my $double_byes = ($num_winners / 2) - ($loser_debates);
		$into->setting("loser_bracket_byes", $double_byes) if $double_byes > 0;
	}

	my $letter = 1;
	$letter = "A" if $event_settings{"panel_labels"} eq "letters";

	my @debates;

	if ($tourn_settings->{'nsda_district'}
		&& $event->type eq "debate"
		&& scalar (keys %{$entries->{"tbs"}}) == 4
		&& $num_quals == 3
		&& (not defined $event_settings{"double_elimination"})
	) {

		undef %byes;
		undef %debates;

		unless ($protocol->name eq "Debate Final") {

			my $should_be = $tourn->protocols( name => "Debate Final")->first;

			if ($should_be) {
				$into->protocol($should_be);
				$into->update();
			}
		}

		# HARD CODE THIS NONSENSE UNAPOLOGETICALLY!

		foreach my $entry_id (sort keys %{$entries->{"tbs"}}) {
			# I advance if I won the last round
			if ($entries->{tbs}{$entry_id}{1} == 1) {
				$byes{$entries->{bracket}{$entry_id}} = $entry_id;
			} else {

				if ($debates{"3"}{0}) {
					$debates{"3"}{1} = $entry_id;
				} else {
					$debates{"3"}{0} = $entry_id;
				}
			}
		}
	}

	foreach my $seed (sort {$a <=> $b} keys %debates) {

		my $aff = $debates{$seed}{0};
		my $neg = $debates{$seed}{1};

		my $bye = 0;
		my %seed;

		my $panel = Tab::Panel->create({
			letter  => $letter,
			round   => $into->id,
			flight  => 1,
			bracket => $seed,
		});

		my $ballot = eval {
			return Tab::Ballot->create({
				panel => $panel->id,
				entry => $aff,
				side  => 1
			});
		};

		my $other_ballot = eval {
			return Tab::Ballot->create({
				panel => $panel->id,
				entry => $neg,
				side  => 2
			});
		};


		if (
			(not defined $ignore_schools)
			&& ($entries->{"school_id"}{$aff} == $entries->{"school_id"}{$neg})
		) {


			$seed{$aff} = $m->comp("/funclib/entry_seed.mas", entry => $aff);
			$seed{$neg} = $m->comp("/funclib/entry_seed.mas", entry => $neg);

			if ($seed{$aff} < $seed{$neg}) {
				Tab::Score->create({
					ballot => $ballot->id,
					tag    => "winloss",
					value  => 1
				});

				Tab::Score->create({
					ballot => $other_ballot->id,
					tag    => "winloss",
					value  => 0
				});
			} else {

				Tab::Score->create({
					ballot => $ballot->id,
					tag    => "winloss",
					value  => 0
				});

				if ($other_ballot) {
					Tab::Score->create({
						ballot => $other_ballot->id,
						tag    => "winloss",
						value  => 1
					});
				}
			}

			$ballot->audit(1);
			$other_ballot->audit(1);
			$panel->bye(1);

			$panel->update();
			$ballot->update();
			$other_ballot->update();

		} else {

			my $due_aff = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel);

			if ($due_aff != $aff) {
				$m->comp("/funclib/swap_sides.mas", panel => $panel);
			}

		}

		$letter++;

	}

	foreach my $seed (sort keys %byes) {

		my $panel = Tab::Panel->create({
			letter  => $letter,
			round   => $into->id,
			flight  => 1,
			bracket => $seed,
			bye     => 1
		});

		my $ballot = Tab::Ballot->create({
			panel => $panel->id,
			entry => $byes{$seed},
			side  => 1
		});

		$letter++;
	}

	$into->paired_at($now);
	$into->post_primary(0);  # People always do this
	$into->post_secondary(0);  # People always do this
	$into->post_feedback(0);  # People always do this
	$into->update();

	my $msg = ucfirst($type)." round sectioned";
	return $msg if $ARGS{'return'};
	$m->redirect("/panel/schemat/show.mhtml?round_id=".$into->id."&msg=$msg");

	sub bracket {
        my $number = shift;
        my $counter = 1;

        return unless $number > 1;

        while ($counter < $number) {
            $counter = $counter * 2;
        }

        return $counter;
    }

</%init>
