<%args>
	$tourn
	$tourn_settings
	$end         => undef
	$type        => undef
	$label       => undef
	$panels      => undef
	$from_id     => undef
	$into_id     => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $from = Tab::Round->retrieve($from_id) if $from_id;

	unless ($from) {
		$m->comp("/funclib/abort.mas",
			message => "No origin round found for ID $from_id"
		);
	}

	my $protocol = eval { return Tab::Protocol->retrieve($ARGS{protocol_id}); };
	my $site = eval { return Tab::Site->retrieve($ARGS{site_id}); };
	my $timeslot = eval { return Tab::Timeslot->retrieve($ARGS{timeslot_id}); };

	my $into = Tab::Round->retrieve($into_id) if $into_id;

	#Clear ballots from existing round

	if ($into) {
		Tab::Round->set_sql( delete_scores => "
			delete score.*
			from score, ballot, panel
			where panel.round = ?
				and panel.id = ballot.panel
				and ballot.id = score.ballot
		");

		Tab::Round->set_sql( delete_ballots => "
			delete ballot.*
			from ballot, panel
			where panel.round = ?
				and panel.id = ballot.panel
		");

		Tab::Round->sql_delete_scores->execute($into->id);
		Tab::Round->sql_delete_ballots->execute($into->id);
	}

	my $dbh = Tab::DBI->db_Main();

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	our %penalties = (
		school    => "10000000",
		panel     => "100000",
		po        => "100",
		last_name => "1"
	);

	if ($tourn_settings->{"nsda_nats"}) {
		$penalties{"district"} = "1000000";
		$penalties{"region"} = "10000";
	}

	my $event = $from->event;

	if ($into) {

		my $err = "You must specify the number of sections to be used  " unless $panels;
		$err .= "You must specify the ending position of whom to break  " unless $end;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from->id."&preset_id=".$into->id."&err=".$err) if $err;

		$into->protocol($protocol) if $protocol;
		$into->site($site) if $site;
		$into->timeslot($timeslot) if $timeslot;
		$into->label($label) unless $label;
		$into->type($type) unless $type;
		$into->update;

	} else {

		my $err = " Missing timeslot " unless $timeslot;
		$err .= " Missing site " unless $site;
		$err .= " Missing number of breaks " unless $end;
		$err .= " Missing tiebreaker set " unless $protocol;
		$err .= " Missing round type " unless $type;
		$err .= " Missing site " unless $site;
		$err .= " Missing number of sections " unless $panels;

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from->id."&preset_id=".$into->id."&err=".$err) if $err;

		my $judges = 1;
		$judges = 3 if $type eq "elim";
		$judges = 3 if $type eq "final";

		return $err if $ARGS{'return'} && $err;
		$m->redirect("index.mhtml?from_id=".$from->id."&err=".$err) if $err;

		$into = Tab::Round->create({
			event      => $event->id,
			timeslot   => $timeslot,
			start_time => $timeslot->start,
			protocol   => $protocol,
			label      => $label,
			type       => $type,
			site       => $site,
			paired_at => $now,
		});

		$into->setting("num_judges", $judges);
		$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);
	}

	my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) =
		$m->comp(
			"/tabbing/results/order_entries.mas",
			round => $from
		);

	my $ineligible = $m->comp(
		"/funclib/event_entry_settings.mas",
			event => $event,
			hash  => 1,
			tag   => "no_elims"
		);

	my @breaks;
	my $count;
	my %entry_data = ();

	my $entry_sth = $dbh->prepare("
		select entry.id, panel.id, panel.letter, school.id, region.id, district.id, student.last
		from (panel, ballot, entry)
			left join school on entry.school = school.id
			left join region on school.region = region.id
			left join district on school.district = district.id
			left join entry_student es on es.entry = entry.id
			left join student on es.student = student.id
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.active = 1
	");

	$entry_sth->execute($from->id);

	while (
		my (
			$entry_id, $panel_id, $panel_letter, $school_id, $region_id, $district_id, $last_name
		) = $entry_sth->fetchrow_array()
	) {

		$entry_data{$entry_id}{"panel"}     = $panel_id;
		$entry_data{$entry_id}{"prelim"}    = $panel_letter;
		$entry_data{$entry_id}{"school"}    = $school_id;
		$entry_data{$entry_id}{"region"}    = $region_id;
		$entry_data{$entry_id}{"district"}  = $district_id;
		$entry_data{$entry_id}{"last_name"} = $last_name;
	}

	$entry_sth->finish();
	$entry_sth->execute($into->id);

	my @from_ties = $m->comp("/funclib/congress_ties.mas", round => $from);

	my $from_string;

	foreach my $ft (@from_ties) {
		$from_string .= ", " if $from_string;
		$from_string .= $ft->id;
	}

	unless ($from_string) {
		$from_string = $from->id;
	}

	my $po_count;

	my $po_sth = $dbh->prepare("
		select
			entry.id
			from entry, ballot, score, panel
		where panel.round in ($from_string)
			and panel.id     = ballot.panel
			and ballot.entry = entry.id
			and ballot.id    = score.ballot
			and score.tag    = 'po'
		group by entry.id
	");

	$po_sth->execute();

	while (
		my $eid = $po_sth->fetchrow_array()
	) {
		$entry_data{$eid}{"po"} = 1;
		$po_count++;
	}

	$po_sth->finish();

	my $po_target = POSIX::ceil($po_count / $panels);

	my %panel_count = ();
	my $total_count;

	# Advance the top X number of entries into the round, skipping anyone
	# already in

	my $advance_overall = $event->setting("advance_overall");

	foreach my $rank (sort {$a <=> $b} keys %{$entries_ref}) {

		foreach my $entry (@{${$entries_ref}{$rank}}) {

			next unless $entry;
			next if $ineligible->{$entry};
			my $seed;

			if ($advance_overall) {

				next if $total_count >= $end;
				$total_count++;
				$seed = $total_count;

			} else {

				my $panel = $entry_data{$entry}{"panel"};
				next if $panel_count{$panel} >= $end;

				$panel_count{$panel}++;
				$seed = $panel_count{$panel};
			}

			push @breaks, $entry;
			$entry_data{$entry}{"seed"} = $seed;
		}
	}

	#Sort them in seed order by the panel so the snaker is fine.
	@breaks = sort {$entry_data{$a}{"panel"} <=> $entry_data{$b}{"panel"}} @breaks;
	@breaks = sort {$entry_data{$a}{"seed"} <=> $entry_data{$b}{"seed"}} @breaks;

	foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {
		foreach my $entry (@{${$entries_ref}{$seed}}) {
			my $one;
			foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
				next if $one;
				$entry_data{$entry}{"tb"} = ${$tbs_ref}{$entry."-".$key};
				$one++;
			}
		}
	}

	my @existing_panels = $into->panels;
	my @use_panels;

	foreach my $count (1 .. $panels) {

		my $existing = shift @existing_panels if @existing_panels;
		if ($existing) {

			push @use_panels, $existing;

		} else {

			my $new = Tab::Panel->create({
				flight => 1,
				round  => $into->id,
				letter => $count
			});

			push @use_panels, $new;
		}
	}

	foreach my $ep (@existing_panels) {
		$ep->delete();   #KILL THE SPARES
	}

	my %panels;
	foreach my $up (@use_panels) {
		$panels{$up->id}{"letter"} = $up->letter;
		$panels{$up->id}{"flight"} = $up->flight;
		if ($up->room) {
			$panels{$up->id}{"room"} = $up->room->id;
		}
	}

	#Get any pre-set judges for the later bit

	my $method = $event->setting("elim_method");

	@use_panels = keys %panels;
	my @snake_panels = keys %panels;

	my %panel_entries = ();

	$count = 1;

	if (scalar @use_panels == 1) {

		%{$panel_entries{$use_panels[0]}} = map {$_ => 1} @breaks;

	} else {

		my $current_seed = 1;

		foreach my $entry (@breaks) {

			$count++;

			unless (@snake_panels) {

				unless ($current_seed == $entry_data{$entry}{"seed"}) {

					# this operation keeps competitors from the same chamber
					# from hitting each other as much as can be done.

					foreach (1 .. $current_seed) {
						my $shift = shift @use_panels;
						push @use_panels, $shift;
					}

					@snake_panels = @use_panels;
					$current_seed = $entry_data{$entry}{"seed"};

				} else {

					@snake_panels = reverse (@use_panels) if $count % 2;
					@snake_panels = @use_panels unless @snake_panels;
				}
			}

			my $panel_id = shift @snake_panels;
			$panel_entries{$panel_id}{$entry} = 1;
		}

		if ($method eq "snake_school"
			|| $method eq "snake_school_tight"
			|| $method eq "snake_school_rank"
			|| $method eq "snake_school_force"
		) {

			foreach (1 .. 7) {

				my $pass_counter;
				my $po_penalty = $penalties{"po"};

				@use_panels = shuffle(@use_panels);

				PANEL:
				foreach my $panel_id (@use_panels) {

					unless ($panels{$panel_id}{"score"}) {
						$panels{$panel_id}{"score"} = score_elim_chamber($panel_entries{$panel_id}, \%entry_data);
					}

					next unless $panels{$panel_id}{"score"} > 0;

					foreach my $entry (keys %{$panel_entries{$panel_id}}) {

						delete $panel_entries{$panel_id}{$entry};

						my $improvement;
						my $swap_panel;
						my $swap_entry;

						foreach my $other_panel (@use_panels) {

							# Can't switch to the same panel
							next if $other_panel == $panel_id;
							next unless $panel_entries{$panel_id};

							unless ($panels{$other_panel}{"score"}) {
								$panels{$other_panel}{"score"} = score_elim_chamber($panel_entries{$other_panel}, \%entry_data);
							}

							my $old_total = $panels{$other_panel}{"score"} + $panels{$panel_id}{"score"};

							OTHER:
							foreach my $other_entry (sort keys %{$panel_entries{$other_panel}}) {

								if (
									$method eq "snake_school"
									|| $method eq "snake_school_tight"
								) {
									my $seed_dist = abs(
										$entry_data{$other_entry}{"seed"} - $entry_data{$entry}{"seed"}
									);

									next OTHER if ($seed_dist > 2 && $method eq "snake_school");
									next OTHER if ($seed_dist > 0 && $method eq "snake_school_tight");
								}

								if ($method eq "snake_school_rank") {

									my $tb_dist = abs(
										$entry_data{$other_entry}{"tb"} - $entry_data{$entry}{"tb"}
									);

									next OTHER if ($tb_dist > 0 && $method eq "snake_school_rank");
								}


								delete $panel_entries{$other_panel}{$other_entry};

								$panel_entries{$other_panel}{$entry} = 1;
								$panel_entries{$panel_id}{$other_entry} = 1;

								my $new_total = score_elim_chamber($panel_entries{$panel_id}, \%entry_data);
								$new_total += score_elim_chamber($panel_entries{$other_panel}, \%entry_data);

								my $diff = $old_total - $new_total;

								if ($diff > $improvement) {
									$improvement = $diff;
									$swap_panel = $other_panel;
									$swap_entry = $other_entry;
								}

								delete $panel_entries{$other_panel}{$entry};
								delete $panel_entries{$panel_id}{$other_entry};
								$panel_entries{$other_panel}{$other_entry} = 1;
							}
						}

						if ($swap_panel && $swap_entry) {

							delete $panel_entries{$panel_id}{$entry};
							delete $panel_entries{$swap_panel}{$swap_entry};

							$panel_entries{$swap_panel}{$entry} = 1;
							$panel_entries{$panel_id}{$swap_entry} = 1;

							$panels{$swap_panel}{"score"} = score_elim_chamber($panel_entries{$swap_panel}, \%entry_data);
							$panels{$panel_id}{"score"} = score_elim_chamber($panel_entries{$panel_id}, \%entry_data);

							$pass_counter++;

						} else {
							$panel_entries{$panel_id}{$entry} = 1;
						}
					}
				}

				last unless $pass_counter > 1;
			}
		}
	}

	my $judge_sth = $dbh->prepare("
		select panel.id, ballot.judge, ballot.chair
		from panel, ballot
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.judge > 0
		group by ballot.judge
	");

	$judge_sth->execute($into->id);

	while (
		my (
			$panel_id, $judge_id, $chair
		) = $judge_sth->fetchrow_array()
	) {
		$panels{$panel_id}{"judges"}{$judge_id}++;
		if ($chair == 1) {
			$panels{$panel_id}{"chair"} = $judge_id;
		}
	}

	foreach my $panel_id (@use_panels) {

		next unless $panel_entries{$panel_id};

		my @entries = keys %{$panel_entries{$panel_id}};
		my @judges = keys %{$panels{$panel_id}{"judges"}};

		my $sth = $dbh->prepare("
			delete score.*, ballot.*
			from ballot, score
			where ballot.panel = ?
			and ballot.id = score.ballot
		");

		$sth->execute($panel_id);

		if (@judges) {

			foreach my $judge_id (@judges) {

				my $position;
				my $chair = 0;

				if ($panels{$panel_id}{"chair"} == $judge_id) {
					$chair++;
				}

				foreach my $entry (@entries) {

					$position++;
					next unless $entry;

					my $ballot = Tab::Ballot->create({
						panel        => $panel_id,
						judge        => $judge_id,
						entry        => $entry,
						chair        => $chair,
						speakerorder => $position
					});

					$panels{$panel_id}{"ballots"}{$ballot->id} = $ballot;
				}
			}

		} else {

			my $position;

			foreach my $entry (@entries) {

				$position++;
				next unless $entry;

				my $ballot = eval {
					return Tab::Ballot->create({
						panel        => $panel_id,
						entry        => $entry,
						speakerorder => $position
					});
				};

				if ($ballot) {
					$panels{$panel_id}{"ballots"}{$ballot} = $ballot;
				}
			}
		}
	}

	$into->paired_at($now);
	$into->post_primary(0);  # People always do this
	$into->post_secondary(0);  # People always do this
	$into->post_feedback(0);  # People always do this

	$into->update();

	my @ties = $m->comp("/funclib/congress_ties.mas", round => $into);

	if (@ties && $ARGS{"realign"}) {

		foreach my $tie (@ties) {

			next if $tie->id == $into->id;

			foreach my $panel_id (@use_panels) {

				my $new_panel = Tab::Panel->create({
					round  => $tie->id,
					letter => $panels{$panel_id}{"letter"},
					flight => $panels{$panel_id}{"flight"},
				});

				foreach my $ballot_id (keys %{$panels{$panel_id}{"ballots"}}) {
					my $new_ballot = $panels{$panel_id}{"ballots"}{$ballot_id}->copy(
						panel => $new_panel
					);
				}
			}
		}
	}

	my $msg = "Elim round paneled";
	undef %penalties;
	;

	return $msg if $ARGS{'return'};

	if ($into->type eq "final") {
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$into->id."&msg=$msg");
	} else {
		$m->redirect("/panel/schemat/show_snake.mhtml?round_id=".$into->id."&msg=$msg");
	}

	sub score_elim_chamber {

		my ($panref, $entref, $loud) = @_;

		return unless $panref;

		my @entries = sort {$a <=> $b} keys %{$panref};
		my $score = 0;

		foreach my $entry_id (@entries) {
			foreach my $other_id (@entries) {
				next unless $other_id > $entry_id;
				foreach my $tag (keys %penalties) {
					if (
						$entref->{$entry_id}{$tag} &&
						($entref->{$entry_id}{$tag} eq $entref->{$other_id}{$tag})
					) {
						$score += $penalties{$tag};
					}
				}
			}
		}
		return $score;
	}

</%init>
