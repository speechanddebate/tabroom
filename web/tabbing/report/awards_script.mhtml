<%args>
	$tourn
	$tourn_settings
	$session
	$perms
	$event_id => undef
	$by_round => undef
	$cutoff   => undef
	$names    => undef
</%args>
<%init>

	$m->abort unless $event_id;

	if ($by_round) {
		$m->redirect("reading.mhtml?event_id=$event_id");
	}

    my $now = DateTime->now;
    $now->set_time_zone($tourn->tz);

	our $state_hash = $m->comp("/funclib/state_hash.mas");

	my $ncfl++ if $tourn_settings->{"ncfl"};

	my $limit;
	my @events;
	my $event;

	if ($event_id eq "all") {

		@events = $m->comp("/funclib/perms/events.mas",
			tourn => $tourn,
			perms => $perms
		);

		my $ids = join(',', @events);
		$limit = "and event.id IN ($ids) ";

	} else {

		$limit = "and event.id = ".int($event_id);
		$event = Tab::Event->retrieve($event_id);
		push @events, $event;
	}

	my $name;

	if ($event_id eq "all") {
		$name = $tourn->name
	} else {
		$name = $event->name;
	}

    $name =~ s/[\W_]//g;

    my $filename = "Awards-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		array    => 1.8
	);

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");
	my $not_first_event;

	Tab::Entry->columns(TEMP => "key");
	Tab::Entry->columns(TEMP => "tie");

	my $dbh = Tab::DBI->db_Main();
	my $ids = join(',', @events);
	my $sth = $dbh->prepare("
		select
			student.id, student.first, student.last, student.phonetic
		from student, entry_student es, entry
		where entry.event IN ($ids)
			and entry.id = es.entry
			and es.student = student.id
			and student.phonetic IS NOT NULL
	");

	$sth->execute();
	my $results = $sth->fetchall_hash();
	my %phonetics = map {$_->{id} => $_->{phonetic}} @{$results};

	$tourn_settings->{student_phonetic} = \%phonetics;

	EVENT:
	foreach my $event (@events) {

		my $counter;
		print TEXOUT "\\newpage\n" if $not_first_event++;

		if ($tourn_settings->{"nsda_nats"}
			&& (not defined $event->setting("not_nats"))
		) {

		} else {

			my $novice = $event->setting("top_novice");
			my $honmen = $event->setting("honorable_mentions");

			my @rounds =
				sort {$b->name <=> $a->name}
				$m->comp("/funclib/event_rounds.mas",
					event => $event
				);

			my $top_novice;

			if ($novice) {
				$top_novice = $m->comp(
					"/tabbing/results/top_novice.mas",
					event => $event);
			};

			my $final;
			my @elims;
			my $last_prelim;

			foreach my $round (@rounds) {

				next if $round->type eq "runoff";

				$final = $round if $round->type eq "final";

				push (@elims, $round) if $round->type eq "elim";

				$last_prelim = $round
					if $round->type ne "elim"
					&& $round->type ne "final"
					&& not defined $last_prelim;
			}

			my %used;

			Tab::Panel->set_sql( empties => "
				select distinct panel.id
				from ballot, panel, round, entry
				where round.event = ?
				and panel.round = round.id
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and ballot.bye != 1
				and ballot.forfeit != 1
				and panel.bye != 1
				and entry.active = 1
				and ballot.audit != 1
			");

			my @empties = Tab::Panel->search_empties($event->id);

			print TEXOUT "\\noindent\n";
			print TEXOUT "{\\bf \\LARGE ".Tab::texify($event->name)." }\n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "{\\bf \\Large Top $cutoff }";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";

			if (@empties) {
				print TEXOUT "\\noindent\n";
				print TEXOUT "{\\color{red} \\large \\bf WARNING: There are still ";
				print TEXOUT scalar @empties." unentered ballots in this event! ";
				print TEXOUT " Results may be inaccurate}\n\\newline" if @empties;
				print TEXOUT "\\smallskip\n";
				print TEXOUT "\\newline\n";
			}

			print TEXOUT "\\normalsize\n";

			print TEXOUT "\\setstretch{1.4}\n";

			my $notfirst;
			my $did;
			my $last;

			my %id_entry = map {$_->id => $_} $event->entries;

			my @outs = ($final, @elims);
			my %round_entries = ();
			my %entry_round = ();
			my %done;

			foreach my $round (@outs) {

				next unless $round;

				my @entries;

				my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
					= $m->comp(
						"/tabbing/results/order_entries.mas",
						round => $round
					);

				unless ($did && $did == $last) {
					@entries = $m->comp(
						"/funclib/round_entries.mas",
						round => $round
					);
				}

				if ($cutoff) {

					my %entry_by_id = map {$_->id => $_} @entries;
					my @show;

					my @keys = sort {$a <=> $b} keys %{$entries_ref};

					foreach my $key (@keys) {

						my $tie = scalar @{${$entries_ref}{$key}} > 1;

						foreach my $entry_id (@{${$entries_ref}{$key}}) {
							next if $done{$entry_id}++;
							$counter++;
							$counter-- if $tie;
							next if $counter > $cutoff;
							push @show, $entry_by_id{$entry_id};

						}

					}
					@entries = @show;
				}

				@entries = sort {$a->name cmp $b->name} @entries if $names;

				foreach my $entry (@entries) {
					next if $entry_round{$entry->id};
					$entry_round{$entry->id} = $round->id;
					push @{$round_entries{$round->id}{"array"}}, $entry;
				}

				$round_entries{$round->id}{"ref"} = $entries_ref;

			}

			@outs = reverse @outs;

			foreach my $round (@outs) {

				next unless $round;
				next unless $round_entries{$round->id}{"array"};

				my @entries = @{$round_entries{$round->id}{"array"}};

				my $entries_ref = $round_entries{$round->id}{"ref"};

				$last = $round->id;
				my $type = $round->type;
				my $label = $round->label;

				next unless @entries || keys %{$entries_ref};

				my @keys = sort {$a <=> $b} keys %{$entries_ref};
				@keys = reverse @keys;

				my @round_entries;
				my %entry_tie;
				my %entry_key;

				foreach my $key (@keys) {

					my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

					foreach my $entry_id (@{${$entries_ref}{$key}}) {
						next unless $entry_round{$entry_id} == $round->id;
						$entry_tie{$entry_id} += $tie;
						$entry_key{$entry_id} = $key;
						push @round_entries, $entry_id;
					}
				}

				if ($names && $round->type ne "final") {

					@round_entries =
						sort {$entries_ref->{$a}{"school_name"} cmp $entries_ref->{$b}{"school_name"}}
						@round_entries;
				}

				foreach my $entry_id (@round_entries) {

					$did = $round->id;
					next if $used{$entry_id}++;
					my $entry = $id_entry{$entry_id};

					$entry->tie($entry_tie{$entry_id});
					$entry->key($entry_key{$entry_id});

					my $tag;
					$tag = $label if $round->type eq "elim";

					print_entry($entry, $round->type, $tag, $tourn_settings);

				}

				foreach my $entry (@entries) {

					next if $used{$entry->id}++;

					$did = $round->id;

					$entry->tie($entry_tie{$entry->id});
					$entry->key($entry_key{$entry->id});
					print_entry($entry, $round->type, $label, $tourn_settings);

				}

			}

			unless ($final || @elims) {

				my @rounds = sort {$b->name <=> $a->name} $event->rounds;

				my $round;

				while ( (not defined $round) && @rounds) {
					$round = shift @rounds;
					undef $round if $round && $round->type eq "runoff"
				}


				my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) =
					$m->comp("/tabbing/results/order_entries.mas",
						round => $round
					);

				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

					my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

					foreach my $entry_id (@{${$entries_ref}{$key}}) {

						next if $used{$entry_id}++;
						my $entry = $id_entry{$entry_id};
						next unless $entry;

						$entry->tie($tie);
						print_entry($entry, '', '', $tourn_settings);

					}
				}

			}

			if ($honmen && $last_prelim) {

				my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
					= $m->comp("/tabbing/results/order_entries.mas",
						round => $last_prelim
					);

				my $cume;

				my @tb_keys = sort {$a <=> $b} keys %{$desc_ref};
				my $first_key = shift @tb_keys;
				my $highest_cume;

				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
					foreach my $entry_id (@{${$entries_ref}{$key}}) {

						if ($used{$entry_id}) {
							$highest_cume = ${$tbs_ref}{$entry_id}{$first_key}
								if ${$tbs_ref}{$entry_id}{$first_key} > $highest_cume;
						}
					}
				}

				my @honmens;

				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
					foreach my $entry_id (@{${$entries_ref}{$key}}) {
						push @honmens, $entry_id
							if ${$tbs_ref}{$entry_id}{$first_key} == $highest_cume
							&& not defined $used{$entry_id};
					}
				}

				foreach my $entry_id (@honmens) {
					next if $used{$entry_id}++;
					my $entry = $id_entry{$entry_id};
					print_entry($entry, "", "HM", $tourn_settings);
				}
			}

			if ($top_novice) {
				next if $used{$top_novice}++;
				my $tn = $id_entry{$top_novice};
				print_entry($tn, "", "TN", $tourn_settings);
			}

		}

		print TEXOUT "\\bigskip\n";
		print TEXOUT "\\newline\n";
	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

	sub print_entry {

		my ($entry, $type, $tag, $tourn_settings) = @_;

		return unless $entry && $entry->id;

		my @students = $entry->students;
		my $event_id = $entry->event->id;

		print TEXOUT "{\\bf ";

		if ($tag && $type ne "elim") {

			print TEXOUT Tab::texify("Top Novice") if $tag eq "TN";
			print TEXOUT Tab::texify("Honorable Mention") if $tag eq "HM";

		} elsif ($type eq "final") {

			my $place = Lingua::EN::Numbers::Ordinate::ordinate($entry->key);
			print TEXOUT Tab::texify($place). " Place ";
			print TEXOUT Tab::texify(" (tie)") if $entry->tie;

		} elsif ($type eq "elim") {

			print TEXOUT Tab::texify($tag);

			my $place = Lingua::EN::Numbers::Ordinate::ordinate($entry->key);

			print TEXOUT '\\hspace{.4in} '.Tab::texify('('.$place);
			print TEXOUT Tab::texify(" (tie)") if $entry->tie;
			print TEXOUT Tab::texify(')');

		} else {

			print TEXOUT Tab::texify($type);
		}


		print TEXOUT " } \n";

		print TEXOUT "\\nopagebreak\n";
		print TEXOUT "\\newline\n";

		my $notfirst;

		my $count = scalar @students;

		foreach my $student (@students) {

			if ( $notfirst && (($notfirst + 1) == $count)) {
				print TEXOUT " \\& ";
			} elsif ($notfirst) {
				print TEXOUT ", ";
			}

			print TEXOUT Tab::texify($student->first." ".$student->last." ") ;

			$notfirst++;
		}

		print TEXOUT "\\nopagebreak\n";
		print TEXOUT "\\newline\n";
		undef $notfirst;

		foreach my $student (@students) {

			next unless $tourn_settings->{"student_phonetic"}{$student->id};

			if ( $notfirst && (($notfirst + 1) == $count)) {
				print TEXOUT " \\& ";
			} elsif ($notfirst) {
				print TEXOUT ", ";
			} else {
				print TEXOUT "[ ";
			}

			print TEXOUT Tab::texify($tourn_settings->{"student_phonetic"}{$student->id});
			$notfirst++;
		}

		if ($notfirst) {
			print TEXOUT "] ";
			print TEXOUT "\\nopagebreak\n";
			print TEXOUT "\\newline\n";
		}

		print TEXOUT "from ".Tab::texify($entry->school->name);
		print TEXOUT " in ".$state_hash->{$entry->school->chapter->state}."\n";

		print TEXOUT "\\nopagebreak\n";
		print TEXOUT "\\newline\n";

		if ($entry->setting("coach_script")) {
			print TEXOUT "Coached by ".Tab::texify($entry->setting("coach_script"))." \n";
		} else {
			print TEXOUT "Coached by ".Tab::texify($entry->school->chapter->setting("coaches"))." \n";
		}

		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

	}

</%init>

