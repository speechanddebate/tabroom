<%args>
	$tourn
	$tourn_settings
	$session
	$person
	$person_settings
	$perms
	$filename => undef
	$event_id   => undef
	$round_name => undef
	$portrait   => undef
	$texout     => undef
	$event_ref  => undef
</%args>
<%init>

	my @events = $m->comp("/funclib/perms/events.mas",
		tourn => $tourn,
		perms => $perms
	);

	my $ids = join(',', @events);
	my %ok_events = map {$_->id => $_} @events;

	my $dbh = Tab::DBI->db_Main();

	my $name;
	my $events;

	if ($event_ref) {

		if ($ok_events{$event_ref->{id}}) {
			push @{$events}, $event_ref;
		}

	} else {

		my $where;

		if ($event_id eq "all") {
			$where = " where event.id IN ($ids) ";
			$name = "AllEvents";
		} elsif ($event_id eq int($event_id) && $ok_events{$event_id}) {
			$where = " where event.id = ".int($event_id);
			$name = "Event";
		} else {
			$event_id =~ s/[\W_]//g;
			$where = " where event.id IN ($ids) and event.type = '".$event_id."'";
			$name = ucfirst($event_id)."Events";
		}

		my $sth = $dbh->prepare("
			select
				event.id, event.name, event.type,
				code_style.value code_style,
				supp.value supp,
				max_entry.value max_entry

			from (event)
				left join event_setting code_style
					on code_style.event = event.id
					and code_style.tag = 'code_style'

				left join event_setting max_entry
					on max_entry.event = event.id
					and max_entry.tag = 'max_entry'

				left join event_setting supp
					on supp.event = event.id
					and supp.tag = 'supp'


			$where
				and event.type != 'congress'
			order by supp.value, event.type, event.name
		");

		$sth->execute();
		$events = $sth->fetchall_hash();
	}

	unless (scalar @{$events}) {
		$m->comp("/funclib/abort.mas", message => "No event corresponse to ID $event_id");
	}

	my $landscape;
	$landscape++ if $tourn_settings->{nsda_nats};

	my $filepath;

	my $supp;
	foreach my $event (@{$events}) {
		$landscape++ if $event->{type} eq "debate";
		$supp++ if $event->{supp};
	}

	unless ($texout) {

		unless ($filename) {
			$name =~ s/[\W_]//g;
			$filename = "RawScoreResults-$name-".$session->id;
		}
		$filepath = $Tab::file_root."tmp/".$filename;

		my $array = 1.1;
		if ($supp) {
			$array = 1.3;
		}

		$m->comp("/funclib/printout.mas",
			tourn       => $tourn,
			filename    => $filename,
			head        => 1,
			wide        => 1,
			taller      => 1,
			footer_text => $tourn->start->year." ".$tourn->name." -- Raw Results",
			no_footer   => 1,
			array       => $array,
			landscape   => $landscape
		);

		open ($texout, ">>$filepath.tex");
		binmode($texout, ":utf8");
	} else {
		if ($supp) {
			print $texout "\\renewcommand{\\arraystretch}{1.3}\n";
		} else {
			print $texout "\\renewcommand{\\arraystretch}{1.1}\n";
		}
	}

	print $texout "\\hyphenpenalty=5000\n";

	foreach my $event (@{$events}) {

		my $codes = $event->{'code_style'};

		my $show_codes++ unless ($codes eq "names"
			|| $codes eq "last_names"
			|| $codes eq "code_name"
			|| $codes eq "names_lastfirst");

		my $label;

		my $fontsize = $person_settings->{"fontsize"};
		my $smallfontsize = "scriptsize";

		if ($fontsize eq "default" || (not defined $fontsize)) {
			if ($event->{supp}) {
				$fontsize      = "footnotesize";
				$smallfontsize = "footnotesize";
			} else {
				$fontsize = "scriptsize";
			}
		}

		my $name_string = "distinct(CONCAT(student.first,' ',student.last)) SEPARATOR ' & '";

		if ($event->{type} eq "wsdc") {
			$name_string = "distinct(CONCAT(student.last)) SEPARATOR ' , '";
		}

		my $limit;

		if ($ARGS{"exclude"}) {

			$limit = "
				and not exists (
					select advanced.id
						from ballot advanced, panel advpanel, round advround
					where advround.name = ".int($ARGS{"exclude"})."
						and advround.id = advpanel.round
						and advpanel.id = advanced.panel
						and advanced.entry = entry.id
				)";
		}

		if ($round_name) {
			$limit .=  " and round.name <= ".int($round_name);
		}

		my $sth = $dbh->prepare("
			select entry.id,
				entry.code as entry_code,
				GROUP_CONCAT(
					$name_string
				) as entryname,
				school.name, school.state,
				chapter.state, chapter.country,
				region.code, region.name,
				round.name, round.type,
				GROUP_CONCAT(distinct CONCAT(rank.id,'-',rank.value) SEPARATOR ' '),
				winloss.value,
				GROUP_CONCAT(distinct CONCAT(point.id,'-',point.value) SEPARATOR ' '),
				panel.bye, ballot.bye, ballot.forfeit,
				student.id

			from (entry, round, panel, ballot, school, entry_student, student)

				left join chapter on chapter.id = school.chapter

				left join score rank on rank.tag = 'rank'
					and rank.ballot = ballot.id

				left join score winloss on winloss.tag = 'winloss'
					and winloss.ballot = ballot.id

				left join score point on point.tag = 'point'
					and point.ballot = ballot.id

				left join region on school.region = region.id

			where entry.event = ?
				and entry.id      = ballot.entry
				and entry.active  = 1
				and ballot.panel  = panel.id
				and panel.round   = round.id
				and round.type    != 'final'

				and entry.school = school.id
				and entry_student.entry = entry.id
				and entry_student.student = student.id

				and not exists (
					select rs.id
						from round_setting rs
					where rs.round = round.id
						and rs.tag = 'ignore_results'
				)

				$limit

			group by ballot.id
		");

		$sth->execute($event->{id});

		my %results;
		my $max_round;
		my %round_type;

		my $name_length;
		my $code_length;
		my $school_length;

		while (
			my ($entry_id,
				$entry_code,
				$entry_name,
				$school_name, $school_state,
				$chapter_state, $chapter_country,
				$region_code, $region_name,
				$round_name, $round_type,
				$rank_value,
				$winloss_value,
				$point_value,
				$pbye, $bbye, $forfeit,
				$student_id
			) = $sth->fetchrow_array()
		) {

			unless ($results{$entry_id}{"school_name"}) {
				$results{$entry_id}{"school_name"}  = $school_name;
			}

			$results{$entry_id}{"entry_code"}   = $entry_code;
			$results{$entry_id}{"entry_name"}   = $entry_name;

			if ($tourn_settings->{nsda_nats}) {
				if ($school_state) {
					$results{$entry_id}{"school_state"} = $school_state;
				} elsif ($chapter_state) {
					$results{$entry_id}{"school_state"} = $chapter_state;
				} elsif ($chapter_country) {
					$results{$entry_id}{"school_state"} = $chapter_country;
				} else {
					$results{$entry_id}{"school_state"} = "INT";
				}
			}

			$results{$entry_id}{"region_name"}  = $region_name;
			$results{$entry_id}{"region_code"}  = $region_code;

			unless ($results{$entry_id}{"divide"}{$round_name}) {
				$results{$entry_id}{"divide"}{$round_name}++;
			}

			if ($results{$entry_id}{$round_name}) {

				$results{$entry_id}{"counter"}{$round_name}++;
				$results{$entry_id}{$round_name} .= " ";

				if ($results{$entry_id}{"counter"}{$round_name} > 7) {
					$results{$entry_id}{$round_name} .= "\\newline\n";
					undef $results{$entry_id}{"counter"}{$round_name};
					$results{$entry_id}{"divide"}{$round_name}++
				}
			}

			$round_type{"type"}{$round_name} = $round_type;

			$round_type{$round_name} = (
				length($results{$entry_id}{$round_name})/ $results{$entry_id}{"divide"}{$round_name})
				if $round_type{$round_name} <
				(length($results{$entry_id}{$round_name}) / $results{$entry_id}{"divide"}{$round_name});

			if ($pbye || $bbye) {
				$results{$entry_id}{$round_name} = "BYE";
			} elsif ($forfeit) {
				$results{$entry_id}{$round_name} = "FFT";
			} elsif (defined $winloss_value) {
				$results{$entry_id}{$round_name} .= "W" if $winloss_value == 1;
				$results{$entry_id}{$round_name} .= "L" if $winloss_value == 0;
			} elsif ($rank_value) {

				if (index($rank_value, "-") != -1) {
					my ($id, $val) = split(/-/, $rank_value);
					$rank_value = $val;
				}
				$results{$entry_id}{$round_name} .= $rank_value;
			}

			unless ($tourn_settings->{nsda_nats}) {
				if ($point_value) {

					if (index($point_value, " ") != -1) {
						my ($first, $second) = split(/\ /, $point_value);
						undef $point_value;
						my ($id, $val) = split(/-/, $first);
						$point_value = $val;
						($id, $val) = split(/-/, $second);
						$point_value .= ', '. $val;

					} elsif (index($point_value, "-") != -1) {

						my ($id, $val) = split(/-/, $point_value);
						$point_value = $val;
					}
					$results{$entry_id}{$round_name} .= "/".$point_value;
				}
			}

			$max_round     = $round_name if $max_round < $round_name;
			$code_length   = length($entry_code) if $code_length < length($entry_code);
			$name_length   = length($entry_name) if $name_length < length($entry_name);
			$school_length = length($school_name) if $school_length < length($school_name);
		}

		print $texout "\\Large \\textsb{".$event->{name}."} \\hfill \\textsb{Scores} \n";
		print $texout "\\medskip\n";
		print $texout "\\newline\n";

		if ($max_round < 7) {
			$school_length = $school_length;

		} elsif ($school_length > 30) {
			$school_length = $school_length * .9;
		}

		if ($event->{supp}) {
			$name_length = $name_length;
			$school_length = $school_length;
		} elsif ($event->{max_entry} > 1) {

			if ($event->{type} eq "debate") {
				if ($name_length > 30) {
					$name_length = $name_length * .8;
				}
			}

		} else {

			if ($name_length > 40) {
				$name_length = $name_length * .75;
			} elsif ($name_length > 30) {
				$name_length = $name_length * .8;
			}
		}

		$name_length = 36 if $name_length > 36;
		$school_length = 36 if $school_length > 36;

		my $tabular =  "\\begin{tabular}{";
		$tabular .= "p{".($code_length )."ex}" if $show_codes;
		$tabular .= "p{".($name_length )."ex}";
		$tabular .= "p{".($school_length)."ex}";

		if ($tourn_settings->{ncfl}) {
			$tabular .= "p{1in}";
		} elsif ($tourn_settings->{nsda_nats}) {
			#states
			$tabular .= "p{2ex}";
		}

		foreach my $round (1 .. $max_round) {

			unless ($round_type{$round}) {
				$round_type{$round} = 2;
			}

			if ($tourn_settings->{nsda_nats}) {

				if ($event->{type} eq "debate") {
					if (
						$round_type{"type"}{$round} eq "prelim"
						|| $round_type{"type"}{$round} eq "highlow"
						|| $round_type{"type"}{$round} eq "highhigh"
					) {
						$tabular .= "p{3.5ex}";
					} elsif ($round_type{$round})  {
						$tabular .= "p{".($round_type{$round}  * 1.4)."ex}";
					} else {
						$tabular .= "p{2ex}";
					}

				} else {
					if (
						$round_type{"type"}{$round} eq "prelim"
						|| $round_type{"type"}{$round} eq "highlow"
						|| $round_type{"type"}{$round} eq "highhigh"
					) {
						$tabular .= "p{".($round_type{$round} + 1.4)."ex}";
					} elsif ($round_type{$round})  {
						$tabular .= "p{".($round_type{$round} + 2)."ex}";
					} else {
						$tabular .= "p{1.4ex}";
					}
				}

			} else {

				if (
					$round_type{"type"}{$round} eq "prelim"
					|| $round_type{"type"}{$round} eq "highlow"
					|| $round_type{"type"}{$round} eq "highhigh"
				) {
					$tabular .= "p{".($round_type{$round} + 4)."ex}";
				} elsif ($round_type{$round})  {
					$tabular .= "p{".($round_type{$round})."ex}";
				} else {
					$tabular .= "p{2ex}";
				}
			}
		}

		$tabular .= "}\n";

		print $texout "\\raggedright\n";
		print $texout "\\".$fontsize."\n";

		my $switch = 1;
		my $twostep;
		my $take_steps;

		if ($max_round < 4) {
			#$take_steps++;
		}

		my @entries = keys %results;

		@entries = sort {$results{$a}{"entry_code"} <=> $results{$b}{"entry_code"}} @entries;
		@entries = sort {$results{$a}{"entry_code"} cmp $results{$b}{"entry_code"}} @entries;

		if ($tourn_settings->{nsda_nats}) {
			@entries = sort {
				$results{$a}{"school_state"} cmp $results{$b}{"school_state"}
				|| $results{$a}{"school_name"} cmp $results{$b}{"school_name"}
				|| $results{$a}{"entry_name"} cmp $results{$b}{"entry_name"}
			} @entries;
		}

		foreach my $entry (@entries) {

			print $texout $tabular;
			print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch % 2;
			print $texout "\\$fontsize ".Tab::texify($results{$entry}{"entry_code"})." & " if $show_codes;

			if (length(Tab::texify($results{$entry}{"entry_name"})) > 38) {
				$results{$entry}{"entry_name"} = Tab::texify($results{$entry}{"entry_name"});
				$results{$entry}{"entry_name"} =~ s/ \\\&/\\newline \\\&/g;
				print $texout "\\$fontsize ".$results{$entry}{"entry_name"}." & ";
			} else {
				print $texout "\\$fontsize ".Tab::texify($results{$entry}{"entry_name"})." & ";
			}
			print $texout "\\$fontsize ".Tab::texify($results{$entry}{"school_name"})." ";

			if ($tourn_settings->{ncfl}) {
				print $texout " & \\truncate{.95in}{".Tab::texify($results{$entry}{"region_name"})."} ";
			} elsif ($tourn_settings->{nsda_nats}) {
				print $texout " & \\footnotesize ".Tab::texify($results{$entry}{"school_state"});
			}

			foreach my $round_name (1 ..$max_round) {
				print $texout " & \\$smallfontsize \\tt ".$results{$entry}{$round_name};
			}
			print $texout "\\end{tabular}\n";

			if ($take_steps) {
				if ($twostep++ % 2) {
					$switch++;
					print $texout "\\newline\n";
				}
			} else {
				$switch++;
				print $texout "\\newline\n";
			}
		}

		print $texout "\\newpage\n";
	}

	if ($ARGS{"texout"}) {
		return;
	}

    $m->comp("/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
		landscape => $landscape,
        tail      => 1,
		return    => $ARGS{"return"}
    );

</%init>
