<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$perms
	$session
	$event_id     => undef
	$by_round     => undef
	$reverse      => undef
	$cutoff       => undef
	$entry_cutoff => undef
	$names        => undef
</%args>
<%init>

	$m->abort unless $event_id;

	if ($by_round) {
		$m->redirect("reading.mhtml?event_id=$event_id");
	}

	my $limit;

	my @events = $m->comp("/funclib/perms/events.mas",
		tourn => $tourn,
		perms => $perms
	);
	my %events = map {$_->id => $_} @events;
	my $event;

	if ($event_id eq "all") {
		my $ids = join(',', @events);
		$limit = "and event.id IN ($ids) ";
	} else {
		unless ($events{$event_id}) {
			$m->comp("/funclib/abort.mas", message => "You do not have access to the event ID $event_id");
		}
		$limit = "and event.id = ".int($event_id);
		@events = $events{$event_id};
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			entry.id, entry.code, entry.name,
			school.id, school.code, school.name,
			chapter.id, chapter.state,
			chapter.formal,
			coaches.value_text,
			region.id, region.code, region.name, region.arch,
			student.id, student.first, student.last, student.phonetic,
			studentchapter.id, studentchapter.name

		from (entry, entry_student es, student, event)
			left join school on entry.school = school.id
			left join region on school.region = region.id
			left join chapter on school.chapter = chapter.id
			left join chapter_setting coaches on coaches.chapter = chapter.id and coaches.tag = 'coaches'
			left join chapter studentchapter on studentchapter.id = student.chapter

		where entry.event = event.id
			$limit
			and entry.id = es.entry
			and es.student = student.id
		group by entry.id
	");

	my %entries;
	my %students;
	$sth->execute();

	while (
		my (
			$entry_id, $entry_code, $entry_name,
			$school_id, $school_code, $school_name,
			$chapter_id, $chapter_state,
			$chapter_formal,
			$coaches,
			$region_id, $region_code, $region_name, $region_arch,
			$student_id, $student_first, $student_last, $student_phonetic,
			$schapter_id, $schapter_name
		) = $sth->fetchrow_array()
	) {

		$entries{$entry_id}{"code"}         = $entry_code;
		$entries{$entry_id}{"name"}         = $entry_name;
		$entries{$entry_id}{"coaches"}      = $coaches;
		$entries{$entry_id}{"chapter"}      = $chapter_id;
		$entries{$entry_id}{"school_state"} = $chapter_state;
		$entries{$entry_id}{"school_code"}  = $school_code;
		$entries{$entry_id}{"school_name"}  = $chapter_formal || $school_name;
		$entries{$entry_id}{"region_arch"}  = $region_arch;
		$entries{$entry_id}{"region_code"}  = $region_code;
		$entries{$entry_id}{"region_name"}  = $region_name;

		push @{$entries{$entry_id}{"students"}}, $student_id;

		next if $students{$student_id};
		$students{$student_id}{"first"}        = $student_first;
		$students{$student_id}{"last"}         = $student_last;
		$students{$student_id}{"phonetic"}     = $student_phonetic;
		$students{$student_id}{"chapter"}      = $schapter_id;
		$students{$student_id}{"chapter_name"} = $schapter_name;
	}

	my $switch = 1;
    my $now = DateTime->now;
    $now->set_time_zone($tourn->tz);

	$tourn_settings->{"state_hash"} = $m->comp("/funclib/state_hash.mas");

	my $name;

	if ($event_id eq "all") {
		$name = $tourn->name;
	} elsif ($event) {
    	$name = $event->name;
	}

    $name =~ s/[\W_]//g;
    $tourn_settings->{"fontsize"} = $person_settings->{"fontsize"};

	if (
		$tourn_settings->{"fontsize"} eq "default"
		|| (not defined $tourn_settings->{"fontsize"})
	) {
		$tourn_settings->{"fontsize"} = "scriptsize";
	}

    my $filename = "Awards-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		array    => "1.9"
	);

	if ($reverse) {
		$tourn->setting("reverse_awards", 1);
	} else {
		$tourn->setting("reverse_awards", 0)
	}

    open my $texout, ">>$filepath.tex";
	binmode($texout, ":utf8");

	$tourn_settings->{"texout"} = $texout;

	my $tabular = "\\begin{tabular}{p{.45in}p{1.75in}p{2.5in}p{1.75in}}\n";

	if ($tourn_settings->{"nsda_ms_nats"} || $tourn_settings->{"nsda_nats"}) {
		$tabular = "\\begin{tabular}{p{.45in}p{1.75in}p{2.25in}p{.25in}p{1.75in}}\n";
	}

	if ($tourn_settings->{"ncfl"}) {
		$tabular = "\\begin{tabular}{p{.45in}p{1.25in}p{2in}p{1.25in}p{1.25in}}\n";
	}

	my $not_first_event;

	foreach my $event (@events) {

		my $novice++ if $event->setting("top_novice");
		my $honmen++ if $event->setting("honorable_mentions");

		print $texout "\\newpage\n" if $not_first_event++;

		my @rounds = sort {$b->name <=> $a->name}
			$m->comp("/funclib/event_rounds.mas",
				event => $event
			);

		my $top_novice = $m->comp(
			"/tabbing/results/top_novice.mas",
			event => $event)
		if $novice;

		my %student_phonetic =
			map {$_->id => $_->phonetic}
			$m->comp("/funclib/event_students.mas",
				event => $event
		);

		my $final;
		my @elims;
		my $last_prelim;
		my %breakouts;
		my %breakout_round;

		foreach my $round (@rounds) {

			next if $round->type eq "runoff";

			if ($round->setting("use_for_breakout")) {

				$breakout_round{$round->id} = $round->setting("use_for_breakout");

				if ($round->type eq "final") {
					push @{$breakouts{$breakout_round{$round->id}}{$round->type}}, $round;
				} elsif ($round->type eq "elim") {
					push @{$breakouts{$breakout_round{$round->id}}{$round->type}}, $round;
				}

			} elsif ($round->type eq "final") {
				$final = $round;
			} elsif ($round->type eq "elim") {
				push (@elims, $round);
			}

			$last_prelim = $round
				if $round->type ne "elim"
				&& $round->type ne "final"
				&& not defined $last_prelim;
		}

		my %used;

		Tab::Panel->set_sql( empties => "
			select distinct panel.id
			from ballot, panel, round, entry
			where round.event = ?
			and panel.round = round.id
			and ballot.panel = panel.id
			and ballot.entry = entry.id
			and ballot.bye != 1
			and ballot.forfeit != 1
			and panel.bye != 1
			and entry.active = 1
			and ballot.audit != 1
		");

		my @empties = Tab::Panel->search_empties($event->id);

		print $texout "\\noindent\n";
		print $texout "\\textsb{ \\Large ".Tab::texify($event->name)." } \\hfill ";
		print $texout "\\".$tourn_settings->{"fontsize"}." \\textsb{ ". Tab::texify($tourn->name)." } \n";

		my $done;
		my $notfirst;
		my $did;
		my $last;

		my @outs = ($final, @elims);

		foreach my $breakout (keys %breakouts) {
			if ($breakouts{$breakout}{"final"}) {
				push @outs, @{$breakouts{$breakout}{"final"}};
			}
			if ($breakouts{$breakout}{"elim"}) {
				push @outs, @{$breakouts{$breakout}{"elim"}};
			}
		}

		my %round_entries = ();
		my %entry_round = ();
		my $counter;

		foreach my $round (@outs) {

			next unless $round;
			next if $round->type eq "runoff";

			my @entries;

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
				= $m->comp(
					"/tabbing/results/order_entries.mas",
					round => $round
				);

			unless ($did && $did == $last) {
				@entries = $m->comp(
					"/funclib/round_entries.mas",
					round => $round
				);
			}

			@entries = sort {$a->name cmp $b->name} @entries if $names;

			foreach my $entry (@entries) {
				next if $entry_round{$entry->id};
				$entry_round{$entry->id} = $round->id;
				push @{$round_entries{$round->id}{"array"}}, $entry;
			}

			$round_entries{$round->id}{"ref"} = $entries_ref;
		}

		# This cuts off the number of rounds, not the number of entries
		if ($cutoff) {
			my @tmp;
			my $round_counter;

			foreach my $out (@outs) {
				next if $round_counter++ >= $cutoff;
				push @tmp, $out;
			}
			@outs = @tmp;
		}

		my %print;

		foreach my $round (@outs) {

			next unless $round;
			next unless $round_entries{$round->id}{"array"};
			next if $round->type eq "runoff";

			my @entries;
			my $entries_ref;

			if ($round_entries{$round->id}{"ref"}) {
				@entries = @{$round_entries{$round->id}{"array"}};
				$entries_ref = $round_entries{$round->id}{"ref"};
			}

			next unless @entries || keys %{$entries_ref};
			my @keys = sort {$a <=> $b} keys %{$entries_ref};

			foreach my $key (@keys) {

				if ($entry_cutoff > 0 && $counter >= $entry_cutoff) {
					next;
				}
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					next if $used{$entry_id}++;
					next unless $entries{$entry_id};
					$print{$entry_id}++;
					$counter++;
				}
			}
		}

		@outs = reverse @outs if $reverse;
		my $breakout_status;

		foreach my $round (@outs) {

			next unless $round > 0;
			my $entries_ref = $round_entries{$round->id}{"ref"};
			next unless $entries_ref;
			next unless $round_entries{$round->id}{"array"};

			my @entries = @{$round_entries{$round->id}{"array"}};
			$last = $round->id;
			my $type = $round->type;
			my $label = substr($round->label, 0, 3);

			if ($breakout_status != $breakout_round{$round->id}) {

				my $id = $breakout_round{$round->id};
				$breakout_status = $id;
				my $name = $event->setting("breakout_".$id."_label");

				print $texout "\\bigskip\n";
				print $texout "\\newline\n";
				print $texout "\\textsb{ \\large Breakout: ".$name." } \n";
				print $texout "\\newline\n";
			}

			unless ($notfirst++) {

				print $texout "\\".$tourn_settings->{"fontsize"}."\n";

				if (@empties) {
					print $texout "\\begin{center}\n";
					print $texout "{\\color{red} \\bf WARNING: There are still ";
					print $texout scalar @empties." unentered ballots in this event! ";
					print $texout " Results may be inaccurate}\n\\newline" if @empties;
					print $texout "\\end{center}\n";
				} else {
					print $texout "\\medskip\n";
					print $texout "\\newline\n";
				}
			}

			unless ($done++) {
				print $texout "\\noindent\n";
				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
				print $texout "\\textsb{ Pl} & \\textsb{ Name } & \\textsb{ School} & ";

				if ($tourn_settings->{"ncfl"}) {
					print $texout "\\textsb{ Diocese} & ";
				}

				if ($tourn_settings->{"nsda_ms_nats"} || $tourn_settings->{"nsda_nats"}) {
					print $texout "\\textsb{ State } & "
				}

				print $texout " \\textsb{ Coaches } " if $tourn_settings->{"nsda_ms_nats"};
				print $texout "\\end{tabular}\n";
				print $texout "\\newline\n";
			}

			my @keys = sort {$a <=> $b} keys %{$entries_ref};
			@keys = reverse @keys if $reverse;
			my @round_entries;
			my %entry_tie;
			my %entry_key;

			foreach my $key (@keys) {

				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					next unless $entry_round{$entry_id} == $round->id;
					$entry_tie{$entry_id} += $tie;
					$entry_key{$entry_id} = $key;
					push @round_entries, $entry_id;
				}
			}

			if ($names && $round->type ne "final") {
				@round_entries =
					sort {$entries{$a}{"school_name"} cmp $entries{$b}{"school_name"}}
					@round_entries;
			}

			foreach my $entry_id (@round_entries) {

				next unless $print{$entry_id};
				$did = $round->id;

				print $texout "\\noindent\n";
				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

				print $texout "\\".$tourn_settings->{"fontsize"}."\n";
				print $texout Tab::texify($entry_key{$entry_id}) if $type eq "final";
				print $texout Tab::texify($label) if $type eq "elim";
				print $texout Tab::texify("-T") if $entry_tie{$entry_id} && $type eq "final";

				if ($top_novice && $entry_id == $top_novice) {
					print $texout "\n \\scriptsize ".Tab::texify(" TopNov");
					undef $top_novice;
				}

				print $texout " & ";
				&print_row(\%entries, $entry_id, \%students, $tourn_settings);

			}

			foreach my $entry (@entries) {

				next unless $print{$entry->id};
				next if $used{$entry->id}++;

				$did = $round->id;

				print $texout "\\noindent\n";
				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
				print $texout " ".$tourn_settings->{"fontsize"}." ";
				print $texout Tab::texify($label);
				print $texout " & ";
				&print_row(\%entries, $entry->id, \%students, $tourn_settings);
			}
		}

		$switch = 1;

		unless ($final || @elims) {

			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
			my $round;

			while ((not defined $round) && @rounds) {
				$round = shift @rounds;
				undef $round if $round && $round->type eq "runoff";
			}

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) =
				$m->comp("/tabbing/results/order_entries.mas",
					round => $round
				);

			unless ($done) {
				print $texout "\\noindent\n";
				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
				print $texout "\\".$tourn_settings->{"fontsize"}."\n";
				print $texout "\\textsb{Plc} & \\textsb{ Name } & \\textsb{ School} & ";

				if ($tourn_settings->{"ncfl"}) {

					print $texout "\\textsb{ Diocese} & ";

				} elsif ($tourn_settings->{"nsda_ms_nats"} || $tourn_settings->{"nsda_nats"}) {

					print $texout "\\textsb{ ST } & ";

					if ($tourn_settings->{"nsda_ms_nats"}) {
						print $texout " \\textsb{ Coaches } ";
					}
				}

				print $texout " \\end{tabular}\n";
				print $texout "\\newline\n";
			}

			my @keys = keys %{$entries_ref};
			@keys = sort {$a <=> $b} @keys;

			my %print;
			my $counter;

			KEY:
			foreach my $key (@keys) {

				if (($entry_cutoff > 0) && ($counter >= $entry_cutoff)) {
					next KEY;
				}
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					next if $used{$entry_id}++;
					next unless $entries{$entry_id};
					$print{$entry_id}++;
					$counter++;
				}
			}

			@keys = sort {$b <=> $a} @keys if $reverse;

			$done++;

			foreach my $key (@keys) {

				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

				foreach my $entry_id (@{${$entries_ref}{$key}}) {

					next unless $print{$entry_id};

					print $texout "\\noindent\n";
					print $texout $tabular;
					print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

					print $texout "\\".$tourn_settings->{"fontsize"}."\n";
					print $texout Tab::texify($key);
					print $texout Tab::texify("-T") if $tie;

					if ($top_novice && $entry_id == $top_novice) {
						print $texout " \\scriptsize ".Tab::texify(" TopNov");
						undef $top_novice;
					}

					print $texout " & ";
					&print_row(\%entries, $entry_id, \%students, $tourn_settings);

				}
			}
		}

		if ($honmen && $last_prelim) {

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
				= $m->comp("/tabbing/results/order_entries.mas",
					round => $last_prelim
				);

			my $cume;

			my @tb_keys = sort {$a <=> $b} keys %{$desc_ref};
			my $first_key = shift @tb_keys;
			my $highest_cume;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$key}}) {

					if ($used{$entry_id}) {
						$highest_cume = ${$tbs_ref}{$entry_id}{$first_key}
							if ${$tbs_ref}{$entry_id}{$first_key} > $highest_cume;
					}
				}
			}

			my @honmens;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					push @honmens, $entry_id
						if ${$tbs_ref}{$entry_id}{$first_key} == $highest_cume
						&& not defined $used{$entry_id};
				}
			}

			my $notfirst_honmen;

			foreach my $entry_id (@honmens) {

				next if $used{$entry_id}++;

				print $texout "\\noindent\n";

				unless ($notfirst_honmen++) {
					print $texout "\\hline\n";
				}

				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

				print $texout Tab::texify("HM ");

				if ($top_novice && $entry_id == $top_novice) {
					print $texout " \\scriptsize ".Tab::texify(" TopNov");
					undef $top_novice;
				}

				print $texout " & \\".$tourn_settings->{"fontsize"}." ";
				&print_row(\%entries, $entry_id, \%students, $tourn_settings);
			}
		}

		if ($top_novice && (not defined $used{top_novice})) {

			next if $used{top_novice}++;

			print $texout "\\noindent\n";
			print $texout $tabular;

			print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
			print $texout " \\scriptsize ".Tab::texify("TopNov");
			print $texout " & \\".$tourn_settings->{"fontsize"}." ";
			&print_row(\%entries, $top_novice, \%students, $tourn_settings);

		}

		print $texout "\\bigskip\n";
		print $texout "\\newline\n";

		my $protocol = eval {
			return Tab::Protocol->retrieve($event->setting("speaker_protocol"));
		};

		if ($protocol) {

			 my ($students_ref, $tbs_ref, $desc_ref, $forfeit_ref, $meh,
			 	$long_desc_ref, $novice_ref, $name_ref, $code_ref, $school_ref)
				= $m->comp("/tabbing/results/order_speakers.mas", round => $last_prelim);

			print $texout "\\newpage\n" if $not_first_event++;
			print $texout "\\textsb{ \\Large Top Speakers \\hfill ".Tab::texify($event->name)." } \n";
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			my $first = $protocol->tiebreaks->first;

			print $texout "\\strut \\hfill\n";
			print $texout "\\textsb{ \\color{blue} Basis: ".$protocol->name." } \\hfill\n";
			print $texout "\\".$tourn_settings->{"fontsize"}."\n";

			if ($first->name eq "winloss" || $first->name eq "ballots") {
				print $texout "\\smallskip\n";
				print $texout "\\newline\n";
				print $texout "\\strut \\hfill\n";
				print $texout "{\\color{red} \\textsb{ Warning: Win/loss is the first tiebreaker! ";
				print $texout "Are you sure this is the speaker tiebreaker set?}} \\hfill\n";
			}
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			my @keys = keys %{$students_ref};
			@keys = sort {$a <=> $b} @keys;

			my %print;
			my $counter;
			$entry_cutoff = 24 unless $entry_cutoff;

			foreach my $key (@keys) {

				if ($entry_cutoff > 0 && $counter >= $entry_cutoff) {
					next;
				}

				foreach my $student_id (@{${$students_ref}{$key}}) {

					$print{$student_id}++;
					$counter++;
				}
			}

			@keys = sort {$b <=> $a} @keys if $reverse;

			foreach my $key (@keys) {

				my $tie++ if
					${$students_ref}{$key}
					&& scalar @{${$students_ref}{$key}} > 1;

				foreach my $student_id (@{${$students_ref}{$key}}) {

					next unless $print{$student_id};

					print $texout "\\noindent\n";
					print $texout $tabular;
					print $texout "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
					print $texout "\\".$tourn_settings->{"fontsize"}."\n";

					print $texout $key;
					print $texout " -T" if $tie;
					print $texout " & ";
					print $texout $student_id unless ${$name_ref}{$student_id};
					print $texout Tab::texify(${$name_ref}{$student_id})." & ";
					print $texout Tab::texify($students{$student_id}{chapter_name})." & ";
					print $texout "\\".$tourn_settings->{"fontsize"}." ".Tab::texify($student_phonetic{$student_id})."\n";
					print $texout "\n \\end{tabular}\n";
					print $texout "\\newline\n";
				}
			}
		}
	}

	close $texout;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

	sub print_row {

		my ($entries, $entry_id, $students, $tourn_settings) = @_;

		my $texout = $tourn_settings->{"texout"};

		my $hybrid;
		my @students = eval {
			return @{$entries->{$entry_id}{"students"}};
		};

		foreach my $student_id (@students) {
			next if $students->{$student_id}{"chapter"} == $entries->{$entry_id}{"chapter"};
			$hybrid = "/".$students->{$student_id}{"chapter_name"};
		}

		print $texout " \\parbox[b]{1.45in}{\\raggedright \\strut \\vspace{-1em} \\newline ";
		print $texout " \\".$tourn_settings->{"fontsize"}." ";
		print $texout Tab::texify($entries->{$entry_id}{"name"});
		print $texout " } ";

		if (scalar @students == 1) {
			my $student_id = $students[0];
			my $name = $students->{$student_id}{"first"}." ".$students->{$student_id}{"last"};
			unless ($entries->{$entry_id}{"name"} eq $name) {
				print $texout "\\newline \\footnotesize \\hspace*{.1in} ";
				print $texout Tab::texify($name)
			}
		} elsif ($tourn_settings->{"ncfl"}) {

		} else {
			foreach my $student_id (@students) {
				my $name = $students->{$student_id}{"first"}." ".$students->{$student_id}{"last"};
				unless ($entries->{$entry_id}{"name"} eq $name) {
					print $texout "\\newline \\footnotesize \\hspace*{.1in} ";
					print $texout Tab::texify($name);
				}
			}
		}

		print $texout " & \\raggedright \\strut \\vspace{-1.4em} \\newline ";
		print $texout " \\".$tourn_settings->{"fontsize"}." ";
		print $texout Tab::texify($entries->{$entry_id}{"school_name"});
		print $texout Tab::texify($hybrid) if $hybrid;

		print $texout " \\vspace{-1em} \\newline & ";
		print $texout "\\raggedright\n";

		if ($tourn_settings->{"ncfl"}) {

			if ($entries->{$entry_id}{"region_arch"}) {
				print $texout ("Arch ");
			} else {
				print $texout ("Dio ");
			}
			print $texout Tab::texify($entries->{$entry_id}{"region_name"});
			print $texout " & ";
			print $texout "\\raggedright\n";
		}

		if (
			$tourn_settings->{"nsda_ms_nats"}
			|| $tourn_settings->{"nsda_nats"}
		) {

			print $texout Tab::texify($tourn_settings->{"state_hash"}->{$entries->{$entry_id}{"school_state"}})." & ";

			if ($tourn_settings->{"nsda_ms_nats"} ) {
				my $coaches = $entries->{$entry_id}{"coaches"};
				$coaches =~ s/,/\n\n/g;
				print $texout Tab::texify($coaches);
			}
		}

		my $notfirst;

		foreach my $student_id (@students) {
			next unless $students->{$student_id}{"phonetic"};
			print $texout "\\newline\n" if $notfirst++;
			print $texout "{\\".$tourn_settings->{"fontsize"}." ";
			print $texout Tab::texify($students->{$student_id}{"phonetic"})." }";
		}

		print $texout "\n \\end{tabular}\n";
		print $texout "\\newline\n";

		return;
	}

</%init>

