<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$perms
	$dbh
</%args>
<%init>

	my @events = $m->comp(
		"/funclib/perms/events.mas",
			tourn => $tourn,
			perms => $perms
		);

	my $ids = join(',', @events);

	my $sth = $dbh->prepare("
		select
			entry.id, entry.name, entry.code,
			event.id event_id, event.name event_name, event.abbr event_abbr, event.type event_type,
			school.id as school_id, school.code as schcode, school.name as schname, 
			region.code as regcode,
			region.arch as regarch,
			region.name as regname,
			chapter.id as chapter_id, chapter.name as chapter_name, chapter.state as chapter_state, chapter.nsda as nsda,
			round.name as round_name, round.id as round_id, round.label as round_label,
			category.abbr as catcode, event.abbr as regcode, event.id as eventid,
			address.value_text as addr,
			contact_name.value as contact,
			round.type as round_type,
			result.place as place,
		GROUP_CONCAT(distinct CONCAT(student.first,' ',student.last) SEPARATOR ' and ') as fullname

		from (entry, school, round, event, category)
			left join school_setting contact_name on contact_name.tag = 'contact_name' and contact_name.school = school.id
			left join school_setting address on address.tag = 'mail_address' and address.school = school.id
			left join chapter on school.chapter = chapter.id
			left join region on school.region = region.id

			left join result_set final_set on final_set.event = event.id and final_set.label = 'Final Places'
			left join result on result.result_set = final_set.id and result.entry = entry.id
			left join entry_student es on es.entry = entry.id
			left join student on es.student = student.id

		where entry.school = school.id
			and school.tourn = ?
			and entry.active = 1
			and entry.event = event.id
            and event.id IN ($ids)
            and event.category = category.id
            and event.id = round.event
            and event.type != 'wsdc'

            and round.name IN (
                select max(r2.name)
                from round r2, ballot, panel
                    where r2.event = event.id
                    and panel.round = r2.id
                    and ballot.panel = panel.id
                    and ballot.entry = entry.id
                    and ( r2.type    = 'elim'
                        or r2.type = 'final'
                        or r2.type = 'runoff'
                    )
            )
		group by entry.id
		order by chapter.name, event.abbr, entry.id, round.name DESC
	");

	$sth->execute($tourn->id);
	my $results = $sth->fetchall_hash();
	my $name = $tourn->name;
	$name =~ s/[\W_]//g;

	my $filename = "LastRoundActive-".$name.".csv";

	if ($tourn_settings->{nsda_nats}) {

		# Tempted to make this obnoxiously slow so we can end this horrible
		# event structure.

		my $oh_no_its_worlds;

		foreach my $event (@events) {
			next unless $event->type eq "wsdc";
			$oh_no_its_worlds++;
		}

		if ($oh_no_its_worlds) {
			my $world_sth = $dbh->prepare("
				select
					student.id student_id, student.first student_first, student.last student_last,
					entry.id, entry.name, entry.code,
					event.id event_id, event.name event_name, event.abbr event_abbr, event.type event_type,
					school.id as school_id, school.code as schcode, school.name as schname, region.code as regname,
					chapter.id as chapter_id, chapter.name as chapter_name, chapter.state as chapter_state, chapter.nsda as nsda,
					round.name as round_name, round.id as round_id, round.label as round_label,
					category.abbr as catcode, event.abbr as regcode, event.id as eventid,
					address.value_text as addr,
					contact_name.value as contact,
					round.type as round_type,
					result.place as place,
				GROUP_CONCAT(distinct CONCAT(student.first,' ',student.last) SEPARATOR ' and ') as fullname

				from (entry, round, event, category, entry_student es, student)

					left join chapter on student.chapter = chapter.id
					left join school on school.chapter = chapter.id and school.tourn = event.tourn
					left join school_setting contact_name on contact_name.tag = 'contact_name' and contact_name.school = school.id
					left join school_setting address on address.tag = 'mail_address' and address.school = school.id
					left join region on school.region = region.id

					left join result_set final_set on final_set.event = event.id and final_set.label = 'Final Places'
					left join result on result.result_set = final_set.id and result.entry = entry.id

				where entry.event = event.id
					and event.tourn = ?
					and entry.active = 1
					and entry.id = es.entry
					and es.student = student.id
					and event.id IN ($ids)
					and event.category = category.id
					and event.id = round.event
					and event.type = 'wsdc'

					and round.name IN (
						select max(r2.name)
						from round r2, ballot, panel
							where r2.event = event.id
							and panel.round = r2.id
							and ballot.panel = panel.id
							and ballot.entry = entry.id
							and ( r2.type    = 'elim'
								or r2.type = 'final'
								or r2.type = 'runoff'
							)
					)
				group by student.id
				order by chapter.name, event.abbr, entry.id, round.name DESC
			");

			$world_sth->execute($tourn->id);
			my $world_kids = $world_sth->fetchall_hash();

			push @{$results}, @{$world_kids};

			@{$results} = sort {
				$a->{chapter_state} cmp $b->{chapter_state}
				|| $a->{chapter_name} cmp $b->{chapter_name}
				|| $a->{entry_name} cmp $b->{entry_name}
			} @{$results};
		}
	}

    $m->clear_buffer;
	$r->content_type('application/csv');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	if ($tourn_settings->{"nsda_nats"}) {
		$m->print("School,SchCode,RegCode,Name,Full Names,Entry Code,Event,Category,Place,Last,Round,Contact,Address\n");
	} elsif ($tourn_settings->{"ncfl"}) {
		$m->print("School,SchCode,DioCode,DioName,Name,Full Names,Entry Code,Event,Category,Place,Last,Round\n");
	} else {
		$m->print("School,SchCode,RegCode,Name,Full Names,Entry Code,Event,Category,Place,Last,Round\n");
	}

	my $counter;
	my %cache;

	foreach my $entry (@{$results}) {

		$m->print('"'.$entry->{chapter_name});
		$m->print('","');
		$m->print($entry->{schcode});
		$m->print('","');
		$m->print($entry->{regcode});
		$m->print('","');

		if ($tourn_settings->{ncfl}) {
			$m->print($entry->{regarch} ? "Archdiocese of " : "Diocese of ");
			$m->print($entry->{regname});
			$m->print('","');
		}

		$m->print($entry->{name});
		$m->print('","');
		$m->print($entry->{fullname});
		$m->print('","');
		$m->print($entry->{code});
		$m->print('","');
		$m->print($entry->{regcode});
		$m->print('","');
		$m->print($entry->{catcode});
		$m->print('","');
		if ($m->print($entry->{place})) {
			$m->print($entry->{place});
		}
		$m->print('","');
		$m->print($entry->{round_label});
		$m->print('","');
		$m->print($entry->{round_name});

		if ($tourn_settings->{"nsda_nats"}) {

			unless ($cache{$entry->{nsda}}) {

				if ($entry->{addr}) {

					$cache{$entry->{nsda}} = eval {
						return JSON::decode_json($entry->{addr});
					};

				} else {

					my ($nsda_school, $junk) = $m->comp("/funclib/nsda/api_client.mas",
						path => "/schools/".$entry->{nsda});

					my $mailing = $nsda_school->{"mailing"};

					foreach my $address (@{$nsda_school->{addresses}}) {
						next unless $address->{"shipping"};
						$cache{$entry->{nsda}} = $address;
					}

					Tab::SchoolSetting->create({
						school     => $entry->{school_id},
						tag        => "mail_address",
						value      => "json",
						value_text => JSON::encode_json($cache{$entry->{nsda}}),
					});
				}
			}

			if ($cache{$entry->{nsda}}) {

				my $addr = $cache{$entry->{nsda}};

				$m->print('","');
				if ($addr->{"contact_name"}) {
					$m->print($addr->{"contact_name"});
				} else {
					$m->print($entry->{"contact"});
				}
				$m->print('","');
				$m->print($addr->{"street"});
				$m->print('","');
				$m->print($addr->{"secondary"});
				$m->print('","');
				$m->print($addr->{"city"});
				$m->print('","');
				$m->print($addr->{"state"});
				$m->print('","');
				$m->print($addr->{"zip"});
				$m->print('","');
				$m->print($addr->{"country"});
			}
		}

		$m->print('"'."\n");
	}

	# WORLDS FRIGGIN SHIT GOES HERE

	if (1 == 2) {

		my %school_cache;
	}

	$m->flush_buffer();
	$m->abort();

</%init>


